
final_project_p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08003bf8  08003bf8  00004bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  000050ac  2**0
                  CONTENTS
  4 .ARM          00000008  08003f4c  08003f4c  00004f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f54  08003f54  000050ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f54  08003f54  00004f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f58  08003f58  00004f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08003f5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200000ac  08004008  000050ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08004008  00005374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008304  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216e  00000000  00000000  0000d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0000f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a0  00000000  00000000  0000fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026307  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad35  00000000  00000000  0003680f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b3e  00000000  00000000  00041544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002658  00000000  00000000  001250c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00127720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003be0 	.word	0x08003be0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08003be0 	.word	0x08003be0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <highscore_init>:


/**
 * @brief Initialize the eeprom, load the high scores from the eeprom
*/
void highscore_init() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
    eeprom_init();
 8000276:	f000 fee5 	bl	8001044 <eeprom_init>
    
    uint16_t addr;
    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e048      	b.n	8000312 <highscore_init+0xa2>
        for (int j = 0; j < MAX_NAME_LEN; j++) {
 8000280:	2300      	movs	r3, #0
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	e023      	b.n	80002ce <highscore_init+0x5e>
            addr = (i * sizeof(HighScore_t) + j) + HIGH_SCORES_START_ADDR;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	b29b      	uxth	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	4413      	add	r3, r2
 8000290:	461a      	mov	r2, r3
 8000292:	00d2      	lsls	r2, r2, #3
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	b29a      	uxth	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	b29b      	uxth	r3, r3
 800029c:	4413      	add	r3, r2
 800029e:	b29b      	uxth	r3, r3
 80002a0:	3369      	adds	r3, #105	@ 0x69
 80002a2:	80fb      	strh	r3, [r7, #6]
            high_scores[i].name[j] = eeprom_load_byte(addr);
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 ff00 	bl	80010ac <eeprom_load_byte>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4618      	mov	r0, r3
 80002b0:	491e      	ldr	r1, [pc, #120]	@ (800032c <highscore_init+0xbc>)
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	4613      	mov	r3, r2
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	4413      	add	r3, r2
 80002ba:	00da      	lsls	r2, r3, #3
 80002bc:	1ad2      	subs	r2, r2, r3
 80002be:	440a      	add	r2, r1
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	4602      	mov	r2, r0
 80002c6:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < MAX_NAME_LEN; j++) {
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	2b13      	cmp	r3, #19
 80002d2:	ddd8      	ble.n	8000286 <highscore_init+0x16>
        }

        addr =  (i * sizeof(HighScore_t) + (MAX_NAME_LEN * sizeof(char)) + HIGH_SCORES_START_ADDR);
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	0052      	lsls	r2, r2, #1
 80002dc:	4413      	add	r3, r2
 80002de:	461a      	mov	r2, r3
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	337d      	adds	r3, #125	@ 0x7d
 80002e8:	80fb      	strh	r3, [r7, #6]
        high_scores[i].score = eeprom_load_byte(addr);
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fedd 	bl	80010ac <eeprom_load_byte>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4618      	mov	r0, r3
 80002f6:	490d      	ldr	r1, [pc, #52]	@ (800032c <highscore_init+0xbc>)
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	4613      	mov	r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	4413      	add	r3, r2
 8000300:	00da      	lsls	r2, r3, #3
 8000302:	1ad2      	subs	r2, r2, r3
 8000304:	188b      	adds	r3, r1, r2
 8000306:	3314      	adds	r3, #20
 8000308:	4602      	mov	r2, r0
 800030a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3301      	adds	r3, #1
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2b09      	cmp	r3, #9
 8000316:	ddb3      	ble.n	8000280 <highscore_init+0x10>
    }

    lowest_score = high_scores[MAX_NAME_LEN - 1].score;
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <highscore_init+0xbc>)
 800031a:	f893 21a3 	ldrb.w	r2, [r3, #419]	@ 0x1a3
 800031e:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <highscore_init+0xc0>)
 8000320:	701a      	strb	r2, [r3, #0]

    return;
 8000322:	bf00      	nop
}
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000c8 	.word	0x200000c8
 8000330:	2000019a 	.word	0x2000019a

08000334 <load_highscore>:
/**
 * @brief Load the high score from the eeprom
 * @param index the index of the high score
 * @return the high score
*/
HighScore_t load_highscore(uint8_t index) {
 8000334:	b4b0      	push	{r4, r5, r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
    return high_scores[index];
 8000340:	78fa      	ldrb	r2, [r7, #3]
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	490c      	ldr	r1, [pc, #48]	@ (8000378 <load_highscore+0x44>)
 8000346:	4613      	mov	r3, r2
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	4413      	add	r3, r2
 800034c:	00da      	lsls	r2, r3, #3
 800034e:	1ad2      	subs	r2, r2, r3
 8000350:	440a      	add	r2, r1
 8000352:	4603      	mov	r3, r0
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	6855      	ldr	r5, [r2, #4]
 8000358:	6894      	ldr	r4, [r2, #8]
 800035a:	68d0      	ldr	r0, [r2, #12]
 800035c:	6019      	str	r1, [r3, #0]
 800035e:	605d      	str	r5, [r3, #4]
 8000360:	609c      	str	r4, [r3, #8]
 8000362:	60d8      	str	r0, [r3, #12]
 8000364:	6911      	ldr	r1, [r2, #16]
 8000366:	6119      	str	r1, [r3, #16]
 8000368:	7d12      	ldrb	r2, [r2, #20]
 800036a:	751a      	strb	r2, [r3, #20]
}
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bcb0      	pop	{r4, r5, r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	200000c8 	.word	0x200000c8

0800037c <joystick_pin_init>:
 *      Author: danny
 */

#include "Joystick.h"

void joystick_pin_init() {
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
    // PC0 for vertical, PC1 for horizontal
    // PC2 for button
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <joystick_pin_init+0x70>)
 8000382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000384:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <joystick_pin_init+0x70>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER |= GPIO_MODER_MODE0 | GPIO_MODER_MODE1; // Analog mode
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <joystick_pin_init+0x74>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <joystick_pin_init+0x74>)
 8000392:	f043 030f 	orr.w	r3, r3, #15
 8000396:	6013      	str	r3, [r2, #0]
    GPIOC->ASCR |= GPIO_ASCR_ASC0 | GPIO_ASCR_ASC1;  // Connect analog switch to ADC input
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <joystick_pin_init+0x74>)
 800039a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800039c:	4a14      	ldr	r2, [pc, #80]	@ (80003f0 <joystick_pin_init+0x74>)
 800039e:	f043 0303 	orr.w	r3, r3, #3
 80003a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

    GPIOC->MODER &= ~GPIO_MODER_MODE2; // Input mode
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <joystick_pin_init+0x74>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a11      	ldr	r2, [pc, #68]	@ (80003f0 <joystick_pin_init+0x74>)
 80003aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003ae:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD2; 
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <joystick_pin_init+0x74>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <joystick_pin_init+0x74>)
 80003b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003ba:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= GPIO_PUPDR_PUPD2_0; // Pull-up
 80003bc:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <joystick_pin_init+0x74>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a0b      	ldr	r2, [pc, #44]	@ (80003f0 <joystick_pin_init+0x74>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	60d3      	str	r3, [r2, #12]
    GPIOC->OTYPER &= ~GPIO_OTYPER_OT2; // Push-pull
 80003c8:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <joystick_pin_init+0x74>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a08      	ldr	r2, [pc, #32]	@ (80003f0 <joystick_pin_init+0x74>)
 80003ce:	f023 0304 	bic.w	r3, r3, #4
 80003d2:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED2; // Low speed
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <joystick_pin_init+0x74>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a05      	ldr	r2, [pc, #20]	@ (80003f0 <joystick_pin_init+0x74>)
 80003da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003de:	6093      	str	r3, [r2, #8]

    return;
 80003e0:	bf00      	nop
}
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	48000800 	.word	0x48000800

080003f4 <ADC_init>:

void ADC_init() {
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0

    // ADC1, IN1 for vertical
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80003fa:	4b59      	ldr	r3, [pc, #356]	@ (8000560 <ADC_init+0x16c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	4a58      	ldr	r2, [pc, #352]	@ (8000560 <ADC_init+0x16c>)
 8000400:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000404:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 8000406:	4b57      	ldr	r3, [pc, #348]	@ (8000564 <ADC_init+0x170>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	4a56      	ldr	r2, [pc, #344]	@ (8000564 <ADC_init+0x170>)
 800040c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000410:	6093      	str	r3, [r2, #8]
    ADC1->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 8000412:	4b55      	ldr	r3, [pc, #340]	@ (8000568 <ADC_init+0x174>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	4a54      	ldr	r2, [pc, #336]	@ (8000568 <ADC_init+0x174>)
 8000418:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800041c:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 800041e:	4b52      	ldr	r3, [pc, #328]	@ (8000568 <ADC_init+0x174>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4a51      	ldr	r2, [pc, #324]	@ (8000568 <ADC_init+0x174>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000428:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up 
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	e002      	b.n	8000436 <ADC_init+0x42>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3301      	adds	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b63      	cmp	r3, #99	@ 0x63
 800043a:	ddf9      	ble.n	8000430 <ADC_init+0x3c>

    ADC1->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 800043c:	4b4a      	ldr	r3, [pc, #296]	@ (8000568 <ADC_init+0x174>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a49      	ldr	r2, [pc, #292]	@ (8000568 <ADC_init+0x174>)
 8000442:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000446:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL; // start calibration
 8000448:	4b47      	ldr	r3, [pc, #284]	@ (8000568 <ADC_init+0x174>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a46      	ldr	r2, [pc, #280]	@ (8000568 <ADC_init+0x174>)
 800044e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000452:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000454:	bf00      	nop
 8000456:	4b44      	ldr	r3, [pc, #272]	@ (8000568 <ADC_init+0x174>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	2b00      	cmp	r3, #0
 800045c:	dbfb      	blt.n	8000456 <ADC_init+0x62>

    ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 800045e:	4b42      	ldr	r3, [pc, #264]	@ (8000568 <ADC_init+0x174>)
 8000460:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000464:	4a40      	ldr	r2, [pc, #256]	@ (8000568 <ADC_init+0x174>)
 8000466:	f023 0301 	bic.w	r3, r3, #1
 800046a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC1->ISR |= ADC_ISR_ADRDY; // clear ready flag
 800046e:	4b3e      	ldr	r3, [pc, #248]	@ (8000568 <ADC_init+0x174>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a3d      	ldr	r2, [pc, #244]	@ (8000568 <ADC_init+0x174>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]
    ADC1->CR |= ADC_CR_ADEN; // enable ADC
 800047a:	4b3b      	ldr	r3, [pc, #236]	@ (8000568 <ADC_init+0x174>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	4a3a      	ldr	r2, [pc, #232]	@ (8000568 <ADC_init+0x174>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000486:	bf00      	nop
 8000488:	4b37      	ldr	r3, [pc, #220]	@ (8000568 <ADC_init+0x174>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0f9      	beq.n	8000488 <ADC_init+0x94>

    ADC1->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 8000494:	4b34      	ldr	r3, [pc, #208]	@ (8000568 <ADC_init+0x174>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
    ADC1->SQR1 = (1 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 800049a:	4b33      	ldr	r3, [pc, #204]	@ (8000568 <ADC_init+0x174>)
 800049c:	2240      	movs	r2, #64	@ 0x40
 800049e:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->SMPR1 = (2 << ADC_SMPR1_SMP1_Pos); // 12.5 cycles sampling time
 80004a0:	4b31      	ldr	r3, [pc, #196]	@ (8000568 <ADC_init+0x174>)
 80004a2:	2210      	movs	r2, #16
 80004a4:	615a      	str	r2, [r3, #20]

    // ADC3, IN2 for horizontal
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80004a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000560 <ADC_init+0x16c>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000560 <ADC_init+0x16c>)
 80004ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 80004b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000564 <ADC_init+0x170>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000564 <ADC_init+0x170>)
 80004b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004bc:	6093      	str	r3, [r2, #8]
    ADC3->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 80004be:	4b2b      	ldr	r3, [pc, #172]	@ (800056c <ADC_init+0x178>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	4a2a      	ldr	r2, [pc, #168]	@ (800056c <ADC_init+0x178>)
 80004c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80004c8:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 80004ca:	4b28      	ldr	r3, [pc, #160]	@ (800056c <ADC_init+0x178>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	4a27      	ldr	r2, [pc, #156]	@ (800056c <ADC_init+0x178>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d4:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	e002      	b.n	80004e2 <ADC_init+0xee>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	2b63      	cmp	r3, #99	@ 0x63
 80004e6:	ddf9      	ble.n	80004dc <ADC_init+0xe8>

    ADC3->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 80004e8:	4b20      	ldr	r3, [pc, #128]	@ (800056c <ADC_init+0x178>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4a1f      	ldr	r2, [pc, #124]	@ (800056c <ADC_init+0x178>)
 80004ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80004f2:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADCAL; // start calibration
 80004f4:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <ADC_init+0x178>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	4a1c      	ldr	r2, [pc, #112]	@ (800056c <ADC_init+0x178>)
 80004fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fe:	6093      	str	r3, [r2, #8]
    while (ADC3->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000500:	bf00      	nop
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <ADC_init+0x178>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	dbfb      	blt.n	8000502 <ADC_init+0x10e>

    ADC3->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 800050a:	4b18      	ldr	r3, [pc, #96]	@ (800056c <ADC_init+0x178>)
 800050c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000510:	4a16      	ldr	r2, [pc, #88]	@ (800056c <ADC_init+0x178>)
 8000512:	f023 0301 	bic.w	r3, r3, #1
 8000516:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC3->ISR |= ADC_ISR_ADRDY; // clear ready flag
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <ADC_init+0x178>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a13      	ldr	r2, [pc, #76]	@ (800056c <ADC_init+0x178>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6013      	str	r3, [r2, #0]
    ADC3->CR |= ADC_CR_ADEN; // enable ADC
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <ADC_init+0x178>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	4a10      	ldr	r2, [pc, #64]	@ (800056c <ADC_init+0x178>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000532:	bf00      	nop
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <ADC_init+0x178>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0f9      	beq.n	8000534 <ADC_init+0x140>

    ADC3->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <ADC_init+0x178>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
    ADC3->SQR1 = (2 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <ADC_init+0x178>)
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC3->SMPR1 = (2 << ADC_SMPR1_SMP2_Pos); // 12.5 cycles sampling time
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <ADC_init+0x178>)
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	615a      	str	r2, [r3, #20]

    return;
 8000552:	bf00      	nop
}
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	50040300 	.word	0x50040300
 8000568:	50040000 	.word	0x50040000
 800056c:	50040200 	.word	0x50040200

08000570 <joystick_init>:

void joystick_init() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    joystick_pin_init();
 8000574:	f7ff ff02 	bl	800037c <joystick_pin_init>
    ADC_init();
 8000578:	f7ff ff3c 	bl	80003f4 <ADC_init>

    return;
 800057c:	bf00      	nop
}
 800057e:	bd80      	pop	{r7, pc}

08000580 <get_joystick_x>:

uint16_t get_joystick_x() {
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
    ADC3->CR |= ADC_CR_ADSTART; // start conversion
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <get_joystick_x+0x30>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <get_joystick_x+0x30>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 8000590:	bf00      	nop
 8000592:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <get_joystick_x+0x30>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <get_joystick_x+0x12>

    return ADC3->DR;
 800059e:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <get_joystick_x+0x30>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a2:	b29b      	uxth	r3, r3
    
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	50040200 	.word	0x50040200

080005b4 <get_joystick_y>:

uint16_t get_joystick_y() {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
    ADC1->CR |= ADC_CR_ADSTART; // start conversion
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <get_joystick_y+0x30>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <get_joystick_y+0x30>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 80005c4:	bf00      	nop
 80005c6:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <get_joystick_y+0x30>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <get_joystick_y+0x12>

    return ADC1->DR;
 80005d2:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <get_joystick_y+0x30>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d6:	b29b      	uxth	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	50040000 	.word	0x50040000

080005e8 <get_joystick_button>:

uint8_t get_joystick_button() {
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    return !(GPIOC->IDR & GPIO_IDR_ID2);
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <get_joystick_button+0x20>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	48000800 	.word	0x48000800

0800060c <same_point>:

#include "Objects.h"

static BodyPart_t old_tail;

uint8_t same_point(Point_t a, Point_t b) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	80b8      	strh	r0, [r7, #4]
 8000614:	8039      	strh	r1, [r7, #0]
    return (a.x == b.x && a.y == b.y);
 8000616:	793a      	ldrb	r2, [r7, #4]
 8000618:	783b      	ldrb	r3, [r7, #0]
 800061a:	429a      	cmp	r2, r3
 800061c:	d105      	bne.n	800062a <same_point+0x1e>
 800061e:	797a      	ldrb	r2, [r7, #5]
 8000620:	787b      	ldrb	r3, [r7, #1]
 8000622:	429a      	cmp	r2, r3
 8000624:	d101      	bne.n	800062a <same_point+0x1e>
 8000626:	2301      	movs	r3, #1
 8000628:	e000      	b.n	800062c <same_point+0x20>
 800062a:	2300      	movs	r3, #0
 800062c:	b2db      	uxtb	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <grid_init>:


/**
 * @brief Initialize the grid with black color
*/
void grid_init(uint8_t high_score) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
    uart_clear_screen();
 8000646:	f001 f943 	bl	80018d0 <uart_clear_screen>
    uart_send_escape("[0m"); // reset colorQ
 800064a:	4838      	ldr	r0, [pc, #224]	@ (800072c <grid_init+0xf0>)
 800064c:	f001 f932 	bl	80018b4 <uart_send_escape>

    // print top and bottom border
    sprintf(snake_print_buffer, "[%u;%uH", TOP_BOUND, LEFT_BOUND);
 8000650:	2308      	movs	r3, #8
 8000652:	2203      	movs	r2, #3
 8000654:	4936      	ldr	r1, [pc, #216]	@ (8000730 <grid_init+0xf4>)
 8000656:	4837      	ldr	r0, [pc, #220]	@ (8000734 <grid_init+0xf8>)
 8000658:	f002 fe22 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 800065c:	4835      	ldr	r0, [pc, #212]	@ (8000734 <grid_init+0xf8>)
 800065e:	f001 f929 	bl	80018b4 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000662:	2308      	movs	r3, #8
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e005      	b.n	8000674 <grid_init+0x38>
        uart_send_char('=');
 8000668:	203d      	movs	r0, #61	@ 0x3d
 800066a:	f001 f8e5 	bl	8001838 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3301      	adds	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	2b64      	cmp	r3, #100	@ 0x64
 8000678:	ddf6      	ble.n	8000668 <grid_init+0x2c>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND, LEFT_BOUND);
 800067a:	2308      	movs	r3, #8
 800067c:	2232      	movs	r2, #50	@ 0x32
 800067e:	492c      	ldr	r1, [pc, #176]	@ (8000730 <grid_init+0xf4>)
 8000680:	482c      	ldr	r0, [pc, #176]	@ (8000734 <grid_init+0xf8>)
 8000682:	f002 fe0d 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000686:	482b      	ldr	r0, [pc, #172]	@ (8000734 <grid_init+0xf8>)
 8000688:	f001 f914 	bl	80018b4 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 800068c:	2308      	movs	r3, #8
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	e005      	b.n	800069e <grid_init+0x62>
        uart_send_char('=');
 8000692:	203d      	movs	r0, #61	@ 0x3d
 8000694:	f001 f8d0 	bl	8001838 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	3301      	adds	r3, #1
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	2b64      	cmp	r3, #100	@ 0x64
 80006a2:	ddf6      	ble.n	8000692 <grid_init+0x56>
    }

    // print left and right border
    for (int i = TOP_BOUND + 1; i < BOTTOM_BOUND; i++) {
 80006a4:	2304      	movs	r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e01a      	b.n	80006e0 <grid_init+0xa4>
        sprintf(snake_print_buffer, "[%u;%uH", i, LEFT_BOUND);
 80006aa:	2308      	movs	r3, #8
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	4920      	ldr	r1, [pc, #128]	@ (8000730 <grid_init+0xf4>)
 80006b0:	4820      	ldr	r0, [pc, #128]	@ (8000734 <grid_init+0xf8>)
 80006b2:	f002 fdf5 	bl	80032a0 <siprintf>
        uart_send_escape(snake_print_buffer);
 80006b6:	481f      	ldr	r0, [pc, #124]	@ (8000734 <grid_init+0xf8>)
 80006b8:	f001 f8fc 	bl	80018b4 <uart_send_escape>
        uart_send_char('|');
 80006bc:	207c      	movs	r0, #124	@ 0x7c
 80006be:	f001 f8bb 	bl	8001838 <uart_send_char>

        sprintf(snake_print_buffer, "[%u;%uH", i, RIGHT_BOUND);
 80006c2:	2364      	movs	r3, #100	@ 0x64
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	491a      	ldr	r1, [pc, #104]	@ (8000730 <grid_init+0xf4>)
 80006c8:	481a      	ldr	r0, [pc, #104]	@ (8000734 <grid_init+0xf8>)
 80006ca:	f002 fde9 	bl	80032a0 <siprintf>
        uart_send_escape(snake_print_buffer);
 80006ce:	4819      	ldr	r0, [pc, #100]	@ (8000734 <grid_init+0xf8>)
 80006d0:	f001 f8f0 	bl	80018b4 <uart_send_escape>
        uart_send_char('|');
 80006d4:	207c      	movs	r0, #124	@ 0x7c
 80006d6:	f001 f8af 	bl	8001838 <uart_send_char>
    for (int i = TOP_BOUND + 1; i < BOTTOM_BOUND; i++) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b31      	cmp	r3, #49	@ 0x31
 80006e4:	dde1      	ble.n	80006aa <grid_init+0x6e>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND + 5, RIGHT_BOUND - 15);
 80006e6:	2355      	movs	r3, #85	@ 0x55
 80006e8:	2237      	movs	r2, #55	@ 0x37
 80006ea:	4911      	ldr	r1, [pc, #68]	@ (8000730 <grid_init+0xf4>)
 80006ec:	4811      	ldr	r0, [pc, #68]	@ (8000734 <grid_init+0xf8>)
 80006ee:	f002 fdd7 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 80006f2:	4810      	ldr	r0, [pc, #64]	@ (8000734 <grid_init+0xf8>)
 80006f4:	f001 f8de 	bl	80018b4 <uart_send_escape>
    sprintf(snake_print_buffer, "High Score: %u", high_score);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	461a      	mov	r2, r3
 80006fc:	490e      	ldr	r1, [pc, #56]	@ (8000738 <grid_init+0xfc>)
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <grid_init+0xf8>)
 8000700:	f002 fdce 	bl	80032a0 <siprintf>
    uart_send_string(snake_print_buffer);
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <grid_init+0xf8>)
 8000706:	f001 f8af 	bl	8001868 <uart_send_string>

    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X - 7);
 800070a:	2308      	movs	r3, #8
 800070c:	2237      	movs	r2, #55	@ 0x37
 800070e:	4908      	ldr	r1, [pc, #32]	@ (8000730 <grid_init+0xf4>)
 8000710:	4808      	ldr	r0, [pc, #32]	@ (8000734 <grid_init+0xf8>)
 8000712:	f002 fdc5 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000716:	4807      	ldr	r0, [pc, #28]	@ (8000734 <grid_init+0xf8>)
 8000718:	f001 f8cc 	bl	80018b4 <uart_send_escape>
    uart_send_string("Score: ");
 800071c:	4807      	ldr	r0, [pc, #28]	@ (800073c <grid_init+0x100>)
 800071e:	f001 f8a3 	bl	8001868 <uart_send_string>




    return;
 8000722:	bf00      	nop
}
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	08003bf8 	.word	0x08003bf8
 8000730:	08003bfc 	.word	0x08003bfc
 8000734:	2000019c 	.word	0x2000019c
 8000738:	08003c04 	.word	0x08003c04
 800073c:	08003c14 	.word	0x08003c14

08000740 <grid_draw>:
/**
 * @brief Draw the snake and food on the grid
 * @param snake: the snake object
 * @param food: the food object
*/
void grid_draw(Snake_t snake, Food_t food) {
 8000740:	b084      	sub	sp, #16
 8000742:	b580      	push	{r7, lr}
 8000744:	b0a4      	sub	sp, #144	@ 0x90
 8000746:	af24      	add	r7, sp, #144	@ 0x90
 8000748:	f107 0c08 	add.w	ip, r7, #8
 800074c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // uart_clear_screen();
    snake_draw(snake);
 8000750:	4668      	mov	r0, sp
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	2290      	movs	r2, #144	@ 0x90
 8000758:	4619      	mov	r1, r3
 800075a:	f002 fdf5 	bl	8003348 <memcpy>
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000764:	f000 f806 	bl	8000774 <snake_draw>

    return;
 8000768:	bf00      	nop
}
 800076a:	46bd      	mov	sp, r7
 800076c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000770:	b004      	add	sp, #16
 8000772:	4770      	bx	lr

08000774 <snake_draw>:

/**
 * @brief Draw the snake object
 * @param snake: the snake object
*/
void snake_draw(Snake_t snake) {
 8000774:	b084      	sub	sp, #16
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
 800077a:	f107 0c08 	add.w	ip, r7, #8
 800077e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // erase tail
    // sprintf(snake_print_buffer, "[%u;%uH", snake.tail->pos.y, snake.tail->pos.x);
    sprintf(snake_print_buffer, "[%u;%uH", old_tail.pos.y, old_tail.pos.x);
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <snake_draw+0x80>)
 8000784:	789b      	ldrb	r3, [r3, #2]
 8000786:	461a      	mov	r2, r3
 8000788:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <snake_draw+0x80>)
 800078a:	785b      	ldrb	r3, [r3, #1]
 800078c:	491a      	ldr	r1, [pc, #104]	@ (80007f8 <snake_draw+0x84>)
 800078e:	481b      	ldr	r0, [pc, #108]	@ (80007fc <snake_draw+0x88>)
 8000790:	f002 fd86 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000794:	4819      	ldr	r0, [pc, #100]	@ (80007fc <snake_draw+0x88>)
 8000796:	f001 f88d 	bl	80018b4 <uart_send_escape>
    uart_send_char(' ');
 800079a:	2020      	movs	r0, #32
 800079c:	f001 f84c 	bl	8001838 <uart_send_char>

    // draw head
    sprintf(snake_print_buffer, "[%u;%uH", snake.body[0].pos.y, snake.body[0].pos.x);
 80007a0:	7afb      	ldrb	r3, [r7, #11]
 80007a2:	461a      	mov	r2, r3
 80007a4:	7abb      	ldrb	r3, [r7, #10]
 80007a6:	4914      	ldr	r1, [pc, #80]	@ (80007f8 <snake_draw+0x84>)
 80007a8:	4814      	ldr	r0, [pc, #80]	@ (80007fc <snake_draw+0x88>)
 80007aa:	f002 fd79 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 80007ae:	4813      	ldr	r0, [pc, #76]	@ (80007fc <snake_draw+0x88>)
 80007b0:	f001 f880 	bl	80018b4 <uart_send_escape>
    uart_send_escape("[32m"); // green
 80007b4:	4812      	ldr	r0, [pc, #72]	@ (8000800 <snake_draw+0x8c>)
 80007b6:	f001 f87d 	bl	80018b4 <uart_send_escape>
    uart_send_char('O');
 80007ba:	204f      	movs	r0, #79	@ 0x4f
 80007bc:	f001 f83c 	bl	8001838 <uart_send_char>

    // print current score
    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X);
 80007c0:	230f      	movs	r3, #15
 80007c2:	2237      	movs	r2, #55	@ 0x37
 80007c4:	490c      	ldr	r1, [pc, #48]	@ (80007f8 <snake_draw+0x84>)
 80007c6:	480d      	ldr	r0, [pc, #52]	@ (80007fc <snake_draw+0x88>)
 80007c8:	f002 fd6a 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <snake_draw+0x88>)
 80007ce:	f001 f871 	bl	80018b4 <uart_send_escape>
    sprintf(snake_print_buffer, "%u", snake.score);
 80007d2:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80007d6:	461a      	mov	r2, r3
 80007d8:	490a      	ldr	r1, [pc, #40]	@ (8000804 <snake_draw+0x90>)
 80007da:	4808      	ldr	r0, [pc, #32]	@ (80007fc <snake_draw+0x88>)
 80007dc:	f002 fd60 	bl	80032a0 <siprintf>
    uart_send_string(snake_print_buffer);
 80007e0:	4806      	ldr	r0, [pc, #24]	@ (80007fc <snake_draw+0x88>)
 80007e2:	f001 f841 	bl	8001868 <uart_send_string>
    
    return;
 80007e6:	bf00      	nop
}
 80007e8:	46bd      	mov	sp, r7
 80007ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ee:	b004      	add	sp, #16
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000200 	.word	0x20000200
 80007f8:	08003bfc 	.word	0x08003bfc
 80007fc:	2000019c 	.word	0x2000019c
 8000800:	08003c1c 	.word	0x08003c1c
 8000804:	08003c24 	.word	0x08003c24

08000808 <snake_init>:

/**
 * @brief Initialize the snake object
 * @return the snake object
*/
void snake_init(Snake_t* snake) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    snake->len = START_LEN;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2205      	movs	r2, #5
 8000814:	701a      	strb	r2, [r3, #0]
    snake->dir = NORTH;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    snake->alive = 1;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    snake->score = 0;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
    
    uint8_t x = get_random(LEFT_BOUND + START_BOUNDARY_OFFSET, RIGHT_BOUND - START_BOUNDARY_OFFSET);
 800082e:	215a      	movs	r1, #90	@ 0x5a
 8000830:	2012      	movs	r0, #18
 8000832:	f000 fb03 	bl	8000e3c <get_random>
 8000836:	4603      	mov	r3, r0
 8000838:	74fb      	strb	r3, [r7, #19]
    uint8_t y = get_random(TOP_BOUND + START_BOUNDARY_OFFSET, BOTTOM_BOUND - START_BOUNDARY_OFFSET - snake->len - 1);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8000842:	4619      	mov	r1, r3
 8000844:	200d      	movs	r0, #13
 8000846:	f000 faf9 	bl	8000e3c <get_random>
 800084a:	4603      	mov	r3, r0
 800084c:	74bb      	strb	r3, [r7, #18]

    for (int i = 0; i < snake->len; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	e022      	b.n	800089a <snake_init+0x92>
        snake->body[i].valid = 1;
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	69fa      	ldr	r2, [r7, #28]
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	440b      	add	r3, r1
 8000860:	3301      	adds	r3, #1
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.x = x;
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	69fa      	ldr	r2, [r7, #28]
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	440b      	add	r3, r1
 8000872:	3302      	adds	r3, #2
 8000874:	7cfa      	ldrb	r2, [r7, #19]
 8000876:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = y + i;
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	7cbb      	ldrb	r3, [r7, #18]
 800087e:	4413      	add	r3, r2
 8000880:	b2d8      	uxtb	r0, r3
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	69fa      	ldr	r2, [r7, #28]
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	440b      	add	r3, r1
 800088e:	3303      	adds	r3, #3
 8000890:	4602      	mov	r2, r0
 8000892:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake->len; i++) {
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	3301      	adds	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	4293      	cmp	r3, r2
 80008a4:	dbd6      	blt.n	8000854 <snake_init+0x4c>
    }

    snake->tail = &(snake->body[snake->len - 1]);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    old_tail = *(snake->tail);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <snake_init+0x148>)
 80008c6:	8811      	ldrh	r1, [r2, #0]
 80008c8:	7892      	ldrb	r2, [r2, #2]
 80008ca:	8019      	strh	r1, [r3, #0]
 80008cc:	709a      	strb	r2, [r3, #2]

    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	e00b      	b.n	80008ee <snake_init+0xe6>
        snake->body[i].valid = 0;
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	3301      	adds	r3, #1
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	2b31      	cmp	r3, #49	@ 0x31
 80008f2:	ddf0      	ble.n	80008d6 <snake_init+0xce>
    }
    
    // draw initial snake
    uart_send_escape("[32m"); // green
 80008f4:	4817      	ldr	r0, [pc, #92]	@ (8000954 <snake_init+0x14c>)
 80008f6:	f000 ffdd 	bl	80018b4 <uart_send_escape>
    BodyPart_t body;
    for (int i = 0; i < snake->len; i++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	e01c      	b.n	800093a <snake_init+0x132>
        body = snake->body[i];
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4613      	mov	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	18ca      	adds	r2, r1, r3
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	3201      	adds	r2, #1
 8000912:	8811      	ldrh	r1, [r2, #0]
 8000914:	7892      	ldrb	r2, [r2, #2]
 8000916:	8019      	strh	r1, [r3, #0]
 8000918:	709a      	strb	r2, [r3, #2]
        sprintf(snake_print_buffer, "[%u;%uH", body.pos.y, body.pos.x);
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	461a      	mov	r2, r3
 800091e:	7b7b      	ldrb	r3, [r7, #13]
 8000920:	490d      	ldr	r1, [pc, #52]	@ (8000958 <snake_init+0x150>)
 8000922:	480e      	ldr	r0, [pc, #56]	@ (800095c <snake_init+0x154>)
 8000924:	f002 fcbc 	bl	80032a0 <siprintf>
        uart_send_escape(snake_print_buffer);
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <snake_init+0x154>)
 800092a:	f000 ffc3 	bl	80018b4 <uart_send_escape>
        uart_send_char('O');
 800092e:	204f      	movs	r0, #79	@ 0x4f
 8000930:	f000 ff82 	bl	8001838 <uart_send_char>
    for (int i = 0; i < snake->len; i++) {
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	4293      	cmp	r3, r2
 8000944:	dbdc      	blt.n	8000900 <snake_init+0xf8>
    }

    return;
 8000946:	bf00      	nop
}
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000200 	.word	0x20000200
 8000954:	08003c1c 	.word	0x08003c1c
 8000958:	08003bfc 	.word	0x08003bfc
 800095c:	2000019c 	.word	0x2000019c

08000960 <snake_move>:
/**
 * @brief Move the snake object
 * @return  -1 if snake ded
 *           0 if snake is alive
*/
int8_t snake_move(Snake_t* snake) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    if (!snake->alive) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <snake_move+0x18>
        return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000976:	e098      	b.n	8000aaa <snake_move+0x14a>
    }

    snake_change_dir(snake);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f8e5 	bl	8000b48 <snake_change_dir>

    // check if snake collides with boundary
    if (!WITHIN_BOUND(snake->body[0].pos.x, snake->body[0].pos.y)) {
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	789b      	ldrb	r3, [r3, #2]
 8000982:	2b08      	cmp	r3, #8
 8000984:	d90b      	bls.n	800099e <snake_move+0x3e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	2b63      	cmp	r3, #99	@ 0x63
 800098c:	d807      	bhi.n	800099e <snake_move+0x3e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	78db      	ldrb	r3, [r3, #3]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d903      	bls.n	800099e <snake_move+0x3e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	78db      	ldrb	r3, [r3, #3]
 800099a:	2b31      	cmp	r3, #49	@ 0x31
 800099c:	d905      	bls.n	80009aa <snake_move+0x4a>
        snake_die(snake);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f8c0 	bl	8000b24 <snake_die>
        return -1;
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009a8:	e07f      	b.n	8000aaa <snake_move+0x14a>
    }

    BodyPart_t* p_head = &snake->body[0];
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]

    old_tail = *(snake->tail);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80009b6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab4 <snake_move+0x154>)
 80009b8:	8811      	ldrh	r1, [r2, #0]
 80009ba:	7892      	ldrb	r2, [r2, #2]
 80009bc:	8019      	strh	r1, [r3, #0]
 80009be:	709a      	strb	r2, [r3, #2]

    // move body parts
    for (int i = snake->len - 1; i > 0; i--) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e026      	b.n	8000a18 <snake_move+0xb8>
        snake->body[i].pos.x = snake->body[i - 1].pos.x;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	3302      	adds	r3, #2
 80009da:	7818      	ldrb	r0, [r3, #0]
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	3302      	adds	r3, #2
 80009ea:	4602      	mov	r2, r0
 80009ec:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = snake->body[i - 1].pos.y;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	3303      	adds	r3, #3
 80009fe:	7818      	ldrb	r0, [r3, #0]
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	4602      	mov	r2, r0
 8000a10:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len - 1; i > 0; i--) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	dcd5      	bgt.n	80009ca <snake_move+0x6a>
    }

    // move head
    switch (snake->dir) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d827      	bhi.n	8000a78 <snake_move+0x118>
 8000a28:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <snake_move+0xd0>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a4f 	.word	0x08000a4f
 8000a38:	08000a5d 	.word	0x08000a5d
 8000a3c:	08000a6b 	.word	0x08000a6b
        case NORTH:
            p_head->pos.y--;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	709a      	strb	r2, [r3, #2]
            break;
 8000a4c:	e015      	b.n	8000a7a <snake_move+0x11a>
        case EAST:
            p_head->pos.x++;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	785b      	ldrb	r3, [r3, #1]
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	705a      	strb	r2, [r3, #1]
            break;
 8000a5a:	e00e      	b.n	8000a7a <snake_move+0x11a>
        case SOUTH:
            p_head->pos.y++;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	709a      	strb	r2, [r3, #2]
            break;
 8000a68:	e007      	b.n	8000a7a <snake_move+0x11a>
        case WEST:
            p_head->pos.x--;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	705a      	strb	r2, [r3, #1]
            break;
 8000a76:	e000      	b.n	8000a7a <snake_move+0x11a>
        default:
            break;
 8000a78:	bf00      	nop
    }

    // check if snake collides with itself
    if (snake_hit_itself(p_head->pos, snake->body) == -1) {
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	1c59      	adds	r1, r3, #1
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	785a      	ldrb	r2, [r3, #1]
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	431a      	orrs	r2, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f362 030f 	bfi	r3, r2, #0, #16
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f812 	bl	8000ab8 <snake_hit_itself>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a9a:	d105      	bne.n	8000aa8 <snake_move+0x148>
        snake_die(snake);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f841 	bl	8000b24 <snake_die>
        return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aa6:	e000      	b.n	8000aaa <snake_move+0x14a>
    }

    return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000200 	.word	0x20000200

08000ab8 <snake_hit_itself>:
/**
 * @brief Check if snake collides with itself
 * @return  0 if snake is alive,
 *          non-zero if snake is ded  
*/
int8_t snake_hit_itself(Point_t snake_head, BodyPart_t* body_parts) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	80b8      	strh	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e022      	b.n	8000b0e <snake_hit_itself+0x56>
        if (body_parts[i].valid) {
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d01d      	beq.n	8000b16 <snake_hit_itself+0x5e>
            if (same_point(snake_head, body_parts[i].pos)) {
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	785a      	ldrb	r2, [r3, #1]
 8000ae8:	789b      	ldrb	r3, [r3, #2]
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	431a      	orrs	r2, r3
 8000aee:	2300      	movs	r3, #0
 8000af0:	f362 030f 	bfi	r3, r2, #0, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fd88 	bl	800060c <same_point>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <snake_hit_itself+0x50>
                return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b06:	e008      	b.n	8000b1a <snake_hit_itself+0x62>
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b31      	cmp	r3, #49	@ 0x31
 8000b12:	ddd9      	ble.n	8000ac8 <snake_hit_itself+0x10>
 8000b14:	e000      	b.n	8000b18 <snake_hit_itself+0x60>
            }
        }
        else {
            break;
 8000b16:	bf00      	nop
        }
    }

    return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <snake_die>:

/**
 * @brief kill the snake
 * @param snake: the snake object
*/
void snake_die(Snake_t* snake) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    snake->alive = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    uart_println("Snake ded");
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <snake_die+0x20>)
 8000b36:	f000 fead 	bl	8001894 <uart_println>
 
    return;
 8000b3a:	bf00      	nop
}
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	08003c28 	.word	0x08003c28

08000b48 <snake_change_dir>:
 * @brief Read the UART input and change the snake direction
 * @param snake: the snake object
 * @return 0 if no change
 *          non zero if change
*/
uint8_t snake_change_dir(Snake_t* snake) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    uint16_t joy_x = get_joystick_x();
 8000b50:	f7ff fd16 	bl	8000580 <get_joystick_x>
 8000b54:	4603      	mov	r3, r0
 8000b56:	81bb      	strh	r3, [r7, #12]
    uint16_t joy_y = get_joystick_y();
 8000b58:	f7ff fd2c 	bl	80005b4 <get_joystick_y>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	817b      	strh	r3, [r7, #10]

    Direction_t new_dir;
    uint8_t x_axis;

    x_axis = abs(joy_x - 2048) > abs(joy_y - 2048); 
 8000b60:	89bb      	ldrh	r3, [r7, #12]
 8000b62:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b66:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b6a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b6e:	897b      	ldrh	r3, [r7, #10]
 8000b70:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bfb8      	it	lt
 8000b78:	425b      	neglt	r3, r3
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	bfcc      	ite	gt
 8000b7e:	2301      	movgt	r3, #1
 8000b80:	2300      	movle	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	727b      	strb	r3, [r7, #9]

    if (x_axis) {
 8000b86:	7a7b      	ldrb	r3, [r7, #9]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d010      	beq.n	8000bae <snake_change_dir+0x66>
        if (joy_x > RIGHT_QUARTER) {
 8000b8c:	89bb      	ldrh	r3, [r7, #12]
 8000b8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000b92:	d302      	bcc.n	8000b9a <snake_change_dir+0x52>
            new_dir = EAST;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e01a      	b.n	8000bd0 <snake_change_dir+0x88>
        }
        else if (joy_x < LEFT_QUARTER) {
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d802      	bhi.n	8000baa <snake_change_dir+0x62>
            new_dir = WEST;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e012      	b.n	8000bd0 <snake_change_dir+0x88>
        }
        else {
            return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e048      	b.n	8000c40 <snake_change_dir+0xf8>
        }
    }
    else {
        if (joy_y > TOP_QUARTER) {
 8000bae:	897b      	ldrh	r3, [r7, #10]
 8000bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000bb4:	d302      	bcc.n	8000bbc <snake_change_dir+0x74>
            new_dir = NORTH;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e009      	b.n	8000bd0 <snake_change_dir+0x88>
        }
        else if (joy_y < BOTTOM_QUARTER) {
 8000bbc:	897b      	ldrh	r3, [r7, #10]
 8000bbe:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d802      	bhi.n	8000bcc <snake_change_dir+0x84>
            new_dir = SOUTH;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e001      	b.n	8000bd0 <snake_change_dir+0x88>
        } else {
            return 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e037      	b.n	8000c40 <snake_change_dir+0xf8>
        }
    }

    // change dir as long as not 180, if same dir then nothing happens
    switch (snake->dir) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d831      	bhi.n	8000c3e <snake_change_dir+0xf6>
 8000bda:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <snake_change_dir+0x98>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000bf1 	.word	0x08000bf1
 8000be4:	08000c01 	.word	0x08000c01
 8000be8:	08000c11 	.word	0x08000c11
 8000bec:	08000c21 	.word	0x08000c21
    case NORTH:
        if (new_dir != SOUTH) snake->dir = new_dir;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d01c      	beq.n	8000c30 <snake_change_dir+0xe8>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000bfe:	e017      	b.n	8000c30 <snake_change_dir+0xe8>
    case EAST:
        if (new_dir != WEST) snake->dir = new_dir;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d016      	beq.n	8000c34 <snake_change_dir+0xec>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000c0e:	e011      	b.n	8000c34 <snake_change_dir+0xec>
    case SOUTH:
        if (new_dir != NORTH) snake->dir = new_dir;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d010      	beq.n	8000c38 <snake_change_dir+0xf0>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000c1e:	e00b      	b.n	8000c38 <snake_change_dir+0xf0>
    case WEST:
        if (new_dir != EAST) snake->dir = new_dir;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d00a      	beq.n	8000c3c <snake_change_dir+0xf4>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000c2e:	e005      	b.n	8000c3c <snake_change_dir+0xf4>
        break;
 8000c30:	bf00      	nop
 8000c32:	e004      	b.n	8000c3e <snake_change_dir+0xf6>
        break;
 8000c34:	bf00      	nop
 8000c36:	e002      	b.n	8000c3e <snake_change_dir+0xf6>
        break;
 8000c38:	bf00      	nop
 8000c3a:	e000      	b.n	8000c3e <snake_change_dir+0xf6>
        break;
 8000c3c:	bf00      	nop
    }

    return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <snake_check_food>:
/**
 * @brief check snake head collides with food
 * @return  0 if no
 *          non-zero if yes
*/
uint8_t snake_check_food(Snake_t snake, Food_t food) {
 8000c48:	b084      	sub	sp, #16
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	f107 0c08 	add.w	ip, r7, #8
 8000c52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return same_point((snake.body[0]).pos, food);
 8000c56:	897a      	ldrh	r2, [r7, #10]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f362 030f 	bfi	r3, r2, #0, #16
 8000c5e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fcd2 	bl	800060c <same_point>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c72:	b004      	add	sp, #16
 8000c74:	4770      	bx	lr

08000c76 <snake_grow>:

/**
 * @brief Grow the snake
 * @param snake: the snake object
*/
void snake_grow(Snake_t* snake) {
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
    snake->body[snake->len].valid = 1;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4619      	mov	r1, r3
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	440b      	add	r3, r1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3301      	adds	r3, #1
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
    snake->body[snake->len].pos = snake->body[snake->len - 1].pos;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4403      	add	r3, r0
 8000ca8:	440b      	add	r3, r1
 8000caa:	1c98      	adds	r0, r3, #2
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	4602      	mov	r2, r0
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	8013      	strh	r3, [r2, #0]
    snake->tail = &snake->body[snake->len];
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    
    snake->len++;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	701a      	strb	r2, [r3, #0]
    snake->score++;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

    return;
 8000cf2:	bf00      	nop
}
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <snake_eat>:
/**
 * @brief Eat the food
 * @param snake: the snake object
 * @param food: the food object
*/
void snake_eat(Snake_t* snake, Food_t* food) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
    snake_grow(snake);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ffb4 	bl	8000c76 <snake_grow>
    food_respawn(food);
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f000 f826 	bl	8000d60 <food_respawn>

    return;
 8000d14:	bf00      	nop
}
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <snake_get_score>:
/**
 * @brief get snake score
 * @param snake: snake object
 * @return snake score
*/
uint8_t snake_get_score(Snake_t snake) {
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	b490      	push	{r4, r7}
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	f107 0408 	add.w	r4, r7, #8
 8000d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return snake.score;
 8000d2a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc90      	pop	{r4, r7}
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <food_init>:

/**
 * @brief Initialize the food object
 * @return the food object
*/
Food_t food_init() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
    Food_t food;
    food_respawn(&food);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f80d 	bl	8000d60 <food_respawn>

    return food;
 8000d46:	883b      	ldrh	r3, [r7, #0]
 8000d48:	80bb      	strh	r3, [r7, #4]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	793a      	ldrb	r2, [r7, #4]
 8000d4e:	f362 0307 	bfi	r3, r2, #0, #8
 8000d52:	797a      	ldrb	r2, [r7, #5]
 8000d54:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <food_respawn>:

/**
 * @brief Respawn the food object
 * @param food: the food object
*/
void food_respawn(Food_t* food) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    food->x = get_random(LEFT_BOUND + 1, RIGHT_BOUND - 1);
 8000d68:	2163      	movs	r1, #99	@ 0x63
 8000d6a:	2009      	movs	r0, #9
 8000d6c:	f000 f866 	bl	8000e3c <get_random>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	701a      	strb	r2, [r3, #0]
    food->y = get_random(TOP_BOUND + 1, BOTTOM_BOUND - 1);
 8000d78:	2131      	movs	r1, #49	@ 0x31
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f000 f85e 	bl	8000e3c <get_random>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	705a      	strb	r2, [r3, #1]

    food_draw(*food);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	431a      	orrs	r2, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	f362 030f 	bfi	r3, r2, #0, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f805 	bl	8000da8 <food_draw>
    return;
 8000d9e:	bf00      	nop
}
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <food_draw>:


/**
 * @brief Draw the food object
*/
void food_draw(Food_t food) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	80b8      	strh	r0, [r7, #4]
    sprintf(snake_print_buffer, "[%u;%uH", food.y, food.x);
 8000db0:	797b      	ldrb	r3, [r7, #5]
 8000db2:	461a      	mov	r2, r3
 8000db4:	793b      	ldrb	r3, [r7, #4]
 8000db6:	490b      	ldr	r1, [pc, #44]	@ (8000de4 <food_draw+0x3c>)
 8000db8:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <food_draw+0x40>)
 8000dba:	f002 fa71 	bl	80032a0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000dbe:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <food_draw+0x40>)
 8000dc0:	f000 fd78 	bl	80018b4 <uart_send_escape>
    uart_send_escape("[5m"); // blinking
 8000dc4:	4809      	ldr	r0, [pc, #36]	@ (8000dec <food_draw+0x44>)
 8000dc6:	f000 fd75 	bl	80018b4 <uart_send_escape>
    uart_send_escape("[31m"); // red
 8000dca:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <food_draw+0x48>)
 8000dcc:	f000 fd72 	bl	80018b4 <uart_send_escape>
    uart_send_char('X');
 8000dd0:	2058      	movs	r0, #88	@ 0x58
 8000dd2:	f000 fd31 	bl	8001838 <uart_send_char>
    uart_send_escape("[0m"); // back to default
 8000dd6:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <food_draw+0x4c>)
 8000dd8:	f000 fd6c 	bl	80018b4 <uart_send_escape>


    return;
 8000ddc:	bf00      	nop
}
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	08003bfc 	.word	0x08003bfc
 8000de8:	2000019c 	.word	0x2000019c
 8000dec:	08003c34 	.word	0x08003c34
 8000df0:	08003c38 	.word	0x08003c38
 8000df4:	08003bf8 	.word	0x08003bf8

08000df8 <MX_RNG_Init>:

static void MX_RNG_Init(void);
RNG_HandleTypeDef hrng;


static void MX_RNG_Init(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

    hrng.Instance = RNG;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_RNG_Init+0x20>)
 8000dfe:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <MX_RNG_Init+0x24>)
 8000e00:	601a      	str	r2, [r3, #0]
    if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_RNG_Init+0x20>)
 8000e04:	f002 f9f4 	bl	80031f0 <HAL_RNG_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_RNG_Init+0x1a>
        Error_Handler();
 8000e0e:	f000 fb9d 	bl	800154c <Error_Handler>
    }
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000204 	.word	0x20000204
 8000e1c:	50060800 	.word	0x50060800

08000e20 <rng_init>:

static uint32_t value;

void rng_init() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    MX_RNG_Init();
 8000e24:	f7ff ffe8 	bl	8000df8 <MX_RNG_Init>
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN; // shpuld already be enabled by HAL
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <rng_init+0x18>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	4a02      	ldr	r2, [pc, #8]	@ (8000e38 <rng_init+0x18>)
 8000e2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e32:	64d3      	str	r3, [r2, #76]	@ 0x4c

    return;
 8000e34:	bf00      	nop
}
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000

08000e3c <get_random>:

uint32_t get_random(uint32_t lower, uint32_t upper) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    RNG->CR |= RNG_CR_RNGEN;
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <get_random+0x54>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a11      	ldr	r2, [pc, #68]	@ (8000e90 <get_random+0x54>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6013      	str	r3, [r2, #0]

    while (!(RNG->SR & RNG_SR_DRDY));
 8000e52:	bf00      	nop
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <get_random+0x54>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f9      	beq.n	8000e54 <get_random+0x18>

    value = RNG->DR;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <get_random+0x54>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <get_random+0x58>)
 8000e66:	6013      	str	r3, [r2, #0]

    return (value % (upper - lower + 1) + lower);
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <get_random+0x58>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	3201      	adds	r2, #1
 8000e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e78:	fb01 f202 	mul.w	r2, r1, r2
 8000e7c:	1a9a      	subs	r2, r3, r2
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	50060800 	.word	0x50060800
 8000e94:	20000214 	.word	0x20000214

08000e98 <print_start_screen>:
 *      Author: D4nny
 */

#include "Screen.h"

void print_start_screen() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
    uart_clear_screen();
 8000e9e:	f000 fd17 	bl	80018d0 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 8000ea2:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <print_start_screen+0x38>)
 8000ea4:	f000 fd06 	bl	80018b4 <uart_send_escape>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	e009      	b.n	8000ec2 <print_start_screen+0x2a>
        uart_println(START_SCREEN[i]);
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <print_start_screen+0x3c>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fcec 	bl	8001894 <uart_println>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	ddf2      	ble.n	8000eae <print_start_screen+0x16>
    }

    return;
 8000ec8:	bf00      	nop
}
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08003e44 	.word	0x08003e44
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <print_game_over>:

void print_game_over(uint8_t score) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09c      	sub	sp, #112	@ 0x70
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
    char buf[100];
    uart_clear_screen();
 8000ee2:	f000 fcf5 	bl	80018d0 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 8000ee6:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <print_game_over+0x58>)
 8000ee8:	f000 fce4 	bl	80018b4 <uart_send_escape>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000ef0:	e009      	b.n	8000f06 <print_game_over+0x2e>
        uart_println(GAME_OVER_SCREEN[i]);
 8000ef2:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <print_game_over+0x5c>)
 8000ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fcca 	bl	8001894 <uart_println>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 8000f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f02:	3301      	adds	r3, #1
 8000f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	ddf2      	ble.n	8000ef2 <print_game_over+0x1a>
    }
    sprintf(buf, "Your Score: %u", score);
 8000f0c:	79fa      	ldrb	r2, [r7, #7]
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4909      	ldr	r1, [pc, #36]	@ (8000f38 <print_game_over+0x60>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 f9c3 	bl	80032a0 <siprintf>
    uart_println(buf);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fcb8 	bl	8001894 <uart_println>

    print_high_scores();
 8000f24:	f000 f80a 	bl	8000f3c <print_high_scores>
    return;
 8000f28:	bf00      	nop
}
 8000f2a:	3770      	adds	r7, #112	@ 0x70
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08003e44 	.word	0x08003e44
 8000f34:	20000028 	.word	0x20000028
 8000f38:	08003e48 	.word	0x08003e48

08000f3c <print_high_scores>:


void print_high_scores() {
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b0a6      	sub	sp, #152	@ 0x98
 8000f40:	af00      	add	r7, sp, #0
    HighScore_t tmp;
    char uart_buf[100];

    uart_println(" ====================================");
 8000f42:	481f      	ldr	r0, [pc, #124]	@ (8000fc0 <print_high_scores+0x84>)
 8000f44:	f000 fca6 	bl	8001894 <uart_println>
    uart_println("| Name          | Score              |");
 8000f48:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <print_high_scores+0x88>)
 8000f4a:	f000 fca3 	bl	8001894 <uart_println>
    uart_println(" ====================================");
 8000f4e:	481c      	ldr	r0, [pc, #112]	@ (8000fc0 <print_high_scores+0x84>)
 8000f50:	f000 fca0 	bl	8001894 <uart_println>

    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000f5a:	e029      	b.n	8000fb0 <print_high_scores+0x74>
        tmp = load_highscore(i);
 8000f5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	463b      	mov	r3, r7
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f9e4 	bl	8000334 <load_highscore>
 8000f6c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000f70:	463d      	mov	r5, r7
 8000f72:	6828      	ldr	r0, [r5, #0]
 8000f74:	6869      	ldr	r1, [r5, #4]
 8000f76:	68aa      	ldr	r2, [r5, #8]
 8000f78:	68eb      	ldr	r3, [r5, #12]
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	6928      	ldr	r0, [r5, #16]
 8000f7e:	6020      	str	r0, [r4, #0]
 8000f80:	7d2b      	ldrb	r3, [r5, #20]
 8000f82:	7123      	strb	r3, [r4, #4]
        sprintf(uart_buf, "| %-13s | %-18u |", tmp.name, tmp.score);
 8000f84:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8000f88:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000f8c:	f107 0018 	add.w	r0, r7, #24
 8000f90:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <print_high_scores+0x8c>)
 8000f92:	f002 f985 	bl	80032a0 <siprintf>
        uart_println(uart_buf);
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fc7a 	bl	8001894 <uart_println>
        uart_println(" ====================================");
 8000fa0:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <print_high_scores+0x84>)
 8000fa2:	f000 fc77 	bl	8001894 <uart_println>
    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 8000fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	ddd1      	ble.n	8000f5c <print_high_scores+0x20>
    }


    return;
 8000fb8:	bf00      	nop
}
 8000fba:	3798      	adds	r7, #152	@ 0x98
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc0:	08003e58 	.word	0x08003e58
 8000fc4:	08003e80 	.word	0x08003e80
 8000fc8:	08003ea8 	.word	0x08003ea8

08000fcc <i2c_pin_init>:
 *      Author: danny
 */

#include "eeprom.h"

void i2c_pin_init() {
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    // PB8 - SCL
    // PB9 - SDA
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <i2c_pin_init+0x70>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	4a19      	ldr	r2, [pc, #100]	@ (800103c <i2c_pin_init+0x70>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	64d3      	str	r3, [r2, #76]	@ 0x4c

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <i2c_pin_init+0x74>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe0:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <i2c_pin_init+0x74>)
 8000fe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fe6:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (I2C_AF << GPIO_AFRH_AFSEL8_Pos | I2C_AF << GPIO_AFRH_AFSEL9_Pos);
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <i2c_pin_init+0x74>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <i2c_pin_init+0x74>)
 8000fee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000ff2:	6253      	str	r3, [r2, #36]	@ 0x24

    GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <i2c_pin_init+0x74>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <i2c_pin_init+0x74>)
 8000ffa:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000ffe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <i2c_pin_init+0x74>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <i2c_pin_init+0x74>)
 8001006:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800100a:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9);
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <i2c_pin_init+0x74>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <i2c_pin_init+0x74>)
 8001012:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001016:	60d3      	str	r3, [r2, #12]
    GPIOB->OTYPER |= GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <i2c_pin_init+0x74>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <i2c_pin_init+0x74>)
 800101e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001022:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <i2c_pin_init+0x74>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <i2c_pin_init+0x74>)
 800102a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800102e:	6093      	str	r3, [r2, #8]

    return;
 8001030:	bf00      	nop
}
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <eeprom_init>:


void eeprom_init() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    i2c_pin_init();
 8001048:	f7ff ffc0 	bl	8000fcc <i2c_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <eeprom_init+0x5c>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <eeprom_init+0x5c>)
 8001052:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001056:	6593      	str	r3, [r2, #88]	@ 0x58
    
    // clear PE
    I2C1->CR1 &= ~I2C_CR1_PE;
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <eeprom_init+0x60>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <eeprom_init+0x60>)
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

    // configure ANFOFF DNF
    I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <eeprom_init+0x60>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <eeprom_init+0x60>)
 800106a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800106e:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <eeprom_init+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <eeprom_init+0x60>)
 8001076:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800107a:	6013      	str	r3, [r2, #0]

    I2C1->TIMINGR = MAGIC_IOC_TIMING;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <eeprom_init+0x60>)
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <eeprom_init+0x64>)
 8001080:	611a      	str	r2, [r3, #16]

    // configure NOSTRETCH
    I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <eeprom_init+0x60>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <eeprom_init+0x60>)
 8001088:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800108c:	6013      	str	r3, [r2, #0]

    // set PE
    I2C1->CR1 |= I2C_CR1_PE;
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <eeprom_init+0x60>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <eeprom_init+0x60>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6013      	str	r3, [r2, #0]


    return;
 800109a:	bf00      	nop
}
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40005400 	.word	0x40005400
 80010a8:	00300f38 	.word	0x00300f38

080010ac <eeprom_load_byte>:


    return;
}

uint8_t eeprom_load_byte(uint16_t addr) {
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;

    // configure i2c sending register
    while (I2C1->ISR & I2C_ISR_BUSY);
 80010b6:	bf00      	nop
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <eeprom_load_byte+0x90>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f9      	bne.n	80010b8 <eeprom_load_byte+0xc>
    I2C1->CR2 = (ADDRING_MODE << I2C_CR2_ADD10_Pos) |
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <eeprom_load_byte+0x90>)
 80010c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001140 <eeprom_load_byte+0x94>)
 80010c8:	605a      	str	r2, [r3, #4]
                (1 << I2C_CR2_START_Pos) | 
                (0 << I2C_CR2_AUTOEND_Pos) | 
                (BYTES_PER_ADDR << I2C_CR2_NBYTES_Pos);

    // send addr upper byte
    while (!(I2C1->ISR & I2C_ISR_TXE));
 80010ca:	bf00      	nop
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <eeprom_load_byte+0x90>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f9      	beq.n	80010cc <eeprom_load_byte+0x20>
    I2C1->TXDR = (addr >> 8) & 0xFF;
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <eeprom_load_byte+0x90>)
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	6293      	str	r3, [r2, #40]	@ 0x28

    // send addr lower byte
    while (!(I2C1->ISR & I2C_ISR_TXE));
 80010e4:	bf00      	nop
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <eeprom_load_byte+0x90>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f9      	beq.n	80010e6 <eeprom_load_byte+0x3a>
    I2C1->TXDR = addr & 0xFF;
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4a11      	ldr	r2, [pc, #68]	@ (800113c <eeprom_load_byte+0x90>)
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	6293      	str	r3, [r2, #40]	@ 0x28

    // wait
    while (!(I2C1->ISR & I2C_ISR_TC));
 80010fa:	bf00      	nop
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <eeprom_load_byte+0x90>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f9      	beq.n	80010fc <eeprom_load_byte+0x50>

    // configure i2c reg to read
    I2C1->CR2 = (ADDRING_MODE << I2C_CR2_ADD10_Pos) |
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <eeprom_load_byte+0x90>)
 800110a:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <eeprom_load_byte+0x98>)
 800110c:	605a      	str	r2, [r3, #4]
                (1 << I2C_CR2_RD_WRN_Pos) | 
                (1 << I2C_CR2_START_Pos) | 
                (0 << I2C_CR2_AUTOEND_Pos) | 
                (BYTES_PER_LOAD << I2C_CR2_NBYTES_Pos);

    while (!(I2C1->ISR & I2C_ISR_RXNE));
 800110e:	bf00      	nop
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <eeprom_load_byte+0x90>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f9      	beq.n	8001110 <eeprom_load_byte+0x64>
    data = I2C1->RXDR;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <eeprom_load_byte+0x90>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001120:	73fb      	strb	r3, [r7, #15]

    I2C1->CR2 |= I2C_CR2_NACK | I2C_CR2_STOP;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <eeprom_load_byte+0x90>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <eeprom_load_byte+0x90>)
 8001128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800112c:	6053      	str	r3, [r2, #4]

    return data;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40005400 	.word	0x40005400
 8001140:	000220a2 	.word	0x000220a2
 8001144:	000124a2 	.word	0x000124a2

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4907      	ldr	r1, [pc, #28]	@ (8001180 <__NVIC_EnableIRQ+0x38>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db12      	blt.n	80011bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	490a      	ldr	r1, [pc, #40]	@ (80011c8 <__NVIC_DisableIRQ+0x44>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	3320      	adds	r3, #32
 80011ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b0:	f3bf 8f4f 	dsb	sy
}
 80011b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b6:	f3bf 8f6f 	isb	sy
}
 80011ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100

080011cc <main>:
void change_fps(uint32_t fps);
volatile int start_frame = 0;

void SystemClock_Config(void);

int main(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0d4      	sub	sp, #336	@ 0x150
 80011d0:	af26      	add	r7, sp, #152	@ 0x98
    HAL_Init();
 80011d2:	f000 fbca 	bl	800196a <HAL_Init>
    SystemClock_Config();
 80011d6:	f000 f967 	bl	80014a8 <SystemClock_Config>

    rng_init();
 80011da:	f7ff fe21 	bl	8000e20 <rng_init>
    uart_init();
 80011de:	f000 fb01 	bl	80017e4 <uart_init>
    joystick_init();
 80011e2:	f7ff f9c5 	bl	8000570 <joystick_init>
    highscore_init();
 80011e6:	f7ff f843 	bl	8000270 <highscore_init>
        // store_highscore(tmp, i);
    // }

    Snake_t snake;
    Food_t food;
    GameState_t state = START;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    print_start_screen();
 80011f0:	f7ff fe52 	bl	8000e98 <print_start_screen>
    uint32_t fps;
    uint8_t high_score = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    

    int first_move = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    while (1) {
        switch (state) {
 8001200:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001204:	2b02      	cmp	r3, #2
 8001206:	f000 80b9 	beq.w	800137c <main+0x1b0>
 800120a:	2b02      	cmp	r3, #2
 800120c:	dcf8      	bgt.n	8001200 <main+0x34>
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <main+0x4c>
 8001212:	2b01      	cmp	r3, #1
 8001214:	d01f      	beq.n	8001256 <main+0x8a>
 8001216:	e7f3      	b.n	8001200 <main+0x34>
        case START:
            if (continue_on()) {
 8001218:	f000 f8f4 	bl	8001404 <continue_on>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 80cd 	beq.w	80013be <main+0x1f2>
                state = PLAYING;
 8001224:	2301      	movs	r3, #1
 8001226:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                grid_init(high_score);
 800122a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fa04 	bl	800063c <grid_init>
                snake_init(&snake);
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fae5 	bl	8000808 <snake_init>
                food = food_init();
 800123e:	f7ff fd7b 	bl	8000d38 <food_init>
 8001242:	4603      	mov	r3, r0
 8001244:	80bb      	strh	r3, [r7, #4]
                fps = START_FPS;
 8001246:	230a      	movs	r3, #10
 8001248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 800124c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001250:	f000 f8e0 	bl	8001414 <change_fps>

            }
            break;
 8001254:	e0b3      	b.n	80013be <main+0x1f2>
        case PLAYING:
            if (!first_move) {
 8001256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <main+0xac>
                if (snake_change_dir(&snake)) {
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fc70 	bl	8000b48 <snake_change_dir>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80a9 	beq.w	80013c2 <main+0x1f6>
                    first_move = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    break;
 8001276:	e0ab      	b.n	80013d0 <main+0x204>
                }
                continue;
            }

            if (!start_frame) continue;
 8001278:	4b56      	ldr	r3, [pc, #344]	@ (80013d4 <main+0x208>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a2 	beq.w	80013c6 <main+0x1fa>
            start_frame = 0;
 8001282:	4b54      	ldr	r3, [pc, #336]	@ (80013d4 <main+0x208>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

            snake_move(&snake);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fb67 	bl	8000960 <snake_move>
            if (snake_check_food(snake, food)) {
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 8001298:	4668      	mov	r0, sp
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	2290      	movs	r2, #144	@ 0x90
 80012a0:	4619      	mov	r1, r3
 80012a2:	f002 f851 	bl	8003348 <memcpy>
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ac:	f7ff fccc 	bl	8000c48 <snake_check_food>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d01a      	beq.n	80012ec <main+0x120>
                snake_eat(&snake, &food);
 80012b6:	1d3a      	adds	r2, r7, #4
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd1d 	bl	8000cfe <snake_eat>
                fps *= SPEED_UP_FACTOR;
 80012c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80013d8 <main+0x20c>
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012dc:	ee17 3a90 	vmov	r3, s15
 80012e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 80012e4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80012e8:	f000 f894 	bl	8001414 <change_fps>
            }
            grid_draw(snake, food);
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 80012f2:	4668      	mov	r0, sp
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	2290      	movs	r2, #144	@ 0x90
 80012fa:	4619      	mov	r1, r3
 80012fc:	f002 f824 	bl	8003348 <memcpy>
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001306:	f7ff fa1b 	bl	8000740 <grid_draw>

            if (!snake.alive) {
 800130a:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800130e:	2b00      	cmp	r3, #0
 8001310:	d15b      	bne.n	80013ca <main+0x1fe>
                state = GAME_OVER;
 8001312:	2302      	movs	r3, #2
 8001314:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                if (snake_get_score(snake) > high_score) high_score = snake_get_score(snake);
 8001318:	4668      	mov	r0, sp
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	2290      	movs	r2, #144	@ 0x90
 8001320:	4619      	mov	r1, r3
 8001322:	f002 f811 	bl	8003348 <memcpy>
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132c:	f7ff fcf6 	bl	8000d1c <snake_get_score>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001338:	4293      	cmp	r3, r2
 800133a:	d20e      	bcs.n	800135a <main+0x18e>
 800133c:	4668      	mov	r0, sp
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	2290      	movs	r2, #144	@ 0x90
 8001344:	4619      	mov	r1, r3
 8001346:	f001 ffff 	bl	8003348 <memcpy>
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001350:	f7ff fce4 	bl	8000d1c <snake_get_score>
 8001354:	4603      	mov	r3, r0
 8001356:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                print_game_over(snake_get_score(snake));
 800135a:	4668      	mov	r0, sp
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	2290      	movs	r2, #144	@ 0x90
 8001362:	4619      	mov	r1, r3
 8001364:	f001 fff0 	bl	8003348 <memcpy>
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136e:	f7ff fcd5 	bl	8000d1c <snake_get_score>
 8001372:	4603      	mov	r3, r0
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fdaf 	bl	8000ed8 <print_game_over>
            }
            break;
 800137a:	e026      	b.n	80013ca <main+0x1fe>
        case GAME_OVER:
            if (continue_on()) {
 800137c:	f000 f842 	bl	8001404 <continue_on>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d023      	beq.n	80013ce <main+0x202>
            	state = PLAYING;
 8001386:	2301      	movs	r3, #1
 8001388:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            	grid_init(high_score);
 800138c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f953 	bl	800063c <grid_init>
            	snake_init(&snake);
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fa34 	bl	8000808 <snake_init>
            	food = food_init();
 80013a0:	f7ff fcca 	bl	8000d38 <food_init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	80bb      	strh	r3, [r7, #4]
            	first_move = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                fps = START_FPS;
 80013ae:	230a      	movs	r3, #10
 80013b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 80013b4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80013b8:	f000 f82c 	bl	8001414 <change_fps>
            }
            break;
 80013bc:	e007      	b.n	80013ce <main+0x202>
            break;
 80013be:	bf00      	nop
 80013c0:	e71e      	b.n	8001200 <main+0x34>
                continue;
 80013c2:	bf00      	nop
 80013c4:	e71c      	b.n	8001200 <main+0x34>
            if (!start_frame) continue;
 80013c6:	bf00      	nop
 80013c8:	e71a      	b.n	8001200 <main+0x34>
            break;
 80013ca:	bf00      	nop
 80013cc:	e718      	b.n	8001200 <main+0x34>
            break;
 80013ce:	bf00      	nop
        switch (state) {
 80013d0:	e716      	b.n	8001200 <main+0x34>
 80013d2:	bf00      	nop
 80013d4:	20000218 	.word	0x20000218
 80013d8:	3f933333 	.word	0x3f933333

080013dc <TIM2_IRQHandler>:

    return 0;
}


void TIM2_IRQHandler() {
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
    start_frame = 1;
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <TIM2_IRQHandler+0x24>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
    TIM2->SR &= ~TIM_SR_UIF;
 80013e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6113      	str	r3, [r2, #16]

    return;
 80013f6:	bf00      	nop
}
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	20000218 	.word	0x20000218

08001404 <continue_on>:

int continue_on() {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    return get_joystick_button();
 8001408:	f7ff f8ee 	bl	80005e8 <get_joystick_button>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <change_fps>:


void change_fps(uint32_t fps) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <change_fps+0x8c>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	4a1f      	ldr	r2, [pc, #124]	@ (80014a0 <change_fps+0x8c>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 8001428:	201c      	movs	r0, #28
 800142a:	f7ff feab 	bl	8001184 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 800142e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 800143e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~TIM_SR_UIF;  
 8001446:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	6113      	str	r3, [r2, #16]
    
    
    TIM2->ARR = CPU_FREQ / fps;
 8001456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145a:	4912      	ldr	r1, [pc, #72]	@ (80014a4 <change_fps+0x90>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001462:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 8001464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER |= TIM_DIER_UIE;
 800146c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	60d3      	str	r3, [r2, #12]

//    DBGMCU->APB1FZR1 |= 1;

    NVIC_EnableIRQ(TIM2_IRQn);
 800147c:	201c      	movs	r0, #28
 800147e:	f7ff fe63 	bl	8001148 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001482:	b662      	cpsie	i
}
 8001484:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8001486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]
    return;
 8001496:	bf00      	nop


}
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	01e84800 	.word	0x01e84800

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b096      	sub	sp, #88	@ 0x58
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2244      	movs	r2, #68	@ 0x44
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 ff12 	bl	80032e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014ce:	f000 fbb5 	bl	8001c3c <HAL_PWREx_ControlVoltageScaling>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014d8:	f000 f838 	bl	800154c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014dc:	2310      	movs	r3, #16
 80014de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014e8:	2360      	movs	r3, #96	@ 0x60
 80014ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80014f8:	2310      	movs	r3, #16
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014fc:	2307      	movs	r3, #7
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001504:	2302      	movs	r3, #2
 8001506:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fbeb 	bl	8001ce8 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001518:	f000 f818 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2303      	movs	r3, #3
 8001522:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f000 ffb3 	bl	80024a0 <HAL_RCC_ClockConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001540:	f000 f804 	bl	800154c <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	3758      	adds	r7, #88	@ 0x58
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001562:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <HAL_MspInit+0x44>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6613      	str	r3, [r2, #96]	@ 0x60
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_MspInit+0x44>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	@ 0x58
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0a6      	sub	sp, #152	@ 0x98
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2288      	movs	r2, #136	@ 0x88
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 fe95 	bl	80032e0 <memset>
  if(hrng->Instance==RNG)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_RNG_MspInit+0x80>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d12b      	bne.n	8001618 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80015c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80015c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80015c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80015d6:	2310      	movs	r3, #16
 80015d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015da:	2307      	movs	r3, #7
 80015dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015de:	2302      	movs	r3, #2
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80015e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f001 f941 	bl	8002878 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80015fc:	f7ff ffa6 	bl	800154c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <HAL_RNG_MspInit+0x84>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <HAL_RNG_MspInit+0x84>)
 8001606:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_RNG_MspInit+0x84>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3798      	adds	r7, #152	@ 0x98
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	50060800 	.word	0x50060800
 8001624:	40021000 	.word	0x40021000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <NMI_Handler+0x4>

08001630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <MemManage_Handler+0x4>

08001640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <UsageFault_Handler+0x4>

08001650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167e:	f000 f9c9 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f001 fe1a 	bl	80032f0 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20018000 	.word	0x20018000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	2000021c 	.word	0x2000021c
 80016f0:	20000378 	.word	0x20000378

080016f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <uart_pin_init+0x8c>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <uart_pin_init+0x8c>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8001764:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800176e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001772:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8001774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800177e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001782:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001784:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800178e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001792:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001794:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800179e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80017a2:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 80017a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80017ae:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80017b2:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 80017b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80017be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017c2:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 80017c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80017ce:	f023 030c 	bic.w	r3, r3, #12
 80017d2:	6053      	str	r3, [r2, #4]
    return;
 80017d4:	bf00      	nop
}
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
    uart_pin_init();
 80017e8:	f7ff ffb4 	bl	8001754 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <uart_init+0x48>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <uart_init+0x48>)
 80017f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f6:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <uart_init+0x4c>)
 80017fa:	222c      	movs	r2, #44	@ 0x2c
 80017fc:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <uart_init+0x4c>)
 8001800:	f240 1215 	movw	r2, #277	@ 0x115
 8001804:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 8001806:	2026      	movs	r0, #38	@ 0x26
 8001808:	f7ff ff86 	bl	8001718 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800180c:	b662      	cpsie	i
}
 800180e:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <uart_init+0x4c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <uart_init+0x4c>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 800181c:	f000 f858 	bl	80018d0 <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 8001820:	4804      	ldr	r0, [pc, #16]	@ (8001834 <uart_init+0x50>)
 8001822:	f000 f847 	bl	80018b4 <uart_send_escape>
    return;
 8001826:	bf00      	nop
}
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	40004400 	.word	0x40004400
 8001834:	08003ebc 	.word	0x08003ebc

08001838 <uart_send_char>:

void uart_send_char(char c) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8001842:	bf00      	nop
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <uart_send_char+0x2c>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f9      	beq.n	8001844 <uart_send_char+0xc>
    USART2->TDR = c;
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <uart_send_char+0x2c>)
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	b292      	uxth	r2, r2
 8001856:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8001858:	bf00      	nop
}
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40004400 	.word	0x40004400

08001868 <uart_send_string>:

void uart_send_string(const char* str) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8001870:	e007      	b.n	8001882 <uart_send_string+0x1a>
        uart_send_char(*str);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ffde 	bl	8001838 <uart_send_char>
        str++;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3301      	adds	r3, #1
 8001880:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f3      	bne.n	8001872 <uart_send_string+0xa>
    }

    return;
 800188a:	bf00      	nop
}
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <uart_println>:

void uart_println(const char* str) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    uart_send_string(str);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe3 	bl	8001868 <uart_send_string>
    uart_send_escape("[1E");
 80018a2:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <uart_println+0x1c>)
 80018a4:	f000 f806 	bl	80018b4 <uart_send_escape>

    return;
 80018a8:	bf00      	nop
}
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	08003ec4 	.word	0x08003ec4

080018b4 <uart_send_escape>:

void uart_send_escape(const char* str) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 80018bc:	201b      	movs	r0, #27
 80018be:	f7ff ffbb 	bl	8001838 <uart_send_char>
    uart_send_string(str);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffd0 	bl	8001868 <uart_send_string>

    return;
 80018c8:	bf00      	nop
}
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <uart_clear_screen>:


void uart_clear_screen(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 80018d4:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <uart_clear_screen+0x14>)
 80018d6:	f7ff ffed 	bl	80018b4 <uart_send_escape>
    uart_send_escape("[H");
 80018da:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <uart_clear_screen+0x18>)
 80018dc:	f7ff ffea 	bl	80018b4 <uart_send_escape>

    return;
 80018e0:	bf00      	nop
}
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08003ec8 	.word	0x08003ec8
 80018e8:	08003ecc 	.word	0x08003ecc

080018ec <USART2_IRQHandler>:
    uart_send_escape(buf);

    return;
}

void USART2_IRQHandler(void) {
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <USART2_IRQHandler+0x20>)
 80018f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <USART2_IRQHandler+0x24>)
 80018fa:	701a      	strb	r2, [r3, #0]
    flag = 1;
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <USART2_IRQHandler+0x28>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
    return;
 8001902:	bf00      	nop
}
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40004400 	.word	0x40004400
 8001910:	20000224 	.word	0x20000224
 8001914:	20000220 	.word	0x20000220

08001918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800191c:	f7ff feea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f001 fcd9 	bl	80032fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194a:	f7ff fc3f 	bl	80011cc <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001950:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800195c:	08003f5c 	.word	0x08003f5c
  ldr r2, =_sbss
 8001960:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001964:	20000374 	.word	0x20000374

08001968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_2_IRQHandler>

0800196a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f91f 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197a:	200f      	movs	r0, #15
 800197c:	f000 f80e 	bl	800199c <HAL_InitTick>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	e001      	b.n	8001990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800198c:	f7ff fde4 	bl	8001558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001990:	79fb      	ldrb	r3, [r7, #7]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_InitTick+0x6c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_InitTick+0x70>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_InitTick+0x6c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f91d 	bl	8001c06 <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d809      	bhi.n	80019ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019e0:	f000 f8f5 	bl	8001bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <HAL_InitTick+0x74>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e007      	b.n	80019fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e004      	b.n	80019fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e001      	b.n	80019fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000058 	.word	0x20000058
 8001a0c:	20000050 	.word	0x20000050
 8001a10:	20000054 	.word	0x20000054

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000058 	.word	0x20000058
 8001a38:	20000228 	.word	0x20000228

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000228 	.word	0x20000228

08001a54 <__NVIC_SetPriorityGrouping>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	@ (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	@ (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	@ 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	@ 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b84:	d301      	bcc.n	8001b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00f      	b.n	8001baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <SysTick_Config+0x40>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b92:	210f      	movs	r1, #15
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b98:	f7ff ff8e 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <SysTick_Config+0x40>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <SysTick_Config+0x40>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff47 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff5c 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff8e 	bl	8001b0c <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffb0 	bl	8001b74 <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c4a:	d130      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c58:	d038      	beq.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c62:	4a1e      	ldr	r2, [pc, #120]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2232      	movs	r2, #50	@ 0x32
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0c9b      	lsrs	r3, r3, #18
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c80:	e002      	b.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c94:	d102      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f2      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca8:	d110      	bne.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e00f      	b.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d007      	beq.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cc4:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	20000050 	.word	0x20000050
 8001ce4:	431bde83 	.word	0x431bde83

08001ce8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e3ca      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4b97      	ldr	r3, [pc, #604]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d04:	4b94      	ldr	r3, [pc, #592]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80e4 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_RCC_OscConfig+0x4a>
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	f040 808b 	bne.w	8001e40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	f040 8087 	bne.w	8001e40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d32:	4b89      	ldr	r3, [pc, #548]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x62>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e3a2      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	4b82      	ldr	r3, [pc, #520]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_RCC_OscConfig+0x7c>
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d62:	e005      	b.n	8001d70 <HAL_RCC_OscConfig+0x88>
 8001d64:	4b7c      	ldr	r3, [pc, #496]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d223      	bcs.n	8001dbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fd1d 	bl	80027b8 <RCC_SetFlashLatencyFromMSIRange>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e383      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d88:	4b73      	ldr	r3, [pc, #460]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a72      	ldr	r2, [pc, #456]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b70      	ldr	r3, [pc, #448]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	496d      	ldr	r1, [pc, #436]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	4968      	ldr	r1, [pc, #416]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e025      	b.n	8001e08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbc:	4b66      	ldr	r3, [pc, #408]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a65      	ldr	r2, [pc, #404]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b63      	ldr	r3, [pc, #396]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4960      	ldr	r1, [pc, #384]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dda:	4b5f      	ldr	r3, [pc, #380]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	495b      	ldr	r1, [pc, #364]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fcdd 	bl	80027b8 <RCC_SetFlashLatencyFromMSIRange>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e343      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e08:	f000 fc4a 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b52      	ldr	r3, [pc, #328]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	4950      	ldr	r1, [pc, #320]	@ (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	4a4e      	ldr	r2, [pc, #312]	@ (8001f60 <HAL_RCC_OscConfig+0x278>)
 8001e26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e28:	4b4e      	ldr	r3, [pc, #312]	@ (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fdb5 	bl	800199c <HAL_InitTick>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d052      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	e327      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d032      	beq.n	8001eae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e48:	4b43      	ldr	r3, [pc, #268]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a42      	ldr	r2, [pc, #264]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fdf2 	bl	8001a3c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fdee 	bl	8001a3c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e310      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7a:	4b37      	ldr	r3, [pc, #220]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a36      	ldr	r2, [pc, #216]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4931      	ldr	r1, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	492c      	ldr	r1, [pc, #176]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
 8001eac:	e01a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eba:	f7ff fdbf 	bl	8001a3c <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fdbb 	bl	8001a3c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e2dd      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed4:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x1da>
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d074      	beq.n	8001fda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x21a>
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d10e      	bne.n	8001f1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d064      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d160      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e2ba      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x24a>
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e026      	b.n	8001f80 <HAL_RCC_OscConfig+0x298>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f3a:	d115      	bne.n	8001f68 <HAL_RCC_OscConfig+0x280>
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a02      	ldr	r2, [pc, #8]	@ (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x298>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08003ed8 	.word	0x08003ed8
 8001f60:	20000050 	.word	0x20000050
 8001f64:	20000054 	.word	0x20000054
 8001f68:	4ba0      	ldr	r3, [pc, #640]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a9f      	ldr	r2, [pc, #636]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b9d      	ldr	r3, [pc, #628]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a9c      	ldr	r2, [pc, #624]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fd58 	bl	8001a3c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fd54 	bl	8001a3c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e276      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa2:	4b92      	ldr	r3, [pc, #584]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2a8>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fd44 	bl	8001a3c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fd40 	bl	8001a3c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	@ 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e262      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fca:	4b88      	ldr	r3, [pc, #544]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2d0>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d060      	beq.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x310>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d119      	bne.n	8002026 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d116      	bne.n	8002026 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x328>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e23f      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	4973      	ldr	r1, [pc, #460]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002024:	e040      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d023      	beq.n	8002076 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202e:	4b6f      	ldr	r3, [pc, #444]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6e      	ldr	r2, [pc, #440]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff fcff 	bl	8001a3c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff fcfb 	bl	8001a3c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e21d      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4b65      	ldr	r3, [pc, #404]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b62      	ldr	r3, [pc, #392]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	495f      	ldr	r1, [pc, #380]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	e018      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5c      	ldr	r2, [pc, #368]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800207c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff fcdb 	bl	8001a3c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff fcd7 	bl	8001a3c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1f9      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d03c      	beq.n	800212e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020bc:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c2:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff fcb6 	bl	8001a3c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff fcb2 	bl	8001a3c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1d4      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e6:	4b41      	ldr	r3, [pc, #260]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ef      	beq.n	80020d4 <HAL_RCC_OscConfig+0x3ec>
 80020f4:	e01b      	b.n	800212e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fc:	4a3b      	ldr	r2, [pc, #236]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7ff fc99 	bl	8001a3c <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210e:	f7ff fc95 	bl	8001a3c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1b7      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ef      	bne.n	800210e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a6 	beq.w	8002288 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002140:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	4a26      	ldr	r2, [pc, #152]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	@ 0x58
 8002158:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d118      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002174:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002180:	f7ff fc5c 	bl	8001a3c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002188:	f7ff fc58 	bl	8001a3c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e17a      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_RCC_OscConfig+0x508>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4d8>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021be:	e029      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d115      	bne.n	80021f4 <HAL_RCC_OscConfig+0x50c>
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a03      	ldr	r2, [pc, #12]	@ (80021ec <HAL_RCC_OscConfig+0x504>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
 80021f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	4a9b      	ldr	r2, [pc, #620]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002204:	4b98      	ldr	r3, [pc, #608]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220a:	4a97      	ldr	r2, [pc, #604]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d016      	beq.n	800224a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff fc0e 	bl	8001a3c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7ff fc0a 	bl	8001a3c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e12a      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b8b      	ldr	r3, [pc, #556]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ed      	beq.n	8002224 <HAL_RCC_OscConfig+0x53c>
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7ff fbf7 	bl	8001a3c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7ff fbf3 	bl	8001a3c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e113      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002268:	4b7f      	ldr	r3, [pc, #508]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ed      	bne.n	8002252 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002276:	7ffb      	ldrb	r3, [r7, #31]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b7a      	ldr	r3, [pc, #488]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	4a79      	ldr	r2, [pc, #484]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80fe 	beq.w	800248e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	2b02      	cmp	r3, #2
 8002298:	f040 80d0 	bne.w	800243c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800229c:	4b72      	ldr	r3, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0203 	and.w	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d130      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	3b01      	subs	r3, #1
 80022bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d127      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d11f      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022dc:	2a07      	cmp	r2, #7
 80022de:	bf14      	ite	ne
 80022e0:	2201      	movne	r2, #1
 80022e2:	2200      	moveq	r2, #0
 80022e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d113      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d109      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d06e      	beq.n	80023f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b0c      	cmp	r3, #12
 8002316:	d069      	beq.n	80023ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002318:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0ad      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002334:	4b4c      	ldr	r3, [pc, #304]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4b      	ldr	r2, [pc, #300]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002340:	f7ff fb7c 	bl	8001a3c <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff fb78 	bl	8001a3c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e09a      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235a:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002366:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_RCC_OscConfig+0x784>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002376:	3a01      	subs	r2, #1
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002380:	0212      	lsls	r2, r2, #8
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002388:	0852      	lsrs	r2, r2, #1
 800238a:	3a01      	subs	r2, #1
 800238c:	0552      	lsls	r2, r2, #21
 800238e:	4311      	orrs	r1, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002394:	0852      	lsrs	r2, r2, #1
 8002396:	3a01      	subs	r2, #1
 8002398:	0652      	lsls	r2, r2, #25
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023a0:	0912      	lsrs	r2, r2, #4
 80023a2:	0452      	lsls	r2, r2, #17
 80023a4:	430a      	orrs	r2, r1
 80023a6:	4930      	ldr	r1, [pc, #192]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c4:	f7ff fb3a 	bl	8001a3c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff fb36 	bl	8001a3c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e058      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ea:	e050      	b.n	800248e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e04f      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d148      	bne.n	800248e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002408:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002412:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002414:	f7ff fb12 	bl	8001a3c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff fb0e 	bl	8001a3c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e030      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x734>
 800243a:	e028      	b.n	800248e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d023      	beq.n	800248a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <HAL_RCC_OscConfig+0x780>)
 8002448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7ff faf5 	bl	8001a3c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	e00c      	b.n	8002470 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7ff faf1 	bl	8001a3c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d905      	bls.n	8002470 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e013      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
 8002468:	40021000 	.word	0x40021000
 800246c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002470:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_RCC_OscConfig+0x7b0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ec      	bne.n	8002456 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x7b0>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4905      	ldr	r1, [pc, #20]	@ (8002498 <HAL_RCC_OscConfig+0x7b0>)
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_RCC_OscConfig+0x7b4>)
 8002484:	4013      	ands	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
 8002488:	e001      	b.n	800248e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	feeefffc 	.word	0xfeeefffc

080024a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0e7      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b4:	4b75      	ldr	r3, [pc, #468]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d910      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b72      	ldr	r3, [pc, #456]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0207 	bic.w	r2, r3, #7
 80024ca:	4970      	ldr	r1, [pc, #448]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b6e      	ldr	r3, [pc, #440]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0cf      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d908      	bls.n	8002512 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b63      	ldr	r3, [pc, #396]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4960      	ldr	r1, [pc, #384]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04c      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	4b5a      	ldr	r3, [pc, #360]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d121      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0a6      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253e:	4b54      	ldr	r3, [pc, #336]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d115      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e09a      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002556:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e08e      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002566:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e086      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002576:	4b46      	ldr	r3, [pc, #280]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4943      	ldr	r1, [pc, #268]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7ff fa58 	bl	8001a3c <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7ff fa54 	bl	8001a3c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e06e      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1eb      	bne.n	8002590 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	4b31      	ldr	r3, [pc, #196]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d208      	bcs.n	80025e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	492b      	ldr	r1, [pc, #172]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d210      	bcs.n	8002616 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f4:	4b25      	ldr	r3, [pc, #148]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 0207 	bic.w	r2, r3, #7
 80025fc:	4923      	ldr	r1, [pc, #140]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002604:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_RCC_ClockConfig+0x1ec>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e036      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4918      	ldr	r1, [pc, #96]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4910      	ldr	r1, [pc, #64]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	4313      	orrs	r3, r2
 8002652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002654:	f000 f824 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	490b      	ldr	r1, [pc, #44]	@ (8002694 <HAL_RCC_ClockConfig+0x1f4>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
 8002670:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1fc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f98f 	bl	800199c <HAL_InitTick>
 800267e:	4603      	mov	r3, r0
 8002680:	72fb      	strb	r3, [r7, #11]

  return status;
 8002682:	7afb      	ldrb	r3, [r7, #11]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	08003ed8 	.word	0x08003ed8
 8002698:	20000050 	.word	0x20000050
 800269c:	20000054 	.word	0x20000054

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	@ 0x24
 80026a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b8:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d11e      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026d4:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026e0:	4b31      	ldr	r3, [pc, #196]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e005      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026fc:	4a2b      	ldr	r2, [pc, #172]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d102      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	e004      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d101      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002724:	4b23      	ldr	r3, [pc, #140]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d134      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0xa6>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d003      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0xac>
 8002744:	e005      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002746:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002748:	617b      	str	r3, [r7, #20]
      break;
 800274a:	e005      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800274e:	617b      	str	r3, [r7, #20]
      break;
 8002750:	e002      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	617b      	str	r3, [r7, #20]
      break;
 8002756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	3301      	adds	r3, #1
 8002764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	fb03 f202 	mul.w	r2, r3, r2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800277e:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	0e5b      	lsrs	r3, r3, #25
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	3301      	adds	r3, #1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002798:	69bb      	ldr	r3, [r7, #24]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08003ee8 	.word	0x08003ee8
 80027b0:	00f42400 	.word	0x00f42400
 80027b4:	007a1200 	.word	0x007a1200

080027b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027d0:	f7ff fa26 	bl	8001c20 <HAL_PWREx_GetVoltageRange>
 80027d4:	6178      	str	r0, [r7, #20]
 80027d6:	e014      	b.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e4:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027f0:	f7ff fa16 	bl	8001c20 <HAL_PWREx_GetVoltageRange>
 80027f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002800:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002808:	d10b      	bne.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b80      	cmp	r3, #128	@ 0x80
 800280e:	d919      	bls.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2ba0      	cmp	r3, #160	@ 0xa0
 8002814:	d902      	bls.n	800281c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002816:	2302      	movs	r3, #2
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e013      	b.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800281c:	2301      	movs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e010      	b.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b80      	cmp	r3, #128	@ 0x80
 8002826:	d902      	bls.n	800282e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002828:	2303      	movs	r3, #3
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e00a      	b.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b80      	cmp	r3, #128	@ 0x80
 8002832:	d102      	bne.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002834:	2302      	movs	r3, #2
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	e004      	b.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b70      	cmp	r3, #112	@ 0x70
 800283e:	d101      	bne.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002840:	2301      	movs	r3, #1
 8002842:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 0207 	bic.w	r2, r3, #7
 800284c:	4909      	ldr	r1, [pc, #36]	@ (8002874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002854:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	429a      	cmp	r2, r3
 8002860:	d001      	beq.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	40022000 	.word	0x40022000

08002878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002880:	2300      	movs	r3, #0
 8002882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002884:	2300      	movs	r3, #0
 8002886:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002890:	2b00      	cmp	r3, #0
 8002892:	d041      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002898:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800289c:	d02a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800289e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028a2:	d824      	bhi.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ae:	d81e      	bhi.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b8:	d010      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ba:	e018      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028bc:	4b86      	ldr	r3, [pc, #536]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a85      	ldr	r2, [pc, #532]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c8:	e015      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fabb 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 80028d6:	4603      	mov	r3, r0
 80028d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028da:	e00c      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3320      	adds	r3, #32
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fba6 	bl	8003034 <RCCEx_PLLSAI2_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ec:	e003      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	74fb      	strb	r3, [r7, #19]
      break;
 80028f2:	e000      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028fc:	4b76      	ldr	r3, [pc, #472]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002902:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800290a:	4973      	ldr	r1, [pc, #460]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002912:	e001      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d041      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002928:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800292c:	d02a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800292e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002932:	d824      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002934:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800293a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800293e:	d81e      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002948:	d010      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800294a:	e018      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800294c:	4b62      	ldr	r3, [pc, #392]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a61      	ldr	r2, [pc, #388]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002956:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002958:	e015      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fa73 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800296a:	e00c      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3320      	adds	r3, #32
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fb5e 	bl	8003034 <RCCEx_PLLSAI2_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800297c:	e003      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	74fb      	strb	r3, [r7, #19]
      break;
 8002982:	e000      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800298c:	4b52      	ldr	r3, [pc, #328]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002992:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800299a:	494f      	ldr	r1, [pc, #316]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029a2:	e001      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a0 	beq.w	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ba:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	4a40      	ldr	r2, [pc, #256]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029da:	6593      	str	r3, [r2, #88]	@ 0x58
 80029dc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ec:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a3a      	ldr	r2, [pc, #232]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f8:	f7ff f820 	bl	8001a3c <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029fe:	e009      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7ff f81c 	bl	8001a3c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d902      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	74fb      	strb	r3, [r7, #19]
        break;
 8002a12:	e005      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a14:	4b31      	ldr	r3, [pc, #196]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d15c      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a26:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d019      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a44:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	4a20      	ldr	r2, [pc, #128]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe ffdb 	bl	8001a3c <HAL_GetTick>
 8002a86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe ffd7 	bl	8001a3c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d902      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	74fb      	strb	r3, [r7, #19]
            break;
 8002aa0:	e006      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ec      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab6:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ac6:	4904      	ldr	r1, [pc, #16]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ace:	e009      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae4:	7c7b      	ldrb	r3, [r7, #17]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4b9e      	ldr	r3, [pc, #632]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	4a9d      	ldr	r2, [pc, #628]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b02:	4b98      	ldr	r3, [pc, #608]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b08:	f023 0203 	bic.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	4994      	ldr	r1, [pc, #592]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b24:	4b8f      	ldr	r3, [pc, #572]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2a:	f023 020c 	bic.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	498c      	ldr	r1, [pc, #560]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b46:	4b87      	ldr	r3, [pc, #540]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	4983      	ldr	r1, [pc, #524]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b68:	4b7e      	ldr	r3, [pc, #504]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	497b      	ldr	r1, [pc, #492]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b8a:	4b76      	ldr	r3, [pc, #472]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b98:	4972      	ldr	r1, [pc, #456]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bac:	4b6d      	ldr	r3, [pc, #436]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bba:	496a      	ldr	r1, [pc, #424]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bce:	4b65      	ldr	r3, [pc, #404]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	4961      	ldr	r1, [pc, #388]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	4959      	ldr	r1, [pc, #356]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c12:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c20:	4950      	ldr	r1, [pc, #320]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c34:	4b4b      	ldr	r3, [pc, #300]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	4948      	ldr	r1, [pc, #288]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c56:	4b43      	ldr	r3, [pc, #268]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	493f      	ldr	r1, [pc, #252]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d028      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c78:	4b3a      	ldr	r3, [pc, #232]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c86:	4937      	ldr	r1, [pc, #220]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c98:	4b32      	ldr	r3, [pc, #200]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a31      	ldr	r2, [pc, #196]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ca2:	60d3      	str	r3, [r2, #12]
 8002ca4:	e011      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002caa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cae:	d10c      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f8c8 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d028      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd6:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cdc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	491f      	ldr	r1, [pc, #124]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d00:	60d3      	str	r3, [r2, #12]
 8002d02:	e011      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2101      	movs	r1, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f899 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d02b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d42:	4908      	ldr	r1, [pc, #32]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d52:	d109      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d54:	4b03      	ldr	r3, [pc, #12]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a02      	ldr	r2, [pc, #8]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5e:	60d3      	str	r3, [r2, #12]
 8002d60:	e014      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f867 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d02f      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d98:	4b2b      	ldr	r3, [pc, #172]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002da6:	4928      	ldr	r1, [pc, #160]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f844 	bl	8002e4c <RCCEx_PLLSAI1_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d014      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	74bb      	strb	r3, [r7, #18]
 8002dd2:	e011      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3320      	adds	r3, #32
 8002de2:	2102      	movs	r1, #2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f925 	bl	8003034 <RCCEx_PLLSAI2_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e12:	490d      	ldr	r1, [pc, #52]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e26:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e36:	4904      	ldr	r1, [pc, #16]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e5a:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d018      	beq.n	8002e98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e66:	4b72      	ldr	r3, [pc, #456]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10d      	bne.n	8002e92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
       ||
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d047      	beq.n	8002f22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	e044      	b.n	8002f22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d018      	beq.n	8002ed2 <RCCEx_PLLSAI1_Config+0x86>
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d825      	bhi.n	8002ef0 <RCCEx_PLLSAI1_Config+0xa4>
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <RCCEx_PLLSAI1_Config+0x62>
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d009      	beq.n	8002ec0 <RCCEx_PLLSAI1_Config+0x74>
 8002eac:	e020      	b.n	8002ef0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eae:	4b60      	ldr	r3, [pc, #384]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11d      	bne.n	8002ef6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ebe:	e01a      	b.n	8002ef6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ec0:	4b5b      	ldr	r3, [pc, #364]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d116      	bne.n	8002efa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed0:	e013      	b.n	8002efa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ed2:	4b57      	ldr	r3, [pc, #348]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10f      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ede:	4b54      	ldr	r3, [pc, #336]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eee:	e006      	b.n	8002efe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef4:	e004      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e002      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002efa:	bf00      	nop
 8002efc:	e000      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f06:	4b4a      	ldr	r3, [pc, #296]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	4944      	ldr	r1, [pc, #272]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d17d      	bne.n	8003024 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f28:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a40      	ldr	r2, [pc, #256]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe fd82 	bl	8001a3c <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f3a:	e009      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3c:	f7fe fd7e 	bl	8001a3c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4e:	e005      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f50:	4b37      	ldr	r3, [pc, #220]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ef      	bne.n	8002f3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d160      	bne.n	8003024 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	0211      	lsls	r1, r2, #8
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	0912      	lsrs	r2, r2, #4
 8002f80:	0452      	lsls	r2, r2, #17
 8002f82:	430a      	orrs	r2, r1
 8002f84:	492a      	ldr	r1, [pc, #168]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	610b      	str	r3, [r1, #16]
 8002f8a:	e027      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d112      	bne.n	8002fb8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f92:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6892      	ldr	r2, [r2, #8]
 8002fa2:	0211      	lsls	r1, r2, #8
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6912      	ldr	r2, [r2, #16]
 8002fa8:	0852      	lsrs	r2, r2, #1
 8002faa:	3a01      	subs	r2, #1
 8002fac:	0552      	lsls	r2, r2, #21
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	491f      	ldr	r1, [pc, #124]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	610b      	str	r3, [r1, #16]
 8002fb6:	e011      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6892      	ldr	r2, [r2, #8]
 8002fc8:	0211      	lsls	r1, r2, #8
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6952      	ldr	r2, [r2, #20]
 8002fce:	0852      	lsrs	r2, r2, #1
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	0652      	lsls	r2, r2, #25
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	4916      	ldr	r1, [pc, #88]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fdc:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a13      	ldr	r2, [pc, #76]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fd28 	bl	8001a3c <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fee:	e009      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff0:	f7fe fd24 	bl	8001a3c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	73fb      	strb	r3, [r7, #15]
          break;
 8003002:	e005      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003004:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	4904      	ldr	r1, [pc, #16]	@ (8003030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000

08003034 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003042:	4b6a      	ldr	r3, [pc, #424]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d018      	beq.n	8003080 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800304e:	4b67      	ldr	r3, [pc, #412]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0203 	and.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d10d      	bne.n	800307a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
       ||
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003066:	4b61      	ldr	r3, [pc, #388]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
       ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d047      	beq.n	800310a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	e044      	b.n	800310a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d018      	beq.n	80030ba <RCCEx_PLLSAI2_Config+0x86>
 8003088:	2b03      	cmp	r3, #3
 800308a:	d825      	bhi.n	80030d8 <RCCEx_PLLSAI2_Config+0xa4>
 800308c:	2b01      	cmp	r3, #1
 800308e:	d002      	beq.n	8003096 <RCCEx_PLLSAI2_Config+0x62>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d009      	beq.n	80030a8 <RCCEx_PLLSAI2_Config+0x74>
 8003094:	e020      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003096:	4b55      	ldr	r3, [pc, #340]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11d      	bne.n	80030de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a6:	e01a      	b.n	80030de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a8:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d116      	bne.n	80030e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b8:	e013      	b.n	80030e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ba:	4b4c      	ldr	r3, [pc, #304]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10f      	bne.n	80030e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030c6:	4b49      	ldr	r3, [pc, #292]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030d6:	e006      	b.n	80030e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e004      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030de:	bf00      	nop
 80030e0:	e002      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030e2:	bf00      	nop
 80030e4:	e000      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ee:	4b3f      	ldr	r3, [pc, #252]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	430b      	orrs	r3, r1
 8003104:	4939      	ldr	r1, [pc, #228]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d167      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003110:	4b36      	ldr	r3, [pc, #216]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a35      	ldr	r2, [pc, #212]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800311a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311c:	f7fe fc8e 	bl	8001a3c <HAL_GetTick>
 8003120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003122:	e009      	b.n	8003138 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003124:	f7fe fc8a 	bl	8001a3c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d902      	bls.n	8003138 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	73fb      	strb	r3, [r7, #15]
        break;
 8003136:	e005      	b.n	8003144 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003138:	4b2c      	ldr	r3, [pc, #176]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ef      	bne.n	8003124 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d14a      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d111      	bne.n	8003174 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003150:	4b26      	ldr	r3, [pc, #152]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6892      	ldr	r2, [r2, #8]
 8003160:	0211      	lsls	r1, r2, #8
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68d2      	ldr	r2, [r2, #12]
 8003166:	0912      	lsrs	r2, r2, #4
 8003168:	0452      	lsls	r2, r2, #17
 800316a:	430a      	orrs	r2, r1
 800316c:	491f      	ldr	r1, [pc, #124]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	4313      	orrs	r3, r2
 8003170:	614b      	str	r3, [r1, #20]
 8003172:	e011      	b.n	8003198 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003174:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800317c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6892      	ldr	r2, [r2, #8]
 8003184:	0211      	lsls	r1, r2, #8
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6912      	ldr	r2, [r2, #16]
 800318a:	0852      	lsrs	r2, r2, #1
 800318c:	3a01      	subs	r2, #1
 800318e:	0652      	lsls	r2, r2, #25
 8003190:	430a      	orrs	r2, r1
 8003192:	4916      	ldr	r1, [pc, #88]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003194:	4313      	orrs	r3, r2
 8003196:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a13      	ldr	r2, [pc, #76]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fc4a 	bl	8001a3c <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031aa:	e009      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031ac:	f7fe fc46 	bl	8001a3c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d902      	bls.n	80031c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	73fb      	strb	r3, [r7, #15]
          break;
 80031be:	e005      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031c0:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ef      	beq.n	80031ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4904      	ldr	r1, [pc, #16]	@ (80031ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e049      	b.n	8003296 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	795b      	ldrb	r3, [r3, #5]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe f9c4 	bl	80015a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0204 	orr.w	r2, r2, #4
 800322c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b40      	cmp	r3, #64	@ 0x40
 800323a:	d104      	bne.n	8003246 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2204      	movs	r2, #4
 8003240:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e027      	b.n	8003296 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003246:	f7fe fbf9 	bl	8001a3c <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800324c:	e015      	b.n	800327a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800324e:	f7fe fbf5 	bl	8001a3c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d90e      	bls.n	800327a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00d      	b.n	8003296 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d0e2      	beq.n	800324e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <siprintf>:
 80032a0:	b40e      	push	{r1, r2, r3}
 80032a2:	b500      	push	{lr}
 80032a4:	b09c      	sub	sp, #112	@ 0x70
 80032a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	9006      	str	r0, [sp, #24]
 80032ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80032b0:	4809      	ldr	r0, [pc, #36]	@ (80032d8 <siprintf+0x38>)
 80032b2:	9107      	str	r1, [sp, #28]
 80032b4:	9104      	str	r1, [sp, #16]
 80032b6:	4909      	ldr	r1, [pc, #36]	@ (80032dc <siprintf+0x3c>)
 80032b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80032bc:	9105      	str	r1, [sp, #20]
 80032be:	6800      	ldr	r0, [r0, #0]
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	a902      	add	r1, sp, #8
 80032c4:	f000 f9a2 	bl	800360c <_svfiprintf_r>
 80032c8:	9b02      	ldr	r3, [sp, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	b01c      	add	sp, #112	@ 0x70
 80032d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032d4:	b003      	add	sp, #12
 80032d6:	4770      	bx	lr
 80032d8:	2000005c 	.word	0x2000005c
 80032dc:	ffff0208 	.word	0xffff0208

080032e0 <memset>:
 80032e0:	4402      	add	r2, r0
 80032e2:	4603      	mov	r3, r0
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d100      	bne.n	80032ea <memset+0xa>
 80032e8:	4770      	bx	lr
 80032ea:	f803 1b01 	strb.w	r1, [r3], #1
 80032ee:	e7f9      	b.n	80032e4 <memset+0x4>

080032f0 <__errno>:
 80032f0:	4b01      	ldr	r3, [pc, #4]	@ (80032f8 <__errno+0x8>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	2000005c 	.word	0x2000005c

080032fc <__libc_init_array>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003334 <__libc_init_array+0x38>)
 8003300:	4c0d      	ldr	r4, [pc, #52]	@ (8003338 <__libc_init_array+0x3c>)
 8003302:	1b64      	subs	r4, r4, r5
 8003304:	10a4      	asrs	r4, r4, #2
 8003306:	2600      	movs	r6, #0
 8003308:	42a6      	cmp	r6, r4
 800330a:	d109      	bne.n	8003320 <__libc_init_array+0x24>
 800330c:	4d0b      	ldr	r5, [pc, #44]	@ (800333c <__libc_init_array+0x40>)
 800330e:	4c0c      	ldr	r4, [pc, #48]	@ (8003340 <__libc_init_array+0x44>)
 8003310:	f000 fc66 	bl	8003be0 <_init>
 8003314:	1b64      	subs	r4, r4, r5
 8003316:	10a4      	asrs	r4, r4, #2
 8003318:	2600      	movs	r6, #0
 800331a:	42a6      	cmp	r6, r4
 800331c:	d105      	bne.n	800332a <__libc_init_array+0x2e>
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	f855 3b04 	ldr.w	r3, [r5], #4
 8003324:	4798      	blx	r3
 8003326:	3601      	adds	r6, #1
 8003328:	e7ee      	b.n	8003308 <__libc_init_array+0xc>
 800332a:	f855 3b04 	ldr.w	r3, [r5], #4
 800332e:	4798      	blx	r3
 8003330:	3601      	adds	r6, #1
 8003332:	e7f2      	b.n	800331a <__libc_init_array+0x1e>
 8003334:	08003f54 	.word	0x08003f54
 8003338:	08003f54 	.word	0x08003f54
 800333c:	08003f54 	.word	0x08003f54
 8003340:	08003f58 	.word	0x08003f58

08003344 <__retarget_lock_acquire_recursive>:
 8003344:	4770      	bx	lr

08003346 <__retarget_lock_release_recursive>:
 8003346:	4770      	bx	lr

08003348 <memcpy>:
 8003348:	440a      	add	r2, r1
 800334a:	4291      	cmp	r1, r2
 800334c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003350:	d100      	bne.n	8003354 <memcpy+0xc>
 8003352:	4770      	bx	lr
 8003354:	b510      	push	{r4, lr}
 8003356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800335a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800335e:	4291      	cmp	r1, r2
 8003360:	d1f9      	bne.n	8003356 <memcpy+0xe>
 8003362:	bd10      	pop	{r4, pc}

08003364 <_free_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4605      	mov	r5, r0
 8003368:	2900      	cmp	r1, #0
 800336a:	d041      	beq.n	80033f0 <_free_r+0x8c>
 800336c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003370:	1f0c      	subs	r4, r1, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	bfb8      	it	lt
 8003376:	18e4      	addlt	r4, r4, r3
 8003378:	f000 f8e0 	bl	800353c <__malloc_lock>
 800337c:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <_free_r+0x90>)
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	b933      	cbnz	r3, 8003390 <_free_r+0x2c>
 8003382:	6063      	str	r3, [r4, #4]
 8003384:	6014      	str	r4, [r2, #0]
 8003386:	4628      	mov	r0, r5
 8003388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800338c:	f000 b8dc 	b.w	8003548 <__malloc_unlock>
 8003390:	42a3      	cmp	r3, r4
 8003392:	d908      	bls.n	80033a6 <_free_r+0x42>
 8003394:	6820      	ldr	r0, [r4, #0]
 8003396:	1821      	adds	r1, r4, r0
 8003398:	428b      	cmp	r3, r1
 800339a:	bf01      	itttt	eq
 800339c:	6819      	ldreq	r1, [r3, #0]
 800339e:	685b      	ldreq	r3, [r3, #4]
 80033a0:	1809      	addeq	r1, r1, r0
 80033a2:	6021      	streq	r1, [r4, #0]
 80033a4:	e7ed      	b.n	8003382 <_free_r+0x1e>
 80033a6:	461a      	mov	r2, r3
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b10b      	cbz	r3, 80033b0 <_free_r+0x4c>
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d9fa      	bls.n	80033a6 <_free_r+0x42>
 80033b0:	6811      	ldr	r1, [r2, #0]
 80033b2:	1850      	adds	r0, r2, r1
 80033b4:	42a0      	cmp	r0, r4
 80033b6:	d10b      	bne.n	80033d0 <_free_r+0x6c>
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	4401      	add	r1, r0
 80033bc:	1850      	adds	r0, r2, r1
 80033be:	4283      	cmp	r3, r0
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	d1e0      	bne.n	8003386 <_free_r+0x22>
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	6053      	str	r3, [r2, #4]
 80033ca:	4408      	add	r0, r1
 80033cc:	6010      	str	r0, [r2, #0]
 80033ce:	e7da      	b.n	8003386 <_free_r+0x22>
 80033d0:	d902      	bls.n	80033d8 <_free_r+0x74>
 80033d2:	230c      	movs	r3, #12
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	e7d6      	b.n	8003386 <_free_r+0x22>
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	1821      	adds	r1, r4, r0
 80033dc:	428b      	cmp	r3, r1
 80033de:	bf04      	itt	eq
 80033e0:	6819      	ldreq	r1, [r3, #0]
 80033e2:	685b      	ldreq	r3, [r3, #4]
 80033e4:	6063      	str	r3, [r4, #4]
 80033e6:	bf04      	itt	eq
 80033e8:	1809      	addeq	r1, r1, r0
 80033ea:	6021      	streq	r1, [r4, #0]
 80033ec:	6054      	str	r4, [r2, #4]
 80033ee:	e7ca      	b.n	8003386 <_free_r+0x22>
 80033f0:	bd38      	pop	{r3, r4, r5, pc}
 80033f2:	bf00      	nop
 80033f4:	20000370 	.word	0x20000370

080033f8 <sbrk_aligned>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	4e0f      	ldr	r6, [pc, #60]	@ (8003438 <sbrk_aligned+0x40>)
 80033fc:	460c      	mov	r4, r1
 80033fe:	6831      	ldr	r1, [r6, #0]
 8003400:	4605      	mov	r5, r0
 8003402:	b911      	cbnz	r1, 800340a <sbrk_aligned+0x12>
 8003404:	f000 fba6 	bl	8003b54 <_sbrk_r>
 8003408:	6030      	str	r0, [r6, #0]
 800340a:	4621      	mov	r1, r4
 800340c:	4628      	mov	r0, r5
 800340e:	f000 fba1 	bl	8003b54 <_sbrk_r>
 8003412:	1c43      	adds	r3, r0, #1
 8003414:	d103      	bne.n	800341e <sbrk_aligned+0x26>
 8003416:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800341a:	4620      	mov	r0, r4
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	1cc4      	adds	r4, r0, #3
 8003420:	f024 0403 	bic.w	r4, r4, #3
 8003424:	42a0      	cmp	r0, r4
 8003426:	d0f8      	beq.n	800341a <sbrk_aligned+0x22>
 8003428:	1a21      	subs	r1, r4, r0
 800342a:	4628      	mov	r0, r5
 800342c:	f000 fb92 	bl	8003b54 <_sbrk_r>
 8003430:	3001      	adds	r0, #1
 8003432:	d1f2      	bne.n	800341a <sbrk_aligned+0x22>
 8003434:	e7ef      	b.n	8003416 <sbrk_aligned+0x1e>
 8003436:	bf00      	nop
 8003438:	2000036c 	.word	0x2000036c

0800343c <_malloc_r>:
 800343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003440:	1ccd      	adds	r5, r1, #3
 8003442:	f025 0503 	bic.w	r5, r5, #3
 8003446:	3508      	adds	r5, #8
 8003448:	2d0c      	cmp	r5, #12
 800344a:	bf38      	it	cc
 800344c:	250c      	movcc	r5, #12
 800344e:	2d00      	cmp	r5, #0
 8003450:	4606      	mov	r6, r0
 8003452:	db01      	blt.n	8003458 <_malloc_r+0x1c>
 8003454:	42a9      	cmp	r1, r5
 8003456:	d904      	bls.n	8003462 <_malloc_r+0x26>
 8003458:	230c      	movs	r3, #12
 800345a:	6033      	str	r3, [r6, #0]
 800345c:	2000      	movs	r0, #0
 800345e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003538 <_malloc_r+0xfc>
 8003466:	f000 f869 	bl	800353c <__malloc_lock>
 800346a:	f8d8 3000 	ldr.w	r3, [r8]
 800346e:	461c      	mov	r4, r3
 8003470:	bb44      	cbnz	r4, 80034c4 <_malloc_r+0x88>
 8003472:	4629      	mov	r1, r5
 8003474:	4630      	mov	r0, r6
 8003476:	f7ff ffbf 	bl	80033f8 <sbrk_aligned>
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	4604      	mov	r4, r0
 800347e:	d158      	bne.n	8003532 <_malloc_r+0xf6>
 8003480:	f8d8 4000 	ldr.w	r4, [r8]
 8003484:	4627      	mov	r7, r4
 8003486:	2f00      	cmp	r7, #0
 8003488:	d143      	bne.n	8003512 <_malloc_r+0xd6>
 800348a:	2c00      	cmp	r4, #0
 800348c:	d04b      	beq.n	8003526 <_malloc_r+0xea>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	4639      	mov	r1, r7
 8003492:	4630      	mov	r0, r6
 8003494:	eb04 0903 	add.w	r9, r4, r3
 8003498:	f000 fb5c 	bl	8003b54 <_sbrk_r>
 800349c:	4581      	cmp	r9, r0
 800349e:	d142      	bne.n	8003526 <_malloc_r+0xea>
 80034a0:	6821      	ldr	r1, [r4, #0]
 80034a2:	1a6d      	subs	r5, r5, r1
 80034a4:	4629      	mov	r1, r5
 80034a6:	4630      	mov	r0, r6
 80034a8:	f7ff ffa6 	bl	80033f8 <sbrk_aligned>
 80034ac:	3001      	adds	r0, #1
 80034ae:	d03a      	beq.n	8003526 <_malloc_r+0xea>
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	442b      	add	r3, r5
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	f8d8 3000 	ldr.w	r3, [r8]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	bb62      	cbnz	r2, 8003518 <_malloc_r+0xdc>
 80034be:	f8c8 7000 	str.w	r7, [r8]
 80034c2:	e00f      	b.n	80034e4 <_malloc_r+0xa8>
 80034c4:	6822      	ldr	r2, [r4, #0]
 80034c6:	1b52      	subs	r2, r2, r5
 80034c8:	d420      	bmi.n	800350c <_malloc_r+0xd0>
 80034ca:	2a0b      	cmp	r2, #11
 80034cc:	d917      	bls.n	80034fe <_malloc_r+0xc2>
 80034ce:	1961      	adds	r1, r4, r5
 80034d0:	42a3      	cmp	r3, r4
 80034d2:	6025      	str	r5, [r4, #0]
 80034d4:	bf18      	it	ne
 80034d6:	6059      	strne	r1, [r3, #4]
 80034d8:	6863      	ldr	r3, [r4, #4]
 80034da:	bf08      	it	eq
 80034dc:	f8c8 1000 	streq.w	r1, [r8]
 80034e0:	5162      	str	r2, [r4, r5]
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	4630      	mov	r0, r6
 80034e6:	f000 f82f 	bl	8003548 <__malloc_unlock>
 80034ea:	f104 000b 	add.w	r0, r4, #11
 80034ee:	1d23      	adds	r3, r4, #4
 80034f0:	f020 0007 	bic.w	r0, r0, #7
 80034f4:	1ac2      	subs	r2, r0, r3
 80034f6:	bf1c      	itt	ne
 80034f8:	1a1b      	subne	r3, r3, r0
 80034fa:	50a3      	strne	r3, [r4, r2]
 80034fc:	e7af      	b.n	800345e <_malloc_r+0x22>
 80034fe:	6862      	ldr	r2, [r4, #4]
 8003500:	42a3      	cmp	r3, r4
 8003502:	bf0c      	ite	eq
 8003504:	f8c8 2000 	streq.w	r2, [r8]
 8003508:	605a      	strne	r2, [r3, #4]
 800350a:	e7eb      	b.n	80034e4 <_malloc_r+0xa8>
 800350c:	4623      	mov	r3, r4
 800350e:	6864      	ldr	r4, [r4, #4]
 8003510:	e7ae      	b.n	8003470 <_malloc_r+0x34>
 8003512:	463c      	mov	r4, r7
 8003514:	687f      	ldr	r7, [r7, #4]
 8003516:	e7b6      	b.n	8003486 <_malloc_r+0x4a>
 8003518:	461a      	mov	r2, r3
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	42a3      	cmp	r3, r4
 800351e:	d1fb      	bne.n	8003518 <_malloc_r+0xdc>
 8003520:	2300      	movs	r3, #0
 8003522:	6053      	str	r3, [r2, #4]
 8003524:	e7de      	b.n	80034e4 <_malloc_r+0xa8>
 8003526:	230c      	movs	r3, #12
 8003528:	6033      	str	r3, [r6, #0]
 800352a:	4630      	mov	r0, r6
 800352c:	f000 f80c 	bl	8003548 <__malloc_unlock>
 8003530:	e794      	b.n	800345c <_malloc_r+0x20>
 8003532:	6005      	str	r5, [r0, #0]
 8003534:	e7d6      	b.n	80034e4 <_malloc_r+0xa8>
 8003536:	bf00      	nop
 8003538:	20000370 	.word	0x20000370

0800353c <__malloc_lock>:
 800353c:	4801      	ldr	r0, [pc, #4]	@ (8003544 <__malloc_lock+0x8>)
 800353e:	f7ff bf01 	b.w	8003344 <__retarget_lock_acquire_recursive>
 8003542:	bf00      	nop
 8003544:	20000368 	.word	0x20000368

08003548 <__malloc_unlock>:
 8003548:	4801      	ldr	r0, [pc, #4]	@ (8003550 <__malloc_unlock+0x8>)
 800354a:	f7ff befc 	b.w	8003346 <__retarget_lock_release_recursive>
 800354e:	bf00      	nop
 8003550:	20000368 	.word	0x20000368

08003554 <__ssputs_r>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	688e      	ldr	r6, [r1, #8]
 800355a:	461f      	mov	r7, r3
 800355c:	42be      	cmp	r6, r7
 800355e:	680b      	ldr	r3, [r1, #0]
 8003560:	4682      	mov	sl, r0
 8003562:	460c      	mov	r4, r1
 8003564:	4690      	mov	r8, r2
 8003566:	d82d      	bhi.n	80035c4 <__ssputs_r+0x70>
 8003568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800356c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003570:	d026      	beq.n	80035c0 <__ssputs_r+0x6c>
 8003572:	6965      	ldr	r5, [r4, #20]
 8003574:	6909      	ldr	r1, [r1, #16]
 8003576:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800357a:	eba3 0901 	sub.w	r9, r3, r1
 800357e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003582:	1c7b      	adds	r3, r7, #1
 8003584:	444b      	add	r3, r9
 8003586:	106d      	asrs	r5, r5, #1
 8003588:	429d      	cmp	r5, r3
 800358a:	bf38      	it	cc
 800358c:	461d      	movcc	r5, r3
 800358e:	0553      	lsls	r3, r2, #21
 8003590:	d527      	bpl.n	80035e2 <__ssputs_r+0x8e>
 8003592:	4629      	mov	r1, r5
 8003594:	f7ff ff52 	bl	800343c <_malloc_r>
 8003598:	4606      	mov	r6, r0
 800359a:	b360      	cbz	r0, 80035f6 <__ssputs_r+0xa2>
 800359c:	6921      	ldr	r1, [r4, #16]
 800359e:	464a      	mov	r2, r9
 80035a0:	f7ff fed2 	bl	8003348 <memcpy>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ae:	81a3      	strh	r3, [r4, #12]
 80035b0:	6126      	str	r6, [r4, #16]
 80035b2:	6165      	str	r5, [r4, #20]
 80035b4:	444e      	add	r6, r9
 80035b6:	eba5 0509 	sub.w	r5, r5, r9
 80035ba:	6026      	str	r6, [r4, #0]
 80035bc:	60a5      	str	r5, [r4, #8]
 80035be:	463e      	mov	r6, r7
 80035c0:	42be      	cmp	r6, r7
 80035c2:	d900      	bls.n	80035c6 <__ssputs_r+0x72>
 80035c4:	463e      	mov	r6, r7
 80035c6:	6820      	ldr	r0, [r4, #0]
 80035c8:	4632      	mov	r2, r6
 80035ca:	4641      	mov	r1, r8
 80035cc:	f000 faa8 	bl	8003b20 <memmove>
 80035d0:	68a3      	ldr	r3, [r4, #8]
 80035d2:	1b9b      	subs	r3, r3, r6
 80035d4:	60a3      	str	r3, [r4, #8]
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	4433      	add	r3, r6
 80035da:	6023      	str	r3, [r4, #0]
 80035dc:	2000      	movs	r0, #0
 80035de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e2:	462a      	mov	r2, r5
 80035e4:	f000 fac6 	bl	8003b74 <_realloc_r>
 80035e8:	4606      	mov	r6, r0
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d1e0      	bne.n	80035b0 <__ssputs_r+0x5c>
 80035ee:	6921      	ldr	r1, [r4, #16]
 80035f0:	4650      	mov	r0, sl
 80035f2:	f7ff feb7 	bl	8003364 <_free_r>
 80035f6:	230c      	movs	r3, #12
 80035f8:	f8ca 3000 	str.w	r3, [sl]
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003608:	e7e9      	b.n	80035de <__ssputs_r+0x8a>
	...

0800360c <_svfiprintf_r>:
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	4698      	mov	r8, r3
 8003612:	898b      	ldrh	r3, [r1, #12]
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	b09d      	sub	sp, #116	@ 0x74
 8003618:	4607      	mov	r7, r0
 800361a:	460d      	mov	r5, r1
 800361c:	4614      	mov	r4, r2
 800361e:	d510      	bpl.n	8003642 <_svfiprintf_r+0x36>
 8003620:	690b      	ldr	r3, [r1, #16]
 8003622:	b973      	cbnz	r3, 8003642 <_svfiprintf_r+0x36>
 8003624:	2140      	movs	r1, #64	@ 0x40
 8003626:	f7ff ff09 	bl	800343c <_malloc_r>
 800362a:	6028      	str	r0, [r5, #0]
 800362c:	6128      	str	r0, [r5, #16]
 800362e:	b930      	cbnz	r0, 800363e <_svfiprintf_r+0x32>
 8003630:	230c      	movs	r3, #12
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003638:	b01d      	add	sp, #116	@ 0x74
 800363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363e:	2340      	movs	r3, #64	@ 0x40
 8003640:	616b      	str	r3, [r5, #20]
 8003642:	2300      	movs	r3, #0
 8003644:	9309      	str	r3, [sp, #36]	@ 0x24
 8003646:	2320      	movs	r3, #32
 8003648:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800364c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003650:	2330      	movs	r3, #48	@ 0x30
 8003652:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80037f0 <_svfiprintf_r+0x1e4>
 8003656:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800365a:	f04f 0901 	mov.w	r9, #1
 800365e:	4623      	mov	r3, r4
 8003660:	469a      	mov	sl, r3
 8003662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003666:	b10a      	cbz	r2, 800366c <_svfiprintf_r+0x60>
 8003668:	2a25      	cmp	r2, #37	@ 0x25
 800366a:	d1f9      	bne.n	8003660 <_svfiprintf_r+0x54>
 800366c:	ebba 0b04 	subs.w	fp, sl, r4
 8003670:	d00b      	beq.n	800368a <_svfiprintf_r+0x7e>
 8003672:	465b      	mov	r3, fp
 8003674:	4622      	mov	r2, r4
 8003676:	4629      	mov	r1, r5
 8003678:	4638      	mov	r0, r7
 800367a:	f7ff ff6b 	bl	8003554 <__ssputs_r>
 800367e:	3001      	adds	r0, #1
 8003680:	f000 80a7 	beq.w	80037d2 <_svfiprintf_r+0x1c6>
 8003684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003686:	445a      	add	r2, fp
 8003688:	9209      	str	r2, [sp, #36]	@ 0x24
 800368a:	f89a 3000 	ldrb.w	r3, [sl]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 809f 	beq.w	80037d2 <_svfiprintf_r+0x1c6>
 8003694:	2300      	movs	r3, #0
 8003696:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800369a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800369e:	f10a 0a01 	add.w	sl, sl, #1
 80036a2:	9304      	str	r3, [sp, #16]
 80036a4:	9307      	str	r3, [sp, #28]
 80036a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80036ac:	4654      	mov	r4, sl
 80036ae:	2205      	movs	r2, #5
 80036b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b4:	484e      	ldr	r0, [pc, #312]	@ (80037f0 <_svfiprintf_r+0x1e4>)
 80036b6:	f7fc fd8b 	bl	80001d0 <memchr>
 80036ba:	9a04      	ldr	r2, [sp, #16]
 80036bc:	b9d8      	cbnz	r0, 80036f6 <_svfiprintf_r+0xea>
 80036be:	06d0      	lsls	r0, r2, #27
 80036c0:	bf44      	itt	mi
 80036c2:	2320      	movmi	r3, #32
 80036c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036c8:	0711      	lsls	r1, r2, #28
 80036ca:	bf44      	itt	mi
 80036cc:	232b      	movmi	r3, #43	@ 0x2b
 80036ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036d2:	f89a 3000 	ldrb.w	r3, [sl]
 80036d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d8:	d015      	beq.n	8003706 <_svfiprintf_r+0xfa>
 80036da:	9a07      	ldr	r2, [sp, #28]
 80036dc:	4654      	mov	r4, sl
 80036de:	2000      	movs	r0, #0
 80036e0:	f04f 0c0a 	mov.w	ip, #10
 80036e4:	4621      	mov	r1, r4
 80036e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ea:	3b30      	subs	r3, #48	@ 0x30
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	d94b      	bls.n	8003788 <_svfiprintf_r+0x17c>
 80036f0:	b1b0      	cbz	r0, 8003720 <_svfiprintf_r+0x114>
 80036f2:	9207      	str	r2, [sp, #28]
 80036f4:	e014      	b.n	8003720 <_svfiprintf_r+0x114>
 80036f6:	eba0 0308 	sub.w	r3, r0, r8
 80036fa:	fa09 f303 	lsl.w	r3, r9, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	9304      	str	r3, [sp, #16]
 8003702:	46a2      	mov	sl, r4
 8003704:	e7d2      	b.n	80036ac <_svfiprintf_r+0xa0>
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	1d19      	adds	r1, r3, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	9103      	str	r1, [sp, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	bfbb      	ittet	lt
 8003712:	425b      	neglt	r3, r3
 8003714:	f042 0202 	orrlt.w	r2, r2, #2
 8003718:	9307      	strge	r3, [sp, #28]
 800371a:	9307      	strlt	r3, [sp, #28]
 800371c:	bfb8      	it	lt
 800371e:	9204      	strlt	r2, [sp, #16]
 8003720:	7823      	ldrb	r3, [r4, #0]
 8003722:	2b2e      	cmp	r3, #46	@ 0x2e
 8003724:	d10a      	bne.n	800373c <_svfiprintf_r+0x130>
 8003726:	7863      	ldrb	r3, [r4, #1]
 8003728:	2b2a      	cmp	r3, #42	@ 0x2a
 800372a:	d132      	bne.n	8003792 <_svfiprintf_r+0x186>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	9203      	str	r2, [sp, #12]
 8003734:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003738:	3402      	adds	r4, #2
 800373a:	9305      	str	r3, [sp, #20]
 800373c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003800 <_svfiprintf_r+0x1f4>
 8003740:	7821      	ldrb	r1, [r4, #0]
 8003742:	2203      	movs	r2, #3
 8003744:	4650      	mov	r0, sl
 8003746:	f7fc fd43 	bl	80001d0 <memchr>
 800374a:	b138      	cbz	r0, 800375c <_svfiprintf_r+0x150>
 800374c:	9b04      	ldr	r3, [sp, #16]
 800374e:	eba0 000a 	sub.w	r0, r0, sl
 8003752:	2240      	movs	r2, #64	@ 0x40
 8003754:	4082      	lsls	r2, r0
 8003756:	4313      	orrs	r3, r2
 8003758:	3401      	adds	r4, #1
 800375a:	9304      	str	r3, [sp, #16]
 800375c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003760:	4824      	ldr	r0, [pc, #144]	@ (80037f4 <_svfiprintf_r+0x1e8>)
 8003762:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003766:	2206      	movs	r2, #6
 8003768:	f7fc fd32 	bl	80001d0 <memchr>
 800376c:	2800      	cmp	r0, #0
 800376e:	d036      	beq.n	80037de <_svfiprintf_r+0x1d2>
 8003770:	4b21      	ldr	r3, [pc, #132]	@ (80037f8 <_svfiprintf_r+0x1ec>)
 8003772:	bb1b      	cbnz	r3, 80037bc <_svfiprintf_r+0x1b0>
 8003774:	9b03      	ldr	r3, [sp, #12]
 8003776:	3307      	adds	r3, #7
 8003778:	f023 0307 	bic.w	r3, r3, #7
 800377c:	3308      	adds	r3, #8
 800377e:	9303      	str	r3, [sp, #12]
 8003780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003782:	4433      	add	r3, r6
 8003784:	9309      	str	r3, [sp, #36]	@ 0x24
 8003786:	e76a      	b.n	800365e <_svfiprintf_r+0x52>
 8003788:	fb0c 3202 	mla	r2, ip, r2, r3
 800378c:	460c      	mov	r4, r1
 800378e:	2001      	movs	r0, #1
 8003790:	e7a8      	b.n	80036e4 <_svfiprintf_r+0xd8>
 8003792:	2300      	movs	r3, #0
 8003794:	3401      	adds	r4, #1
 8003796:	9305      	str	r3, [sp, #20]
 8003798:	4619      	mov	r1, r3
 800379a:	f04f 0c0a 	mov.w	ip, #10
 800379e:	4620      	mov	r0, r4
 80037a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037a4:	3a30      	subs	r2, #48	@ 0x30
 80037a6:	2a09      	cmp	r2, #9
 80037a8:	d903      	bls.n	80037b2 <_svfiprintf_r+0x1a6>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0c6      	beq.n	800373c <_svfiprintf_r+0x130>
 80037ae:	9105      	str	r1, [sp, #20]
 80037b0:	e7c4      	b.n	800373c <_svfiprintf_r+0x130>
 80037b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80037b6:	4604      	mov	r4, r0
 80037b8:	2301      	movs	r3, #1
 80037ba:	e7f0      	b.n	800379e <_svfiprintf_r+0x192>
 80037bc:	ab03      	add	r3, sp, #12
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	462a      	mov	r2, r5
 80037c2:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <_svfiprintf_r+0x1f0>)
 80037c4:	a904      	add	r1, sp, #16
 80037c6:	4638      	mov	r0, r7
 80037c8:	f3af 8000 	nop.w
 80037cc:	1c42      	adds	r2, r0, #1
 80037ce:	4606      	mov	r6, r0
 80037d0:	d1d6      	bne.n	8003780 <_svfiprintf_r+0x174>
 80037d2:	89ab      	ldrh	r3, [r5, #12]
 80037d4:	065b      	lsls	r3, r3, #25
 80037d6:	f53f af2d 	bmi.w	8003634 <_svfiprintf_r+0x28>
 80037da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80037dc:	e72c      	b.n	8003638 <_svfiprintf_r+0x2c>
 80037de:	ab03      	add	r3, sp, #12
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	462a      	mov	r2, r5
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <_svfiprintf_r+0x1f0>)
 80037e6:	a904      	add	r1, sp, #16
 80037e8:	4638      	mov	r0, r7
 80037ea:	f000 f879 	bl	80038e0 <_printf_i>
 80037ee:	e7ed      	b.n	80037cc <_svfiprintf_r+0x1c0>
 80037f0:	08003f18 	.word	0x08003f18
 80037f4:	08003f22 	.word	0x08003f22
 80037f8:	00000000 	.word	0x00000000
 80037fc:	08003555 	.word	0x08003555
 8003800:	08003f1e 	.word	0x08003f1e

08003804 <_printf_common>:
 8003804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003808:	4616      	mov	r6, r2
 800380a:	4698      	mov	r8, r3
 800380c:	688a      	ldr	r2, [r1, #8]
 800380e:	690b      	ldr	r3, [r1, #16]
 8003810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003814:	4293      	cmp	r3, r2
 8003816:	bfb8      	it	lt
 8003818:	4613      	movlt	r3, r2
 800381a:	6033      	str	r3, [r6, #0]
 800381c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003820:	4607      	mov	r7, r0
 8003822:	460c      	mov	r4, r1
 8003824:	b10a      	cbz	r2, 800382a <_printf_common+0x26>
 8003826:	3301      	adds	r3, #1
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	0699      	lsls	r1, r3, #26
 800382e:	bf42      	ittt	mi
 8003830:	6833      	ldrmi	r3, [r6, #0]
 8003832:	3302      	addmi	r3, #2
 8003834:	6033      	strmi	r3, [r6, #0]
 8003836:	6825      	ldr	r5, [r4, #0]
 8003838:	f015 0506 	ands.w	r5, r5, #6
 800383c:	d106      	bne.n	800384c <_printf_common+0x48>
 800383e:	f104 0a19 	add.w	sl, r4, #25
 8003842:	68e3      	ldr	r3, [r4, #12]
 8003844:	6832      	ldr	r2, [r6, #0]
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	42ab      	cmp	r3, r5
 800384a:	dc26      	bgt.n	800389a <_printf_common+0x96>
 800384c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003850:	6822      	ldr	r2, [r4, #0]
 8003852:	3b00      	subs	r3, #0
 8003854:	bf18      	it	ne
 8003856:	2301      	movne	r3, #1
 8003858:	0692      	lsls	r2, r2, #26
 800385a:	d42b      	bmi.n	80038b4 <_printf_common+0xb0>
 800385c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003860:	4641      	mov	r1, r8
 8003862:	4638      	mov	r0, r7
 8003864:	47c8      	blx	r9
 8003866:	3001      	adds	r0, #1
 8003868:	d01e      	beq.n	80038a8 <_printf_common+0xa4>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	6922      	ldr	r2, [r4, #16]
 800386e:	f003 0306 	and.w	r3, r3, #6
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf02      	ittt	eq
 8003876:	68e5      	ldreq	r5, [r4, #12]
 8003878:	6833      	ldreq	r3, [r6, #0]
 800387a:	1aed      	subeq	r5, r5, r3
 800387c:	68a3      	ldr	r3, [r4, #8]
 800387e:	bf0c      	ite	eq
 8003880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003884:	2500      	movne	r5, #0
 8003886:	4293      	cmp	r3, r2
 8003888:	bfc4      	itt	gt
 800388a:	1a9b      	subgt	r3, r3, r2
 800388c:	18ed      	addgt	r5, r5, r3
 800388e:	2600      	movs	r6, #0
 8003890:	341a      	adds	r4, #26
 8003892:	42b5      	cmp	r5, r6
 8003894:	d11a      	bne.n	80038cc <_printf_common+0xc8>
 8003896:	2000      	movs	r0, #0
 8003898:	e008      	b.n	80038ac <_printf_common+0xa8>
 800389a:	2301      	movs	r3, #1
 800389c:	4652      	mov	r2, sl
 800389e:	4641      	mov	r1, r8
 80038a0:	4638      	mov	r0, r7
 80038a2:	47c8      	blx	r9
 80038a4:	3001      	adds	r0, #1
 80038a6:	d103      	bne.n	80038b0 <_printf_common+0xac>
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b0:	3501      	adds	r5, #1
 80038b2:	e7c6      	b.n	8003842 <_printf_common+0x3e>
 80038b4:	18e1      	adds	r1, r4, r3
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	2030      	movs	r0, #48	@ 0x30
 80038ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038be:	4422      	add	r2, r4
 80038c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038c8:	3302      	adds	r3, #2
 80038ca:	e7c7      	b.n	800385c <_printf_common+0x58>
 80038cc:	2301      	movs	r3, #1
 80038ce:	4622      	mov	r2, r4
 80038d0:	4641      	mov	r1, r8
 80038d2:	4638      	mov	r0, r7
 80038d4:	47c8      	blx	r9
 80038d6:	3001      	adds	r0, #1
 80038d8:	d0e6      	beq.n	80038a8 <_printf_common+0xa4>
 80038da:	3601      	adds	r6, #1
 80038dc:	e7d9      	b.n	8003892 <_printf_common+0x8e>
	...

080038e0 <_printf_i>:
 80038e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	7e0f      	ldrb	r7, [r1, #24]
 80038e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038e8:	2f78      	cmp	r7, #120	@ 0x78
 80038ea:	4691      	mov	r9, r2
 80038ec:	4680      	mov	r8, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	469a      	mov	sl, r3
 80038f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038f6:	d807      	bhi.n	8003908 <_printf_i+0x28>
 80038f8:	2f62      	cmp	r7, #98	@ 0x62
 80038fa:	d80a      	bhi.n	8003912 <_printf_i+0x32>
 80038fc:	2f00      	cmp	r7, #0
 80038fe:	f000 80d2 	beq.w	8003aa6 <_printf_i+0x1c6>
 8003902:	2f58      	cmp	r7, #88	@ 0x58
 8003904:	f000 80b9 	beq.w	8003a7a <_printf_i+0x19a>
 8003908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800390c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003910:	e03a      	b.n	8003988 <_printf_i+0xa8>
 8003912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003916:	2b15      	cmp	r3, #21
 8003918:	d8f6      	bhi.n	8003908 <_printf_i+0x28>
 800391a:	a101      	add	r1, pc, #4	@ (adr r1, 8003920 <_printf_i+0x40>)
 800391c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003920:	08003979 	.word	0x08003979
 8003924:	0800398d 	.word	0x0800398d
 8003928:	08003909 	.word	0x08003909
 800392c:	08003909 	.word	0x08003909
 8003930:	08003909 	.word	0x08003909
 8003934:	08003909 	.word	0x08003909
 8003938:	0800398d 	.word	0x0800398d
 800393c:	08003909 	.word	0x08003909
 8003940:	08003909 	.word	0x08003909
 8003944:	08003909 	.word	0x08003909
 8003948:	08003909 	.word	0x08003909
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	080039b7 	.word	0x080039b7
 8003954:	08003a47 	.word	0x08003a47
 8003958:	08003909 	.word	0x08003909
 800395c:	08003909 	.word	0x08003909
 8003960:	08003aaf 	.word	0x08003aaf
 8003964:	08003909 	.word	0x08003909
 8003968:	080039b7 	.word	0x080039b7
 800396c:	08003909 	.word	0x08003909
 8003970:	08003909 	.word	0x08003909
 8003974:	08003a4f 	.word	0x08003a4f
 8003978:	6833      	ldr	r3, [r6, #0]
 800397a:	1d1a      	adds	r2, r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6032      	str	r2, [r6, #0]
 8003980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003988:	2301      	movs	r3, #1
 800398a:	e09d      	b.n	8003ac8 <_printf_i+0x1e8>
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	1d19      	adds	r1, r3, #4
 8003992:	6031      	str	r1, [r6, #0]
 8003994:	0606      	lsls	r6, r0, #24
 8003996:	d501      	bpl.n	800399c <_printf_i+0xbc>
 8003998:	681d      	ldr	r5, [r3, #0]
 800399a:	e003      	b.n	80039a4 <_printf_i+0xc4>
 800399c:	0645      	lsls	r5, r0, #25
 800399e:	d5fb      	bpl.n	8003998 <_printf_i+0xb8>
 80039a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039a4:	2d00      	cmp	r5, #0
 80039a6:	da03      	bge.n	80039b0 <_printf_i+0xd0>
 80039a8:	232d      	movs	r3, #45	@ 0x2d
 80039aa:	426d      	negs	r5, r5
 80039ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039b0:	4859      	ldr	r0, [pc, #356]	@ (8003b18 <_printf_i+0x238>)
 80039b2:	230a      	movs	r3, #10
 80039b4:	e011      	b.n	80039da <_printf_i+0xfa>
 80039b6:	6821      	ldr	r1, [r4, #0]
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	0608      	lsls	r0, r1, #24
 80039bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80039c0:	d402      	bmi.n	80039c8 <_printf_i+0xe8>
 80039c2:	0649      	lsls	r1, r1, #25
 80039c4:	bf48      	it	mi
 80039c6:	b2ad      	uxthmi	r5, r5
 80039c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80039ca:	4853      	ldr	r0, [pc, #332]	@ (8003b18 <_printf_i+0x238>)
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	bf14      	ite	ne
 80039d0:	230a      	movne	r3, #10
 80039d2:	2308      	moveq	r3, #8
 80039d4:	2100      	movs	r1, #0
 80039d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039da:	6866      	ldr	r6, [r4, #4]
 80039dc:	60a6      	str	r6, [r4, #8]
 80039de:	2e00      	cmp	r6, #0
 80039e0:	bfa2      	ittt	ge
 80039e2:	6821      	ldrge	r1, [r4, #0]
 80039e4:	f021 0104 	bicge.w	r1, r1, #4
 80039e8:	6021      	strge	r1, [r4, #0]
 80039ea:	b90d      	cbnz	r5, 80039f0 <_printf_i+0x110>
 80039ec:	2e00      	cmp	r6, #0
 80039ee:	d04b      	beq.n	8003a88 <_printf_i+0x1a8>
 80039f0:	4616      	mov	r6, r2
 80039f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80039f6:	fb03 5711 	mls	r7, r3, r1, r5
 80039fa:	5dc7      	ldrb	r7, [r0, r7]
 80039fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a00:	462f      	mov	r7, r5
 8003a02:	42bb      	cmp	r3, r7
 8003a04:	460d      	mov	r5, r1
 8003a06:	d9f4      	bls.n	80039f2 <_printf_i+0x112>
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d10b      	bne.n	8003a24 <_printf_i+0x144>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	07df      	lsls	r7, r3, #31
 8003a10:	d508      	bpl.n	8003a24 <_printf_i+0x144>
 8003a12:	6923      	ldr	r3, [r4, #16]
 8003a14:	6861      	ldr	r1, [r4, #4]
 8003a16:	4299      	cmp	r1, r3
 8003a18:	bfde      	ittt	le
 8003a1a:	2330      	movle	r3, #48	@ 0x30
 8003a1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003a24:	1b92      	subs	r2, r2, r6
 8003a26:	6122      	str	r2, [r4, #16]
 8003a28:	f8cd a000 	str.w	sl, [sp]
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	aa03      	add	r2, sp, #12
 8003a30:	4621      	mov	r1, r4
 8003a32:	4640      	mov	r0, r8
 8003a34:	f7ff fee6 	bl	8003804 <_printf_common>
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d14a      	bne.n	8003ad2 <_printf_i+0x1f2>
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a40:	b004      	add	sp, #16
 8003a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	4833      	ldr	r0, [pc, #204]	@ (8003b1c <_printf_i+0x23c>)
 8003a50:	2778      	movs	r7, #120	@ 0x78
 8003a52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	6831      	ldr	r1, [r6, #0]
 8003a5a:	061f      	lsls	r7, r3, #24
 8003a5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a60:	d402      	bmi.n	8003a68 <_printf_i+0x188>
 8003a62:	065f      	lsls	r7, r3, #25
 8003a64:	bf48      	it	mi
 8003a66:	b2ad      	uxthmi	r5, r5
 8003a68:	6031      	str	r1, [r6, #0]
 8003a6a:	07d9      	lsls	r1, r3, #31
 8003a6c:	bf44      	itt	mi
 8003a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003a72:	6023      	strmi	r3, [r4, #0]
 8003a74:	b11d      	cbz	r5, 8003a7e <_printf_i+0x19e>
 8003a76:	2310      	movs	r3, #16
 8003a78:	e7ac      	b.n	80039d4 <_printf_i+0xf4>
 8003a7a:	4827      	ldr	r0, [pc, #156]	@ (8003b18 <_printf_i+0x238>)
 8003a7c:	e7e9      	b.n	8003a52 <_printf_i+0x172>
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	f023 0320 	bic.w	r3, r3, #32
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	e7f6      	b.n	8003a76 <_printf_i+0x196>
 8003a88:	4616      	mov	r6, r2
 8003a8a:	e7bd      	b.n	8003a08 <_printf_i+0x128>
 8003a8c:	6833      	ldr	r3, [r6, #0]
 8003a8e:	6825      	ldr	r5, [r4, #0]
 8003a90:	6961      	ldr	r1, [r4, #20]
 8003a92:	1d18      	adds	r0, r3, #4
 8003a94:	6030      	str	r0, [r6, #0]
 8003a96:	062e      	lsls	r6, r5, #24
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	d501      	bpl.n	8003aa0 <_printf_i+0x1c0>
 8003a9c:	6019      	str	r1, [r3, #0]
 8003a9e:	e002      	b.n	8003aa6 <_printf_i+0x1c6>
 8003aa0:	0668      	lsls	r0, r5, #25
 8003aa2:	d5fb      	bpl.n	8003a9c <_printf_i+0x1bc>
 8003aa4:	8019      	strh	r1, [r3, #0]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6123      	str	r3, [r4, #16]
 8003aaa:	4616      	mov	r6, r2
 8003aac:	e7bc      	b.n	8003a28 <_printf_i+0x148>
 8003aae:	6833      	ldr	r3, [r6, #0]
 8003ab0:	1d1a      	adds	r2, r3, #4
 8003ab2:	6032      	str	r2, [r6, #0]
 8003ab4:	681e      	ldr	r6, [r3, #0]
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4630      	mov	r0, r6
 8003abc:	f7fc fb88 	bl	80001d0 <memchr>
 8003ac0:	b108      	cbz	r0, 8003ac6 <_printf_i+0x1e6>
 8003ac2:	1b80      	subs	r0, r0, r6
 8003ac4:	6060      	str	r0, [r4, #4]
 8003ac6:	6863      	ldr	r3, [r4, #4]
 8003ac8:	6123      	str	r3, [r4, #16]
 8003aca:	2300      	movs	r3, #0
 8003acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ad0:	e7aa      	b.n	8003a28 <_printf_i+0x148>
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	4640      	mov	r0, r8
 8003ada:	47d0      	blx	sl
 8003adc:	3001      	adds	r0, #1
 8003ade:	d0ad      	beq.n	8003a3c <_printf_i+0x15c>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	079b      	lsls	r3, r3, #30
 8003ae4:	d413      	bmi.n	8003b0e <_printf_i+0x22e>
 8003ae6:	68e0      	ldr	r0, [r4, #12]
 8003ae8:	9b03      	ldr	r3, [sp, #12]
 8003aea:	4298      	cmp	r0, r3
 8003aec:	bfb8      	it	lt
 8003aee:	4618      	movlt	r0, r3
 8003af0:	e7a6      	b.n	8003a40 <_printf_i+0x160>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4632      	mov	r2, r6
 8003af6:	4649      	mov	r1, r9
 8003af8:	4640      	mov	r0, r8
 8003afa:	47d0      	blx	sl
 8003afc:	3001      	adds	r0, #1
 8003afe:	d09d      	beq.n	8003a3c <_printf_i+0x15c>
 8003b00:	3501      	adds	r5, #1
 8003b02:	68e3      	ldr	r3, [r4, #12]
 8003b04:	9903      	ldr	r1, [sp, #12]
 8003b06:	1a5b      	subs	r3, r3, r1
 8003b08:	42ab      	cmp	r3, r5
 8003b0a:	dcf2      	bgt.n	8003af2 <_printf_i+0x212>
 8003b0c:	e7eb      	b.n	8003ae6 <_printf_i+0x206>
 8003b0e:	2500      	movs	r5, #0
 8003b10:	f104 0619 	add.w	r6, r4, #25
 8003b14:	e7f5      	b.n	8003b02 <_printf_i+0x222>
 8003b16:	bf00      	nop
 8003b18:	08003f29 	.word	0x08003f29
 8003b1c:	08003f3a 	.word	0x08003f3a

08003b20 <memmove>:
 8003b20:	4288      	cmp	r0, r1
 8003b22:	b510      	push	{r4, lr}
 8003b24:	eb01 0402 	add.w	r4, r1, r2
 8003b28:	d902      	bls.n	8003b30 <memmove+0x10>
 8003b2a:	4284      	cmp	r4, r0
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	d807      	bhi.n	8003b40 <memmove+0x20>
 8003b30:	1e43      	subs	r3, r0, #1
 8003b32:	42a1      	cmp	r1, r4
 8003b34:	d008      	beq.n	8003b48 <memmove+0x28>
 8003b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b3e:	e7f8      	b.n	8003b32 <memmove+0x12>
 8003b40:	4402      	add	r2, r0
 8003b42:	4601      	mov	r1, r0
 8003b44:	428a      	cmp	r2, r1
 8003b46:	d100      	bne.n	8003b4a <memmove+0x2a>
 8003b48:	bd10      	pop	{r4, pc}
 8003b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b52:	e7f7      	b.n	8003b44 <memmove+0x24>

08003b54 <_sbrk_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d06      	ldr	r5, [pc, #24]	@ (8003b70 <_sbrk_r+0x1c>)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	602b      	str	r3, [r5, #0]
 8003b60:	f7fd fd92 	bl	8001688 <_sbrk>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d102      	bne.n	8003b6e <_sbrk_r+0x1a>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	b103      	cbz	r3, 8003b6e <_sbrk_r+0x1a>
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	20000364 	.word	0x20000364

08003b74 <_realloc_r>:
 8003b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b78:	4680      	mov	r8, r0
 8003b7a:	4615      	mov	r5, r2
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	b921      	cbnz	r1, 8003b8a <_realloc_r+0x16>
 8003b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b84:	4611      	mov	r1, r2
 8003b86:	f7ff bc59 	b.w	800343c <_malloc_r>
 8003b8a:	b92a      	cbnz	r2, 8003b98 <_realloc_r+0x24>
 8003b8c:	f7ff fbea 	bl	8003364 <_free_r>
 8003b90:	2400      	movs	r4, #0
 8003b92:	4620      	mov	r0, r4
 8003b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b98:	f000 f81a 	bl	8003bd0 <_malloc_usable_size_r>
 8003b9c:	4285      	cmp	r5, r0
 8003b9e:	4606      	mov	r6, r0
 8003ba0:	d802      	bhi.n	8003ba8 <_realloc_r+0x34>
 8003ba2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ba6:	d8f4      	bhi.n	8003b92 <_realloc_r+0x1e>
 8003ba8:	4629      	mov	r1, r5
 8003baa:	4640      	mov	r0, r8
 8003bac:	f7ff fc46 	bl	800343c <_malloc_r>
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0ec      	beq.n	8003b90 <_realloc_r+0x1c>
 8003bb6:	42b5      	cmp	r5, r6
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4621      	mov	r1, r4
 8003bbc:	bf28      	it	cs
 8003bbe:	4632      	movcs	r2, r6
 8003bc0:	f7ff fbc2 	bl	8003348 <memcpy>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f7ff fbcc 	bl	8003364 <_free_r>
 8003bcc:	463c      	mov	r4, r7
 8003bce:	e7e0      	b.n	8003b92 <_realloc_r+0x1e>

08003bd0 <_malloc_usable_size_r>:
 8003bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd4:	1f18      	subs	r0, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bfbc      	itt	lt
 8003bda:	580b      	ldrlt	r3, [r1, r0]
 8003bdc:	18c0      	addlt	r0, r0, r3
 8003bde:	4770      	bx	lr

08003be0 <_init>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr

08003bec <_fini>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr
