
final_project_p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08003f38  08003f38  00004f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  000060ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004234  08004234  00005234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800423c  0800423c  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0000523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004240  08004240  00005240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08004244  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200000ac  080042f0  000060ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080042f0  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa7  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e87  00000000  00000000  0000db83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000644  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ed0  00000000  00000000  000108ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c6b  00000000  00000000  000367bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3900  00000000  00000000  00040427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123d27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a4  00000000  00000000  00123d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00126310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f20 	.word	0x08003f20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08003f20 	.word	0x08003f20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <joystick_pin_init>:
 *      Author: danny
 */

#include "Joystick.h"

void joystick_pin_init() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    // PC0 for vertical, PC1 for horizontal
    // PC2 for button
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <joystick_pin_init+0x70>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	4a19      	ldr	r2, [pc, #100]	@ (80008ec <joystick_pin_init+0x70>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER |= GPIO_MODER_MODE0 | GPIO_MODER_MODE1; // Analog mode
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <joystick_pin_init+0x74>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <joystick_pin_init+0x74>)
 8000892:	f043 030f 	orr.w	r3, r3, #15
 8000896:	6013      	str	r3, [r2, #0]
    GPIOC->ASCR |= GPIO_ASCR_ASC0 | GPIO_ASCR_ASC1;  // Connect analog switch to ADC input
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <joystick_pin_init+0x74>)
 800089a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800089c:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <joystick_pin_init+0x74>)
 800089e:	f043 0303 	orr.w	r3, r3, #3
 80008a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

    GPIOC->MODER &= ~GPIO_MODER_MODE2; // Input mode
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <joystick_pin_init+0x74>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a11      	ldr	r2, [pc, #68]	@ (80008f0 <joystick_pin_init+0x74>)
 80008aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008ae:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD2; 
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <joystick_pin_init+0x74>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <joystick_pin_init+0x74>)
 80008b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008ba:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= GPIO_PUPDR_PUPD2_0; // Pull-up
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <joystick_pin_init+0x74>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <joystick_pin_init+0x74>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	60d3      	str	r3, [r2, #12]
    GPIOC->OTYPER &= ~GPIO_OTYPER_OT2; // Push-pull
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <joystick_pin_init+0x74>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <joystick_pin_init+0x74>)
 80008ce:	f023 0304 	bic.w	r3, r3, #4
 80008d2:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED2; // Low speed
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <joystick_pin_init+0x74>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <joystick_pin_init+0x74>)
 80008da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008de:	6093      	str	r3, [r2, #8]

    return;
 80008e0:	bf00      	nop
}
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800

080008f4 <ADC_init>:

void ADC_init() {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

    // ADC1, IN1 for vertical
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80008fa:	4b59      	ldr	r3, [pc, #356]	@ (8000a60 <ADC_init+0x16c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a58      	ldr	r2, [pc, #352]	@ (8000a60 <ADC_init+0x16c>)
 8000900:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 8000906:	4b57      	ldr	r3, [pc, #348]	@ (8000a64 <ADC_init+0x170>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	4a56      	ldr	r2, [pc, #344]	@ (8000a64 <ADC_init+0x170>)
 800090c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000910:	6093      	str	r3, [r2, #8]
    ADC1->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 8000912:	4b55      	ldr	r3, [pc, #340]	@ (8000a68 <ADC_init+0x174>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	4a54      	ldr	r2, [pc, #336]	@ (8000a68 <ADC_init+0x174>)
 8000918:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800091c:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 800091e:	4b52      	ldr	r3, [pc, #328]	@ (8000a68 <ADC_init+0x174>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	4a51      	ldr	r2, [pc, #324]	@ (8000a68 <ADC_init+0x174>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up 
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	e002      	b.n	8000936 <ADC_init+0x42>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3301      	adds	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b63      	cmp	r3, #99	@ 0x63
 800093a:	ddf9      	ble.n	8000930 <ADC_init+0x3c>

    ADC1->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 800093c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a68 <ADC_init+0x174>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	4a49      	ldr	r2, [pc, #292]	@ (8000a68 <ADC_init+0x174>)
 8000942:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000946:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL; // start calibration
 8000948:	4b47      	ldr	r3, [pc, #284]	@ (8000a68 <ADC_init+0x174>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	4a46      	ldr	r2, [pc, #280]	@ (8000a68 <ADC_init+0x174>)
 800094e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000952:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000954:	bf00      	nop
 8000956:	4b44      	ldr	r3, [pc, #272]	@ (8000a68 <ADC_init+0x174>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	dbfb      	blt.n	8000956 <ADC_init+0x62>

    ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 800095e:	4b42      	ldr	r3, [pc, #264]	@ (8000a68 <ADC_init+0x174>)
 8000960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000964:	4a40      	ldr	r2, [pc, #256]	@ (8000a68 <ADC_init+0x174>)
 8000966:	f023 0301 	bic.w	r3, r3, #1
 800096a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC1->ISR |= ADC_ISR_ADRDY; // clear ready flag
 800096e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a68 <ADC_init+0x174>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a3d      	ldr	r2, [pc, #244]	@ (8000a68 <ADC_init+0x174>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6013      	str	r3, [r2, #0]
    ADC1->CR |= ADC_CR_ADEN; // enable ADC
 800097a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a68 <ADC_init+0x174>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	4a3a      	ldr	r2, [pc, #232]	@ (8000a68 <ADC_init+0x174>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000986:	bf00      	nop
 8000988:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <ADC_init+0x174>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f9      	beq.n	8000988 <ADC_init+0x94>

    ADC1->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 8000994:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <ADC_init+0x174>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
    ADC1->SQR1 = (1 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 800099a:	4b33      	ldr	r3, [pc, #204]	@ (8000a68 <ADC_init+0x174>)
 800099c:	2240      	movs	r2, #64	@ 0x40
 800099e:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->SMPR1 = (2 << ADC_SMPR1_SMP1_Pos); // 12.5 cycles sampling time
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <ADC_init+0x174>)
 80009a2:	2210      	movs	r2, #16
 80009a4:	615a      	str	r2, [r3, #20]

    // ADC3, IN2 for horizontal
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <ADC_init+0x16c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <ADC_init+0x16c>)
 80009ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 80009b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <ADC_init+0x170>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a64 <ADC_init+0x170>)
 80009b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009bc:	6093      	str	r3, [r2, #8]
    ADC3->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <ADC_init+0x178>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a6c <ADC_init+0x178>)
 80009c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80009c8:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <ADC_init+0x178>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4a27      	ldr	r2, [pc, #156]	@ (8000a6c <ADC_init+0x178>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	e002      	b.n	80009e2 <ADC_init+0xee>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	2b63      	cmp	r3, #99	@ 0x63
 80009e6:	ddf9      	ble.n	80009dc <ADC_init+0xe8>

    ADC3->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <ADC_init+0x178>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	4a1f      	ldr	r2, [pc, #124]	@ (8000a6c <ADC_init+0x178>)
 80009ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80009f2:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADCAL; // start calibration
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <ADC_init+0x178>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <ADC_init+0x178>)
 80009fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009fe:	6093      	str	r3, [r2, #8]
    while (ADC3->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000a00:	bf00      	nop
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <ADC_init+0x178>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	dbfb      	blt.n	8000a02 <ADC_init+0x10e>

    ADC3->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <ADC_init+0x178>)
 8000a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <ADC_init+0x178>)
 8000a12:	f023 0301 	bic.w	r3, r3, #1
 8000a16:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC3->ISR |= ADC_ISR_ADRDY; // clear ready flag
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <ADC_init+0x178>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <ADC_init+0x178>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6013      	str	r3, [r2, #0]
    ADC3->CR |= ADC_CR_ADEN; // enable ADC
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <ADC_init+0x178>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <ADC_init+0x178>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000a32:	bf00      	nop
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <ADC_init+0x178>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f9      	beq.n	8000a34 <ADC_init+0x140>

    ADC3->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <ADC_init+0x178>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
    ADC3->SQR1 = (2 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <ADC_init+0x178>)
 8000a48:	2280      	movs	r2, #128	@ 0x80
 8000a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC3->SMPR1 = (2 << ADC_SMPR1_SMP2_Pos); // 12.5 cycles sampling time
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <ADC_init+0x178>)
 8000a4e:	2280      	movs	r2, #128	@ 0x80
 8000a50:	615a      	str	r2, [r3, #20]

    return;
 8000a52:	bf00      	nop
}
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	50040300 	.word	0x50040300
 8000a68:	50040000 	.word	0x50040000
 8000a6c:	50040200 	.word	0x50040200

08000a70 <joystick_init>:

void joystick_init() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    joystick_pin_init();
 8000a74:	f7ff ff02 	bl	800087c <joystick_pin_init>
    ADC_init();
 8000a78:	f7ff ff3c 	bl	80008f4 <ADC_init>

    return;
 8000a7c:	bf00      	nop
}
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <get_joystick_x>:

uint16_t get_joystick_x() {
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
    ADC3->CR |= ADC_CR_ADSTART; // start conversion
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <get_joystick_x+0x30>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4a09      	ldr	r2, [pc, #36]	@ (8000ab0 <get_joystick_x+0x30>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 8000a90:	bf00      	nop
 8000a92:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <get_joystick_x+0x30>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <get_joystick_x+0x12>

    return ADC3->DR;
 8000a9e:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <get_joystick_x+0x30>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	b29b      	uxth	r3, r3
    
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	50040200 	.word	0x50040200

08000ab4 <get_joystick_y>:

uint16_t get_joystick_y() {
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
    ADC1->CR |= ADC_CR_ADSTART; // start conversion
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <get_joystick_y+0x30>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	4a09      	ldr	r2, [pc, #36]	@ (8000ae4 <get_joystick_y+0x30>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 8000ac4:	bf00      	nop
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <get_joystick_y+0x30>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <get_joystick_y+0x12>

    return ADC1->DR;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <get_joystick_y+0x30>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	b29b      	uxth	r3, r3
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	50040000 	.word	0x50040000

08000ae8 <get_joystick_button>:

uint8_t get_joystick_button() {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
    return !(GPIOC->IDR & GPIO_IDR_ID2);
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <get_joystick_button+0x20>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	48000800 	.word	0x48000800

08000b0c <same_point>:

#include "Objects.h"

static BodyPart_t old_tail;

uint8_t same_point(Point_t a, Point_t b) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	80b8      	strh	r0, [r7, #4]
 8000b14:	8039      	strh	r1, [r7, #0]
    return (a.x == b.x && a.y == b.y);
 8000b16:	793a      	ldrb	r2, [r7, #4]
 8000b18:	783b      	ldrb	r3, [r7, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d105      	bne.n	8000b2a <same_point+0x1e>
 8000b1e:	797a      	ldrb	r2, [r7, #5]
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d101      	bne.n	8000b2a <same_point+0x1e>
 8000b26:	2301      	movs	r3, #1
 8000b28:	e000      	b.n	8000b2c <same_point+0x20>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <grid_init>:


/**
 * @brief Initialize the grid with black color
*/
void grid_init(uint8_t high_score) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
    uart_clear_screen();
 8000b46:	f001 f863 	bl	8001c10 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 8000b4a:	4838      	ldr	r0, [pc, #224]	@ (8000c2c <grid_init+0xf0>)
 8000b4c:	f001 f852 	bl	8001bf4 <uart_send_escape>

    // print top and bottom border
    sprintf(snake_print_buffer, "[%u;%uH", TOP_BOUND, LEFT_BOUND);
 8000b50:	2308      	movs	r3, #8
 8000b52:	2203      	movs	r2, #3
 8000b54:	4936      	ldr	r1, [pc, #216]	@ (8000c30 <grid_init+0xf4>)
 8000b56:	4837      	ldr	r0, [pc, #220]	@ (8000c34 <grid_init+0xf8>)
 8000b58:	f002 fd42 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000b5c:	4835      	ldr	r0, [pc, #212]	@ (8000c34 <grid_init+0xf8>)
 8000b5e:	f001 f849 	bl	8001bf4 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND; i++) {
 8000b62:	2308      	movs	r3, #8
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e005      	b.n	8000b74 <grid_init+0x38>
        uart_send_char('=');
 8000b68:	203d      	movs	r0, #61	@ 0x3d
 8000b6a:	f001 f805 	bl	8001b78 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND; i++) {
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2b63      	cmp	r3, #99	@ 0x63
 8000b78:	ddf6      	ble.n	8000b68 <grid_init+0x2c>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND, LEFT_BOUND);
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	2232      	movs	r2, #50	@ 0x32
 8000b7e:	492c      	ldr	r1, [pc, #176]	@ (8000c30 <grid_init+0xf4>)
 8000b80:	482c      	ldr	r0, [pc, #176]	@ (8000c34 <grid_init+0xf8>)
 8000b82:	f002 fd2d 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000b86:	482b      	ldr	r0, [pc, #172]	@ (8000c34 <grid_init+0xf8>)
 8000b88:	f001 f834 	bl	8001bf4 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND; i++) {
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	e005      	b.n	8000b9e <grid_init+0x62>
        uart_send_char('=');
 8000b92:	203d      	movs	r0, #61	@ 0x3d
 8000b94:	f000 fff0 	bl	8001b78 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND; i++) {
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2b63      	cmp	r3, #99	@ 0x63
 8000ba2:	ddf6      	ble.n	8000b92 <grid_init+0x56>
    }

    // print left and right border
    for (int i = TOP_BOUND; i < BOTTOM_BOUND + 1; i++) {
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e01a      	b.n	8000be0 <grid_init+0xa4>
        sprintf(snake_print_buffer, "[%u;%uH", i, LEFT_BOUND);
 8000baa:	2308      	movs	r3, #8
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4920      	ldr	r1, [pc, #128]	@ (8000c30 <grid_init+0xf4>)
 8000bb0:	4820      	ldr	r0, [pc, #128]	@ (8000c34 <grid_init+0xf8>)
 8000bb2:	f002 fd15 	bl	80035e0 <siprintf>
        uart_send_escape(snake_print_buffer);
 8000bb6:	481f      	ldr	r0, [pc, #124]	@ (8000c34 <grid_init+0xf8>)
 8000bb8:	f001 f81c 	bl	8001bf4 <uart_send_escape>
        uart_send_char('|');
 8000bbc:	207c      	movs	r0, #124	@ 0x7c
 8000bbe:	f000 ffdb 	bl	8001b78 <uart_send_char>

        sprintf(snake_print_buffer, "[%u;%uH", i, RIGHT_BOUND);
 8000bc2:	2364      	movs	r3, #100	@ 0x64
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	491a      	ldr	r1, [pc, #104]	@ (8000c30 <grid_init+0xf4>)
 8000bc8:	481a      	ldr	r0, [pc, #104]	@ (8000c34 <grid_init+0xf8>)
 8000bca:	f002 fd09 	bl	80035e0 <siprintf>
        uart_send_escape(snake_print_buffer);
 8000bce:	4819      	ldr	r0, [pc, #100]	@ (8000c34 <grid_init+0xf8>)
 8000bd0:	f001 f810 	bl	8001bf4 <uart_send_escape>
        uart_send_char('|');
 8000bd4:	207c      	movs	r0, #124	@ 0x7c
 8000bd6:	f000 ffcf 	bl	8001b78 <uart_send_char>
    for (int i = TOP_BOUND; i < BOTTOM_BOUND + 1; i++) {
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b32      	cmp	r3, #50	@ 0x32
 8000be4:	dde1      	ble.n	8000baa <grid_init+0x6e>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND + 5, RIGHT_BOUND - 15);
 8000be6:	2355      	movs	r3, #85	@ 0x55
 8000be8:	2237      	movs	r2, #55	@ 0x37
 8000bea:	4911      	ldr	r1, [pc, #68]	@ (8000c30 <grid_init+0xf4>)
 8000bec:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <grid_init+0xf8>)
 8000bee:	f002 fcf7 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000bf2:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <grid_init+0xf8>)
 8000bf4:	f000 fffe 	bl	8001bf4 <uart_send_escape>
    sprintf(snake_print_buffer, "High Score: %u", high_score);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	490e      	ldr	r1, [pc, #56]	@ (8000c38 <grid_init+0xfc>)
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <grid_init+0xf8>)
 8000c00:	f002 fcee 	bl	80035e0 <siprintf>
    uart_send_string(snake_print_buffer);
 8000c04:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <grid_init+0xf8>)
 8000c06:	f000 ffcf 	bl	8001ba8 <uart_send_string>

    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X - 7);
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	2237      	movs	r2, #55	@ 0x37
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <grid_init+0xf4>)
 8000c10:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <grid_init+0xf8>)
 8000c12:	f002 fce5 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000c16:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <grid_init+0xf8>)
 8000c18:	f000 ffec 	bl	8001bf4 <uart_send_escape>
    uart_send_string("Score: ");
 8000c1c:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <grid_init+0x100>)
 8000c1e:	f000 ffc3 	bl	8001ba8 <uart_send_string>




    return;
 8000c22:	bf00      	nop
}
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08003f38 	.word	0x08003f38
 8000c30:	08003f3c 	.word	0x08003f3c
 8000c34:	200000c8 	.word	0x200000c8
 8000c38:	08003f44 	.word	0x08003f44
 8000c3c:	08003f54 	.word	0x08003f54

08000c40 <grid_draw>:
/**
 * @brief Draw the snake and food on the grid
 * @param snake: the snake object
 * @param food: the food object
*/
void grid_draw(Snake_t snake, Food_t food) {
 8000c40:	b084      	sub	sp, #16
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b0a4      	sub	sp, #144	@ 0x90
 8000c46:	af24      	add	r7, sp, #144	@ 0x90
 8000c48:	f107 0c08 	add.w	ip, r7, #8
 8000c4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // uart_clear_screen();
    snake_draw(snake);
 8000c50:	4668      	mov	r0, sp
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	2290      	movs	r2, #144	@ 0x90
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f002 fd15 	bl	8003688 <memcpy>
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c64:	f000 f806 	bl	8000c74 <snake_draw>

    return;
 8000c68:	bf00      	nop
}
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c70:	b004      	add	sp, #16
 8000c72:	4770      	bx	lr

08000c74 <snake_draw>:

/**
 * @brief Draw the snake object
 * @param snake: the snake object
*/
void snake_draw(Snake_t snake) {
 8000c74:	b084      	sub	sp, #16
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	f107 0c08 	add.w	ip, r7, #8
 8000c7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // erase tail
    // sprintf(snake_print_buffer, "[%u;%uH", snake.tail->pos.y, snake.tail->pos.x);
    sprintf(snake_print_buffer, "[%u;%uH", old_tail.pos.y, old_tail.pos.x);
 8000c82:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <snake_draw+0x80>)
 8000c84:	789b      	ldrb	r3, [r3, #2]
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <snake_draw+0x80>)
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	491a      	ldr	r1, [pc, #104]	@ (8000cf8 <snake_draw+0x84>)
 8000c8e:	481b      	ldr	r0, [pc, #108]	@ (8000cfc <snake_draw+0x88>)
 8000c90:	f002 fca6 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000c94:	4819      	ldr	r0, [pc, #100]	@ (8000cfc <snake_draw+0x88>)
 8000c96:	f000 ffad 	bl	8001bf4 <uart_send_escape>
    uart_send_char(' ');
 8000c9a:	2020      	movs	r0, #32
 8000c9c:	f000 ff6c 	bl	8001b78 <uart_send_char>

    // draw head
    sprintf(snake_print_buffer, "[%u;%uH", snake.body[0].pos.y, snake.body[0].pos.x);
 8000ca0:	7afb      	ldrb	r3, [r7, #11]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	7abb      	ldrb	r3, [r7, #10]
 8000ca6:	4914      	ldr	r1, [pc, #80]	@ (8000cf8 <snake_draw+0x84>)
 8000ca8:	4814      	ldr	r0, [pc, #80]	@ (8000cfc <snake_draw+0x88>)
 8000caa:	f002 fc99 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000cae:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <snake_draw+0x88>)
 8000cb0:	f000 ffa0 	bl	8001bf4 <uart_send_escape>
    uart_send_escape("[32m"); // green
 8000cb4:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <snake_draw+0x8c>)
 8000cb6:	f000 ff9d 	bl	8001bf4 <uart_send_escape>
    uart_send_char('O');
 8000cba:	204f      	movs	r0, #79	@ 0x4f
 8000cbc:	f000 ff5c 	bl	8001b78 <uart_send_char>

    // print current score
    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X);
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	2237      	movs	r2, #55	@ 0x37
 8000cc4:	490c      	ldr	r1, [pc, #48]	@ (8000cf8 <snake_draw+0x84>)
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <snake_draw+0x88>)
 8000cc8:	f002 fc8a 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <snake_draw+0x88>)
 8000cce:	f000 ff91 	bl	8001bf4 <uart_send_escape>
    sprintf(snake_print_buffer, "%u", snake.score);
 8000cd2:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	490a      	ldr	r1, [pc, #40]	@ (8000d04 <snake_draw+0x90>)
 8000cda:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <snake_draw+0x88>)
 8000cdc:	f002 fc80 	bl	80035e0 <siprintf>
    uart_send_string(snake_print_buffer);
 8000ce0:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <snake_draw+0x88>)
 8000ce2:	f000 ff61 	bl	8001ba8 <uart_send_string>
    
    return;
 8000ce6:	bf00      	nop
}
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cee:	b004      	add	sp, #16
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000012c 	.word	0x2000012c
 8000cf8:	08003f3c 	.word	0x08003f3c
 8000cfc:	200000c8 	.word	0x200000c8
 8000d00:	08003f5c 	.word	0x08003f5c
 8000d04:	08003f64 	.word	0x08003f64

08000d08 <snake_init>:

/**
 * @brief Initialize the snake object
 * @return the snake object
*/
void snake_init(Snake_t* snake) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    snake->len = START_LEN;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2205      	movs	r2, #5
 8000d14:	701a      	strb	r2, [r3, #0]
    snake->dir = NORTH;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    snake->alive = 1;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    snake->score = 0;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
    
    uint8_t x = get_random(LEFT_BOUND + START_BOUNDARY_OFFSET, RIGHT_BOUND - START_BOUNDARY_OFFSET);
 8000d2e:	215a      	movs	r1, #90	@ 0x5a
 8000d30:	2012      	movs	r0, #18
 8000d32:	f000 fb03 	bl	800133c <get_random>
 8000d36:	4603      	mov	r3, r0
 8000d38:	74fb      	strb	r3, [r7, #19]
    uint8_t y = get_random(TOP_BOUND + START_BOUNDARY_OFFSET, BOTTOM_BOUND - START_BOUNDARY_OFFSET - snake->len - 1);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8000d42:	4619      	mov	r1, r3
 8000d44:	200d      	movs	r0, #13
 8000d46:	f000 faf9 	bl	800133c <get_random>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	74bb      	strb	r3, [r7, #18]

    for (int i = 0; i < snake->len; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	e022      	b.n	8000d9a <snake_init+0x92>
        snake->body[i].valid = 1;
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	3301      	adds	r3, #1
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.x = x;
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	3302      	adds	r3, #2
 8000d74:	7cfa      	ldrb	r2, [r7, #19]
 8000d76:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = y + i;
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	7cbb      	ldrb	r3, [r7, #18]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b2d8      	uxtb	r0, r3
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3303      	adds	r3, #3
 8000d90:	4602      	mov	r2, r0
 8000d92:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake->len; i++) {
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	3301      	adds	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	4293      	cmp	r3, r2
 8000da4:	dbd6      	blt.n	8000d54 <snake_init+0x4c>
    }

    snake->tail = &(snake->body[snake->len - 1]);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    old_tail = *(snake->tail);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8000dc4:	4b22      	ldr	r3, [pc, #136]	@ (8000e50 <snake_init+0x148>)
 8000dc6:	8811      	ldrh	r1, [r2, #0]
 8000dc8:	7892      	ldrb	r2, [r2, #2]
 8000dca:	8019      	strh	r1, [r3, #0]
 8000dcc:	709a      	strb	r2, [r3, #2]

    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	e00b      	b.n	8000dee <snake_init+0xe6>
        snake->body[i].valid = 0;
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	3301      	adds	r3, #1
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	3301      	adds	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2b31      	cmp	r3, #49	@ 0x31
 8000df2:	ddf0      	ble.n	8000dd6 <snake_init+0xce>
    }
    
    // draw initial snake
    uart_send_escape("[32m"); // green
 8000df4:	4817      	ldr	r0, [pc, #92]	@ (8000e54 <snake_init+0x14c>)
 8000df6:	f000 fefd 	bl	8001bf4 <uart_send_escape>
    BodyPart_t body;
    for (int i = 0; i < snake->len; i++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e01c      	b.n	8000e3a <snake_init+0x132>
        body = snake->body[i];
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	18ca      	adds	r2, r1, r3
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	3201      	adds	r2, #1
 8000e12:	8811      	ldrh	r1, [r2, #0]
 8000e14:	7892      	ldrb	r2, [r2, #2]
 8000e16:	8019      	strh	r1, [r3, #0]
 8000e18:	709a      	strb	r2, [r3, #2]
        sprintf(snake_print_buffer, "[%u;%uH", body.pos.y, body.pos.x);
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
 8000e20:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <snake_init+0x150>)
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <snake_init+0x154>)
 8000e24:	f002 fbdc 	bl	80035e0 <siprintf>
        uart_send_escape(snake_print_buffer);
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <snake_init+0x154>)
 8000e2a:	f000 fee3 	bl	8001bf4 <uart_send_escape>
        uart_send_char('O');
 8000e2e:	204f      	movs	r0, #79	@ 0x4f
 8000e30:	f000 fea2 	bl	8001b78 <uart_send_char>
    for (int i = 0; i < snake->len; i++) {
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	4293      	cmp	r3, r2
 8000e44:	dbdc      	blt.n	8000e00 <snake_init+0xf8>
    }

    return;
 8000e46:	bf00      	nop
}
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000012c 	.word	0x2000012c
 8000e54:	08003f5c 	.word	0x08003f5c
 8000e58:	08003f3c 	.word	0x08003f3c
 8000e5c:	200000c8 	.word	0x200000c8

08000e60 <snake_move>:
/**
 * @brief Move the snake object
 * @return  -1 if snake ded
 *           0 if snake is alive
*/
int8_t snake_move(Snake_t* snake) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    if (!snake->alive) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <snake_move+0x18>
        return -1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e76:	e098      	b.n	8000faa <snake_move+0x14a>
    }

    snake_change_dir(snake);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f8e5 	bl	8001048 <snake_change_dir>

    // check if snake collides with boundary
    if (!WITHIN_BOUND(snake->body[0].pos.x, snake->body[0].pos.y)) {
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d90b      	bls.n	8000e9e <snake_move+0x3e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	2b63      	cmp	r3, #99	@ 0x63
 8000e8c:	d807      	bhi.n	8000e9e <snake_move+0x3e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	78db      	ldrb	r3, [r3, #3]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d903      	bls.n	8000e9e <snake_move+0x3e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	78db      	ldrb	r3, [r3, #3]
 8000e9a:	2b31      	cmp	r3, #49	@ 0x31
 8000e9c:	d905      	bls.n	8000eaa <snake_move+0x4a>
        snake_die(snake);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f8c0 	bl	8001024 <snake_die>
        return -1;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ea8:	e07f      	b.n	8000faa <snake_move+0x14a>
    }

    BodyPart_t* p_head = &snake->body[0];
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3301      	adds	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]

    old_tail = *(snake->tail);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb4 <snake_move+0x154>)
 8000eb8:	8811      	ldrh	r1, [r2, #0]
 8000eba:	7892      	ldrb	r2, [r2, #2]
 8000ebc:	8019      	strh	r1, [r3, #0]
 8000ebe:	709a      	strb	r2, [r3, #2]

    // move body parts
    for (int i = snake->len - 1; i > 0; i--) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e026      	b.n	8000f18 <snake_move+0xb8>
        snake->body[i].pos.x = snake->body[i - 1].pos.x;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3302      	adds	r3, #2
 8000eda:	7818      	ldrb	r0, [r3, #0]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3302      	adds	r3, #2
 8000eea:	4602      	mov	r2, r0
 8000eec:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = snake->body[i - 1].pos.y;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1e5a      	subs	r2, r3, #1
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	3303      	adds	r3, #3
 8000efe:	7818      	ldrb	r0, [r3, #0]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	4602      	mov	r2, r0
 8000f10:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len - 1; i > 0; i--) {
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dcd5      	bgt.n	8000eca <snake_move+0x6a>
    }

    // move head
    switch (snake->dir) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d827      	bhi.n	8000f78 <snake_move+0x118>
 8000f28:	a201      	add	r2, pc, #4	@ (adr r2, 8000f30 <snake_move+0xd0>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f4f 	.word	0x08000f4f
 8000f38:	08000f5d 	.word	0x08000f5d
 8000f3c:	08000f6b 	.word	0x08000f6b
        case NORTH:
            p_head->pos.y--;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	789b      	ldrb	r3, [r3, #2]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	709a      	strb	r2, [r3, #2]
            break;
 8000f4c:	e015      	b.n	8000f7a <snake_move+0x11a>
        case EAST:
            p_head->pos.x++;
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	3301      	adds	r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	705a      	strb	r2, [r3, #1]
            break;
 8000f5a:	e00e      	b.n	8000f7a <snake_move+0x11a>
        case SOUTH:
            p_head->pos.y++;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	789b      	ldrb	r3, [r3, #2]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	709a      	strb	r2, [r3, #2]
            break;
 8000f68:	e007      	b.n	8000f7a <snake_move+0x11a>
        case WEST:
            p_head->pos.x--;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	785b      	ldrb	r3, [r3, #1]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	705a      	strb	r2, [r3, #1]
            break;
 8000f76:	e000      	b.n	8000f7a <snake_move+0x11a>
        default:
            break;
 8000f78:	bf00      	nop
    }

    // check if snake collides with itself
    if (snake_hit_itself(p_head->pos, snake->body) == -1) {
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	785a      	ldrb	r2, [r3, #1]
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	431a      	orrs	r2, r3
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f362 030f 	bfi	r3, r2, #0, #16
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f812 	bl	8000fb8 <snake_hit_itself>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f9a:	d105      	bne.n	8000fa8 <snake_move+0x148>
        snake_die(snake);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f841 	bl	8001024 <snake_die>
        return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa6:	e000      	b.n	8000faa <snake_move+0x14a>
    }

    return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000012c 	.word	0x2000012c

08000fb8 <snake_hit_itself>:
/**
 * @brief Check if snake collides with itself
 * @return  0 if snake is alive,
 *          non-zero if snake is ded  
*/
int8_t snake_hit_itself(Point_t snake_head, BodyPart_t* body_parts) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	80b8      	strh	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e022      	b.n	800100e <snake_hit_itself+0x56>
        if (body_parts[i].valid) {
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d01d      	beq.n	8001016 <snake_hit_itself+0x5e>
            if (same_point(snake_head, body_parts[i].pos)) {
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	785a      	ldrb	r2, [r3, #1]
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	431a      	orrs	r2, r3
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f362 030f 	bfi	r3, r2, #0, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fd88 	bl	8000b0c <same_point>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <snake_hit_itself+0x50>
                return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001006:	e008      	b.n	800101a <snake_hit_itself+0x62>
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b31      	cmp	r3, #49	@ 0x31
 8001012:	ddd9      	ble.n	8000fc8 <snake_hit_itself+0x10>
 8001014:	e000      	b.n	8001018 <snake_hit_itself+0x60>
            }
        }
        else {
            break;
 8001016:	bf00      	nop
        }
    }

    return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <snake_die>:

/**
 * @brief kill the snake
 * @param snake: the snake object
*/
void snake_die(Snake_t* snake) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    snake->alive = 0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    uart_println("Snake ded");
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <snake_die+0x20>)
 8001036:	f000 fdcd 	bl	8001bd4 <uart_println>
 
    return;
 800103a:	bf00      	nop
}
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	08003f68 	.word	0x08003f68

08001048 <snake_change_dir>:
 * @brief Read the UART input and change the snake direction
 * @param snake: the snake object
 * @return 0 if no change
 *          non zero if change
*/
uint8_t snake_change_dir(Snake_t* snake) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    uint16_t joy_x = get_joystick_x();
 8001050:	f7ff fd16 	bl	8000a80 <get_joystick_x>
 8001054:	4603      	mov	r3, r0
 8001056:	81bb      	strh	r3, [r7, #12]
    uint16_t joy_y = get_joystick_y();
 8001058:	f7ff fd2c 	bl	8000ab4 <get_joystick_y>
 800105c:	4603      	mov	r3, r0
 800105e:	817b      	strh	r3, [r7, #10]

    Direction_t new_dir;
    uint8_t x_axis;

    x_axis = abs(joy_x - 2048) > abs(joy_y - 2048); 
 8001060:	89bb      	ldrh	r3, [r7, #12]
 8001062:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001066:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800106a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800106e:	897b      	ldrh	r3, [r7, #10]
 8001070:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001074:	2b00      	cmp	r3, #0
 8001076:	bfb8      	it	lt
 8001078:	425b      	neglt	r3, r3
 800107a:	429a      	cmp	r2, r3
 800107c:	bfcc      	ite	gt
 800107e:	2301      	movgt	r3, #1
 8001080:	2300      	movle	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	727b      	strb	r3, [r7, #9]

    if (x_axis) {
 8001086:	7a7b      	ldrb	r3, [r7, #9]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d010      	beq.n	80010ae <snake_change_dir+0x66>
        if (joy_x > RIGHT_QUARTER) {
 800108c:	89bb      	ldrh	r3, [r7, #12]
 800108e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001092:	d302      	bcc.n	800109a <snake_change_dir+0x52>
            new_dir = EAST;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e01a      	b.n	80010d0 <snake_change_dir+0x88>
        }
        else if (joy_x < LEFT_QUARTER) {
 800109a:	89bb      	ldrh	r3, [r7, #12]
 800109c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d802      	bhi.n	80010aa <snake_change_dir+0x62>
            new_dir = WEST;
 80010a4:	2303      	movs	r3, #3
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e012      	b.n	80010d0 <snake_change_dir+0x88>
        }
        else {
            return 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e048      	b.n	8001140 <snake_change_dir+0xf8>
        }
    }
    else {
        if (joy_y > TOP_QUARTER) {
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80010b4:	d302      	bcc.n	80010bc <snake_change_dir+0x74>
            new_dir = NORTH;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e009      	b.n	80010d0 <snake_change_dir+0x88>
        }
        else if (joy_y < BOTTOM_QUARTER) {
 80010bc:	897b      	ldrh	r3, [r7, #10]
 80010be:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d802      	bhi.n	80010cc <snake_change_dir+0x84>
            new_dir = SOUTH;
 80010c6:	2302      	movs	r3, #2
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e001      	b.n	80010d0 <snake_change_dir+0x88>
        } else {
            return 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e037      	b.n	8001140 <snake_change_dir+0xf8>
        }
    }

    // change dir as long as not 180, if same dir then nothing happens
    switch (snake->dir) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d831      	bhi.n	800113e <snake_change_dir+0xf6>
 80010da:	a201      	add	r2, pc, #4	@ (adr r2, 80010e0 <snake_change_dir+0x98>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	08001101 	.word	0x08001101
 80010e8:	08001111 	.word	0x08001111
 80010ec:	08001121 	.word	0x08001121
    case NORTH:
        if (new_dir != SOUTH) snake->dir = new_dir;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d01c      	beq.n	8001130 <snake_change_dir+0xe8>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 80010fe:	e017      	b.n	8001130 <snake_change_dir+0xe8>
    case EAST:
        if (new_dir != WEST) snake->dir = new_dir;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d016      	beq.n	8001134 <snake_change_dir+0xec>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 800110e:	e011      	b.n	8001134 <snake_change_dir+0xec>
    case SOUTH:
        if (new_dir != NORTH) snake->dir = new_dir;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d010      	beq.n	8001138 <snake_change_dir+0xf0>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 800111e:	e00b      	b.n	8001138 <snake_change_dir+0xf0>
    case WEST:
        if (new_dir != EAST) snake->dir = new_dir;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d00a      	beq.n	800113c <snake_change_dir+0xf4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 800112e:	e005      	b.n	800113c <snake_change_dir+0xf4>
        break;
 8001130:	bf00      	nop
 8001132:	e004      	b.n	800113e <snake_change_dir+0xf6>
        break;
 8001134:	bf00      	nop
 8001136:	e002      	b.n	800113e <snake_change_dir+0xf6>
        break;
 8001138:	bf00      	nop
 800113a:	e000      	b.n	800113e <snake_change_dir+0xf6>
        break;
 800113c:	bf00      	nop
    }

    return 1;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <snake_check_food>:
/**
 * @brief check snake head collides with food
 * @return  0 if no
 *          non-zero if yes
*/
uint8_t snake_check_food(Snake_t snake, Food_t food) {
 8001148:	b084      	sub	sp, #16
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
 800114e:	f107 0c08 	add.w	ip, r7, #8
 8001152:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return same_point((snake.body[0]).pos, food);
 8001156:	897a      	ldrh	r2, [r7, #10]
 8001158:	2300      	movs	r3, #0
 800115a:	f362 030f 	bfi	r3, r2, #0, #16
 800115e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fcd2 	bl	8000b0c <same_point>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001172:	b004      	add	sp, #16
 8001174:	4770      	bx	lr

08001176 <snake_grow>:

/**
 * @brief Grow the snake
 * @param snake: the snake object
*/
void snake_grow(Snake_t* snake) {
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    snake->body[snake->len].valid = 1;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	440b      	add	r3, r1
 800118c:	4413      	add	r3, r2
 800118e:	3301      	adds	r3, #1
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
    snake->body[snake->len].pos = snake->body[snake->len - 1].pos;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4603      	mov	r3, r0
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4403      	add	r3, r0
 80011a8:	440b      	add	r3, r1
 80011aa:	1c98      	adds	r0, r3, #2
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	3302      	adds	r3, #2
 80011b8:	4602      	mov	r2, r0
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	8013      	strh	r3, [r2, #0]
    snake->tail = &snake->body[snake->len];
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    
    snake->len++;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	701a      	strb	r2, [r3, #0]
    snake->score++;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

    return;
 80011f2:	bf00      	nop
}
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <snake_eat>:
/**
 * @brief Eat the food
 * @param snake: the snake object
 * @param food: the food object
*/
void snake_eat(Snake_t* snake, Food_t* food) {
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
    snake_grow(snake);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ffb4 	bl	8001176 <snake_grow>
    food_respawn(food);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f000 f826 	bl	8001260 <food_respawn>

    return;
 8001214:	bf00      	nop
}
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <snake_get_score>:
/**
 * @brief get snake score
 * @param snake: snake object
 * @return snake score
*/
uint8_t snake_get_score(Snake_t snake) {
 800121c:	b084      	sub	sp, #16
 800121e:	b490      	push	{r4, r7}
 8001220:	af00      	add	r7, sp, #0
 8001222:	f107 0408 	add.w	r4, r7, #8
 8001226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return snake.score;
 800122a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc90      	pop	{r4, r7}
 8001234:	b004      	add	sp, #16
 8001236:	4770      	bx	lr

08001238 <food_init>:

/**
 * @brief Initialize the food object
 * @return the food object
*/
Food_t food_init() {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
    Food_t food;
    food_respawn(&food);
 800123e:	463b      	mov	r3, r7
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f80d 	bl	8001260 <food_respawn>

    return food;
 8001246:	883b      	ldrh	r3, [r7, #0]
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	2300      	movs	r3, #0
 800124c:	793a      	ldrb	r2, [r7, #4]
 800124e:	f362 0307 	bfi	r3, r2, #0, #8
 8001252:	797a      	ldrb	r2, [r7, #5]
 8001254:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <food_respawn>:

/**
 * @brief Respawn the food object
 * @param food: the food object
*/
void food_respawn(Food_t* food) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    food->x = get_random(LEFT_BOUND + 1, RIGHT_BOUND - 1);
 8001268:	2163      	movs	r1, #99	@ 0x63
 800126a:	2009      	movs	r0, #9
 800126c:	f000 f866 	bl	800133c <get_random>
 8001270:	4603      	mov	r3, r0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	701a      	strb	r2, [r3, #0]
    food->y = get_random(TOP_BOUND + 1, BOTTOM_BOUND - 1);
 8001278:	2131      	movs	r1, #49	@ 0x31
 800127a:	2004      	movs	r0, #4
 800127c:	f000 f85e 	bl	800133c <get_random>
 8001280:	4603      	mov	r3, r0
 8001282:	b2da      	uxtb	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	705a      	strb	r2, [r3, #1]

    food_draw(*food);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	431a      	orrs	r2, r3
 8001292:	2300      	movs	r3, #0
 8001294:	f362 030f 	bfi	r3, r2, #0, #16
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f805 	bl	80012a8 <food_draw>
    return;
 800129e:	bf00      	nop
}
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <food_draw>:


/**
 * @brief Draw the food object
*/
void food_draw(Food_t food) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	80b8      	strh	r0, [r7, #4]
    sprintf(snake_print_buffer, "[%u;%uH", food.y, food.x);
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	461a      	mov	r2, r3
 80012b4:	793b      	ldrb	r3, [r7, #4]
 80012b6:	490b      	ldr	r1, [pc, #44]	@ (80012e4 <food_draw+0x3c>)
 80012b8:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <food_draw+0x40>)
 80012ba:	f002 f991 	bl	80035e0 <siprintf>
    uart_send_escape(snake_print_buffer);
 80012be:	480a      	ldr	r0, [pc, #40]	@ (80012e8 <food_draw+0x40>)
 80012c0:	f000 fc98 	bl	8001bf4 <uart_send_escape>
    uart_send_escape("[5m"); // blinking
 80012c4:	4809      	ldr	r0, [pc, #36]	@ (80012ec <food_draw+0x44>)
 80012c6:	f000 fc95 	bl	8001bf4 <uart_send_escape>
    uart_send_escape("[31m"); // red
 80012ca:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <food_draw+0x48>)
 80012cc:	f000 fc92 	bl	8001bf4 <uart_send_escape>
    uart_send_char('X');
 80012d0:	2058      	movs	r0, #88	@ 0x58
 80012d2:	f000 fc51 	bl	8001b78 <uart_send_char>
    uart_send_escape("[0m"); // back to default
 80012d6:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <food_draw+0x4c>)
 80012d8:	f000 fc8c 	bl	8001bf4 <uart_send_escape>


    return;
 80012dc:	bf00      	nop
}
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08003f3c 	.word	0x08003f3c
 80012e8:	200000c8 	.word	0x200000c8
 80012ec:	08003f74 	.word	0x08003f74
 80012f0:	08003f78 	.word	0x08003f78
 80012f4:	08003f38 	.word	0x08003f38

080012f8 <MX_RNG_Init>:

static void MX_RNG_Init(void);
RNG_HandleTypeDef hrng;


static void MX_RNG_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

    hrng.Instance = RNG;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_RNG_Init+0x20>)
 80012fe:	4a07      	ldr	r2, [pc, #28]	@ (800131c <MX_RNG_Init+0x24>)
 8001300:	601a      	str	r2, [r3, #0]
    if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_RNG_Init+0x20>)
 8001304:	f002 f914 	bl	8003530 <HAL_RNG_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_RNG_Init+0x1a>
        Error_Handler();
 800130e:	f000 fabd 	bl	800188c <Error_Handler>
    }
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000130 	.word	0x20000130
 800131c:	50060800 	.word	0x50060800

08001320 <rng_init>:

static uint32_t value;

void rng_init() {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    MX_RNG_Init();
 8001324:	f7ff ffe8 	bl	80012f8 <MX_RNG_Init>
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN; // shpuld already be enabled by HAL
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <rng_init+0x18>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	4a02      	ldr	r2, [pc, #8]	@ (8001338 <rng_init+0x18>)
 800132e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001332:	64d3      	str	r3, [r2, #76]	@ 0x4c

    return;
 8001334:	bf00      	nop
}
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <get_random>:

uint32_t get_random(uint32_t lower, uint32_t upper) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
    RNG->CR |= RNG_CR_RNGEN;
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <get_random+0x54>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <get_random+0x54>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6013      	str	r3, [r2, #0]

    while (!(RNG->SR & RNG_SR_DRDY));
 8001352:	bf00      	nop
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <get_random+0x54>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f9      	beq.n	8001354 <get_random+0x18>

    value = RNG->DR;
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <get_random+0x54>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <get_random+0x58>)
 8001366:	6013      	str	r3, [r2, #0]

    return (value % (upper - lower + 1) + lower);
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <get_random+0x58>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	1a8a      	subs	r2, r1, r2
 8001372:	3201      	adds	r2, #1
 8001374:	fbb3 f1f2 	udiv	r1, r3, r2
 8001378:	fb01 f202 	mul.w	r2, r1, r2
 800137c:	1a9a      	subs	r2, r3, r2
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	50060800 	.word	0x50060800
 8001394:	20000140 	.word	0x20000140

08001398 <print_start_screen>:
 *      Author: D4nny
 */

#include "Screen.h"

void print_start_screen() {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
    uart_clear_screen();
 800139e:	f000 fc37 	bl	8001c10 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 80013a2:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <print_start_screen+0x38>)
 80013a4:	f000 fc26 	bl	8001bf4 <uart_send_escape>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	e009      	b.n	80013c2 <print_start_screen+0x2a>
        uart_println(START_SCREEN[i]);
 80013ae:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <print_start_screen+0x3c>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fc0c 	bl	8001bd4 <uart_println>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b09      	cmp	r3, #9
 80013c6:	ddf2      	ble.n	80013ae <print_start_screen+0x16>
    }

    return;
 80013c8:	bf00      	nop
}
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	08004184 	.word	0x08004184
 80013d4:	20000000 	.word	0x20000000

080013d8 <print_game_over>:

void print_game_over(uint8_t score, uint8_t high_score) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09c      	sub	sp, #112	@ 0x70
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
    char buf[100];
    uart_clear_screen();
 80013e8:	f000 fc12 	bl	8001c10 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 80013ec:	4811      	ldr	r0, [pc, #68]	@ (8001434 <print_game_over+0x5c>)
 80013ee:	f000 fc01 	bl	8001bf4 <uart_send_escape>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013f6:	e009      	b.n	800140c <print_game_over+0x34>
        uart_println(GAME_OVER_SCREEN[i]);
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <print_game_over+0x60>)
 80013fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fbe7 	bl	8001bd4 <uart_println>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 8001406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001408:	3301      	adds	r3, #1
 800140a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800140c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800140e:	2b09      	cmp	r3, #9
 8001410:	ddf2      	ble.n	80013f8 <print_game_over+0x20>
    }
    sprintf(buf, "Score: %u HIGH SCORE: %u", score, high_score);
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	f107 0008 	add.w	r0, r7, #8
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <print_game_over+0x64>)
 800141c:	f002 f8e0 	bl	80035e0 <siprintf>
    uart_println(buf);
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fbd5 	bl	8001bd4 <uart_println>
    return;
 800142a:	bf00      	nop
}
 800142c:	3770      	adds	r7, #112	@ 0x70
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	08004184 	.word	0x08004184
 8001438:	20000028 	.word	0x20000028
 800143c:	08004188 	.word	0x08004188

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	@ (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db12      	blt.n	80014b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	490a      	ldr	r1, [pc, #40]	@ (80014c0 <__NVIC_DisableIRQ+0x44>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	3320      	adds	r3, #32
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a8:	f3bf 8f4f 	dsb	sy
}
 80014ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ae:	f3bf 8f6f 	isb	sy
}
 80014b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	00000000 	.word	0x00000000

080014c8 <main>:
void change_fps(uint32_t fps);
volatile int start_frame = 0;

void SystemClock_Config(void);

int main(void) {
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b0d4      	sub	sp, #336	@ 0x150
 80014cc:	af26      	add	r7, sp, #152	@ 0x98
    HAL_Init();
 80014ce:	f000 fbec 	bl	8001caa <HAL_Init>
    SystemClock_Config();
 80014d2:	f000 f989 	bl	80017e8 <SystemClock_Config>

    rng_init();
 80014d6:	f7ff ff23 	bl	8001320 <rng_init>
    uart_init();
 80014da:	f000 fb23 	bl	8001b24 <uart_init>
    joystick_init();
 80014de:	f7ff fac7 	bl	8000a70 <joystick_init>

    Snake_t snake;
    Food_t food;
    GameState_t state = START;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    print_start_screen();
 80014e8:	f7ff ff56 	bl	8001398 <print_start_screen>
    uint32_t fps;
    uint8_t high_score = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    

    int first_move = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    while (1) {
        switch (state) {
 80014f8:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f000 80d9 	beq.w	80016b4 <main+0x1ec>
 8001502:	2b02      	cmp	r3, #2
 8001504:	dcf8      	bgt.n	80014f8 <main+0x30>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <main+0x48>
 800150a:	2b01      	cmp	r3, #1
 800150c:	d01f      	beq.n	800154e <main+0x86>
 800150e:	e7f3      	b.n	80014f8 <main+0x30>
        case START:
            if (continue_on()) {
 8001510:	f000 f918 	bl	8001744 <continue_on>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80ed 	beq.w	80016f6 <main+0x22e>
                state = PLAYING;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                grid_init(high_score);
 8001522:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fb08 	bl	8000b3c <grid_init>
                snake_init(&snake);
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fbe9 	bl	8000d08 <snake_init>
                food = food_init();
 8001536:	f7ff fe7f 	bl	8001238 <food_init>
 800153a:	4603      	mov	r3, r0
 800153c:	80bb      	strh	r3, [r7, #4]
                fps = snake.len;
 800153e:	7a3b      	ldrb	r3, [r7, #8]
 8001540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 8001544:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001548:	f000 f904 	bl	8001754 <change_fps>

            }
            break;
 800154c:	e0d3      	b.n	80016f6 <main+0x22e>
        case PLAYING:
            if (!first_move) {
 800154e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <main+0xa8>
                if (snake_change_dir(&snake)) {
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fd74 	bl	8001048 <snake_change_dir>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80c9 	beq.w	80016fa <main+0x232>
                    first_move = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    break;
 800156e:	e0cb      	b.n	8001708 <main+0x240>
                }
                continue;
            }

            if (!start_frame) continue;
 8001570:	4b69      	ldr	r3, [pc, #420]	@ (8001718 <main+0x250>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80c2 	beq.w	80016fe <main+0x236>
            start_frame = 0;
 800157a:	4b67      	ldr	r3, [pc, #412]	@ (8001718 <main+0x250>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

            snake_move(&snake);
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fc6b 	bl	8000e60 <snake_move>
            if (snake_check_food(snake, food)) {
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 8001590:	4668      	mov	r0, sp
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2290      	movs	r2, #144	@ 0x90
 8001598:	4619      	mov	r1, r3
 800159a:	f002 f875 	bl	8003688 <memcpy>
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a4:	f7ff fdd0 	bl	8001148 <snake_check_food>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d036      	beq.n	800161c <main+0x154>
                snake_eat(&snake, &food);
 80015ae:	1d3a      	adds	r2, r7, #4
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fe21 	bl	80011fe <snake_eat>
                fps += snake_get_score(snake) * 1.15;
 80015bc:	4668      	mov	r0, sp
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	2290      	movs	r2, #144	@ 0x90
 80015c4:	4619      	mov	r1, r3
 80015c6:	f002 f85f 	bl	8003688 <memcpy>
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d0:	f7ff fe24 	bl	800121c <snake_get_score>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f8c6 	bl	8000768 <__aeabi_i2d>
 80015dc:	a34c      	add	r3, pc, #304	@ (adr r3, 8001710 <main+0x248>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fe45 	bl	8000270 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4614      	mov	r4, r2
 80015ec:	461d      	mov	r5, r3
 80015ee:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80015f2:	f7ff f8a9 	bl	8000748 <__aeabi_ui2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe ff67 	bl	80004d0 <__adddf3>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff f917 	bl	800083c <__aeabi_d2uiz>
 800160e:	4603      	mov	r3, r0
 8001610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 8001614:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001618:	f000 f89c 	bl	8001754 <change_fps>
            }
            grid_draw(snake, food);
 800161c:	88bb      	ldrh	r3, [r7, #4]
 800161e:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 8001622:	4668      	mov	r0, sp
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	2290      	movs	r2, #144	@ 0x90
 800162a:	4619      	mov	r1, r3
 800162c:	f002 f82c 	bl	8003688 <memcpy>
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001636:	f7ff fb03 	bl	8000c40 <grid_draw>

            if (!snake.alive) {
 800163a:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800163e:	2b00      	cmp	r3, #0
 8001640:	d15f      	bne.n	8001702 <main+0x23a>
                state = GAME_OVER;
 8001642:	2302      	movs	r3, #2
 8001644:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                if (snake_get_score(snake) > high_score) high_score = snake_get_score(snake);
 8001648:	4668      	mov	r0, sp
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	2290      	movs	r2, #144	@ 0x90
 8001650:	4619      	mov	r1, r3
 8001652:	f002 f819 	bl	8003688 <memcpy>
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165c:	f7ff fdde 	bl	800121c <snake_get_score>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001668:	4293      	cmp	r3, r2
 800166a:	d20e      	bcs.n	800168a <main+0x1c2>
 800166c:	4668      	mov	r0, sp
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	2290      	movs	r2, #144	@ 0x90
 8001674:	4619      	mov	r1, r3
 8001676:	f002 f807 	bl	8003688 <memcpy>
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001680:	f7ff fdcc 	bl	800121c <snake_get_score>
 8001684:	4603      	mov	r3, r0
 8001686:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                print_game_over(snake_get_score(snake), high_score);
 800168a:	4668      	mov	r0, sp
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	2290      	movs	r2, #144	@ 0x90
 8001692:	4619      	mov	r1, r3
 8001694:	f001 fff8 	bl	8003688 <memcpy>
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800169e:	f7ff fdbd 	bl	800121c <snake_get_score>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f7ff fe93 	bl	80013d8 <print_game_over>
            }
            break;
 80016b2:	e026      	b.n	8001702 <main+0x23a>
        case GAME_OVER:
            if (continue_on()) {
 80016b4:	f000 f846 	bl	8001744 <continue_on>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d023      	beq.n	8001706 <main+0x23e>
            	state = PLAYING;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            	grid_init(high_score);
 80016c4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fa37 	bl	8000b3c <grid_init>
            	snake_init(&snake);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb18 	bl	8000d08 <snake_init>
            	food = food_init();
 80016d8:	f7ff fdae 	bl	8001238 <food_init>
 80016dc:	4603      	mov	r3, r0
 80016de:	80bb      	strh	r3, [r7, #4]
            	first_move = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                fps = snake.len;
 80016e6:	7a3b      	ldrb	r3, [r7, #8]
 80016e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 80016ec:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80016f0:	f000 f830 	bl	8001754 <change_fps>
            }
            break;
 80016f4:	e007      	b.n	8001706 <main+0x23e>
            break;
 80016f6:	bf00      	nop
 80016f8:	e6fe      	b.n	80014f8 <main+0x30>
                continue;
 80016fa:	bf00      	nop
 80016fc:	e6fc      	b.n	80014f8 <main+0x30>
            if (!start_frame) continue;
 80016fe:	bf00      	nop
 8001700:	e6fa      	b.n	80014f8 <main+0x30>
            break;
 8001702:	bf00      	nop
 8001704:	e6f8      	b.n	80014f8 <main+0x30>
            break;
 8001706:	bf00      	nop
        switch (state) {
 8001708:	e6f6      	b.n	80014f8 <main+0x30>
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	66666666 	.word	0x66666666
 8001714:	3ff26666 	.word	0x3ff26666
 8001718:	20000144 	.word	0x20000144

0800171c <TIM2_IRQHandler>:

    return 0;
}


void TIM2_IRQHandler() {
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
    start_frame = 1;
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <TIM2_IRQHandler+0x24>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]
    TIM2->SR &= ~TIM_SR_UIF;
 8001726:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6113      	str	r3, [r2, #16]

    return;
 8001736:	bf00      	nop
}
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000144 	.word	0x20000144

08001744 <continue_on>:



int continue_on() {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    return get_joystick_button();
 8001748:	f7ff f9ce 	bl	8000ae8 <get_joystick_button>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <change_fps>:


void change_fps(uint32_t fps) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800175c:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <change_fps+0x8c>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001760:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <change_fps+0x8c>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 8001768:	201c      	movs	r0, #28
 800176a:	f7ff fe87 	bl	800147c <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 800176e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 800177e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~TIM_SR_UIF;  
 8001786:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6113      	str	r3, [r2, #16]
    
    
    TIM2->ARR = CPU_FREQ / fps;
 8001796:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179a:	4912      	ldr	r1, [pc, #72]	@ (80017e4 <change_fps+0x90>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 80017a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER |= TIM_DIER_UIE;
 80017ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	60d3      	str	r3, [r2, #12]

//    DBGMCU->APB1FZR1 |= 1;

    NVIC_EnableIRQ(TIM2_IRQn);
 80017bc:	201c      	movs	r0, #28
 80017be:	f7ff fe3f 	bl	8001440 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80017c2:	b662      	cpsie	i
}
 80017c4:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 80017c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
    return;
 80017d6:	bf00      	nop


}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	01e84800 	.word	0x01e84800

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b096      	sub	sp, #88	@ 0x58
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	2244      	movs	r2, #68	@ 0x44
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 ff12 	bl	8003620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800180a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800180e:	f000 fbb5 	bl	8001f7c <HAL_PWREx_ControlVoltageScaling>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001818:	f000 f838 	bl	800188c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800181c:	2310      	movs	r3, #16
 800181e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001820:	2301      	movs	r3, #1
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001828:	2360      	movs	r3, #96	@ 0x60
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182c:	2302      	movs	r3, #2
 800182e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001830:	2301      	movs	r3, #1
 8001832:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001834:	2301      	movs	r3, #1
 8001836:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001838:	2310      	movs	r3, #16
 800183a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800183c:	2307      	movs	r3, #7
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001840:	2302      	movs	r3, #2
 8001842:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001844:	2302      	movs	r3, #2
 8001846:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fbeb 	bl	8002028 <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001858:	f000 f818 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001860:	2303      	movs	r3, #3
 8001862:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	2101      	movs	r1, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f000 ffb3 	bl	80027e0 <HAL_RCC_ClockConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001880:	f000 f804 	bl	800188c <Error_Handler>
  }
}
 8001884:	bf00      	nop
 8001886:	3758      	adds	r7, #88	@ 0x58
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <Error_Handler+0x8>

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <HAL_MspInit+0x44>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a2:	4a0e      	ldr	r2, [pc, #56]	@ (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <HAL_MspInit+0x44>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_MspInit+0x44>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_MspInit+0x44>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0a6      	sub	sp, #152	@ 0x98
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2288      	movs	r2, #136	@ 0x88
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f001 fe95 	bl	8003620 <memset>
  if(hrng->Instance==RNG)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <HAL_RNG_MspInit+0x80>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d12b      	bne.n	8001958 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001900:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001904:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001906:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800190a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001916:	2310      	movs	r3, #16
 8001918:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800191a:	2307      	movs	r3, #7
 800191c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800191e:	2302      	movs	r3, #2
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001926:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4618      	mov	r0, r3
 8001932:	f001 f941 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 800193c:	f7ff ffa6 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_RNG_MspInit+0x84>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_RNG_MspInit+0x84>)
 8001946:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RNG_MspInit+0x84>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3798      	adds	r7, #152	@ 0x98
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	50060800 	.word	0x50060800
 8001964:	40021000 	.word	0x40021000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <NMI_Handler+0x4>

08001970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <MemManage_Handler+0x4>

08001980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <UsageFault_Handler+0x4>

08001990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f000 f9c9 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f001 fe1a 	bl	8003630 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20018000 	.word	0x20018000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	20000148 	.word	0x20000148
 8001a30:	200002a0 	.word	0x200002a0

08001a34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	@ (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <uart_pin_init+0x8c>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a20      	ldr	r2, [pc, #128]	@ (8001b20 <uart_pin_init+0x8c>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8001aa4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ab2:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8001ab4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001abe:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001ac2:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001ac4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ad2:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001ad4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ade:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ae2:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8001ae4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001aee:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001af2:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8001af4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b02:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8001b04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001b0e:	f023 030c 	bic.w	r3, r3, #12
 8001b12:	6053      	str	r3, [r2, #4]
    return;
 8001b14:	bf00      	nop
}
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
    uart_pin_init();
 8001b28:	f7ff ffb4 	bl	8001a94 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <uart_init+0x48>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b30:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <uart_init+0x48>)
 8001b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b36:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <uart_init+0x4c>)
 8001b3a:	222c      	movs	r2, #44	@ 0x2c
 8001b3c:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <uart_init+0x4c>)
 8001b40:	f240 1215 	movw	r2, #277	@ 0x115
 8001b44:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 8001b46:	2026      	movs	r0, #38	@ 0x26
 8001b48:	f7ff ff86 	bl	8001a58 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4c:	b662      	cpsie	i
}
 8001b4e:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <uart_init+0x4c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a06      	ldr	r2, [pc, #24]	@ (8001b70 <uart_init+0x4c>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 8001b5c:	f000 f858 	bl	8001c10 <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 8001b60:	4804      	ldr	r0, [pc, #16]	@ (8001b74 <uart_init+0x50>)
 8001b62:	f000 f847 	bl	8001bf4 <uart_send_escape>
    return;
 8001b66:	bf00      	nop
}
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40004400 	.word	0x40004400
 8001b74:	080041a4 	.word	0x080041a4

08001b78 <uart_send_char>:

void uart_send_char(char c) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8001b82:	bf00      	nop
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <uart_send_char+0x2c>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f9      	beq.n	8001b84 <uart_send_char+0xc>
    USART2->TDR = c;
 8001b90:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <uart_send_char+0x2c>)
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	b292      	uxth	r2, r2
 8001b96:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8001b98:	bf00      	nop
}
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40004400 	.word	0x40004400

08001ba8 <uart_send_string>:

void uart_send_string(const char* str) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8001bb0:	e007      	b.n	8001bc2 <uart_send_string+0x1a>
        uart_send_char(*str);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ffde 	bl	8001b78 <uart_send_char>
        str++;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f3      	bne.n	8001bb2 <uart_send_string+0xa>
    }

    return;
 8001bca:	bf00      	nop
}
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <uart_println>:

void uart_println(const char* str) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
    uart_send_string(str);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffe3 	bl	8001ba8 <uart_send_string>
    uart_send_escape("[1E");
 8001be2:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <uart_println+0x1c>)
 8001be4:	f000 f806 	bl	8001bf4 <uart_send_escape>

    return;
 8001be8:	bf00      	nop
}
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	080041ac 	.word	0x080041ac

08001bf4 <uart_send_escape>:

void uart_send_escape(const char* str) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 8001bfc:	201b      	movs	r0, #27
 8001bfe:	f7ff ffbb 	bl	8001b78 <uart_send_char>
    uart_send_string(str);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffd0 	bl	8001ba8 <uart_send_string>

    return;
 8001c08:	bf00      	nop
}
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <uart_clear_screen>:


void uart_clear_screen(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 8001c14:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <uart_clear_screen+0x14>)
 8001c16:	f7ff ffed 	bl	8001bf4 <uart_send_escape>
    uart_send_escape("[H");
 8001c1a:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <uart_clear_screen+0x18>)
 8001c1c:	f7ff ffea 	bl	8001bf4 <uart_send_escape>

    return;
 8001c20:	bf00      	nop
}
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	080041b0 	.word	0x080041b0
 8001c28:	080041b4 	.word	0x080041b4

08001c2c <USART2_IRQHandler>:
    uart_send_escape(buf);

    return;
}

void USART2_IRQHandler(void) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <USART2_IRQHandler+0x20>)
 8001c32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <USART2_IRQHandler+0x24>)
 8001c3a:	701a      	strb	r2, [r3, #0]
    flag = 1;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <USART2_IRQHandler+0x28>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    return;
 8001c42:	bf00      	nop
}
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	20000150 	.word	0x20000150
 8001c54:	2000014c 	.word	0x2000014c

08001c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c5c:	f7ff feea 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c62:	490d      	ldr	r1, [pc, #52]	@ (8001c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <LoopForever+0xe>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca4 <LoopForever+0x16>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f001 fcd9 	bl	800363c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8a:	f7ff fc1d 	bl	80014c8 <main>

08001c8e <LoopForever>:

LoopForever:
    b LoopForever
 8001c8e:	e7fe      	b.n	8001c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001c9c:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 8001ca0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001ca4:	200002a0 	.word	0x200002a0

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>

08001caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f91f 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f000 f80e 	bl	8001cdc <HAL_InitTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	e001      	b.n	8001cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ccc:	f7ff fde4 	bl	8001898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ce8:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <HAL_InitTick+0x6c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d023      	beq.n	8001d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_InitTick+0x70>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_InitTick+0x6c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f91d 	bl	8001f46 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d809      	bhi.n	8001d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d20:	f000 f8f5 	bl	8001f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_InitTick+0x74>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e007      	b.n	8001d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e004      	b.n	8001d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e001      	b.n	8001d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000058 	.word	0x20000058
 8001d4c:	20000050 	.word	0x20000050
 8001d50:	20000054 	.word	0x20000054

08001d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_IncTick+0x24>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <HAL_IncTick+0x24>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000058 	.word	0x20000058
 8001d78:	20000154 	.word	0x20000154

08001d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <HAL_GetTick+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000154 	.word	0x20000154

08001d94 <__NVIC_SetPriorityGrouping>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	@ (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff47 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff5c 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffb0 	bl	8001eb4 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40007000 	.word	0x40007000

08001f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f8a:	d130      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f98:	d038      	beq.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2232      	movs	r2, #50	@ 0x32
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc0:	e002      	b.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd4:	d102      	bne.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f2      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe8:	d110      	bne.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e00f      	b.n	800200e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffa:	d007      	beq.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002004:	4a05      	ldr	r2, [pc, #20]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000
 8002020:	20000050 	.word	0x20000050
 8002024:	431bde83 	.word	0x431bde83

08002028 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e3ca      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4b97      	ldr	r3, [pc, #604]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	4b94      	ldr	r3, [pc, #592]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80e4 	beq.w	8002224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_RCC_OscConfig+0x4a>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	f040 808b 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 8087 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002072:	4b89      	ldr	r3, [pc, #548]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x62>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e3a2      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	4b82      	ldr	r3, [pc, #520]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_RCC_OscConfig+0x7c>
 800209a:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_OscConfig+0x88>
 80020a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d223      	bcs.n	80020fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fd1d 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e383      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a72      	ldr	r2, [pc, #456]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	496d      	ldr	r1, [pc, #436]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4968      	ldr	r1, [pc, #416]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e025      	b.n	8002148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a65      	ldr	r2, [pc, #404]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b63      	ldr	r3, [pc, #396]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4960      	ldr	r1, [pc, #384]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b5f      	ldr	r3, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	495b      	ldr	r1, [pc, #364]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fcdd 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e343      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002148:	f000 fc4a 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b52      	ldr	r3, [pc, #328]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4950      	ldr	r1, [pc, #320]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a4e      	ldr	r2, [pc, #312]	@ (80022a0 <HAL_RCC_OscConfig+0x278>)
 8002166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002168:	4b4e      	ldr	r3, [pc, #312]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fdb5 	bl	8001cdc <HAL_InitTick>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d052      	beq.n	8002222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	e327      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d032      	beq.n	80021ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002188:	4b43      	ldr	r3, [pc, #268]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a42      	ldr	r2, [pc, #264]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002194:	f7ff fdf2 	bl	8001d7c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219c:	f7ff fdee 	bl	8001d7c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e310      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a36      	ldr	r2, [pc, #216]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4931      	ldr	r1, [pc, #196]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	492c      	ldr	r1, [pc, #176]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e01a      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a29      	ldr	r2, [pc, #164]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fa:	f7ff fdbf 	bl	8001d7c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002202:	f7ff fdbb 	bl	8001d7c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e2dd      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x1da>
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d074      	beq.n	800231a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b08      	cmp	r3, #8
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x21a>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d10e      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d10b      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d064      	beq.n	8002318 <HAL_RCC_OscConfig+0x2f0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d160      	bne.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e2ba      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x24a>
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e026      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227a:	d115      	bne.n	80022a8 <HAL_RCC_OscConfig+0x280>
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a02      	ldr	r2, [pc, #8]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	080041c0 	.word	0x080041c0
 80022a0:	20000050 	.word	0x20000050
 80022a4:	20000054 	.word	0x20000054
 80022a8:	4ba0      	ldr	r3, [pc, #640]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a9f      	ldr	r2, [pc, #636]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b9d      	ldr	r3, [pc, #628]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a9c      	ldr	r2, [pc, #624]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff fd58 	bl	8001d7c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fd54 	bl	8001d7c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e276      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b92      	ldr	r3, [pc, #584]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2a8>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff fd44 	bl	8001d7c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff fd40 	bl	8001d7c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e262      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2d0>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x310>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d119      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d116      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	4b7c      	ldr	r3, [pc, #496]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x328>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e23f      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	4973      	ldr	r1, [pc, #460]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	e040      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d023      	beq.n	80023b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	4b6f      	ldr	r3, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7ff fcff 	bl	8001d7c <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff fcfb 	bl	8001d7c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e21d      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b62      	ldr	r3, [pc, #392]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	495f      	ldr	r1, [pc, #380]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	e018      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b5d      	ldr	r3, [pc, #372]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7ff fcdb 	bl	8001d7c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7ff fcd7 	bl	8001d7c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1f9      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03c      	beq.n	800246e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01c      	beq.n	8002436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fc:	4b4b      	ldr	r3, [pc, #300]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	4a4a      	ldr	r2, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7ff fcb6 	bl	8001d7c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fcb2 	bl	8001d7c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1d4      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCC_OscConfig+0x3ec>
 8002434:	e01b      	b.n	800246e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b3d      	ldr	r3, [pc, #244]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243c:	4a3b      	ldr	r2, [pc, #236]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff fc99 	bl	8001d7c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fc95 	bl	8001d7c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1b7      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002460:	4b32      	ldr	r3, [pc, #200]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ef      	bne.n	800244e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a6 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002480:	4b2a      	ldr	r3, [pc, #168]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	4a26      	ldr	r2, [pc, #152]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	@ 0x58
 8002498:	4b24      	ldr	r3, [pc, #144]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a8:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d118      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fc5c 	bl	8001d7c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7ff fc58 	bl	8001d7c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e17a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x4d8>
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024fe:	e029      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d115      	bne.n	8002534 <HAL_RCC_OscConfig+0x50c>
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	4a07      	ldr	r2, [pc, #28]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	4a03      	ldr	r2, [pc, #12]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002528:	e014      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	4b9c      	ldr	r3, [pc, #624]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	4a9b      	ldr	r2, [pc, #620]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002544:	4b98      	ldr	r3, [pc, #608]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	4a97      	ldr	r2, [pc, #604]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7ff fc0e 	bl	8001d7c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7ff fc0a 	bl	8001d7c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e12a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	4b8b      	ldr	r3, [pc, #556]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ed      	beq.n	8002564 <HAL_RCC_OscConfig+0x53c>
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7ff fbf7 	bl	8001d7c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7ff fbf3 	bl	8001d7c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e113      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	4b7f      	ldr	r3, [pc, #508]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ed      	bne.n	8002592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	4a79      	ldr	r2, [pc, #484]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80fe 	beq.w	80027ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80d0 	bne.w	800277c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025dc:	4b72      	ldr	r3, [pc, #456]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d130      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	3b01      	subs	r3, #1
 80025fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d127      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d11f      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800261c:	2a07      	cmp	r2, #7
 800261e:	bf14      	ite	ne
 8002620:	2201      	movne	r2, #1
 8002622:	2200      	moveq	r2, #0
 8002624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002626:	4293      	cmp	r3, r2
 8002628:	d113      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	3b01      	subs	r3, #1
 8002638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d109      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d06e      	beq.n	8002730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d069      	beq.n	800272c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002658:	4b53      	ldr	r3, [pc, #332]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002664:	4b50      	ldr	r3, [pc, #320]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ad      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002674:	4b4c      	ldr	r3, [pc, #304]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a4b      	ldr	r2, [pc, #300]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002680:	f7ff fb7c 	bl	8001d7c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fb78 	bl	8001d7c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e09a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269a:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a6:	4b40      	ldr	r3, [pc, #256]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b40      	ldr	r3, [pc, #256]	@ (80027ac <HAL_RCC_OscConfig+0x784>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026b6:	3a01      	subs	r2, #1
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026c0:	0212      	lsls	r2, r2, #8
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026c8:	0852      	lsrs	r2, r2, #1
 80026ca:	3a01      	subs	r2, #1
 80026cc:	0552      	lsls	r2, r2, #21
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026d4:	0852      	lsrs	r2, r2, #1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0652      	lsls	r2, r2, #25
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026e0:	0912      	lsrs	r2, r2, #4
 80026e2:	0452      	lsls	r2, r2, #17
 80026e4:	430a      	orrs	r2, r1
 80026e6:	4930      	ldr	r1, [pc, #192]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026ec:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a2a      	ldr	r2, [pc, #168]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002704:	f7ff fb3a 	bl	8001d7c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff fb36 	bl	8001d7c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e058      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272a:	e050      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e04f      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d148      	bne.n	80027ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002754:	f7ff fb12 	bl	8001d7c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff fb0e 	bl	8001d7c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e030      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x734>
 800277a:	e028      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d023      	beq.n	80027ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a08      	ldr	r2, [pc, #32]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7ff faf5 	bl	8001d7c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	e00c      	b.n	80027b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff faf1 	bl	8001d7c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d905      	bls.n	80027b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e013      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
 80027a8:	40021000 	.word	0x40021000
 80027ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ec      	bne.n	8002796 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4905      	ldr	r1, [pc, #20]	@ (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_RCC_OscConfig+0x7b4>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e001      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	feeefffc 	.word	0xfeeefffc

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0e7      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b75      	ldr	r3, [pc, #468]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d910      	bls.n	8002824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b72      	ldr	r3, [pc, #456]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4970      	ldr	r1, [pc, #448]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b6e      	ldr	r3, [pc, #440]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0cf      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b66      	ldr	r3, [pc, #408]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800283c:	429a      	cmp	r2, r3
 800283e:	d908      	bls.n	8002852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b63      	ldr	r3, [pc, #396]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4960      	ldr	r1, [pc, #384]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04c      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b5a      	ldr	r3, [pc, #360]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0a6      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287e:	4b54      	ldr	r3, [pc, #336]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e09a      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e08e      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a6:	4b4a      	ldr	r3, [pc, #296]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e086      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b46      	ldr	r3, [pc, #280]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4943      	ldr	r1, [pc, #268]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c8:	f7ff fa58 	bl	8001d7c <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7ff fa54 	bl	8001d7c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e06e      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002910:	429a      	cmp	r2, r3
 8002912:	d208      	bcs.n	8002926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b2e      	ldr	r3, [pc, #184]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	492b      	ldr	r1, [pc, #172]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d210      	bcs.n	8002956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002934:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 0207 	bic.w	r2, r3, #7
 800293c:	4923      	ldr	r1, [pc, #140]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e036      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4918      	ldr	r1, [pc, #96]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4910      	ldr	r1, [pc, #64]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002994:	f000 f824 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	490b      	ldr	r1, [pc, #44]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f4>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029b4:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1fc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f98f 	bl	8001cdc <HAL_InitTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029c2:	7afb      	ldrb	r3, [r7, #11]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	080041c0 	.word	0x080041c0
 80029d8:	20000050 	.word	0x20000050
 80029dc:	20000054 	.word	0x20000054

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	@ 0x24
 80029e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d121      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d11e      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a14:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a20:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e005      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e004      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a64:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d134      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d003      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0xac>
 8002a84:	e005      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a88:	617b      	str	r3, [r7, #20]
      break;
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a8e:	617b      	str	r3, [r7, #20]
      break;
 8002a90:	e002      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	617b      	str	r3, [r7, #20]
      break;
 8002a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a98:	4b13      	ldr	r3, [pc, #76]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	fb03 f202 	mul.w	r2, r3, r2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	0e5b      	lsrs	r3, r3, #25
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	080041d0 	.word	0x080041d0
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	007a1200 	.word	0x007a1200

08002af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b10:	f7ff fa26 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002b14:	6178      	str	r0, [r7, #20]
 8002b16:	e014      	b.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b30:	f7ff fa16 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b48:	d10b      	bne.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b80      	cmp	r3, #128	@ 0x80
 8002b4e:	d919      	bls.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b54:	d902      	bls.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b56:	2302      	movs	r3, #2
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e013      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	e010      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	@ 0x80
 8002b66:	d902      	bls.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b68:	2303      	movs	r3, #3
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e00a      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b80      	cmp	r3, #128	@ 0x80
 8002b72:	d102      	bne.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b74:	2302      	movs	r3, #2
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e004      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b70      	cmp	r3, #112	@ 0x70
 8002b7e:	d101      	bne.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b80:	2301      	movs	r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 0207 	bic.w	r2, r3, #7
 8002b8c:	4909      	ldr	r1, [pc, #36]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d041      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bdc:	d02a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002be2:	d824      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002be4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bee:	d81e      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bfa:	e018      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bfc:	4b86      	ldr	r3, [pc, #536]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a85      	ldr	r2, [pc, #532]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c08:	e015      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fabb 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c1a:	e00c      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3320      	adds	r3, #32
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fba6 	bl	8003374 <RCCEx_PLLSAI2_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c2c:	e003      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	74fb      	strb	r3, [r7, #19]
      break;
 8002c32:	e000      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3c:	4b76      	ldr	r3, [pc, #472]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c4a:	4973      	ldr	r1, [pc, #460]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c52:	e001      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d041      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c6c:	d02a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c72:	d824      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c7e:	d81e      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c88:	d010      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c8a:	e018      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c8c:	4b62      	ldr	r3, [pc, #392]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a61      	ldr	r2, [pc, #388]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c98:	e015      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fa73 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002caa:	e00c      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3320      	adds	r3, #32
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fb5e 	bl	8003374 <RCCEx_PLLSAI2_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cbc:	e003      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ccc:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cda:	494f      	ldr	r1, [pc, #316]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a0 	beq.w	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b41      	ldr	r3, [pc, #260]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4a40      	ldr	r2, [pc, #256]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d38:	f7ff f820 	bl	8001d7c <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d3e:	e009      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7ff f81c 	bl	8001d7c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d902      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	74fb      	strb	r3, [r7, #19]
        break;
 8002d52:	e005      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d54:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d15c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d66:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01f      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d019      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d84:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d90:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	4a20      	ldr	r2, [pc, #128]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002da0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002db0:	4a19      	ldr	r2, [pc, #100]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe ffdb 	bl	8001d7c <HAL_GetTick>
 8002dc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe ffd7 	bl	8001d7c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d902      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	74fb      	strb	r3, [r7, #19]
            break;
 8002de0:	e006      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ec      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e06:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e0e:	e009      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
 8002e14:	e006      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e24:	7c7b      	ldrb	r3, [r7, #17]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b9e      	ldr	r3, [pc, #632]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	4a9d      	ldr	r2, [pc, #628]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e42:	4b98      	ldr	r3, [pc, #608]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f023 0203 	bic.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	4994      	ldr	r1, [pc, #592]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e64:	4b8f      	ldr	r3, [pc, #572]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6a:	f023 020c 	bic.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	498c      	ldr	r1, [pc, #560]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e86:	4b87      	ldr	r3, [pc, #540]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	4983      	ldr	r1, [pc, #524]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	497b      	ldr	r1, [pc, #492]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eca:	4b76      	ldr	r3, [pc, #472]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed8:	4972      	ldr	r1, [pc, #456]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eec:	4b6d      	ldr	r3, [pc, #436]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efa:	496a      	ldr	r1, [pc, #424]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	4961      	ldr	r1, [pc, #388]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f30:	4b5c      	ldr	r3, [pc, #368]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3e:	4959      	ldr	r1, [pc, #356]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f52:	4b54      	ldr	r3, [pc, #336]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f60:	4950      	ldr	r1, [pc, #320]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f74:	4b4b      	ldr	r3, [pc, #300]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	4948      	ldr	r1, [pc, #288]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f96:	4b43      	ldr	r3, [pc, #268]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	493f      	ldr	r1, [pc, #252]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d028      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc6:	4937      	ldr	r1, [pc, #220]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b32      	ldr	r3, [pc, #200]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a31      	ldr	r2, [pc, #196]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e011      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fee:	d10c      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f8c8 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d028      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003016:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003024:	491f      	ldr	r1, [pc, #124]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003030:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003034:	d106      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003036:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a1a      	ldr	r2, [pc, #104]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003040:	60d3      	str	r3, [r2, #12]
 8003042:	e011      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f899 	bl	800318c <RCCEx_PLLSAI1_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02b      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003092:	d109      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a02      	ldr	r2, [pc, #8]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800309e:	60d3      	str	r3, [r2, #12]
 80030a0:	e014      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f867 	bl	800318c <RCCEx_PLLSAI1_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02f      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030e6:	4928      	ldr	r1, [pc, #160]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030f6:	d10d      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	2102      	movs	r1, #2
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f844 	bl	800318c <RCCEx_PLLSAI1_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d014      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	74bb      	strb	r3, [r7, #18]
 8003112:	e011      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800311c:	d10c      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3320      	adds	r3, #32
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f925 	bl	8003374 <RCCEx_PLLSAI2_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003144:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003152:	490d      	ldr	r1, [pc, #52]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003176:	4904      	ldr	r1, [pc, #16]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800317e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800319a:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d018      	beq.n	80031d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031a6:	4b72      	ldr	r3, [pc, #456]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0203 	and.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d10d      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
       ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031be:	4b6c      	ldr	r3, [pc, #432]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
       ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d047      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	e044      	b.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d018      	beq.n	8003212 <RCCEx_PLLSAI1_Config+0x86>
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d825      	bhi.n	8003230 <RCCEx_PLLSAI1_Config+0xa4>
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d002      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x62>
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d009      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x74>
 80031ec:	e020      	b.n	8003230 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ee:	4b60      	ldr	r3, [pc, #384]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11d      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e01a      	b.n	8003236 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003200:	4b5b      	ldr	r3, [pc, #364]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d116      	bne.n	800323a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003210:	e013      	b.n	800323a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003212:	4b57      	ldr	r3, [pc, #348]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800321e:	4b54      	ldr	r3, [pc, #336]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800322e:	e006      	b.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e004      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003236:	bf00      	nop
 8003238:	e002      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323a:	bf00      	nop
 800323c:	e000      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003246:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	430b      	orrs	r3, r1
 800325c:	4944      	ldr	r1, [pc, #272]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d17d      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003268:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a40      	ldr	r2, [pc, #256]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fe fd82 	bl	8001d7c <HAL_GetTick>
 8003278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327a:	e009      	b.n	8003290 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327c:	f7fe fd7e 	bl	8001d7c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d902      	bls.n	8003290 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	73fb      	strb	r3, [r7, #15]
        break;
 800328e:	e005      	b.n	800329c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003290:	4b37      	ldr	r3, [pc, #220]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ef      	bne.n	800327c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d160      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6892      	ldr	r2, [r2, #8]
 80032b8:	0211      	lsls	r1, r2, #8
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	0912      	lsrs	r2, r2, #4
 80032c0:	0452      	lsls	r2, r2, #17
 80032c2:	430a      	orrs	r2, r1
 80032c4:	492a      	ldr	r1, [pc, #168]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	610b      	str	r3, [r1, #16]
 80032ca:	e027      	b.n	800331c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d112      	bne.n	80032f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d2:	4b27      	ldr	r3, [pc, #156]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	0211      	lsls	r1, r2, #8
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6912      	ldr	r2, [r2, #16]
 80032e8:	0852      	lsrs	r2, r2, #1
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0552      	lsls	r2, r2, #21
 80032ee:	430a      	orrs	r2, r1
 80032f0:	491f      	ldr	r1, [pc, #124]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]
 80032f6:	e011      	b.n	800331c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003300:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	0211      	lsls	r1, r2, #8
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6952      	ldr	r2, [r2, #20]
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0652      	lsls	r2, r2, #25
 8003314:	430a      	orrs	r2, r1
 8003316:	4916      	ldr	r1, [pc, #88]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fe fd28 	bl	8001d7c <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800332e:	e009      	b.n	8003344 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003330:	f7fe fd24 	bl	8001d7c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d902      	bls.n	8003344 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	73fb      	strb	r3, [r7, #15]
          break;
 8003342:	e005      	b.n	8003350 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4904      	ldr	r1, [pc, #16]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003382:	4b6a      	ldr	r3, [pc, #424]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800338e:	4b67      	ldr	r3, [pc, #412]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d10d      	bne.n	80033ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
       ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033a6:	4b61      	ldr	r3, [pc, #388]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
       ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d047      	beq.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e044      	b.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d018      	beq.n	80033fa <RCCEx_PLLSAI2_Config+0x86>
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d825      	bhi.n	8003418 <RCCEx_PLLSAI2_Config+0xa4>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d002      	beq.n	80033d6 <RCCEx_PLLSAI2_Config+0x62>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d009      	beq.n	80033e8 <RCCEx_PLLSAI2_Config+0x74>
 80033d4:	e020      	b.n	8003418 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d6:	4b55      	ldr	r3, [pc, #340]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11d      	bne.n	800341e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e6:	e01a      	b.n	800341e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e8:	4b50      	ldr	r3, [pc, #320]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f8:	e013      	b.n	8003422 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033fa:	4b4c      	ldr	r3, [pc, #304]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003406:	4b49      	ldr	r3, [pc, #292]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003416:	e006      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e004      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003426:	bf00      	nop
    }

    if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342e:	4b3f      	ldr	r3, [pc, #252]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	430b      	orrs	r3, r1
 8003444:	4939      	ldr	r1, [pc, #228]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d167      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003450:	4b36      	ldr	r3, [pc, #216]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a35      	ldr	r2, [pc, #212]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345c:	f7fe fc8e 	bl	8001d7c <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003462:	e009      	b.n	8003478 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003464:	f7fe fc8a 	bl	8001d7c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d902      	bls.n	8003478 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	73fb      	strb	r3, [r7, #15]
        break;
 8003476:	e005      	b.n	8003484 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003478:	4b2c      	ldr	r3, [pc, #176]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ef      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14a      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003490:	4b26      	ldr	r3, [pc, #152]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	0211      	lsls	r1, r2, #8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	0912      	lsrs	r2, r2, #4
 80034a8:	0452      	lsls	r2, r2, #17
 80034aa:	430a      	orrs	r2, r1
 80034ac:	491f      	ldr	r1, [pc, #124]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	614b      	str	r3, [r1, #20]
 80034b2:	e011      	b.n	80034d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	0211      	lsls	r1, r2, #8
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6912      	ldr	r2, [r2, #16]
 80034ca:	0852      	lsrs	r2, r2, #1
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0652      	lsls	r2, r2, #25
 80034d0:	430a      	orrs	r2, r1
 80034d2:	4916      	ldr	r1, [pc, #88]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034d8:	4b14      	ldr	r3, [pc, #80]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a13      	ldr	r2, [pc, #76]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fc4a 	bl	8001d7c <HAL_GetTick>
 80034e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ea:	e009      	b.n	8003500 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034ec:	f7fe fc46 	bl	8001d7c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d902      	bls.n	8003500 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	73fb      	strb	r3, [r7, #15]
          break;
 80034fe:	e005      	b.n	800350c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003500:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ef      	beq.n	80034ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4904      	ldr	r1, [pc, #16]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e049      	b.n	80035d6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	795b      	ldrb	r3, [r3, #5]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe f9c4 	bl	80018e0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0204 	orr.w	r2, r2, #4
 800356c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d104      	bne.n	8003586 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2204      	movs	r2, #4
 8003580:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e027      	b.n	80035d6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003586:	f7fe fbf9 	bl	8001d7c <HAL_GetTick>
 800358a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800358c:	e015      	b.n	80035ba <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800358e:	f7fe fbf5 	bl	8001d7c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d90e      	bls.n	80035ba <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e00d      	b.n	80035d6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d0e2      	beq.n	800358e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <siprintf>:
 80035e0:	b40e      	push	{r1, r2, r3}
 80035e2:	b500      	push	{lr}
 80035e4:	b09c      	sub	sp, #112	@ 0x70
 80035e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80035e8:	9002      	str	r0, [sp, #8]
 80035ea:	9006      	str	r0, [sp, #24]
 80035ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035f0:	4809      	ldr	r0, [pc, #36]	@ (8003618 <siprintf+0x38>)
 80035f2:	9107      	str	r1, [sp, #28]
 80035f4:	9104      	str	r1, [sp, #16]
 80035f6:	4909      	ldr	r1, [pc, #36]	@ (800361c <siprintf+0x3c>)
 80035f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80035fc:	9105      	str	r1, [sp, #20]
 80035fe:	6800      	ldr	r0, [r0, #0]
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	a902      	add	r1, sp, #8
 8003604:	f000 f9a2 	bl	800394c <_svfiprintf_r>
 8003608:	9b02      	ldr	r3, [sp, #8]
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	b01c      	add	sp, #112	@ 0x70
 8003610:	f85d eb04 	ldr.w	lr, [sp], #4
 8003614:	b003      	add	sp, #12
 8003616:	4770      	bx	lr
 8003618:	2000005c 	.word	0x2000005c
 800361c:	ffff0208 	.word	0xffff0208

08003620 <memset>:
 8003620:	4402      	add	r2, r0
 8003622:	4603      	mov	r3, r0
 8003624:	4293      	cmp	r3, r2
 8003626:	d100      	bne.n	800362a <memset+0xa>
 8003628:	4770      	bx	lr
 800362a:	f803 1b01 	strb.w	r1, [r3], #1
 800362e:	e7f9      	b.n	8003624 <memset+0x4>

08003630 <__errno>:
 8003630:	4b01      	ldr	r3, [pc, #4]	@ (8003638 <__errno+0x8>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	2000005c 	.word	0x2000005c

0800363c <__libc_init_array>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	4d0d      	ldr	r5, [pc, #52]	@ (8003674 <__libc_init_array+0x38>)
 8003640:	4c0d      	ldr	r4, [pc, #52]	@ (8003678 <__libc_init_array+0x3c>)
 8003642:	1b64      	subs	r4, r4, r5
 8003644:	10a4      	asrs	r4, r4, #2
 8003646:	2600      	movs	r6, #0
 8003648:	42a6      	cmp	r6, r4
 800364a:	d109      	bne.n	8003660 <__libc_init_array+0x24>
 800364c:	4d0b      	ldr	r5, [pc, #44]	@ (800367c <__libc_init_array+0x40>)
 800364e:	4c0c      	ldr	r4, [pc, #48]	@ (8003680 <__libc_init_array+0x44>)
 8003650:	f000 fc66 	bl	8003f20 <_init>
 8003654:	1b64      	subs	r4, r4, r5
 8003656:	10a4      	asrs	r4, r4, #2
 8003658:	2600      	movs	r6, #0
 800365a:	42a6      	cmp	r6, r4
 800365c:	d105      	bne.n	800366a <__libc_init_array+0x2e>
 800365e:	bd70      	pop	{r4, r5, r6, pc}
 8003660:	f855 3b04 	ldr.w	r3, [r5], #4
 8003664:	4798      	blx	r3
 8003666:	3601      	adds	r6, #1
 8003668:	e7ee      	b.n	8003648 <__libc_init_array+0xc>
 800366a:	f855 3b04 	ldr.w	r3, [r5], #4
 800366e:	4798      	blx	r3
 8003670:	3601      	adds	r6, #1
 8003672:	e7f2      	b.n	800365a <__libc_init_array+0x1e>
 8003674:	0800423c 	.word	0x0800423c
 8003678:	0800423c 	.word	0x0800423c
 800367c:	0800423c 	.word	0x0800423c
 8003680:	08004240 	.word	0x08004240

08003684 <__retarget_lock_acquire_recursive>:
 8003684:	4770      	bx	lr

08003686 <__retarget_lock_release_recursive>:
 8003686:	4770      	bx	lr

08003688 <memcpy>:
 8003688:	440a      	add	r2, r1
 800368a:	4291      	cmp	r1, r2
 800368c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003690:	d100      	bne.n	8003694 <memcpy+0xc>
 8003692:	4770      	bx	lr
 8003694:	b510      	push	{r4, lr}
 8003696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800369a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800369e:	4291      	cmp	r1, r2
 80036a0:	d1f9      	bne.n	8003696 <memcpy+0xe>
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <_free_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4605      	mov	r5, r0
 80036a8:	2900      	cmp	r1, #0
 80036aa:	d041      	beq.n	8003730 <_free_r+0x8c>
 80036ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b0:	1f0c      	subs	r4, r1, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bfb8      	it	lt
 80036b6:	18e4      	addlt	r4, r4, r3
 80036b8:	f000 f8e0 	bl	800387c <__malloc_lock>
 80036bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003734 <_free_r+0x90>)
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	b933      	cbnz	r3, 80036d0 <_free_r+0x2c>
 80036c2:	6063      	str	r3, [r4, #4]
 80036c4:	6014      	str	r4, [r2, #0]
 80036c6:	4628      	mov	r0, r5
 80036c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036cc:	f000 b8dc 	b.w	8003888 <__malloc_unlock>
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	d908      	bls.n	80036e6 <_free_r+0x42>
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	1821      	adds	r1, r4, r0
 80036d8:	428b      	cmp	r3, r1
 80036da:	bf01      	itttt	eq
 80036dc:	6819      	ldreq	r1, [r3, #0]
 80036de:	685b      	ldreq	r3, [r3, #4]
 80036e0:	1809      	addeq	r1, r1, r0
 80036e2:	6021      	streq	r1, [r4, #0]
 80036e4:	e7ed      	b.n	80036c2 <_free_r+0x1e>
 80036e6:	461a      	mov	r2, r3
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	b10b      	cbz	r3, 80036f0 <_free_r+0x4c>
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d9fa      	bls.n	80036e6 <_free_r+0x42>
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	1850      	adds	r0, r2, r1
 80036f4:	42a0      	cmp	r0, r4
 80036f6:	d10b      	bne.n	8003710 <_free_r+0x6c>
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	4401      	add	r1, r0
 80036fc:	1850      	adds	r0, r2, r1
 80036fe:	4283      	cmp	r3, r0
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	d1e0      	bne.n	80036c6 <_free_r+0x22>
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	4408      	add	r0, r1
 800370c:	6010      	str	r0, [r2, #0]
 800370e:	e7da      	b.n	80036c6 <_free_r+0x22>
 8003710:	d902      	bls.n	8003718 <_free_r+0x74>
 8003712:	230c      	movs	r3, #12
 8003714:	602b      	str	r3, [r5, #0]
 8003716:	e7d6      	b.n	80036c6 <_free_r+0x22>
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	1821      	adds	r1, r4, r0
 800371c:	428b      	cmp	r3, r1
 800371e:	bf04      	itt	eq
 8003720:	6819      	ldreq	r1, [r3, #0]
 8003722:	685b      	ldreq	r3, [r3, #4]
 8003724:	6063      	str	r3, [r4, #4]
 8003726:	bf04      	itt	eq
 8003728:	1809      	addeq	r1, r1, r0
 800372a:	6021      	streq	r1, [r4, #0]
 800372c:	6054      	str	r4, [r2, #4]
 800372e:	e7ca      	b.n	80036c6 <_free_r+0x22>
 8003730:	bd38      	pop	{r3, r4, r5, pc}
 8003732:	bf00      	nop
 8003734:	2000029c 	.word	0x2000029c

08003738 <sbrk_aligned>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4e0f      	ldr	r6, [pc, #60]	@ (8003778 <sbrk_aligned+0x40>)
 800373c:	460c      	mov	r4, r1
 800373e:	6831      	ldr	r1, [r6, #0]
 8003740:	4605      	mov	r5, r0
 8003742:	b911      	cbnz	r1, 800374a <sbrk_aligned+0x12>
 8003744:	f000 fba6 	bl	8003e94 <_sbrk_r>
 8003748:	6030      	str	r0, [r6, #0]
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	f000 fba1 	bl	8003e94 <_sbrk_r>
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	d103      	bne.n	800375e <sbrk_aligned+0x26>
 8003756:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800375a:	4620      	mov	r0, r4
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	1cc4      	adds	r4, r0, #3
 8003760:	f024 0403 	bic.w	r4, r4, #3
 8003764:	42a0      	cmp	r0, r4
 8003766:	d0f8      	beq.n	800375a <sbrk_aligned+0x22>
 8003768:	1a21      	subs	r1, r4, r0
 800376a:	4628      	mov	r0, r5
 800376c:	f000 fb92 	bl	8003e94 <_sbrk_r>
 8003770:	3001      	adds	r0, #1
 8003772:	d1f2      	bne.n	800375a <sbrk_aligned+0x22>
 8003774:	e7ef      	b.n	8003756 <sbrk_aligned+0x1e>
 8003776:	bf00      	nop
 8003778:	20000298 	.word	0x20000298

0800377c <_malloc_r>:
 800377c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003780:	1ccd      	adds	r5, r1, #3
 8003782:	f025 0503 	bic.w	r5, r5, #3
 8003786:	3508      	adds	r5, #8
 8003788:	2d0c      	cmp	r5, #12
 800378a:	bf38      	it	cc
 800378c:	250c      	movcc	r5, #12
 800378e:	2d00      	cmp	r5, #0
 8003790:	4606      	mov	r6, r0
 8003792:	db01      	blt.n	8003798 <_malloc_r+0x1c>
 8003794:	42a9      	cmp	r1, r5
 8003796:	d904      	bls.n	80037a2 <_malloc_r+0x26>
 8003798:	230c      	movs	r3, #12
 800379a:	6033      	str	r3, [r6, #0]
 800379c:	2000      	movs	r0, #0
 800379e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003878 <_malloc_r+0xfc>
 80037a6:	f000 f869 	bl	800387c <__malloc_lock>
 80037aa:	f8d8 3000 	ldr.w	r3, [r8]
 80037ae:	461c      	mov	r4, r3
 80037b0:	bb44      	cbnz	r4, 8003804 <_malloc_r+0x88>
 80037b2:	4629      	mov	r1, r5
 80037b4:	4630      	mov	r0, r6
 80037b6:	f7ff ffbf 	bl	8003738 <sbrk_aligned>
 80037ba:	1c43      	adds	r3, r0, #1
 80037bc:	4604      	mov	r4, r0
 80037be:	d158      	bne.n	8003872 <_malloc_r+0xf6>
 80037c0:	f8d8 4000 	ldr.w	r4, [r8]
 80037c4:	4627      	mov	r7, r4
 80037c6:	2f00      	cmp	r7, #0
 80037c8:	d143      	bne.n	8003852 <_malloc_r+0xd6>
 80037ca:	2c00      	cmp	r4, #0
 80037cc:	d04b      	beq.n	8003866 <_malloc_r+0xea>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	4639      	mov	r1, r7
 80037d2:	4630      	mov	r0, r6
 80037d4:	eb04 0903 	add.w	r9, r4, r3
 80037d8:	f000 fb5c 	bl	8003e94 <_sbrk_r>
 80037dc:	4581      	cmp	r9, r0
 80037de:	d142      	bne.n	8003866 <_malloc_r+0xea>
 80037e0:	6821      	ldr	r1, [r4, #0]
 80037e2:	1a6d      	subs	r5, r5, r1
 80037e4:	4629      	mov	r1, r5
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7ff ffa6 	bl	8003738 <sbrk_aligned>
 80037ec:	3001      	adds	r0, #1
 80037ee:	d03a      	beq.n	8003866 <_malloc_r+0xea>
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	442b      	add	r3, r5
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	f8d8 3000 	ldr.w	r3, [r8]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	bb62      	cbnz	r2, 8003858 <_malloc_r+0xdc>
 80037fe:	f8c8 7000 	str.w	r7, [r8]
 8003802:	e00f      	b.n	8003824 <_malloc_r+0xa8>
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	1b52      	subs	r2, r2, r5
 8003808:	d420      	bmi.n	800384c <_malloc_r+0xd0>
 800380a:	2a0b      	cmp	r2, #11
 800380c:	d917      	bls.n	800383e <_malloc_r+0xc2>
 800380e:	1961      	adds	r1, r4, r5
 8003810:	42a3      	cmp	r3, r4
 8003812:	6025      	str	r5, [r4, #0]
 8003814:	bf18      	it	ne
 8003816:	6059      	strne	r1, [r3, #4]
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	bf08      	it	eq
 800381c:	f8c8 1000 	streq.w	r1, [r8]
 8003820:	5162      	str	r2, [r4, r5]
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	4630      	mov	r0, r6
 8003826:	f000 f82f 	bl	8003888 <__malloc_unlock>
 800382a:	f104 000b 	add.w	r0, r4, #11
 800382e:	1d23      	adds	r3, r4, #4
 8003830:	f020 0007 	bic.w	r0, r0, #7
 8003834:	1ac2      	subs	r2, r0, r3
 8003836:	bf1c      	itt	ne
 8003838:	1a1b      	subne	r3, r3, r0
 800383a:	50a3      	strne	r3, [r4, r2]
 800383c:	e7af      	b.n	800379e <_malloc_r+0x22>
 800383e:	6862      	ldr	r2, [r4, #4]
 8003840:	42a3      	cmp	r3, r4
 8003842:	bf0c      	ite	eq
 8003844:	f8c8 2000 	streq.w	r2, [r8]
 8003848:	605a      	strne	r2, [r3, #4]
 800384a:	e7eb      	b.n	8003824 <_malloc_r+0xa8>
 800384c:	4623      	mov	r3, r4
 800384e:	6864      	ldr	r4, [r4, #4]
 8003850:	e7ae      	b.n	80037b0 <_malloc_r+0x34>
 8003852:	463c      	mov	r4, r7
 8003854:	687f      	ldr	r7, [r7, #4]
 8003856:	e7b6      	b.n	80037c6 <_malloc_r+0x4a>
 8003858:	461a      	mov	r2, r3
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	42a3      	cmp	r3, r4
 800385e:	d1fb      	bne.n	8003858 <_malloc_r+0xdc>
 8003860:	2300      	movs	r3, #0
 8003862:	6053      	str	r3, [r2, #4]
 8003864:	e7de      	b.n	8003824 <_malloc_r+0xa8>
 8003866:	230c      	movs	r3, #12
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	4630      	mov	r0, r6
 800386c:	f000 f80c 	bl	8003888 <__malloc_unlock>
 8003870:	e794      	b.n	800379c <_malloc_r+0x20>
 8003872:	6005      	str	r5, [r0, #0]
 8003874:	e7d6      	b.n	8003824 <_malloc_r+0xa8>
 8003876:	bf00      	nop
 8003878:	2000029c 	.word	0x2000029c

0800387c <__malloc_lock>:
 800387c:	4801      	ldr	r0, [pc, #4]	@ (8003884 <__malloc_lock+0x8>)
 800387e:	f7ff bf01 	b.w	8003684 <__retarget_lock_acquire_recursive>
 8003882:	bf00      	nop
 8003884:	20000294 	.word	0x20000294

08003888 <__malloc_unlock>:
 8003888:	4801      	ldr	r0, [pc, #4]	@ (8003890 <__malloc_unlock+0x8>)
 800388a:	f7ff befc 	b.w	8003686 <__retarget_lock_release_recursive>
 800388e:	bf00      	nop
 8003890:	20000294 	.word	0x20000294

08003894 <__ssputs_r>:
 8003894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	688e      	ldr	r6, [r1, #8]
 800389a:	461f      	mov	r7, r3
 800389c:	42be      	cmp	r6, r7
 800389e:	680b      	ldr	r3, [r1, #0]
 80038a0:	4682      	mov	sl, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	4690      	mov	r8, r2
 80038a6:	d82d      	bhi.n	8003904 <__ssputs_r+0x70>
 80038a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038b0:	d026      	beq.n	8003900 <__ssputs_r+0x6c>
 80038b2:	6965      	ldr	r5, [r4, #20]
 80038b4:	6909      	ldr	r1, [r1, #16]
 80038b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038ba:	eba3 0901 	sub.w	r9, r3, r1
 80038be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038c2:	1c7b      	adds	r3, r7, #1
 80038c4:	444b      	add	r3, r9
 80038c6:	106d      	asrs	r5, r5, #1
 80038c8:	429d      	cmp	r5, r3
 80038ca:	bf38      	it	cc
 80038cc:	461d      	movcc	r5, r3
 80038ce:	0553      	lsls	r3, r2, #21
 80038d0:	d527      	bpl.n	8003922 <__ssputs_r+0x8e>
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7ff ff52 	bl	800377c <_malloc_r>
 80038d8:	4606      	mov	r6, r0
 80038da:	b360      	cbz	r0, 8003936 <__ssputs_r+0xa2>
 80038dc:	6921      	ldr	r1, [r4, #16]
 80038de:	464a      	mov	r2, r9
 80038e0:	f7ff fed2 	bl	8003688 <memcpy>
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ee:	81a3      	strh	r3, [r4, #12]
 80038f0:	6126      	str	r6, [r4, #16]
 80038f2:	6165      	str	r5, [r4, #20]
 80038f4:	444e      	add	r6, r9
 80038f6:	eba5 0509 	sub.w	r5, r5, r9
 80038fa:	6026      	str	r6, [r4, #0]
 80038fc:	60a5      	str	r5, [r4, #8]
 80038fe:	463e      	mov	r6, r7
 8003900:	42be      	cmp	r6, r7
 8003902:	d900      	bls.n	8003906 <__ssputs_r+0x72>
 8003904:	463e      	mov	r6, r7
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	4632      	mov	r2, r6
 800390a:	4641      	mov	r1, r8
 800390c:	f000 faa8 	bl	8003e60 <memmove>
 8003910:	68a3      	ldr	r3, [r4, #8]
 8003912:	1b9b      	subs	r3, r3, r6
 8003914:	60a3      	str	r3, [r4, #8]
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	4433      	add	r3, r6
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	2000      	movs	r0, #0
 800391e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003922:	462a      	mov	r2, r5
 8003924:	f000 fac6 	bl	8003eb4 <_realloc_r>
 8003928:	4606      	mov	r6, r0
 800392a:	2800      	cmp	r0, #0
 800392c:	d1e0      	bne.n	80038f0 <__ssputs_r+0x5c>
 800392e:	6921      	ldr	r1, [r4, #16]
 8003930:	4650      	mov	r0, sl
 8003932:	f7ff feb7 	bl	80036a4 <_free_r>
 8003936:	230c      	movs	r3, #12
 8003938:	f8ca 3000 	str.w	r3, [sl]
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003942:	81a3      	strh	r3, [r4, #12]
 8003944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003948:	e7e9      	b.n	800391e <__ssputs_r+0x8a>
	...

0800394c <_svfiprintf_r>:
 800394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003950:	4698      	mov	r8, r3
 8003952:	898b      	ldrh	r3, [r1, #12]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	b09d      	sub	sp, #116	@ 0x74
 8003958:	4607      	mov	r7, r0
 800395a:	460d      	mov	r5, r1
 800395c:	4614      	mov	r4, r2
 800395e:	d510      	bpl.n	8003982 <_svfiprintf_r+0x36>
 8003960:	690b      	ldr	r3, [r1, #16]
 8003962:	b973      	cbnz	r3, 8003982 <_svfiprintf_r+0x36>
 8003964:	2140      	movs	r1, #64	@ 0x40
 8003966:	f7ff ff09 	bl	800377c <_malloc_r>
 800396a:	6028      	str	r0, [r5, #0]
 800396c:	6128      	str	r0, [r5, #16]
 800396e:	b930      	cbnz	r0, 800397e <_svfiprintf_r+0x32>
 8003970:	230c      	movs	r3, #12
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003978:	b01d      	add	sp, #116	@ 0x74
 800397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397e:	2340      	movs	r3, #64	@ 0x40
 8003980:	616b      	str	r3, [r5, #20]
 8003982:	2300      	movs	r3, #0
 8003984:	9309      	str	r3, [sp, #36]	@ 0x24
 8003986:	2320      	movs	r3, #32
 8003988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800398c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003990:	2330      	movs	r3, #48	@ 0x30
 8003992:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b30 <_svfiprintf_r+0x1e4>
 8003996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800399a:	f04f 0901 	mov.w	r9, #1
 800399e:	4623      	mov	r3, r4
 80039a0:	469a      	mov	sl, r3
 80039a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039a6:	b10a      	cbz	r2, 80039ac <_svfiprintf_r+0x60>
 80039a8:	2a25      	cmp	r2, #37	@ 0x25
 80039aa:	d1f9      	bne.n	80039a0 <_svfiprintf_r+0x54>
 80039ac:	ebba 0b04 	subs.w	fp, sl, r4
 80039b0:	d00b      	beq.n	80039ca <_svfiprintf_r+0x7e>
 80039b2:	465b      	mov	r3, fp
 80039b4:	4622      	mov	r2, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7ff ff6b 	bl	8003894 <__ssputs_r>
 80039be:	3001      	adds	r0, #1
 80039c0:	f000 80a7 	beq.w	8003b12 <_svfiprintf_r+0x1c6>
 80039c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039c6:	445a      	add	r2, fp
 80039c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ca:	f89a 3000 	ldrb.w	r3, [sl]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 809f 	beq.w	8003b12 <_svfiprintf_r+0x1c6>
 80039d4:	2300      	movs	r3, #0
 80039d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039de:	f10a 0a01 	add.w	sl, sl, #1
 80039e2:	9304      	str	r3, [sp, #16]
 80039e4:	9307      	str	r3, [sp, #28]
 80039e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80039ec:	4654      	mov	r4, sl
 80039ee:	2205      	movs	r2, #5
 80039f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f4:	484e      	ldr	r0, [pc, #312]	@ (8003b30 <_svfiprintf_r+0x1e4>)
 80039f6:	f7fc fbeb 	bl	80001d0 <memchr>
 80039fa:	9a04      	ldr	r2, [sp, #16]
 80039fc:	b9d8      	cbnz	r0, 8003a36 <_svfiprintf_r+0xea>
 80039fe:	06d0      	lsls	r0, r2, #27
 8003a00:	bf44      	itt	mi
 8003a02:	2320      	movmi	r3, #32
 8003a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a08:	0711      	lsls	r1, r2, #28
 8003a0a:	bf44      	itt	mi
 8003a0c:	232b      	movmi	r3, #43	@ 0x2b
 8003a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a12:	f89a 3000 	ldrb.w	r3, [sl]
 8003a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a18:	d015      	beq.n	8003a46 <_svfiprintf_r+0xfa>
 8003a1a:	9a07      	ldr	r2, [sp, #28]
 8003a1c:	4654      	mov	r4, sl
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f04f 0c0a 	mov.w	ip, #10
 8003a24:	4621      	mov	r1, r4
 8003a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a2a:	3b30      	subs	r3, #48	@ 0x30
 8003a2c:	2b09      	cmp	r3, #9
 8003a2e:	d94b      	bls.n	8003ac8 <_svfiprintf_r+0x17c>
 8003a30:	b1b0      	cbz	r0, 8003a60 <_svfiprintf_r+0x114>
 8003a32:	9207      	str	r2, [sp, #28]
 8003a34:	e014      	b.n	8003a60 <_svfiprintf_r+0x114>
 8003a36:	eba0 0308 	sub.w	r3, r0, r8
 8003a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	9304      	str	r3, [sp, #16]
 8003a42:	46a2      	mov	sl, r4
 8003a44:	e7d2      	b.n	80039ec <_svfiprintf_r+0xa0>
 8003a46:	9b03      	ldr	r3, [sp, #12]
 8003a48:	1d19      	adds	r1, r3, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	9103      	str	r1, [sp, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bfbb      	ittet	lt
 8003a52:	425b      	neglt	r3, r3
 8003a54:	f042 0202 	orrlt.w	r2, r2, #2
 8003a58:	9307      	strge	r3, [sp, #28]
 8003a5a:	9307      	strlt	r3, [sp, #28]
 8003a5c:	bfb8      	it	lt
 8003a5e:	9204      	strlt	r2, [sp, #16]
 8003a60:	7823      	ldrb	r3, [r4, #0]
 8003a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a64:	d10a      	bne.n	8003a7c <_svfiprintf_r+0x130>
 8003a66:	7863      	ldrb	r3, [r4, #1]
 8003a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a6a:	d132      	bne.n	8003ad2 <_svfiprintf_r+0x186>
 8003a6c:	9b03      	ldr	r3, [sp, #12]
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	9203      	str	r2, [sp, #12]
 8003a74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a78:	3402      	adds	r4, #2
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b40 <_svfiprintf_r+0x1f4>
 8003a80:	7821      	ldrb	r1, [r4, #0]
 8003a82:	2203      	movs	r2, #3
 8003a84:	4650      	mov	r0, sl
 8003a86:	f7fc fba3 	bl	80001d0 <memchr>
 8003a8a:	b138      	cbz	r0, 8003a9c <_svfiprintf_r+0x150>
 8003a8c:	9b04      	ldr	r3, [sp, #16]
 8003a8e:	eba0 000a 	sub.w	r0, r0, sl
 8003a92:	2240      	movs	r2, #64	@ 0x40
 8003a94:	4082      	lsls	r2, r0
 8003a96:	4313      	orrs	r3, r2
 8003a98:	3401      	adds	r4, #1
 8003a9a:	9304      	str	r3, [sp, #16]
 8003a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa0:	4824      	ldr	r0, [pc, #144]	@ (8003b34 <_svfiprintf_r+0x1e8>)
 8003aa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aa6:	2206      	movs	r2, #6
 8003aa8:	f7fc fb92 	bl	80001d0 <memchr>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d036      	beq.n	8003b1e <_svfiprintf_r+0x1d2>
 8003ab0:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <_svfiprintf_r+0x1ec>)
 8003ab2:	bb1b      	cbnz	r3, 8003afc <_svfiprintf_r+0x1b0>
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	3307      	adds	r3, #7
 8003ab8:	f023 0307 	bic.w	r3, r3, #7
 8003abc:	3308      	adds	r3, #8
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ac2:	4433      	add	r3, r6
 8003ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ac6:	e76a      	b.n	800399e <_svfiprintf_r+0x52>
 8003ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003acc:	460c      	mov	r4, r1
 8003ace:	2001      	movs	r0, #1
 8003ad0:	e7a8      	b.n	8003a24 <_svfiprintf_r+0xd8>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	3401      	adds	r4, #1
 8003ad6:	9305      	str	r3, [sp, #20]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f04f 0c0a 	mov.w	ip, #10
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae4:	3a30      	subs	r2, #48	@ 0x30
 8003ae6:	2a09      	cmp	r2, #9
 8003ae8:	d903      	bls.n	8003af2 <_svfiprintf_r+0x1a6>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0c6      	beq.n	8003a7c <_svfiprintf_r+0x130>
 8003aee:	9105      	str	r1, [sp, #20]
 8003af0:	e7c4      	b.n	8003a7c <_svfiprintf_r+0x130>
 8003af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003af6:	4604      	mov	r4, r0
 8003af8:	2301      	movs	r3, #1
 8003afa:	e7f0      	b.n	8003ade <_svfiprintf_r+0x192>
 8003afc:	ab03      	add	r3, sp, #12
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	462a      	mov	r2, r5
 8003b02:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <_svfiprintf_r+0x1f0>)
 8003b04:	a904      	add	r1, sp, #16
 8003b06:	4638      	mov	r0, r7
 8003b08:	f3af 8000 	nop.w
 8003b0c:	1c42      	adds	r2, r0, #1
 8003b0e:	4606      	mov	r6, r0
 8003b10:	d1d6      	bne.n	8003ac0 <_svfiprintf_r+0x174>
 8003b12:	89ab      	ldrh	r3, [r5, #12]
 8003b14:	065b      	lsls	r3, r3, #25
 8003b16:	f53f af2d 	bmi.w	8003974 <_svfiprintf_r+0x28>
 8003b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b1c:	e72c      	b.n	8003978 <_svfiprintf_r+0x2c>
 8003b1e:	ab03      	add	r3, sp, #12
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	462a      	mov	r2, r5
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <_svfiprintf_r+0x1f0>)
 8003b26:	a904      	add	r1, sp, #16
 8003b28:	4638      	mov	r0, r7
 8003b2a:	f000 f879 	bl	8003c20 <_printf_i>
 8003b2e:	e7ed      	b.n	8003b0c <_svfiprintf_r+0x1c0>
 8003b30:	08004200 	.word	0x08004200
 8003b34:	0800420a 	.word	0x0800420a
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	08003895 	.word	0x08003895
 8003b40:	08004206 	.word	0x08004206

08003b44 <_printf_common>:
 8003b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b48:	4616      	mov	r6, r2
 8003b4a:	4698      	mov	r8, r3
 8003b4c:	688a      	ldr	r2, [r1, #8]
 8003b4e:	690b      	ldr	r3, [r1, #16]
 8003b50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bfb8      	it	lt
 8003b58:	4613      	movlt	r3, r2
 8003b5a:	6033      	str	r3, [r6, #0]
 8003b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b60:	4607      	mov	r7, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	b10a      	cbz	r2, 8003b6a <_printf_common+0x26>
 8003b66:	3301      	adds	r3, #1
 8003b68:	6033      	str	r3, [r6, #0]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	0699      	lsls	r1, r3, #26
 8003b6e:	bf42      	ittt	mi
 8003b70:	6833      	ldrmi	r3, [r6, #0]
 8003b72:	3302      	addmi	r3, #2
 8003b74:	6033      	strmi	r3, [r6, #0]
 8003b76:	6825      	ldr	r5, [r4, #0]
 8003b78:	f015 0506 	ands.w	r5, r5, #6
 8003b7c:	d106      	bne.n	8003b8c <_printf_common+0x48>
 8003b7e:	f104 0a19 	add.w	sl, r4, #25
 8003b82:	68e3      	ldr	r3, [r4, #12]
 8003b84:	6832      	ldr	r2, [r6, #0]
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	42ab      	cmp	r3, r5
 8003b8a:	dc26      	bgt.n	8003bda <_printf_common+0x96>
 8003b8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b90:	6822      	ldr	r2, [r4, #0]
 8003b92:	3b00      	subs	r3, #0
 8003b94:	bf18      	it	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	0692      	lsls	r2, r2, #26
 8003b9a:	d42b      	bmi.n	8003bf4 <_printf_common+0xb0>
 8003b9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c8      	blx	r9
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d01e      	beq.n	8003be8 <_printf_common+0xa4>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	6922      	ldr	r2, [r4, #16]
 8003bae:	f003 0306 	and.w	r3, r3, #6
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	bf02      	ittt	eq
 8003bb6:	68e5      	ldreq	r5, [r4, #12]
 8003bb8:	6833      	ldreq	r3, [r6, #0]
 8003bba:	1aed      	subeq	r5, r5, r3
 8003bbc:	68a3      	ldr	r3, [r4, #8]
 8003bbe:	bf0c      	ite	eq
 8003bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc4:	2500      	movne	r5, #0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	bfc4      	itt	gt
 8003bca:	1a9b      	subgt	r3, r3, r2
 8003bcc:	18ed      	addgt	r5, r5, r3
 8003bce:	2600      	movs	r6, #0
 8003bd0:	341a      	adds	r4, #26
 8003bd2:	42b5      	cmp	r5, r6
 8003bd4:	d11a      	bne.n	8003c0c <_printf_common+0xc8>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e008      	b.n	8003bec <_printf_common+0xa8>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4652      	mov	r2, sl
 8003bde:	4641      	mov	r1, r8
 8003be0:	4638      	mov	r0, r7
 8003be2:	47c8      	blx	r9
 8003be4:	3001      	adds	r0, #1
 8003be6:	d103      	bne.n	8003bf0 <_printf_common+0xac>
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf0:	3501      	adds	r5, #1
 8003bf2:	e7c6      	b.n	8003b82 <_printf_common+0x3e>
 8003bf4:	18e1      	adds	r1, r4, r3
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	2030      	movs	r0, #48	@ 0x30
 8003bfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bfe:	4422      	add	r2, r4
 8003c00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c08:	3302      	adds	r3, #2
 8003c0a:	e7c7      	b.n	8003b9c <_printf_common+0x58>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4622      	mov	r2, r4
 8003c10:	4641      	mov	r1, r8
 8003c12:	4638      	mov	r0, r7
 8003c14:	47c8      	blx	r9
 8003c16:	3001      	adds	r0, #1
 8003c18:	d0e6      	beq.n	8003be8 <_printf_common+0xa4>
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7d9      	b.n	8003bd2 <_printf_common+0x8e>
	...

08003c20 <_printf_i>:
 8003c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c24:	7e0f      	ldrb	r7, [r1, #24]
 8003c26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c28:	2f78      	cmp	r7, #120	@ 0x78
 8003c2a:	4691      	mov	r9, r2
 8003c2c:	4680      	mov	r8, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	469a      	mov	sl, r3
 8003c32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c36:	d807      	bhi.n	8003c48 <_printf_i+0x28>
 8003c38:	2f62      	cmp	r7, #98	@ 0x62
 8003c3a:	d80a      	bhi.n	8003c52 <_printf_i+0x32>
 8003c3c:	2f00      	cmp	r7, #0
 8003c3e:	f000 80d2 	beq.w	8003de6 <_printf_i+0x1c6>
 8003c42:	2f58      	cmp	r7, #88	@ 0x58
 8003c44:	f000 80b9 	beq.w	8003dba <_printf_i+0x19a>
 8003c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c50:	e03a      	b.n	8003cc8 <_printf_i+0xa8>
 8003c52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c56:	2b15      	cmp	r3, #21
 8003c58:	d8f6      	bhi.n	8003c48 <_printf_i+0x28>
 8003c5a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c60 <_printf_i+0x40>)
 8003c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003ccd 	.word	0x08003ccd
 8003c68:	08003c49 	.word	0x08003c49
 8003c6c:	08003c49 	.word	0x08003c49
 8003c70:	08003c49 	.word	0x08003c49
 8003c74:	08003c49 	.word	0x08003c49
 8003c78:	08003ccd 	.word	0x08003ccd
 8003c7c:	08003c49 	.word	0x08003c49
 8003c80:	08003c49 	.word	0x08003c49
 8003c84:	08003c49 	.word	0x08003c49
 8003c88:	08003c49 	.word	0x08003c49
 8003c8c:	08003dcd 	.word	0x08003dcd
 8003c90:	08003cf7 	.word	0x08003cf7
 8003c94:	08003d87 	.word	0x08003d87
 8003c98:	08003c49 	.word	0x08003c49
 8003c9c:	08003c49 	.word	0x08003c49
 8003ca0:	08003def 	.word	0x08003def
 8003ca4:	08003c49 	.word	0x08003c49
 8003ca8:	08003cf7 	.word	0x08003cf7
 8003cac:	08003c49 	.word	0x08003c49
 8003cb0:	08003c49 	.word	0x08003c49
 8003cb4:	08003d8f 	.word	0x08003d8f
 8003cb8:	6833      	ldr	r3, [r6, #0]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6032      	str	r2, [r6, #0]
 8003cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e09d      	b.n	8003e08 <_printf_i+0x1e8>
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	6820      	ldr	r0, [r4, #0]
 8003cd0:	1d19      	adds	r1, r3, #4
 8003cd2:	6031      	str	r1, [r6, #0]
 8003cd4:	0606      	lsls	r6, r0, #24
 8003cd6:	d501      	bpl.n	8003cdc <_printf_i+0xbc>
 8003cd8:	681d      	ldr	r5, [r3, #0]
 8003cda:	e003      	b.n	8003ce4 <_printf_i+0xc4>
 8003cdc:	0645      	lsls	r5, r0, #25
 8003cde:	d5fb      	bpl.n	8003cd8 <_printf_i+0xb8>
 8003ce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ce4:	2d00      	cmp	r5, #0
 8003ce6:	da03      	bge.n	8003cf0 <_printf_i+0xd0>
 8003ce8:	232d      	movs	r3, #45	@ 0x2d
 8003cea:	426d      	negs	r5, r5
 8003cec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cf0:	4859      	ldr	r0, [pc, #356]	@ (8003e58 <_printf_i+0x238>)
 8003cf2:	230a      	movs	r3, #10
 8003cf4:	e011      	b.n	8003d1a <_printf_i+0xfa>
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	0608      	lsls	r0, r1, #24
 8003cfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d00:	d402      	bmi.n	8003d08 <_printf_i+0xe8>
 8003d02:	0649      	lsls	r1, r1, #25
 8003d04:	bf48      	it	mi
 8003d06:	b2ad      	uxthmi	r5, r5
 8003d08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d0a:	4853      	ldr	r0, [pc, #332]	@ (8003e58 <_printf_i+0x238>)
 8003d0c:	6033      	str	r3, [r6, #0]
 8003d0e:	bf14      	ite	ne
 8003d10:	230a      	movne	r3, #10
 8003d12:	2308      	moveq	r3, #8
 8003d14:	2100      	movs	r1, #0
 8003d16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d1a:	6866      	ldr	r6, [r4, #4]
 8003d1c:	60a6      	str	r6, [r4, #8]
 8003d1e:	2e00      	cmp	r6, #0
 8003d20:	bfa2      	ittt	ge
 8003d22:	6821      	ldrge	r1, [r4, #0]
 8003d24:	f021 0104 	bicge.w	r1, r1, #4
 8003d28:	6021      	strge	r1, [r4, #0]
 8003d2a:	b90d      	cbnz	r5, 8003d30 <_printf_i+0x110>
 8003d2c:	2e00      	cmp	r6, #0
 8003d2e:	d04b      	beq.n	8003dc8 <_printf_i+0x1a8>
 8003d30:	4616      	mov	r6, r2
 8003d32:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d36:	fb03 5711 	mls	r7, r3, r1, r5
 8003d3a:	5dc7      	ldrb	r7, [r0, r7]
 8003d3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d40:	462f      	mov	r7, r5
 8003d42:	42bb      	cmp	r3, r7
 8003d44:	460d      	mov	r5, r1
 8003d46:	d9f4      	bls.n	8003d32 <_printf_i+0x112>
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d10b      	bne.n	8003d64 <_printf_i+0x144>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	07df      	lsls	r7, r3, #31
 8003d50:	d508      	bpl.n	8003d64 <_printf_i+0x144>
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	6861      	ldr	r1, [r4, #4]
 8003d56:	4299      	cmp	r1, r3
 8003d58:	bfde      	ittt	le
 8003d5a:	2330      	movle	r3, #48	@ 0x30
 8003d5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d60:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003d64:	1b92      	subs	r2, r2, r6
 8003d66:	6122      	str	r2, [r4, #16]
 8003d68:	f8cd a000 	str.w	sl, [sp]
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	aa03      	add	r2, sp, #12
 8003d70:	4621      	mov	r1, r4
 8003d72:	4640      	mov	r0, r8
 8003d74:	f7ff fee6 	bl	8003b44 <_printf_common>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d14a      	bne.n	8003e12 <_printf_i+0x1f2>
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d80:	b004      	add	sp, #16
 8003d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f043 0320 	orr.w	r3, r3, #32
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	4833      	ldr	r0, [pc, #204]	@ (8003e5c <_printf_i+0x23c>)
 8003d90:	2778      	movs	r7, #120	@ 0x78
 8003d92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	6831      	ldr	r1, [r6, #0]
 8003d9a:	061f      	lsls	r7, r3, #24
 8003d9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003da0:	d402      	bmi.n	8003da8 <_printf_i+0x188>
 8003da2:	065f      	lsls	r7, r3, #25
 8003da4:	bf48      	it	mi
 8003da6:	b2ad      	uxthmi	r5, r5
 8003da8:	6031      	str	r1, [r6, #0]
 8003daa:	07d9      	lsls	r1, r3, #31
 8003dac:	bf44      	itt	mi
 8003dae:	f043 0320 	orrmi.w	r3, r3, #32
 8003db2:	6023      	strmi	r3, [r4, #0]
 8003db4:	b11d      	cbz	r5, 8003dbe <_printf_i+0x19e>
 8003db6:	2310      	movs	r3, #16
 8003db8:	e7ac      	b.n	8003d14 <_printf_i+0xf4>
 8003dba:	4827      	ldr	r0, [pc, #156]	@ (8003e58 <_printf_i+0x238>)
 8003dbc:	e7e9      	b.n	8003d92 <_printf_i+0x172>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	f023 0320 	bic.w	r3, r3, #32
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	e7f6      	b.n	8003db6 <_printf_i+0x196>
 8003dc8:	4616      	mov	r6, r2
 8003dca:	e7bd      	b.n	8003d48 <_printf_i+0x128>
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	6825      	ldr	r5, [r4, #0]
 8003dd0:	6961      	ldr	r1, [r4, #20]
 8003dd2:	1d18      	adds	r0, r3, #4
 8003dd4:	6030      	str	r0, [r6, #0]
 8003dd6:	062e      	lsls	r6, r5, #24
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	d501      	bpl.n	8003de0 <_printf_i+0x1c0>
 8003ddc:	6019      	str	r1, [r3, #0]
 8003dde:	e002      	b.n	8003de6 <_printf_i+0x1c6>
 8003de0:	0668      	lsls	r0, r5, #25
 8003de2:	d5fb      	bpl.n	8003ddc <_printf_i+0x1bc>
 8003de4:	8019      	strh	r1, [r3, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	4616      	mov	r6, r2
 8003dec:	e7bc      	b.n	8003d68 <_printf_i+0x148>
 8003dee:	6833      	ldr	r3, [r6, #0]
 8003df0:	1d1a      	adds	r2, r3, #4
 8003df2:	6032      	str	r2, [r6, #0]
 8003df4:	681e      	ldr	r6, [r3, #0]
 8003df6:	6862      	ldr	r2, [r4, #4]
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f7fc f9e8 	bl	80001d0 <memchr>
 8003e00:	b108      	cbz	r0, 8003e06 <_printf_i+0x1e6>
 8003e02:	1b80      	subs	r0, r0, r6
 8003e04:	6060      	str	r0, [r4, #4]
 8003e06:	6863      	ldr	r3, [r4, #4]
 8003e08:	6123      	str	r3, [r4, #16]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e10:	e7aa      	b.n	8003d68 <_printf_i+0x148>
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	4632      	mov	r2, r6
 8003e16:	4649      	mov	r1, r9
 8003e18:	4640      	mov	r0, r8
 8003e1a:	47d0      	blx	sl
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d0ad      	beq.n	8003d7c <_printf_i+0x15c>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	079b      	lsls	r3, r3, #30
 8003e24:	d413      	bmi.n	8003e4e <_printf_i+0x22e>
 8003e26:	68e0      	ldr	r0, [r4, #12]
 8003e28:	9b03      	ldr	r3, [sp, #12]
 8003e2a:	4298      	cmp	r0, r3
 8003e2c:	bfb8      	it	lt
 8003e2e:	4618      	movlt	r0, r3
 8003e30:	e7a6      	b.n	8003d80 <_printf_i+0x160>
 8003e32:	2301      	movs	r3, #1
 8003e34:	4632      	mov	r2, r6
 8003e36:	4649      	mov	r1, r9
 8003e38:	4640      	mov	r0, r8
 8003e3a:	47d0      	blx	sl
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d09d      	beq.n	8003d7c <_printf_i+0x15c>
 8003e40:	3501      	adds	r5, #1
 8003e42:	68e3      	ldr	r3, [r4, #12]
 8003e44:	9903      	ldr	r1, [sp, #12]
 8003e46:	1a5b      	subs	r3, r3, r1
 8003e48:	42ab      	cmp	r3, r5
 8003e4a:	dcf2      	bgt.n	8003e32 <_printf_i+0x212>
 8003e4c:	e7eb      	b.n	8003e26 <_printf_i+0x206>
 8003e4e:	2500      	movs	r5, #0
 8003e50:	f104 0619 	add.w	r6, r4, #25
 8003e54:	e7f5      	b.n	8003e42 <_printf_i+0x222>
 8003e56:	bf00      	nop
 8003e58:	08004211 	.word	0x08004211
 8003e5c:	08004222 	.word	0x08004222

08003e60 <memmove>:
 8003e60:	4288      	cmp	r0, r1
 8003e62:	b510      	push	{r4, lr}
 8003e64:	eb01 0402 	add.w	r4, r1, r2
 8003e68:	d902      	bls.n	8003e70 <memmove+0x10>
 8003e6a:	4284      	cmp	r4, r0
 8003e6c:	4623      	mov	r3, r4
 8003e6e:	d807      	bhi.n	8003e80 <memmove+0x20>
 8003e70:	1e43      	subs	r3, r0, #1
 8003e72:	42a1      	cmp	r1, r4
 8003e74:	d008      	beq.n	8003e88 <memmove+0x28>
 8003e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e7e:	e7f8      	b.n	8003e72 <memmove+0x12>
 8003e80:	4402      	add	r2, r0
 8003e82:	4601      	mov	r1, r0
 8003e84:	428a      	cmp	r2, r1
 8003e86:	d100      	bne.n	8003e8a <memmove+0x2a>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e92:	e7f7      	b.n	8003e84 <memmove+0x24>

08003e94 <_sbrk_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d06      	ldr	r5, [pc, #24]	@ (8003eb0 <_sbrk_r+0x1c>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fd fd92 	bl	80019c8 <_sbrk>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_sbrk_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_sbrk_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	20000290 	.word	0x20000290

08003eb4 <_realloc_r>:
 8003eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb8:	4680      	mov	r8, r0
 8003eba:	4615      	mov	r5, r2
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	b921      	cbnz	r1, 8003eca <_realloc_r+0x16>
 8003ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	f7ff bc59 	b.w	800377c <_malloc_r>
 8003eca:	b92a      	cbnz	r2, 8003ed8 <_realloc_r+0x24>
 8003ecc:	f7ff fbea 	bl	80036a4 <_free_r>
 8003ed0:	2400      	movs	r4, #0
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed8:	f000 f81a 	bl	8003f10 <_malloc_usable_size_r>
 8003edc:	4285      	cmp	r5, r0
 8003ede:	4606      	mov	r6, r0
 8003ee0:	d802      	bhi.n	8003ee8 <_realloc_r+0x34>
 8003ee2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ee6:	d8f4      	bhi.n	8003ed2 <_realloc_r+0x1e>
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4640      	mov	r0, r8
 8003eec:	f7ff fc46 	bl	800377c <_malloc_r>
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d0ec      	beq.n	8003ed0 <_realloc_r+0x1c>
 8003ef6:	42b5      	cmp	r5, r6
 8003ef8:	462a      	mov	r2, r5
 8003efa:	4621      	mov	r1, r4
 8003efc:	bf28      	it	cs
 8003efe:	4632      	movcs	r2, r6
 8003f00:	f7ff fbc2 	bl	8003688 <memcpy>
 8003f04:	4621      	mov	r1, r4
 8003f06:	4640      	mov	r0, r8
 8003f08:	f7ff fbcc 	bl	80036a4 <_free_r>
 8003f0c:	463c      	mov	r4, r7
 8003f0e:	e7e0      	b.n	8003ed2 <_realloc_r+0x1e>

08003f10 <_malloc_usable_size_r>:
 8003f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f14:	1f18      	subs	r0, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bfbc      	itt	lt
 8003f1a:	580b      	ldrlt	r3, [r1, r0]
 8003f1c:	18c0      	addlt	r0, r0, r3
 8003f1e:	4770      	bx	lr

08003f20 <_init>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr

08003f2c <_fini>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr
