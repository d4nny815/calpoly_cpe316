
final_project_p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003064  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080031f4  080031f4  000041f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003290  08003290  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003290  08003290  00004290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003298  08003298  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003298  08003298  00004298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800329c  0800329c  0000429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080032a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000005c  080032fc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080032fc  00005248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069db  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac3  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0000d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d8  00000000  00000000  0000dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002589d  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b1a  00000000  00000000  00033ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ca1  00000000  00000000  0003c6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c8  00000000  00000000  0011f3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031dc 	.word	0x080031dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080031dc 	.word	0x080031dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <same_point>:
 *      Author: danny
 */

#include "Objects.h"

uint8_t same_point(Point_t a, Point_t b) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	80b8      	strh	r0, [r7, #4]
 8000278:	8039      	strh	r1, [r7, #0]
    return (a.x == b.x && a.y == b.y);
 800027a:	793a      	ldrb	r2, [r7, #4]
 800027c:	783b      	ldrb	r3, [r7, #0]
 800027e:	429a      	cmp	r2, r3
 8000280:	d105      	bne.n	800028e <same_point+0x1e>
 8000282:	797a      	ldrb	r2, [r7, #5]
 8000284:	787b      	ldrb	r3, [r7, #1]
 8000286:	429a      	cmp	r2, r3
 8000288:	d101      	bne.n	800028e <same_point+0x1e>
 800028a:	2301      	movs	r3, #1
 800028c:	e000      	b.n	8000290 <same_point+0x20>
 800028e:	2300      	movs	r3, #0
 8000290:	b2db      	uxtb	r3, r3
}
 8000292:	4618      	mov	r0, r3
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <grid_draw>:
/**
 * @brief Draw the snake and food on the grid
 * @param snake: the snake object
 * @param food: the food object
*/
void grid_draw(Snake_t snake, Food_t food) {
 800029e:	b084      	sub	sp, #16
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b0a4      	sub	sp, #144	@ 0x90
 80002a4:	af24      	add	r7, sp, #144	@ 0x90
 80002a6:	f107 0c08 	add.w	ip, r7, #8
 80002aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // uart_clear_screen();
    snake_draw(snake);
 80002ae:	4668      	mov	r0, sp
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	2290      	movs	r2, #144	@ 0x90
 80002b6:	4619      	mov	r1, r3
 80002b8:	f002 fb44 	bl	8002944 <memcpy>
 80002bc:	f107 0308 	add.w	r3, r7, #8
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	f000 f80b 	bl	80002dc <snake_draw>
    food_draw(food);
 80002c6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80002ca:	f000 faff 	bl	80008cc <food_draw>

    return;
 80002ce:	bf00      	nop
}
 80002d0:	46bd      	mov	sp, r7
 80002d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d6:	b004      	add	sp, #16
 80002d8:	4770      	bx	lr
	...

080002dc <snake_draw>:

/**
 * @brief Draw the snake object
 * @param snake: the snake object
*/
void snake_draw(Snake_t snake) {
 80002dc:	b084      	sub	sp, #16
 80002de:	b580      	push	{r7, lr}
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	f107 0c08 	add.w	ip, r7, #8
 80002e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // erase tail
    sprintf(snake_print_buffer, "[%u;%uH", snake.tail->pos.y, snake.tail->pos.x);
 80002ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80002ee:	789b      	ldrb	r3, [r3, #2]
 80002f0:	461a      	mov	r2, r3
 80002f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80002f6:	785b      	ldrb	r3, [r3, #1]
 80002f8:	490e      	ldr	r1, [pc, #56]	@ (8000334 <snake_draw+0x58>)
 80002fa:	480f      	ldr	r0, [pc, #60]	@ (8000338 <snake_draw+0x5c>)
 80002fc:	f002 face 	bl	800289c <siprintf>
    uart_send_escape(snake_print_buffer);
 8000300:	480d      	ldr	r0, [pc, #52]	@ (8000338 <snake_draw+0x5c>)
 8000302:	f000 fd8d 	bl	8000e20 <uart_send_escape>
    uart_send_char(' ');
 8000306:	2020      	movs	r0, #32
 8000308:	f000 fd4c 	bl	8000da4 <uart_send_char>

    // draw head
    sprintf(snake_print_buffer, "[%u;%uH", snake.body[0].pos.y, snake.body[0].pos.x);
 800030c:	7afb      	ldrb	r3, [r7, #11]
 800030e:	461a      	mov	r2, r3
 8000310:	7abb      	ldrb	r3, [r7, #10]
 8000312:	4908      	ldr	r1, [pc, #32]	@ (8000334 <snake_draw+0x58>)
 8000314:	4808      	ldr	r0, [pc, #32]	@ (8000338 <snake_draw+0x5c>)
 8000316:	f002 fac1 	bl	800289c <siprintf>
    uart_send_escape(snake_print_buffer);
 800031a:	4807      	ldr	r0, [pc, #28]	@ (8000338 <snake_draw+0x5c>)
 800031c:	f000 fd80 	bl	8000e20 <uart_send_escape>
    uart_send_char('O');
 8000320:	204f      	movs	r0, #79	@ 0x4f
 8000322:	f000 fd3f 	bl	8000da4 <uart_send_char>

    
    return;
 8000326:	bf00      	nop
}
 8000328:	46bd      	mov	sp, r7
 800032a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	080031f4 	.word	0x080031f4
 8000338:	20000078 	.word	0x20000078

0800033c <snake_init>:

/**
 * @brief Initialize the snake object
 * @return the snake object
*/
void snake_init(Snake_t* snake) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    snake->len = 3;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2203      	movs	r2, #3
 8000348:	701a      	strb	r2, [r3, #0]
    snake->dir = NORTH;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2200      	movs	r2, #0
 800034e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    snake->alive = 1;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2201      	movs	r2, #1
 8000356:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    snake->score = 0;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2200      	movs	r2, #0
 800035e:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
    
    int i;
    for (i = 0; i < snake->len; i++) {
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e021      	b.n	80003ac <snake_init+0x70>
        snake->body[i].valid = 1;
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	697a      	ldr	r2, [r7, #20]
 800036c:	4613      	mov	r3, r2
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	4413      	add	r3, r2
 8000372:	440b      	add	r3, r1
 8000374:	3301      	adds	r3, #1
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.x = START_X;
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	4613      	mov	r3, r2
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	4413      	add	r3, r2
 8000384:	440b      	add	r3, r1
 8000386:	3302      	adds	r3, #2
 8000388:	221e      	movs	r2, #30
 800038a:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = START_Y + i;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	3314      	adds	r3, #20
 8000392:	b2d8      	uxtb	r0, r3
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	697a      	ldr	r2, [r7, #20]
 8000398:	4613      	mov	r3, r2
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	440b      	add	r3, r1
 80003a0:	3303      	adds	r3, #3
 80003a2:	4602      	mov	r2, r0
 80003a4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < snake->len; i++) {
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	3301      	adds	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	4293      	cmp	r3, r2
 80003b6:	dbd7      	blt.n	8000368 <snake_init+0x2c>
    }

    snake->tail = &(snake->body[i - 1]);
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	1e5a      	subs	r2, r3, #1
 80003bc:	4613      	mov	r3, r2
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	4413      	add	r3, r2
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    for (i = snake->len; i < MAX_SNAKE_LEN; i++) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e00b      	b.n	80003ee <snake_init+0xb2>
        snake->body[i].valid = 0;
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	4613      	mov	r3, r2
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	4413      	add	r3, r2
 80003e0:	440b      	add	r3, r1
 80003e2:	3301      	adds	r3, #1
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
    for (i = snake->len; i < MAX_SNAKE_LEN; i++) {
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	2b31      	cmp	r3, #49	@ 0x31
 80003f2:	ddf0      	ble.n	80003d6 <snake_init+0x9a>
    }
    
    // draw initial snake
    BodyPart_t body;
    for (int i = 0; i < snake->len - 1; i++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	e01c      	b.n	8000434 <snake_init+0xf8>
        body = snake->body[i];
 80003fa:	6879      	ldr	r1, [r7, #4]
 80003fc:	693a      	ldr	r2, [r7, #16]
 80003fe:	4613      	mov	r3, r2
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	4413      	add	r3, r2
 8000404:	18ca      	adds	r2, r1, r3
 8000406:	f107 030c 	add.w	r3, r7, #12
 800040a:	3201      	adds	r2, #1
 800040c:	8811      	ldrh	r1, [r2, #0]
 800040e:	7892      	ldrb	r2, [r2, #2]
 8000410:	8019      	strh	r1, [r3, #0]
 8000412:	709a      	strb	r2, [r3, #2]
        sprintf(snake_print_buffer, "[%u;%uH", body.pos.y, body.pos.x);
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	461a      	mov	r2, r3
 8000418:	7b7b      	ldrb	r3, [r7, #13]
 800041a:	490b      	ldr	r1, [pc, #44]	@ (8000448 <snake_init+0x10c>)
 800041c:	480b      	ldr	r0, [pc, #44]	@ (800044c <snake_init+0x110>)
 800041e:	f002 fa3d 	bl	800289c <siprintf>
        uart_send_escape(snake_print_buffer);
 8000422:	480a      	ldr	r0, [pc, #40]	@ (800044c <snake_init+0x110>)
 8000424:	f000 fcfc 	bl	8000e20 <uart_send_escape>
        uart_send_char('O');
 8000428:	204f      	movs	r0, #79	@ 0x4f
 800042a:	f000 fcbb 	bl	8000da4 <uart_send_char>
    for (int i = 0; i < snake->len - 1; i++) {
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	3301      	adds	r3, #1
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3b01      	subs	r3, #1
 800043a:	693a      	ldr	r2, [r7, #16]
 800043c:	429a      	cmp	r2, r3
 800043e:	dbdc      	blt.n	80003fa <snake_init+0xbe>
    }

    return;
 8000440:	bf00      	nop
}
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	080031f4 	.word	0x080031f4
 800044c:	20000078 	.word	0x20000078

08000450 <snake_move>:
/**
 * @brief Move the snake object
 * @return  -1 if snake ded
 *           0 if snake is alive
*/
int8_t snake_move(Snake_t* snake) {
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b0a9      	sub	sp, #164	@ 0xa4
 8000454:	af24      	add	r7, sp, #144	@ 0x90
 8000456:	6078      	str	r0, [r7, #4]
    if (!snake->alive) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800045e:	2b00      	cmp	r3, #0
 8000460:	d102      	bne.n	8000468 <snake_move+0x18>
        return -1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000466:	e08e      	b.n	8000586 <snake_move+0x136>
    }

    snake_change_dir(snake);
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f909 	bl	8000680 <snake_change_dir>

    // check if snake collides with boundary
    if (snake_out_of_bounds(*snake)) {
 800046e:	687c      	ldr	r4, [r7, #4]
 8000470:	4668      	mov	r0, sp
 8000472:	f104 0310 	add.w	r3, r4, #16
 8000476:	2290      	movs	r2, #144	@ 0x90
 8000478:	4619      	mov	r1, r3
 800047a:	f002 fa63 	bl	8002944 <memcpy>
 800047e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000482:	f000 f885 	bl	8000590 <snake_out_of_bounds>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <snake_move+0x48>
        snake_die(snake);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 f8e5 	bl	800065c <snake_die>
        return -1;
 8000492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000496:	e076      	b.n	8000586 <snake_move+0x136>
    }

    BodyPart_t* p_head = &snake->body[0];
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	60bb      	str	r3, [r7, #8]

    // move body parts
    for (int i = snake->len - 1; i > 0; i--) {
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	e026      	b.n	80004f6 <snake_move+0xa6>
        snake->body[i].pos.x = snake->body[i - 1].pos.x;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	4613      	mov	r3, r2
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	4413      	add	r3, r2
 80004b4:	440b      	add	r3, r1
 80004b6:	3302      	adds	r3, #2
 80004b8:	7818      	ldrb	r0, [r3, #0]
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	4613      	mov	r3, r2
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	4413      	add	r3, r2
 80004c4:	440b      	add	r3, r1
 80004c6:	3302      	adds	r3, #2
 80004c8:	4602      	mov	r2, r0
 80004ca:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = snake->body[i - 1].pos.y;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	1e5a      	subs	r2, r3, #1
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	4613      	mov	r3, r2
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4413      	add	r3, r2
 80004d8:	440b      	add	r3, r1
 80004da:	3303      	adds	r3, #3
 80004dc:	7818      	ldrb	r0, [r3, #0]
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4613      	mov	r3, r2
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	4413      	add	r3, r2
 80004e8:	440b      	add	r3, r1
 80004ea:	3303      	adds	r3, #3
 80004ec:	4602      	mov	r2, r0
 80004ee:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len - 1; i > 0; i--) {
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dcd5      	bgt.n	80004a8 <snake_move+0x58>
    }

    // move head
    switch (snake->dir) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000502:	2b03      	cmp	r3, #3
 8000504:	d826      	bhi.n	8000554 <snake_move+0x104>
 8000506:	a201      	add	r2, pc, #4	@ (adr r2, 800050c <snake_move+0xbc>)
 8000508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050c:	0800051d 	.word	0x0800051d
 8000510:	0800052b 	.word	0x0800052b
 8000514:	08000539 	.word	0x08000539
 8000518:	08000547 	.word	0x08000547
        case NORTH:
            p_head->pos.y--;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	3b01      	subs	r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	709a      	strb	r2, [r3, #2]
            break;
 8000528:	e015      	b.n	8000556 <snake_move+0x106>
        case EAST:
            p_head->pos.x++;
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	3301      	adds	r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	705a      	strb	r2, [r3, #1]
            break;
 8000536:	e00e      	b.n	8000556 <snake_move+0x106>
        case SOUTH:
            p_head->pos.y++;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	789b      	ldrb	r3, [r3, #2]
 800053c:	3301      	adds	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	709a      	strb	r2, [r3, #2]
            break;
 8000544:	e007      	b.n	8000556 <snake_move+0x106>
        case WEST:
            p_head->pos.x--;
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	3b01      	subs	r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	705a      	strb	r2, [r3, #1]
            break;
 8000552:	e000      	b.n	8000556 <snake_move+0x106>
        default:
            break;
 8000554:	bf00      	nop
    }

    // TODO: check if fully working
    // check if snake collides with itself
    if (snake_hit_itself(p_head->pos, snake->body) == -1) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	785a      	ldrb	r2, [r3, #1]
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	431a      	orrs	r2, r3
 8000564:	2300      	movs	r3, #0
 8000566:	f362 030f 	bfi	r3, r2, #0, #16
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f841 	bl	80005f2 <snake_hit_itself>
 8000570:	4603      	mov	r3, r0
 8000572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000576:	d105      	bne.n	8000584 <snake_move+0x134>
        snake_die(snake);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 f86f 	bl	800065c <snake_die>
        return -1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000582:	e000      	b.n	8000586 <snake_move+0x136>
    }

    return 0;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	bf00      	nop

08000590 <snake_out_of_bounds>:
/**
 * @brief Check if snake is within the boundary
 * @return  non-zero if out of boundary
 *          0 if in
*/
int8_t snake_out_of_bounds(Snake_t snake) {
 8000590:	b084      	sub	sp, #16
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	f107 0c10 	add.w	ip, r7, #16
 800059c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Point_t snake_head = snake.body[0].pos;
 80005a0:	8a7b      	ldrh	r3, [r7, #18]
 80005a2:	80bb      	strh	r3, [r7, #4]
    return ((snake_head.x == 0 && snake.dir == WEST ) ||
 80005a4:	793b      	ldrb	r3, [r7, #4]
            (snake_head.x == VGA_WIDTH - 1 && snake.dir == EAST) ||
            (snake_head.y == 0 && snake.dir == NORTH) ||
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d103      	bne.n	80005b2 <snake_out_of_bounds+0x22>
    return ((snake_head.x == 0 && snake.dir == WEST ) ||
 80005aa:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d014      	beq.n	80005dc <snake_out_of_bounds+0x4c>
            (snake_head.x == VGA_WIDTH - 1 && snake.dir == EAST) ||
 80005b2:	793b      	ldrb	r3, [r7, #4]
    return ((snake_head.x == 0 && snake.dir == WEST ) ||
 80005b4:	2b63      	cmp	r3, #99	@ 0x63
 80005b6:	d103      	bne.n	80005c0 <snake_out_of_bounds+0x30>
            (snake_head.x == VGA_WIDTH - 1 && snake.dir == EAST) ||
 80005b8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00d      	beq.n	80005dc <snake_out_of_bounds+0x4c>
            (snake_head.y == 0 && snake.dir == NORTH) ||
 80005c0:	797b      	ldrb	r3, [r7, #5]
            (snake_head.x == VGA_WIDTH - 1 && snake.dir == EAST) ||
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d103      	bne.n	80005ce <snake_out_of_bounds+0x3e>
            (snake_head.y == 0 && snake.dir == NORTH) ||
 80005c6:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <snake_out_of_bounds+0x4c>
            (snake_head.y == VGA_HEIGHT - 1 && snake.dir == SOUTH));
 80005ce:	797b      	ldrb	r3, [r7, #5]
            (snake_head.y == 0 && snake.dir == NORTH) ||
 80005d0:	2b63      	cmp	r3, #99	@ 0x63
 80005d2:	d105      	bne.n	80005e0 <snake_out_of_bounds+0x50>
            (snake_head.y == VGA_HEIGHT - 1 && snake.dir == SOUTH));
 80005d4:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d101      	bne.n	80005e0 <snake_out_of_bounds+0x50>
            (snake_head.y == 0 && snake.dir == NORTH) ||
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <snake_out_of_bounds+0x52>
 80005e0:	2300      	movs	r3, #0
 80005e2:	b25b      	sxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	b004      	add	sp, #16
 80005f0:	4770      	bx	lr

080005f2 <snake_hit_itself>:
/**
 * @brief Check if snake collides with itself
 * @return  0 if snake is alive,
 *          non-zero if snake is ded  
*/
int8_t snake_hit_itself(Point_t snake_head, BodyPart_t* body_parts) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b084      	sub	sp, #16
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	80b8      	strh	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 80005fc:	2301      	movs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	e022      	b.n	8000648 <snake_hit_itself+0x56>
        if (body_parts[i].valid) {
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d01d      	beq.n	8000650 <snake_hit_itself+0x5e>
            if (same_point(snake_head, body_parts[i].pos)) {
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	4413      	add	r3, r2
 8000620:	785a      	ldrb	r2, [r3, #1]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	431a      	orrs	r2, r3
 8000628:	2300      	movs	r3, #0
 800062a:	f362 030f 	bfi	r3, r2, #0, #16
 800062e:	4619      	mov	r1, r3
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff fe1d 	bl	8000270 <same_point>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <snake_hit_itself+0x50>
                return -1;
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000640:	e008      	b.n	8000654 <snake_hit_itself+0x62>
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	3301      	adds	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b31      	cmp	r3, #49	@ 0x31
 800064c:	ddd9      	ble.n	8000602 <snake_hit_itself+0x10>
 800064e:	e000      	b.n	8000652 <snake_hit_itself+0x60>
            }
        }
        else {
            break;
 8000650:	bf00      	nop
        }
    }

    return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <snake_die>:

/**
 * @brief kill the snake
 * @param snake: the snake object
*/
void snake_die(Snake_t* snake) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    snake->alive = 0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    uart_println("Snake ded");
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <snake_die+0x20>)
 800066e:	f000 fbc7 	bl	8000e00 <uart_println>
 
    return;
 8000672:	bf00      	nop
}
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	080031fc 	.word	0x080031fc

08000680 <snake_change_dir>:

/**
 * @brief Read the UART input and change the snake direction
 * @param snake: the snake object
*/
void snake_change_dir(Snake_t* snake) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    if (!uart_check_flag()) return;
 8000688:	f000 fbfc 	bl	8000e84 <uart_check_flag>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d076      	beq.n	8000780 <snake_change_dir+0x100>

    uart_clear_flag();
 8000692:	f000 fc03 	bl	8000e9c <uart_clear_flag>
    Direction_t new_dir;
    char c = get_uart_char();
 8000696:	f000 fc0d 	bl	8000eb4 <get_uart_char>
 800069a:	4603      	mov	r3, r0
 800069c:	73bb      	strb	r3, [r7, #14]
    
    switch (c) {
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	3b61      	subs	r3, #97	@ 0x61
 80006a2:	2b16      	cmp	r3, #22
 80006a4:	d86e      	bhi.n	8000784 <snake_change_dir+0x104>
 80006a6:	a201      	add	r2, pc, #4	@ (adr r2, 80006ac <snake_change_dir+0x2c>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	0800070f 	.word	0x0800070f
 80006b0:	08000785 	.word	0x08000785
 80006b4:	08000785 	.word	0x08000785
 80006b8:	0800071b 	.word	0x0800071b
 80006bc:	08000785 	.word	0x08000785
 80006c0:	08000785 	.word	0x08000785
 80006c4:	08000785 	.word	0x08000785
 80006c8:	08000785 	.word	0x08000785
 80006cc:	08000785 	.word	0x08000785
 80006d0:	08000785 	.word	0x08000785
 80006d4:	08000785 	.word	0x08000785
 80006d8:	08000785 	.word	0x08000785
 80006dc:	08000785 	.word	0x08000785
 80006e0:	08000785 	.word	0x08000785
 80006e4:	08000785 	.word	0x08000785
 80006e8:	08000785 	.word	0x08000785
 80006ec:	08000785 	.word	0x08000785
 80006f0:	08000785 	.word	0x08000785
 80006f4:	08000715 	.word	0x08000715
 80006f8:	08000785 	.word	0x08000785
 80006fc:	08000785 	.word	0x08000785
 8000700:	08000785 	.word	0x08000785
 8000704:	08000709 	.word	0x08000709
    case 'w':
        new_dir = NORTH;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
        break;
 800070c:	e008      	b.n	8000720 <snake_change_dir+0xa0>
    case 'a':
        new_dir = WEST;
 800070e:	2303      	movs	r3, #3
 8000710:	73fb      	strb	r3, [r7, #15]
        break;
 8000712:	e005      	b.n	8000720 <snake_change_dir+0xa0>
    case 's':
        new_dir = SOUTH;
 8000714:	2302      	movs	r3, #2
 8000716:	73fb      	strb	r3, [r7, #15]
        break;
 8000718:	e002      	b.n	8000720 <snake_change_dir+0xa0>
    case 'd':
        new_dir = EAST;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
        break;
 800071e:	bf00      	nop
    default: return;    
    }

    // change dir as long as not 180, if same dir then nothing happens
    switch (snake->dir) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000726:	2b03      	cmp	r3, #3
 8000728:	d835      	bhi.n	8000796 <snake_change_dir+0x116>
 800072a:	a201      	add	r2, pc, #4	@ (adr r2, 8000730 <snake_change_dir+0xb0>)
 800072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000730:	08000741 	.word	0x08000741
 8000734:	08000751 	.word	0x08000751
 8000738:	08000761 	.word	0x08000761
 800073c:	08000771 	.word	0x08000771
    case NORTH:
        if (new_dir != SOUTH) snake->dir = new_dir;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d020      	beq.n	8000788 <snake_change_dir+0x108>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        return;
 800074e:	e01b      	b.n	8000788 <snake_change_dir+0x108>
    case EAST:
        if (new_dir != WEST) snake->dir = new_dir;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d01a      	beq.n	800078c <snake_change_dir+0x10c>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        return;
 800075e:	e015      	b.n	800078c <snake_change_dir+0x10c>
    case SOUTH:
        if (new_dir != NORTH) snake->dir = new_dir;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d014      	beq.n	8000790 <snake_change_dir+0x110>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        return;
 800076e:	e00f      	b.n	8000790 <snake_change_dir+0x110>
    case WEST:
        if (new_dir != EAST) snake->dir = new_dir;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d00e      	beq.n	8000794 <snake_change_dir+0x114>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        return;    
 800077e:	e009      	b.n	8000794 <snake_change_dir+0x114>
    if (!uart_check_flag()) return;
 8000780:	bf00      	nop
 8000782:	e008      	b.n	8000796 <snake_change_dir+0x116>
    default: return;    
 8000784:	bf00      	nop
 8000786:	e006      	b.n	8000796 <snake_change_dir+0x116>
        return;
 8000788:	bf00      	nop
 800078a:	e004      	b.n	8000796 <snake_change_dir+0x116>
        return;
 800078c:	bf00      	nop
 800078e:	e002      	b.n	8000796 <snake_change_dir+0x116>
        return;
 8000790:	bf00      	nop
 8000792:	e000      	b.n	8000796 <snake_change_dir+0x116>
        return;    
 8000794:	bf00      	nop
    }
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <snake_check_food>:
/**
 * @brief check snake head collides with food
 * @return  0 if no
 *          non-zero if yes
*/
uint8_t snake_check_food(Snake_t snake, Food_t food) {
 800079c:	b084      	sub	sp, #16
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	f107 0c08 	add.w	ip, r7, #8
 80007a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return same_point((snake.body[0]).pos, food);
 80007aa:	897a      	ldrh	r2, [r7, #10]
 80007ac:	2300      	movs	r3, #0
 80007ae:	f362 030f 	bfi	r3, r2, #0, #16
 80007b2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd5a 	bl	8000270 <same_point>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007c6:	b004      	add	sp, #16
 80007c8:	4770      	bx	lr

080007ca <snake_grow>:

/**
 * @brief Grow the snake
 * @param snake: the snake object
*/
void snake_grow(Snake_t* snake) {
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
            // break;
        // }
    // }

    
    snake->body[snake->len].valid = 1;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	4413      	add	r3, r2
 80007e2:	3301      	adds	r3, #1
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
    snake->body[snake->len].pos = snake->body[snake->len - 1].pos;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	4603      	mov	r3, r0
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4403      	add	r3, r0
 80007fc:	440b      	add	r3, r1
 80007fe:	1c98      	adds	r0, r3, #2
 8000800:	6879      	ldr	r1, [r7, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	440b      	add	r3, r1
 800080a:	3302      	adds	r3, #2
 800080c:	4602      	mov	r2, r0
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	8013      	strh	r3, [r2, #0]
    snake->tail = &snake->body[snake->len];
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    
    snake->len++;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	701a      	strb	r2, [r3, #0]
    snake->score++;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800083c:	3301      	adds	r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

    return;
 8000846:	bf00      	nop
}
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <snake_eat>:
/**
 * @brief Eat the food
 * @param snake: the snake object
 * @param food: the food object
*/
void snake_eat(Snake_t* snake, Food_t* food) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
    // uart_println("Eating food");
    snake_grow(snake);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffb4 	bl	80007ca <snake_grow>
    food_respawn(food);
 8000862:	6838      	ldr	r0, [r7, #0]
 8000864:	f000 f81b 	bl	800089e <food_respawn>

    return;
 8000868:	bf00      	nop
}
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <food_init>:

/**
 * @brief Initialize the food object
 * @return the food object
*/
Food_t food_init() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
    Food_t food;
    food_respawn(&food);
 8000876:	463b      	mov	r3, r7
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f810 	bl	800089e <food_respawn>
    food_draw(food);
 800087e:	6838      	ldr	r0, [r7, #0]
 8000880:	f000 f824 	bl	80008cc <food_draw>

    return food;
 8000884:	883b      	ldrh	r3, [r7, #0]
 8000886:	80bb      	strh	r3, [r7, #4]
 8000888:	2300      	movs	r3, #0
 800088a:	793a      	ldrb	r2, [r7, #4]
 800088c:	f362 0307 	bfi	r3, r2, #0, #8
 8000890:	797a      	ldrb	r2, [r7, #5]
 8000892:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <food_respawn>:

/**
 * @brief Respawn the food object
 * @param food: the food object
*/
void food_respawn(Food_t* food) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
    food->x = get_random(VGA_WIDTH);
 80008a6:	2064      	movs	r0, #100	@ 0x64
 80008a8:	f000 f84c 	bl	8000944 <get_random>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	701a      	strb	r2, [r3, #0]
    food->y = get_random(VGA_HEIGHT);
 80008b4:	2064      	movs	r0, #100	@ 0x64
 80008b6:	f000 f845 	bl	8000944 <get_random>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	705a      	strb	r2, [r3, #1]

    return;
 80008c2:	bf00      	nop
}
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <food_draw>:


/**
 * @brief Draw the food object
*/
void food_draw(Food_t food) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	80b8      	strh	r0, [r7, #4]
    sprintf(snake_print_buffer, "[%u;%uH", food.y, food.x);
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	461a      	mov	r2, r3
 80008d8:	793b      	ldrb	r3, [r7, #4]
 80008da:	4907      	ldr	r1, [pc, #28]	@ (80008f8 <food_draw+0x2c>)
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <food_draw+0x30>)
 80008de:	f001 ffdd 	bl	800289c <siprintf>
    uart_send_escape(snake_print_buffer);
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <food_draw+0x30>)
 80008e4:	f000 fa9c 	bl	8000e20 <uart_send_escape>
    uart_send_char('X');
 80008e8:	2058      	movs	r0, #88	@ 0x58
 80008ea:	f000 fa5b 	bl	8000da4 <uart_send_char>

    // sprintf(snake_print_buffer, "Food Pos: (%d, %d)", food.x, food.y);
    // uart_println(snake_print_buffer);
    return;
 80008ee:	bf00      	nop
}
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	080031f4 	.word	0x080031f4
 80008fc:	20000078 	.word	0x20000078

08000900 <MX_RNG_Init>:

static void MX_RNG_Init(void);
RNG_HandleTypeDef hrng;


static void MX_RNG_Init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

    hrng.Instance = RNG;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_RNG_Init+0x20>)
 8000906:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <MX_RNG_Init+0x24>)
 8000908:	601a      	str	r2, [r3, #0]
    if (HAL_RNG_Init(&hrng) != HAL_OK) {
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_RNG_Init+0x20>)
 800090c:	f001 ff6e 	bl	80027ec <HAL_RNG_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_RNG_Init+0x1a>
        Error_Handler();
 8000916:	f000 f8d4 	bl	8000ac2 <Error_Handler>
    }
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000dc 	.word	0x200000dc
 8000924:	50060800 	.word	0x50060800

08000928 <rng_init>:

static uint32_t value;

void rng_init() {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    MX_RNG_Init();
 800092c:	f7ff ffe8 	bl	8000900 <MX_RNG_Init>
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN; // shpuld already be enabled by HAL
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <rng_init+0x18>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000934:	4a02      	ldr	r2, [pc, #8]	@ (8000940 <rng_init+0x18>)
 8000936:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800093a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    return;
 800093c:	bf00      	nop
}
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000

08000944 <get_random>:

uint32_t get_random(uint32_t n) {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    RNG->CR |= RNG_CR_RNGEN;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <get_random+0x48>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <get_random+0x48>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6013      	str	r3, [r2, #0]

    while (!(RNG->SR & RNG_SR_DRDY));
 8000958:	bf00      	nop
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <get_random+0x48>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f9      	beq.n	800095a <get_random+0x16>

    value = RNG->DR;
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <get_random+0x48>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	4a09      	ldr	r2, [pc, #36]	@ (8000990 <get_random+0x4c>)
 800096c:	6013      	str	r3, [r2, #0]

    return value % n;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <get_random+0x4c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	fbb3 f2f2 	udiv	r2, r3, r2
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	fb01 f202 	mul.w	r2, r1, r2
 800097e:	1a9b      	subs	r3, r3, r2
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	50060800 	.word	0x50060800
 8000990:	200000ec 	.word	0x200000ec

08000994 <main>:
#include "Objects.h"
#include "RNG.h"

void SystemClock_Config(void);

int main(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b0d0      	sub	sp, #320	@ 0x140
 8000998:	af26      	add	r7, sp, #152	@ 0x98
    HAL_Init();
 800099a:	f000 fac0 	bl	8000f1e <HAL_Init>
    SystemClock_Config();
 800099e:	f000 f83e 	bl	8000a1e <SystemClock_Config>

    rng_init();
 80009a2:	f7ff ffc1 	bl	8000928 <rng_init>
    uart_init();
 80009a6:	f000 f9d9 	bl	8000d5c <uart_init>

    Snake_t snake;
    snake_init(&snake);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fcc4 	bl	800033c <snake_init>
    Food_t food = food_init();
 80009b4:	f7ff ff5c 	bl	8000870 <food_init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	80bb      	strh	r3, [r7, #4]


    while (1) {
        snake_move(&snake);
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fd45 	bl	8000450 <snake_move>
        if (snake_check_food(snake, food)) {
 80009c6:	88bb      	ldrh	r3, [r7, #4]
 80009c8:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 80009cc:	4668      	mov	r0, sp
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	2290      	movs	r2, #144	@ 0x90
 80009d4:	4619      	mov	r1, r3
 80009d6:	f001 ffb5 	bl	8002944 <memcpy>
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e0:	f7ff fedc 	bl	800079c <snake_check_food>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <main+0x64>
        	snake_eat(&snake, &food);
 80009ea:	1d3a      	adds	r2, r7, #4
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff2d 	bl	8000852 <snake_eat>
        }
        
        grid_draw(snake, food);
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 80009fe:	4668      	mov	r0, sp
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	2290      	movs	r2, #144	@ 0x90
 8000a06:	4619      	mov	r1, r3
 8000a08:	f001 ff9c 	bl	8002944 <memcpy>
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a12:	f7ff fc44 	bl	800029e <grid_draw>

        HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	@ 0x64
 8000a18:	f000 faf6 	bl	8001008 <HAL_Delay>
        snake_move(&snake);
 8000a1c:	e7ce      	b.n	80009bc <main+0x28>

08000a1e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b096      	sub	sp, #88	@ 0x58
 8000a22:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2244      	movs	r2, #68	@ 0x44
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 ff55 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a40:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a44:	f000 fbf8 	bl	8001238 <HAL_PWREx_ControlVoltageScaling>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a4e:	f000 f838 	bl	8000ac2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a56:	2301      	movs	r3, #1
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a5e:	2360      	movs	r3, #96	@ 0x60
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a66:	2301      	movs	r3, #1
 8000a68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a72:	2307      	movs	r3, #7
 8000a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fc2e 	bl	80012e4 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a8e:	f000 f818 	bl	8000ac2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fff6 	bl	8001a9c <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ab6:	f000 f804 	bl	8000ac2 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3758      	adds	r7, #88	@ 0x58
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac6:	b672      	cpsid	i
}
 8000ac8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aca:	bf00      	nop
 8000acc:	e7fd      	b.n	8000aca <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_MspInit+0x44>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ada:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <HAL_MspInit+0x44>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <HAL_MspInit+0x44>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <HAL_MspInit+0x44>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_MspInit+0x44>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0a6      	sub	sp, #152	@ 0x98
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2288      	movs	r2, #136	@ 0x88
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fed7 	bl	80028dc <memset>
  if(hrng->Instance==RNG)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <HAL_RNG_MspInit+0x80>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d12b      	bne.n	8000b90 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000b38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000b3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b52:	2307      	movs	r3, #7
 8000b54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000b5e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 f983 	bl	8001e74 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8000b74:	f7ff ffa5 	bl	8000ac2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_RNG_MspInit+0x84>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <HAL_RNG_MspInit+0x84>)
 8000b7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_RNG_MspInit+0x84>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3798      	adds	r7, #152	@ 0x98
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	50060800 	.word	0x50060800
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f9e7 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f001 fe5c 	bl	80028ec <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20018000 	.word	0x20018000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200000f0 	.word	0x200000f0
 8000c68:	20000248 	.word	0x20000248

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4907      	ldr	r1, [pc, #28]	@ (8000cc8 <__NVIC_EnableIRQ+0x38>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <uart_pin_init+0x8c>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	4a20      	ldr	r2, [pc, #128]	@ (8000d58 <uart_pin_init+0x8c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8000cdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ce0:	6a1b      	ldr	r3, [r3, #32]
 8000ce2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000cea:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8000cec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cf6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000cfa:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000cfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d0a:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d16:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000d1a:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d26:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000d2a:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d3a:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000d3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d46:	f023 030c 	bic.w	r3, r3, #12
 8000d4a:	6053      	str	r3, [r2, #4]
    return;
 8000d4c:	bf00      	nop
}
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    uart_pin_init();
 8000d60:	f7ff ffb4 	bl	8000ccc <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <uart_init+0x40>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <uart_init+0x40>)
 8000d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d6e:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <uart_init+0x44>)
 8000d72:	222c      	movs	r2, #44	@ 0x2c
 8000d74:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <uart_init+0x44>)
 8000d78:	f240 1215 	movw	r2, #277	@ 0x115
 8000d7c:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 8000d7e:	2026      	movs	r0, #38	@ 0x26
 8000d80:	f7ff ff86 	bl	8000c90 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d84:	b662      	cpsie	i
}
 8000d86:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <uart_init+0x44>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <uart_init+0x44>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 8000d94:	f000 f852 	bl	8000e3c <uart_clear_screen>
//    uart_send_escape("[?25l"); // hide cursor
    return;
 8000d98:	bf00      	nop
}
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40004400 	.word	0x40004400

08000da4 <uart_send_char>:

void uart_send_char(char c) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8000dae:	bf00      	nop
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <uart_send_char+0x2c>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f9      	beq.n	8000db0 <uart_send_char+0xc>
    USART2->TDR = c;
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <uart_send_char+0x2c>)
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	b292      	uxth	r2, r2
 8000dc2:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8000dc4:	bf00      	nop
}
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <uart_send_string>:

void uart_send_string(const char* str) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8000ddc:	e007      	b.n	8000dee <uart_send_string+0x1a>
        uart_send_char(*str);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffde 	bl	8000da4 <uart_send_char>
        str++;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f3      	bne.n	8000dde <uart_send_string+0xa>
    }

    return;
 8000df6:	bf00      	nop
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <uart_println>:

void uart_println(const char* str) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    uart_send_string(str);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ffe3 	bl	8000dd4 <uart_send_string>
    uart_send_escape("[1E");
 8000e0e:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <uart_println+0x1c>)
 8000e10:	f000 f806 	bl	8000e20 <uart_send_escape>

    return;
 8000e14:	bf00      	nop
}
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08003208 	.word	0x08003208

08000e20 <uart_send_escape>:

void uart_send_escape(const char* str) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 8000e28:	201b      	movs	r0, #27
 8000e2a:	f7ff ffbb 	bl	8000da4 <uart_send_char>
    uart_send_string(str);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffd0 	bl	8000dd4 <uart_send_string>

    return;
 8000e34:	bf00      	nop
}
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <uart_clear_screen>:


void uart_clear_screen(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 8000e40:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <uart_clear_screen+0x14>)
 8000e42:	f7ff ffed 	bl	8000e20 <uart_send_escape>
    uart_send_escape("[H");
 8000e46:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <uart_clear_screen+0x18>)
 8000e48:	f7ff ffea 	bl	8000e20 <uart_send_escape>

    return;
 8000e4c:	bf00      	nop
}
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	0800320c 	.word	0x0800320c
 8000e54:	08003210 	.word	0x08003210

08000e58 <USART2_IRQHandler>:
    uart_send_escape(buf);

    return;
}

void USART2_IRQHandler(void) {
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <USART2_IRQHandler+0x20>)
 8000e5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <USART2_IRQHandler+0x24>)
 8000e66:	701a      	strb	r2, [r3, #0]
    flag = 1;
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <USART2_IRQHandler+0x28>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
    return;
 8000e6e:	bf00      	nop
}
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	200000f8 	.word	0x200000f8
 8000e80:	200000f4 	.word	0x200000f4

08000e84 <uart_check_flag>:

int uart_check_flag() {
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
    return flag;
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <uart_check_flag+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200000f4 	.word	0x200000f4

08000e9c <uart_clear_flag>:

void uart_clear_flag() {
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
    flag = 0;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <uart_clear_flag+0x14>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]

    return;
 8000ea6:	bf00      	nop
}
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200000f4 	.word	0x200000f4

08000eb4 <get_uart_char>:

char get_uart_char() {
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    return value;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <get_uart_char+0x14>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	200000f8 	.word	0x200000f8

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff fecc 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	@ (8000f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <LoopForever+0xe>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	@ (8000f18 <LoopForever+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f001 fcfd 	bl	80028f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fd49 	bl	8000994 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f10:	080032a0 	.word	0x080032a0
  ldr r2, =_sbss
 8000f14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f18:	20000248 	.word	0x20000248

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>

08000f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f943 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f000 f80e 	bl	8000f50 <HAL_InitTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e001      	b.n	8000f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f40:	f7ff fdc6 	bl	8000ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d023      	beq.n	8000fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_InitTick+0x70>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <HAL_InitTick+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f941 	bl	8001202 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d809      	bhi.n	8000fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f94:	f000 f919 	bl	80011ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <HAL_InitTick+0x74>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e001      	b.n	8000fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200000fc 	.word	0x200000fc

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200000fc 	.word	0x200000fc

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_SetPriorityGrouping>:
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff47 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff5c 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff8e 	bl	8001108 <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffb0 	bl	8001170 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <HAL_PWREx_GetVoltageRange+0x18>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40007000 	.word	0x40007000

08001238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001246:	d130      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001254:	d038      	beq.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800125e:	4a1e      	ldr	r2, [pc, #120]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001264:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2232      	movs	r2, #50	@ 0x32
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4a1b      	ldr	r2, [pc, #108]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	0c9b      	lsrs	r3, r3, #18
 8001278:	3301      	adds	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127c:	e002      	b.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3b01      	subs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001290:	d102      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f2      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a4:	d110      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e00f      	b.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b6:	d007      	beq.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c0:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40007000 	.word	0x40007000
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83

080012e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e3ca      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f6:	4b97      	ldr	r3, [pc, #604]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001300:	4b94      	ldr	r3, [pc, #592]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80e4 	beq.w	80014e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_RCC_OscConfig+0x4a>
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	f040 808b 	bne.w	800143c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b01      	cmp	r3, #1
 800132a:	f040 8087 	bne.w	800143c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800132e:	4b89      	ldr	r3, [pc, #548]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x62>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e3a2      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	4b82      	ldr	r3, [pc, #520]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <HAL_RCC_OscConfig+0x7c>
 8001356:	4b7f      	ldr	r3, [pc, #508]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800135e:	e005      	b.n	800136c <HAL_RCC_OscConfig+0x88>
 8001360:	4b7c      	ldr	r3, [pc, #496]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800136c:	4293      	cmp	r3, r2
 800136e:	d223      	bcs.n	80013b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fd1d 	bl	8001db4 <RCC_SetFlashLatencyFromMSIRange>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e383      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001384:	4b73      	ldr	r3, [pc, #460]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a72      	ldr	r2, [pc, #456]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b70      	ldr	r3, [pc, #448]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	496d      	ldr	r1, [pc, #436]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	4968      	ldr	r1, [pc, #416]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
 80013b6:	e025      	b.n	8001404 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b8:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a65      	ldr	r2, [pc, #404]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b63      	ldr	r3, [pc, #396]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4960      	ldr	r1, [pc, #384]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	495b      	ldr	r1, [pc, #364]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fcdd 	bl	8001db4 <RCC_SetFlashLatencyFromMSIRange>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e343      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001404:	f000 fc4a 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001408:	4602      	mov	r2, r0
 800140a:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	4950      	ldr	r1, [pc, #320]	@ (8001558 <HAL_RCC_OscConfig+0x274>)
 8001416:	5ccb      	ldrb	r3, [r1, r3]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	4a4e      	ldr	r2, [pc, #312]	@ (800155c <HAL_RCC_OscConfig+0x278>)
 8001422:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001424:	4b4e      	ldr	r3, [pc, #312]	@ (8001560 <HAL_RCC_OscConfig+0x27c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd91 	bl	8000f50 <HAL_InitTick>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d052      	beq.n	80014de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	e327      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d032      	beq.n	80014aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001444:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a42      	ldr	r2, [pc, #264]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001450:	f7ff fdce 	bl	8000ff0 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001458:	f7ff fdca 	bl	8000ff0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e310      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146a:	4b3a      	ldr	r3, [pc, #232]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001476:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a36      	ldr	r2, [pc, #216]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4931      	ldr	r1, [pc, #196]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001494:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	492c      	ldr	r1, [pc, #176]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
 80014a8:	e01a      	b.n	80014e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a29      	ldr	r2, [pc, #164]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fd9b 	bl	8000ff0 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014be:	f7ff fd97 	bl	8000ff0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e2dd      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d0:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x1da>
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d074      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x21a>
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	d10e      	bne.n	8001516 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d10b      	bne.n	8001516 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d064      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d160      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e2ba      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x24a>
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e026      	b.n	800157c <HAL_RCC_OscConfig+0x298>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001536:	d115      	bne.n	8001564 <HAL_RCC_OscConfig+0x280>
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800153e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a02      	ldr	r2, [pc, #8]	@ (8001554 <HAL_RCC_OscConfig+0x270>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e014      	b.n	800157c <HAL_RCC_OscConfig+0x298>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	0800321c 	.word	0x0800321c
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	4ba0      	ldr	r3, [pc, #640]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a9f      	ldr	r2, [pc, #636]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b9d      	ldr	r3, [pc, #628]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a9c      	ldr	r2, [pc, #624]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fd34 	bl	8000ff0 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fd30 	bl	8000ff0 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e276      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	4b92      	ldr	r3, [pc, #584]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x2a8>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fd20 	bl	8000ff0 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fd1c 	bl	8000ff0 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	@ 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e262      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	4b88      	ldr	r3, [pc, #544]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2d0>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d060      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x310>
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d116      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	4b7c      	ldr	r3, [pc, #496]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x328>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e23f      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b76      	ldr	r3, [pc, #472]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	4973      	ldr	r1, [pc, #460]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	e040      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d023      	beq.n	8001672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162a:	4b6f      	ldr	r3, [pc, #444]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6e      	ldr	r2, [pc, #440]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fcdb 	bl	8000ff0 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fcd7 	bl	8000ff0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e21d      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	4b65      	ldr	r3, [pc, #404]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b62      	ldr	r3, [pc, #392]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	061b      	lsls	r3, r3, #24
 800166a:	495f      	ldr	r1, [pc, #380]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	e018      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b5d      	ldr	r3, [pc, #372]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5c      	ldr	r2, [pc, #368]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fcb7 	bl	8000ff0 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fcb3 	bl	8000ff0 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1f9      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	4b53      	ldr	r3, [pc, #332]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03c      	beq.n	800172a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b8:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016be:	4a4a      	ldr	r2, [pc, #296]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fc92 	bl	8000ff0 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fc8e 	bl	8000ff0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1d4      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e2:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ef      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3ec>
 80016f0:	e01b      	b.n	800172a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f8:	4a3b      	ldr	r2, [pc, #236]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fc75 	bl	8000ff0 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fc71 	bl	8000ff0 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1b7      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171c:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a6 	beq.w	8001884 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800173c:	4b2a      	ldr	r3, [pc, #168]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	4b27      	ldr	r3, [pc, #156]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	4a26      	ldr	r2, [pc, #152]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	@ 0x58
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001760:	2301      	movs	r3, #1
 8001762:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <HAL_RCC_OscConfig+0x508>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d118      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <HAL_RCC_OscConfig+0x508>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <HAL_RCC_OscConfig+0x508>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177c:	f7ff fc38 	bl	8000ff0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7ff fc34 	bl	8000ff0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e17a      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_RCC_OscConfig+0x508>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d8>
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ba:	e029      	b.n	8001810 <HAL_RCC_OscConfig+0x52c>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d115      	bne.n	80017f0 <HAL_RCC_OscConfig+0x50c>
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ca:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	4a03      	ldr	r2, [pc, #12]	@ (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x52c>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f6:	4a9b      	ldr	r2, [pc, #620]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001800:	4b98      	ldr	r3, [pc, #608]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001806:	4a97      	ldr	r2, [pc, #604]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d016      	beq.n	8001846 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fbea 	bl	8000ff0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff fbe6 	bl	8000ff0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e12a      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	4b8b      	ldr	r3, [pc, #556]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ed      	beq.n	8001820 <HAL_RCC_OscConfig+0x53c>
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fbd3 	bl	8000ff0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fbcf 	bl	8000ff0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e113      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001864:	4b7f      	ldr	r3, [pc, #508]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ed      	bne.n	800184e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001872:	7ffb      	ldrb	r3, [r7, #31]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b7a      	ldr	r3, [pc, #488]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187c:	4a79      	ldr	r2, [pc, #484]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001882:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80fe 	beq.w	8001a8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	2b02      	cmp	r3, #2
 8001894:	f040 80d0 	bne.w	8001a38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001898:	4b72      	ldr	r3, [pc, #456]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d130      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	3b01      	subs	r3, #1
 80018b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d127      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11f      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018d8:	2a07      	cmp	r2, #7
 80018da:	bf14      	ite	ne
 80018dc:	2201      	movne	r2, #1
 80018de:	2200      	moveq	r2, #0
 80018e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d113      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d109      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d06e      	beq.n	80019ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d069      	beq.n	80019e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001914:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001920:	4b50      	ldr	r3, [pc, #320]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0ad      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001930:	4b4c      	ldr	r3, [pc, #304]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a4b      	ldr	r2, [pc, #300]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193c:	f7ff fb58 	bl	8000ff0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb54 	bl	8000ff0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e09a      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001956:	4b43      	ldr	r3, [pc, #268]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001962:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4b40      	ldr	r3, [pc, #256]	@ (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001972:	3a01      	subs	r2, #1
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	4311      	orrs	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800197c:	0212      	lsls	r2, r2, #8
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001984:	0852      	lsrs	r2, r2, #1
 8001986:	3a01      	subs	r2, #1
 8001988:	0552      	lsls	r2, r2, #21
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001990:	0852      	lsrs	r2, r2, #1
 8001992:	3a01      	subs	r2, #1
 8001994:	0652      	lsls	r2, r2, #25
 8001996:	4311      	orrs	r1, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800199c:	0912      	lsrs	r2, r2, #4
 800199e:	0452      	lsls	r2, r2, #17
 80019a0:	430a      	orrs	r2, r1
 80019a2:	4930      	ldr	r1, [pc, #192]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c0:	f7ff fb16 	bl	8000ff0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff fb12 	bl	8000ff0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e058      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e6:	e050      	b.n	8001a8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e04f      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d148      	bne.n	8001a8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a19      	ldr	r2, [pc, #100]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a10:	f7ff faee 	bl	8000ff0 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff faea 	bl	8000ff0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e030      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x734>
 8001a36:	e028      	b.n	8001a8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d023      	beq.n	8001a86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_RCC_OscConfig+0x780>)
 8001a44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fad1 	bl	8000ff0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	e00c      	b.n	8001a6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff facd 	bl	8000ff0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d905      	bls.n	8001a6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e013      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_OscConfig+0x7b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ec      	bne.n	8001a52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_RCC_OscConfig+0x7b0>)
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	4905      	ldr	r1, [pc, #20]	@ (8001a94 <HAL_RCC_OscConfig+0x7b0>)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_RCC_OscConfig+0x7b4>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
 8001a84:	e001      	b.n	8001a8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	feeefffc 	.word	0xfeeefffc

08001a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0e7      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b75      	ldr	r3, [pc, #468]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b72      	ldr	r3, [pc, #456]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	4970      	ldr	r1, [pc, #448]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b6e      	ldr	r3, [pc, #440]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0cf      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b66      	ldr	r3, [pc, #408]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d908      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b63      	ldr	r3, [pc, #396]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4960      	ldr	r1, [pc, #384]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d04c      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b5a      	ldr	r3, [pc, #360]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d121      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0a6      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3a:	4b54      	ldr	r3, [pc, #336]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e09a      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b52:	4b4e      	ldr	r3, [pc, #312]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e08e      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b62:	4b4a      	ldr	r3, [pc, #296]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e086      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b46      	ldr	r3, [pc, #280]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4943      	ldr	r1, [pc, #268]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b84:	f7ff fa34 	bl	8000ff0 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff fa30 	bl	8000ff0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e06e      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b31      	ldr	r3, [pc, #196]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d208      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	492b      	ldr	r1, [pc, #172]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d210      	bcs.n	8001c12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf0:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 0207 	bic.w	r2, r3, #7
 8001bf8:	4923      	ldr	r1, [pc, #140]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c00:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e036      	b.n	8001c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	4918      	ldr	r1, [pc, #96]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4910      	ldr	r1, [pc, #64]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c50:	f000 f824 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	490b      	ldr	r1, [pc, #44]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f4>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_RCC_ClockConfig+0x1fc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f96b 	bl	8000f50 <HAL_InitTick>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	0800321c 	.word	0x0800321c
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001caa:	4b3e      	ldr	r3, [pc, #248]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d121      	bne.n	8001d0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d11e      	bne.n	8001d0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd0:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cdc:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10d      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d14:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x110>)
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e004      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d134      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d003      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0xac>
 8001d40:	e005      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x110>)
 8001d44:	617b      	str	r3, [r7, #20]
      break;
 8001d46:	e005      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4a:	617b      	str	r3, [r7, #20]
      break;
 8001d4c:	e002      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	617b      	str	r3, [r7, #20]
      break;
 8001d52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	3301      	adds	r3, #1
 8001d60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	fb03 f202 	mul.w	r2, r3, r2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	0e5b      	lsrs	r3, r3, #25
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	3301      	adds	r3, #1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d94:	69bb      	ldr	r3, [r7, #24]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	@ 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	0800322c 	.word	0x0800322c
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200

08001db4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dcc:	f7ff fa26 	bl	800121c <HAL_PWREx_GetVoltageRange>
 8001dd0:	6178      	str	r0, [r7, #20]
 8001dd2:	e014      	b.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	4a24      	ldr	r2, [pc, #144]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dec:	f7ff fa16 	bl	800121c <HAL_PWREx_GetVoltageRange>
 8001df0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e04:	d10b      	bne.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b80      	cmp	r3, #128	@ 0x80
 8001e0a:	d919      	bls.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e10:	d902      	bls.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e12:	2302      	movs	r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e013      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e18:	2301      	movs	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e010      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b80      	cmp	r3, #128	@ 0x80
 8001e22:	d902      	bls.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e24:	2303      	movs	r3, #3
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e00a      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b80      	cmp	r3, #128	@ 0x80
 8001e2e:	d102      	bne.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e30:	2302      	movs	r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e004      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b70      	cmp	r3, #112	@ 0x70
 8001e3a:	d101      	bne.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 0207 	bic.w	r2, r3, #7
 8001e48:	4909      	ldr	r1, [pc, #36]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e50:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e80:	2300      	movs	r3, #0
 8001e82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d041      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e98:	d02a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e9e:	d824      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001eaa:	d81e      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eb6:	e018      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb8:	4b86      	ldr	r3, [pc, #536]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a85      	ldr	r2, [pc, #532]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fabb 	bl	8002448 <RCCEx_PLLSAI1_Config>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ed6:	e00c      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3320      	adds	r3, #32
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fba6 	bl	8002630 <RCCEx_PLLSAI2_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ee8:	e003      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	74fb      	strb	r3, [r7, #19]
      break;
 8001eee:	e000      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ef8:	4b76      	ldr	r3, [pc, #472]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f06:	4973      	ldr	r1, [pc, #460]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f0e:	e001      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d041      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f28:	d02a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f2e:	d824      	bhi.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f34:	d008      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f3a:	d81e      	bhi.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f44:	d010      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f46:	e018      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f48:	4b62      	ldr	r3, [pc, #392]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a61      	ldr	r2, [pc, #388]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f54:	e015      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fa73 	bl	8002448 <RCCEx_PLLSAI1_Config>
 8001f62:	4603      	mov	r3, r0
 8001f64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f66:	e00c      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3320      	adds	r3, #32
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fb5e 	bl	8002630 <RCCEx_PLLSAI2_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f78:	e003      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f7e:	e000      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f82:	7cfb      	ldrb	r3, [r7, #19]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10b      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f88:	4b52      	ldr	r3, [pc, #328]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f96:	494f      	ldr	r1, [pc, #316]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f9e:	e001      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a0 	beq.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fb6:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00d      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b41      	ldr	r3, [pc, #260]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	4a40      	ldr	r2, [pc, #256]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a3a      	ldr	r2, [pc, #232]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fffc 	bl	8000ff0 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ffa:	e009      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7fe fff8 	bl	8000ff0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d902      	bls.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	74fb      	strb	r3, [r7, #19]
        break;
 800200e:	e005      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002010:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ef      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d15c      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002022:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01f      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	d019      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002040:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800204a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800204c:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002052:	4a20      	ldr	r2, [pc, #128]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800206c:	4a19      	ldr	r2, [pc, #100]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe ffb7 	bl	8000ff0 <HAL_GetTick>
 8002082:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002084:	e00b      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe ffb3 	bl	8000ff0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d902      	bls.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	74fb      	strb	r3, [r7, #19]
            break;
 800209c:	e006      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ec      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020c2:	4904      	ldr	r1, [pc, #16]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020ca:	e009      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
 80020d0:	e006      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	4a9d      	ldr	r2, [pc, #628]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fe:	4b98      	ldr	r3, [pc, #608]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002104:	f023 0203 	bic.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210c:	4994      	ldr	r1, [pc, #592]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002120:	4b8f      	ldr	r3, [pc, #572]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	f023 020c 	bic.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212e:	498c      	ldr	r1, [pc, #560]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002142:	4b87      	ldr	r3, [pc, #540]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002148:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	4983      	ldr	r1, [pc, #524]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002164:	4b7e      	ldr	r3, [pc, #504]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	497b      	ldr	r1, [pc, #492]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002186:	4b76      	ldr	r3, [pc, #472]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002194:	4972      	ldr	r1, [pc, #456]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	496a      	ldr	r1, [pc, #424]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ca:	4b65      	ldr	r3, [pc, #404]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	4961      	ldr	r1, [pc, #388]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fa:	4959      	ldr	r1, [pc, #356]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002214:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221c:	4950      	ldr	r1, [pc, #320]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002230:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223e:	4948      	ldr	r1, [pc, #288]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002252:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	493f      	ldr	r1, [pc, #252]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d028      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002274:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002282:	4937      	ldr	r1, [pc, #220]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800228e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002292:	d106      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002294:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a31      	ldr	r2, [pc, #196]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800229e:	60d3      	str	r3, [r2, #12]
 80022a0:	e011      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3304      	adds	r3, #4
 80022b0:	2101      	movs	r1, #1
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f8c8 	bl	8002448 <RCCEx_PLLSAI1_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022d2:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	491f      	ldr	r1, [pc, #124]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f0:	d106      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fc:	60d3      	str	r3, [r2, #12]
 80022fe:	e011      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002308:	d10c      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f899 	bl	8002448 <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02b      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233e:	4908      	ldr	r1, [pc, #32]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800234a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800234e:	d109      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002350:	4b03      	ldr	r3, [pc, #12]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a02      	ldr	r2, [pc, #8]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800235a:	60d3      	str	r3, [r2, #12]
 800235c:	e014      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800236c:	d10c      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f867 	bl	8002448 <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02f      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002394:	4b2b      	ldr	r3, [pc, #172]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023a2:	4928      	ldr	r1, [pc, #160]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023b2:	d10d      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	2102      	movs	r1, #2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f844 	bl	8002448 <RCCEx_PLLSAI1_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d014      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	74bb      	strb	r3, [r7, #18]
 80023ce:	e011      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3320      	adds	r3, #32
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f925 	bl	8002630 <RCCEx_PLLSAI2_Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002400:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002406:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800240e:	490d      	ldr	r1, [pc, #52]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002428:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002432:	4904      	ldr	r1, [pc, #16]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800243a:	7cbb      	ldrb	r3, [r7, #18]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000

08002448 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002456:	4b75      	ldr	r3, [pc, #468]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d018      	beq.n	8002494 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002462:	4b72      	ldr	r3, [pc, #456]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0203 	and.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d10d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
       ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800247a:	4b6c      	ldr	r3, [pc, #432]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
       ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d047      	beq.n	800251e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e044      	b.n	800251e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d018      	beq.n	80024ce <RCCEx_PLLSAI1_Config+0x86>
 800249c:	2b03      	cmp	r3, #3
 800249e:	d825      	bhi.n	80024ec <RCCEx_PLLSAI1_Config+0xa4>
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d002      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x62>
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d009      	beq.n	80024bc <RCCEx_PLLSAI1_Config+0x74>
 80024a8:	e020      	b.n	80024ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024aa:	4b60      	ldr	r3, [pc, #384]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11d      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ba:	e01a      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024bc:	4b5b      	ldr	r3, [pc, #364]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024cc:	e013      	b.n	80024f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ce:	4b57      	ldr	r3, [pc, #348]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024da:	4b54      	ldr	r3, [pc, #336]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ea:	e006      	b.n	80024fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      break;
 80024f0:	e004      	b.n	80024fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024f2:	bf00      	nop
 80024f4:	e002      	b.n	80024fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002502:	4b4a      	ldr	r3, [pc, #296]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	430b      	orrs	r3, r1
 8002518:	4944      	ldr	r1, [pc, #272]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d17d      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002524:	4b41      	ldr	r3, [pc, #260]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a40      	ldr	r2, [pc, #256]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 800252a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800252e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002530:	f7fe fd5e 	bl	8000ff0 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002536:	e009      	b.n	800254c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002538:	f7fe fd5a 	bl	8000ff0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	73fb      	strb	r3, [r7, #15]
        break;
 800254a:	e005      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800254c:	4b37      	ldr	r3, [pc, #220]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ef      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d160      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d111      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002564:	4b31      	ldr	r3, [pc, #196]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800256c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6892      	ldr	r2, [r2, #8]
 8002574:	0211      	lsls	r1, r2, #8
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	0912      	lsrs	r2, r2, #4
 800257c:	0452      	lsls	r2, r2, #17
 800257e:	430a      	orrs	r2, r1
 8002580:	492a      	ldr	r1, [pc, #168]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	610b      	str	r3, [r1, #16]
 8002586:	e027      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d112      	bne.n	80025b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800258e:	4b27      	ldr	r3, [pc, #156]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002596:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	0211      	lsls	r1, r2, #8
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6912      	ldr	r2, [r2, #16]
 80025a4:	0852      	lsrs	r2, r2, #1
 80025a6:	3a01      	subs	r2, #1
 80025a8:	0552      	lsls	r2, r2, #21
 80025aa:	430a      	orrs	r2, r1
 80025ac:	491f      	ldr	r1, [pc, #124]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	610b      	str	r3, [r1, #16]
 80025b2:	e011      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	0211      	lsls	r1, r2, #8
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6952      	ldr	r2, [r2, #20]
 80025ca:	0852      	lsrs	r2, r2, #1
 80025cc:	3a01      	subs	r2, #1
 80025ce:	0652      	lsls	r2, r2, #25
 80025d0:	430a      	orrs	r2, r1
 80025d2:	4916      	ldr	r1, [pc, #88]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025d8:	4b14      	ldr	r3, [pc, #80]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a13      	ldr	r2, [pc, #76]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fd04 	bl	8000ff0 <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ea:	e009      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ec:	f7fe fd00 	bl	8000ff0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d902      	bls.n	8002600 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	73fb      	strb	r3, [r7, #15]
          break;
 80025fe:	e005      	b.n	800260c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4904      	ldr	r1, [pc, #16]	@ (800262c <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800263e:	4b6a      	ldr	r3, [pc, #424]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d018      	beq.n	800267c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800264a:	4b67      	ldr	r3, [pc, #412]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0203 	and.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10d      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
       ||
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002662:	4b61      	ldr	r3, [pc, #388]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
       ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d047      	beq.n	8002706 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	e044      	b.n	8002706 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d018      	beq.n	80026b6 <RCCEx_PLLSAI2_Config+0x86>
 8002684:	2b03      	cmp	r3, #3
 8002686:	d825      	bhi.n	80026d4 <RCCEx_PLLSAI2_Config+0xa4>
 8002688:	2b01      	cmp	r3, #1
 800268a:	d002      	beq.n	8002692 <RCCEx_PLLSAI2_Config+0x62>
 800268c:	2b02      	cmp	r3, #2
 800268e:	d009      	beq.n	80026a4 <RCCEx_PLLSAI2_Config+0x74>
 8002690:	e020      	b.n	80026d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002692:	4b55      	ldr	r3, [pc, #340]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11d      	bne.n	80026da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a2:	e01a      	b.n	80026da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026a4:	4b50      	ldr	r3, [pc, #320]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d116      	bne.n	80026de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b4:	e013      	b.n	80026de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026b6:	4b4c      	ldr	r3, [pc, #304]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10f      	bne.n	80026e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026c2:	4b49      	ldr	r3, [pc, #292]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026d2:	e006      	b.n	80026e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      break;
 80026d8:	e004      	b.n	80026e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026da:	bf00      	nop
 80026dc:	e002      	b.n	80026e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ea:	4b3f      	ldr	r3, [pc, #252]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	430b      	orrs	r3, r1
 8002700:	4939      	ldr	r1, [pc, #228]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d167      	bne.n	80027dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800270c:	4b36      	ldr	r3, [pc, #216]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a35      	ldr	r2, [pc, #212]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002718:	f7fe fc6a 	bl	8000ff0 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800271e:	e009      	b.n	8002734 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002720:	f7fe fc66 	bl	8000ff0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d902      	bls.n	8002734 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	73fb      	strb	r3, [r7, #15]
        break;
 8002732:	e005      	b.n	8002740 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002734:	4b2c      	ldr	r3, [pc, #176]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ef      	bne.n	8002720 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d14a      	bne.n	80027dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800274c:	4b26      	ldr	r3, [pc, #152]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6892      	ldr	r2, [r2, #8]
 800275c:	0211      	lsls	r1, r2, #8
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	0912      	lsrs	r2, r2, #4
 8002764:	0452      	lsls	r2, r2, #17
 8002766:	430a      	orrs	r2, r1
 8002768:	491f      	ldr	r1, [pc, #124]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	614b      	str	r3, [r1, #20]
 800276e:	e011      	b.n	8002794 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002770:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002778:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6892      	ldr	r2, [r2, #8]
 8002780:	0211      	lsls	r1, r2, #8
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6912      	ldr	r2, [r2, #16]
 8002786:	0852      	lsrs	r2, r2, #1
 8002788:	3a01      	subs	r2, #1
 800278a:	0652      	lsls	r2, r2, #25
 800278c:	430a      	orrs	r2, r1
 800278e:	4916      	ldr	r1, [pc, #88]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	4313      	orrs	r3, r2
 8002792:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002794:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a13      	ldr	r2, [pc, #76]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fc26 	bl	8000ff0 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027a6:	e009      	b.n	80027bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027a8:	f7fe fc22 	bl	8000ff0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d902      	bls.n	80027bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	73fb      	strb	r3, [r7, #15]
          break;
 80027ba:	e005      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ef      	beq.n	80027a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4904      	ldr	r1, [pc, #16]	@ (80027e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000

080027ec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e049      	b.n	8002892 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	795b      	ldrb	r3, [r3, #5]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe f982 	bl	8000b18 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0204 	orr.w	r2, r2, #4
 8002828:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002834:	2b40      	cmp	r3, #64	@ 0x40
 8002836:	d104      	bne.n	8002842 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2204      	movs	r2, #4
 800283c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e027      	b.n	8002892 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002842:	f7fe fbd5 	bl	8000ff0 <HAL_GetTick>
 8002846:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002848:	e015      	b.n	8002876 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800284a:	f7fe fbd1 	bl	8000ff0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d90e      	bls.n	8002876 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00d      	b.n	8002892 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d0e2      	beq.n	800284a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <siprintf>:
 800289c:	b40e      	push	{r1, r2, r3}
 800289e:	b500      	push	{lr}
 80028a0:	b09c      	sub	sp, #112	@ 0x70
 80028a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80028a4:	9002      	str	r0, [sp, #8]
 80028a6:	9006      	str	r0, [sp, #24]
 80028a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80028ac:	4809      	ldr	r0, [pc, #36]	@ (80028d4 <siprintf+0x38>)
 80028ae:	9107      	str	r1, [sp, #28]
 80028b0:	9104      	str	r1, [sp, #16]
 80028b2:	4909      	ldr	r1, [pc, #36]	@ (80028d8 <siprintf+0x3c>)
 80028b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80028b8:	9105      	str	r1, [sp, #20]
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	a902      	add	r1, sp, #8
 80028c0:	f000 f9a2 	bl	8002c08 <_svfiprintf_r>
 80028c4:	9b02      	ldr	r3, [sp, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	b01c      	add	sp, #112	@ 0x70
 80028cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80028d0:	b003      	add	sp, #12
 80028d2:	4770      	bx	lr
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	ffff0208 	.word	0xffff0208

080028dc <memset>:
 80028dc:	4402      	add	r2, r0
 80028de:	4603      	mov	r3, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <__errno>:
 80028ec:	4b01      	ldr	r3, [pc, #4]	@ (80028f4 <__errno+0x8>)
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000000c 	.word	0x2000000c

080028f8 <__libc_init_array>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002930 <__libc_init_array+0x38>)
 80028fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002934 <__libc_init_array+0x3c>)
 80028fe:	1b64      	subs	r4, r4, r5
 8002900:	10a4      	asrs	r4, r4, #2
 8002902:	2600      	movs	r6, #0
 8002904:	42a6      	cmp	r6, r4
 8002906:	d109      	bne.n	800291c <__libc_init_array+0x24>
 8002908:	4d0b      	ldr	r5, [pc, #44]	@ (8002938 <__libc_init_array+0x40>)
 800290a:	4c0c      	ldr	r4, [pc, #48]	@ (800293c <__libc_init_array+0x44>)
 800290c:	f000 fc66 	bl	80031dc <_init>
 8002910:	1b64      	subs	r4, r4, r5
 8002912:	10a4      	asrs	r4, r4, #2
 8002914:	2600      	movs	r6, #0
 8002916:	42a6      	cmp	r6, r4
 8002918:	d105      	bne.n	8002926 <__libc_init_array+0x2e>
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002920:	4798      	blx	r3
 8002922:	3601      	adds	r6, #1
 8002924:	e7ee      	b.n	8002904 <__libc_init_array+0xc>
 8002926:	f855 3b04 	ldr.w	r3, [r5], #4
 800292a:	4798      	blx	r3
 800292c:	3601      	adds	r6, #1
 800292e:	e7f2      	b.n	8002916 <__libc_init_array+0x1e>
 8002930:	08003298 	.word	0x08003298
 8002934:	08003298 	.word	0x08003298
 8002938:	08003298 	.word	0x08003298
 800293c:	0800329c 	.word	0x0800329c

08002940 <__retarget_lock_acquire_recursive>:
 8002940:	4770      	bx	lr

08002942 <__retarget_lock_release_recursive>:
 8002942:	4770      	bx	lr

08002944 <memcpy>:
 8002944:	440a      	add	r2, r1
 8002946:	4291      	cmp	r1, r2
 8002948:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800294c:	d100      	bne.n	8002950 <memcpy+0xc>
 800294e:	4770      	bx	lr
 8002950:	b510      	push	{r4, lr}
 8002952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800295a:	4291      	cmp	r1, r2
 800295c:	d1f9      	bne.n	8002952 <memcpy+0xe>
 800295e:	bd10      	pop	{r4, pc}

08002960 <_free_r>:
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	4605      	mov	r5, r0
 8002964:	2900      	cmp	r1, #0
 8002966:	d041      	beq.n	80029ec <_free_r+0x8c>
 8002968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800296c:	1f0c      	subs	r4, r1, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	bfb8      	it	lt
 8002972:	18e4      	addlt	r4, r4, r3
 8002974:	f000 f8e0 	bl	8002b38 <__malloc_lock>
 8002978:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <_free_r+0x90>)
 800297a:	6813      	ldr	r3, [r2, #0]
 800297c:	b933      	cbnz	r3, 800298c <_free_r+0x2c>
 800297e:	6063      	str	r3, [r4, #4]
 8002980:	6014      	str	r4, [r2, #0]
 8002982:	4628      	mov	r0, r5
 8002984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002988:	f000 b8dc 	b.w	8002b44 <__malloc_unlock>
 800298c:	42a3      	cmp	r3, r4
 800298e:	d908      	bls.n	80029a2 <_free_r+0x42>
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	1821      	adds	r1, r4, r0
 8002994:	428b      	cmp	r3, r1
 8002996:	bf01      	itttt	eq
 8002998:	6819      	ldreq	r1, [r3, #0]
 800299a:	685b      	ldreq	r3, [r3, #4]
 800299c:	1809      	addeq	r1, r1, r0
 800299e:	6021      	streq	r1, [r4, #0]
 80029a0:	e7ed      	b.n	800297e <_free_r+0x1e>
 80029a2:	461a      	mov	r2, r3
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b10b      	cbz	r3, 80029ac <_free_r+0x4c>
 80029a8:	42a3      	cmp	r3, r4
 80029aa:	d9fa      	bls.n	80029a2 <_free_r+0x42>
 80029ac:	6811      	ldr	r1, [r2, #0]
 80029ae:	1850      	adds	r0, r2, r1
 80029b0:	42a0      	cmp	r0, r4
 80029b2:	d10b      	bne.n	80029cc <_free_r+0x6c>
 80029b4:	6820      	ldr	r0, [r4, #0]
 80029b6:	4401      	add	r1, r0
 80029b8:	1850      	adds	r0, r2, r1
 80029ba:	4283      	cmp	r3, r0
 80029bc:	6011      	str	r1, [r2, #0]
 80029be:	d1e0      	bne.n	8002982 <_free_r+0x22>
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	6053      	str	r3, [r2, #4]
 80029c6:	4408      	add	r0, r1
 80029c8:	6010      	str	r0, [r2, #0]
 80029ca:	e7da      	b.n	8002982 <_free_r+0x22>
 80029cc:	d902      	bls.n	80029d4 <_free_r+0x74>
 80029ce:	230c      	movs	r3, #12
 80029d0:	602b      	str	r3, [r5, #0]
 80029d2:	e7d6      	b.n	8002982 <_free_r+0x22>
 80029d4:	6820      	ldr	r0, [r4, #0]
 80029d6:	1821      	adds	r1, r4, r0
 80029d8:	428b      	cmp	r3, r1
 80029da:	bf04      	itt	eq
 80029dc:	6819      	ldreq	r1, [r3, #0]
 80029de:	685b      	ldreq	r3, [r3, #4]
 80029e0:	6063      	str	r3, [r4, #4]
 80029e2:	bf04      	itt	eq
 80029e4:	1809      	addeq	r1, r1, r0
 80029e6:	6021      	streq	r1, [r4, #0]
 80029e8:	6054      	str	r4, [r2, #4]
 80029ea:	e7ca      	b.n	8002982 <_free_r+0x22>
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	bf00      	nop
 80029f0:	20000244 	.word	0x20000244

080029f4 <sbrk_aligned>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	4e0f      	ldr	r6, [pc, #60]	@ (8002a34 <sbrk_aligned+0x40>)
 80029f8:	460c      	mov	r4, r1
 80029fa:	6831      	ldr	r1, [r6, #0]
 80029fc:	4605      	mov	r5, r0
 80029fe:	b911      	cbnz	r1, 8002a06 <sbrk_aligned+0x12>
 8002a00:	f000 fba6 	bl	8003150 <_sbrk_r>
 8002a04:	6030      	str	r0, [r6, #0]
 8002a06:	4621      	mov	r1, r4
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f000 fba1 	bl	8003150 <_sbrk_r>
 8002a0e:	1c43      	adds	r3, r0, #1
 8002a10:	d103      	bne.n	8002a1a <sbrk_aligned+0x26>
 8002a12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002a16:	4620      	mov	r0, r4
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
 8002a1a:	1cc4      	adds	r4, r0, #3
 8002a1c:	f024 0403 	bic.w	r4, r4, #3
 8002a20:	42a0      	cmp	r0, r4
 8002a22:	d0f8      	beq.n	8002a16 <sbrk_aligned+0x22>
 8002a24:	1a21      	subs	r1, r4, r0
 8002a26:	4628      	mov	r0, r5
 8002a28:	f000 fb92 	bl	8003150 <_sbrk_r>
 8002a2c:	3001      	adds	r0, #1
 8002a2e:	d1f2      	bne.n	8002a16 <sbrk_aligned+0x22>
 8002a30:	e7ef      	b.n	8002a12 <sbrk_aligned+0x1e>
 8002a32:	bf00      	nop
 8002a34:	20000240 	.word	0x20000240

08002a38 <_malloc_r>:
 8002a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a3c:	1ccd      	adds	r5, r1, #3
 8002a3e:	f025 0503 	bic.w	r5, r5, #3
 8002a42:	3508      	adds	r5, #8
 8002a44:	2d0c      	cmp	r5, #12
 8002a46:	bf38      	it	cc
 8002a48:	250c      	movcc	r5, #12
 8002a4a:	2d00      	cmp	r5, #0
 8002a4c:	4606      	mov	r6, r0
 8002a4e:	db01      	blt.n	8002a54 <_malloc_r+0x1c>
 8002a50:	42a9      	cmp	r1, r5
 8002a52:	d904      	bls.n	8002a5e <_malloc_r+0x26>
 8002a54:	230c      	movs	r3, #12
 8002a56:	6033      	str	r3, [r6, #0]
 8002a58:	2000      	movs	r0, #0
 8002a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b34 <_malloc_r+0xfc>
 8002a62:	f000 f869 	bl	8002b38 <__malloc_lock>
 8002a66:	f8d8 3000 	ldr.w	r3, [r8]
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	bb44      	cbnz	r4, 8002ac0 <_malloc_r+0x88>
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4630      	mov	r0, r6
 8002a72:	f7ff ffbf 	bl	80029f4 <sbrk_aligned>
 8002a76:	1c43      	adds	r3, r0, #1
 8002a78:	4604      	mov	r4, r0
 8002a7a:	d158      	bne.n	8002b2e <_malloc_r+0xf6>
 8002a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8002a80:	4627      	mov	r7, r4
 8002a82:	2f00      	cmp	r7, #0
 8002a84:	d143      	bne.n	8002b0e <_malloc_r+0xd6>
 8002a86:	2c00      	cmp	r4, #0
 8002a88:	d04b      	beq.n	8002b22 <_malloc_r+0xea>
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	4639      	mov	r1, r7
 8002a8e:	4630      	mov	r0, r6
 8002a90:	eb04 0903 	add.w	r9, r4, r3
 8002a94:	f000 fb5c 	bl	8003150 <_sbrk_r>
 8002a98:	4581      	cmp	r9, r0
 8002a9a:	d142      	bne.n	8002b22 <_malloc_r+0xea>
 8002a9c:	6821      	ldr	r1, [r4, #0]
 8002a9e:	1a6d      	subs	r5, r5, r1
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7ff ffa6 	bl	80029f4 <sbrk_aligned>
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	d03a      	beq.n	8002b22 <_malloc_r+0xea>
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	442b      	add	r3, r5
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	bb62      	cbnz	r2, 8002b14 <_malloc_r+0xdc>
 8002aba:	f8c8 7000 	str.w	r7, [r8]
 8002abe:	e00f      	b.n	8002ae0 <_malloc_r+0xa8>
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	1b52      	subs	r2, r2, r5
 8002ac4:	d420      	bmi.n	8002b08 <_malloc_r+0xd0>
 8002ac6:	2a0b      	cmp	r2, #11
 8002ac8:	d917      	bls.n	8002afa <_malloc_r+0xc2>
 8002aca:	1961      	adds	r1, r4, r5
 8002acc:	42a3      	cmp	r3, r4
 8002ace:	6025      	str	r5, [r4, #0]
 8002ad0:	bf18      	it	ne
 8002ad2:	6059      	strne	r1, [r3, #4]
 8002ad4:	6863      	ldr	r3, [r4, #4]
 8002ad6:	bf08      	it	eq
 8002ad8:	f8c8 1000 	streq.w	r1, [r8]
 8002adc:	5162      	str	r2, [r4, r5]
 8002ade:	604b      	str	r3, [r1, #4]
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	f000 f82f 	bl	8002b44 <__malloc_unlock>
 8002ae6:	f104 000b 	add.w	r0, r4, #11
 8002aea:	1d23      	adds	r3, r4, #4
 8002aec:	f020 0007 	bic.w	r0, r0, #7
 8002af0:	1ac2      	subs	r2, r0, r3
 8002af2:	bf1c      	itt	ne
 8002af4:	1a1b      	subne	r3, r3, r0
 8002af6:	50a3      	strne	r3, [r4, r2]
 8002af8:	e7af      	b.n	8002a5a <_malloc_r+0x22>
 8002afa:	6862      	ldr	r2, [r4, #4]
 8002afc:	42a3      	cmp	r3, r4
 8002afe:	bf0c      	ite	eq
 8002b00:	f8c8 2000 	streq.w	r2, [r8]
 8002b04:	605a      	strne	r2, [r3, #4]
 8002b06:	e7eb      	b.n	8002ae0 <_malloc_r+0xa8>
 8002b08:	4623      	mov	r3, r4
 8002b0a:	6864      	ldr	r4, [r4, #4]
 8002b0c:	e7ae      	b.n	8002a6c <_malloc_r+0x34>
 8002b0e:	463c      	mov	r4, r7
 8002b10:	687f      	ldr	r7, [r7, #4]
 8002b12:	e7b6      	b.n	8002a82 <_malloc_r+0x4a>
 8002b14:	461a      	mov	r2, r3
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	d1fb      	bne.n	8002b14 <_malloc_r+0xdc>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6053      	str	r3, [r2, #4]
 8002b20:	e7de      	b.n	8002ae0 <_malloc_r+0xa8>
 8002b22:	230c      	movs	r3, #12
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	4630      	mov	r0, r6
 8002b28:	f000 f80c 	bl	8002b44 <__malloc_unlock>
 8002b2c:	e794      	b.n	8002a58 <_malloc_r+0x20>
 8002b2e:	6005      	str	r5, [r0, #0]
 8002b30:	e7d6      	b.n	8002ae0 <_malloc_r+0xa8>
 8002b32:	bf00      	nop
 8002b34:	20000244 	.word	0x20000244

08002b38 <__malloc_lock>:
 8002b38:	4801      	ldr	r0, [pc, #4]	@ (8002b40 <__malloc_lock+0x8>)
 8002b3a:	f7ff bf01 	b.w	8002940 <__retarget_lock_acquire_recursive>
 8002b3e:	bf00      	nop
 8002b40:	2000023c 	.word	0x2000023c

08002b44 <__malloc_unlock>:
 8002b44:	4801      	ldr	r0, [pc, #4]	@ (8002b4c <__malloc_unlock+0x8>)
 8002b46:	f7ff befc 	b.w	8002942 <__retarget_lock_release_recursive>
 8002b4a:	bf00      	nop
 8002b4c:	2000023c 	.word	0x2000023c

08002b50 <__ssputs_r>:
 8002b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b54:	688e      	ldr	r6, [r1, #8]
 8002b56:	461f      	mov	r7, r3
 8002b58:	42be      	cmp	r6, r7
 8002b5a:	680b      	ldr	r3, [r1, #0]
 8002b5c:	4682      	mov	sl, r0
 8002b5e:	460c      	mov	r4, r1
 8002b60:	4690      	mov	r8, r2
 8002b62:	d82d      	bhi.n	8002bc0 <__ssputs_r+0x70>
 8002b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002b6c:	d026      	beq.n	8002bbc <__ssputs_r+0x6c>
 8002b6e:	6965      	ldr	r5, [r4, #20]
 8002b70:	6909      	ldr	r1, [r1, #16]
 8002b72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b76:	eba3 0901 	sub.w	r9, r3, r1
 8002b7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b7e:	1c7b      	adds	r3, r7, #1
 8002b80:	444b      	add	r3, r9
 8002b82:	106d      	asrs	r5, r5, #1
 8002b84:	429d      	cmp	r5, r3
 8002b86:	bf38      	it	cc
 8002b88:	461d      	movcc	r5, r3
 8002b8a:	0553      	lsls	r3, r2, #21
 8002b8c:	d527      	bpl.n	8002bde <__ssputs_r+0x8e>
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7ff ff52 	bl	8002a38 <_malloc_r>
 8002b94:	4606      	mov	r6, r0
 8002b96:	b360      	cbz	r0, 8002bf2 <__ssputs_r+0xa2>
 8002b98:	6921      	ldr	r1, [r4, #16]
 8002b9a:	464a      	mov	r2, r9
 8002b9c:	f7ff fed2 	bl	8002944 <memcpy>
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002baa:	81a3      	strh	r3, [r4, #12]
 8002bac:	6126      	str	r6, [r4, #16]
 8002bae:	6165      	str	r5, [r4, #20]
 8002bb0:	444e      	add	r6, r9
 8002bb2:	eba5 0509 	sub.w	r5, r5, r9
 8002bb6:	6026      	str	r6, [r4, #0]
 8002bb8:	60a5      	str	r5, [r4, #8]
 8002bba:	463e      	mov	r6, r7
 8002bbc:	42be      	cmp	r6, r7
 8002bbe:	d900      	bls.n	8002bc2 <__ssputs_r+0x72>
 8002bc0:	463e      	mov	r6, r7
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	4632      	mov	r2, r6
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	f000 faa8 	bl	800311c <memmove>
 8002bcc:	68a3      	ldr	r3, [r4, #8]
 8002bce:	1b9b      	subs	r3, r3, r6
 8002bd0:	60a3      	str	r3, [r4, #8]
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	4433      	add	r3, r6
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	2000      	movs	r0, #0
 8002bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bde:	462a      	mov	r2, r5
 8002be0:	f000 fac6 	bl	8003170 <_realloc_r>
 8002be4:	4606      	mov	r6, r0
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d1e0      	bne.n	8002bac <__ssputs_r+0x5c>
 8002bea:	6921      	ldr	r1, [r4, #16]
 8002bec:	4650      	mov	r0, sl
 8002bee:	f7ff feb7 	bl	8002960 <_free_r>
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	f8ca 3000 	str.w	r3, [sl]
 8002bf8:	89a3      	ldrh	r3, [r4, #12]
 8002bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bfe:	81a3      	strh	r3, [r4, #12]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c04:	e7e9      	b.n	8002bda <__ssputs_r+0x8a>
	...

08002c08 <_svfiprintf_r>:
 8002c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0c:	4698      	mov	r8, r3
 8002c0e:	898b      	ldrh	r3, [r1, #12]
 8002c10:	061b      	lsls	r3, r3, #24
 8002c12:	b09d      	sub	sp, #116	@ 0x74
 8002c14:	4607      	mov	r7, r0
 8002c16:	460d      	mov	r5, r1
 8002c18:	4614      	mov	r4, r2
 8002c1a:	d510      	bpl.n	8002c3e <_svfiprintf_r+0x36>
 8002c1c:	690b      	ldr	r3, [r1, #16]
 8002c1e:	b973      	cbnz	r3, 8002c3e <_svfiprintf_r+0x36>
 8002c20:	2140      	movs	r1, #64	@ 0x40
 8002c22:	f7ff ff09 	bl	8002a38 <_malloc_r>
 8002c26:	6028      	str	r0, [r5, #0]
 8002c28:	6128      	str	r0, [r5, #16]
 8002c2a:	b930      	cbnz	r0, 8002c3a <_svfiprintf_r+0x32>
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c34:	b01d      	add	sp, #116	@ 0x74
 8002c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3a:	2340      	movs	r3, #64	@ 0x40
 8002c3c:	616b      	str	r3, [r5, #20]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c42:	2320      	movs	r3, #32
 8002c44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c4c:	2330      	movs	r3, #48	@ 0x30
 8002c4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002dec <_svfiprintf_r+0x1e4>
 8002c52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c56:	f04f 0901 	mov.w	r9, #1
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	469a      	mov	sl, r3
 8002c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c62:	b10a      	cbz	r2, 8002c68 <_svfiprintf_r+0x60>
 8002c64:	2a25      	cmp	r2, #37	@ 0x25
 8002c66:	d1f9      	bne.n	8002c5c <_svfiprintf_r+0x54>
 8002c68:	ebba 0b04 	subs.w	fp, sl, r4
 8002c6c:	d00b      	beq.n	8002c86 <_svfiprintf_r+0x7e>
 8002c6e:	465b      	mov	r3, fp
 8002c70:	4622      	mov	r2, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	4638      	mov	r0, r7
 8002c76:	f7ff ff6b 	bl	8002b50 <__ssputs_r>
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	f000 80a7 	beq.w	8002dce <_svfiprintf_r+0x1c6>
 8002c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c82:	445a      	add	r2, fp
 8002c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c86:	f89a 3000 	ldrb.w	r3, [sl]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 809f 	beq.w	8002dce <_svfiprintf_r+0x1c6>
 8002c90:	2300      	movs	r3, #0
 8002c92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c9a:	f10a 0a01 	add.w	sl, sl, #1
 8002c9e:	9304      	str	r3, [sp, #16]
 8002ca0:	9307      	str	r3, [sp, #28]
 8002ca2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ca6:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ca8:	4654      	mov	r4, sl
 8002caa:	2205      	movs	r2, #5
 8002cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cb0:	484e      	ldr	r0, [pc, #312]	@ (8002dec <_svfiprintf_r+0x1e4>)
 8002cb2:	f7fd fa8d 	bl	80001d0 <memchr>
 8002cb6:	9a04      	ldr	r2, [sp, #16]
 8002cb8:	b9d8      	cbnz	r0, 8002cf2 <_svfiprintf_r+0xea>
 8002cba:	06d0      	lsls	r0, r2, #27
 8002cbc:	bf44      	itt	mi
 8002cbe:	2320      	movmi	r3, #32
 8002cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cc4:	0711      	lsls	r1, r2, #28
 8002cc6:	bf44      	itt	mi
 8002cc8:	232b      	movmi	r3, #43	@ 0x2b
 8002cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cce:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cd4:	d015      	beq.n	8002d02 <_svfiprintf_r+0xfa>
 8002cd6:	9a07      	ldr	r2, [sp, #28]
 8002cd8:	4654      	mov	r4, sl
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f04f 0c0a 	mov.w	ip, #10
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ce6:	3b30      	subs	r3, #48	@ 0x30
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d94b      	bls.n	8002d84 <_svfiprintf_r+0x17c>
 8002cec:	b1b0      	cbz	r0, 8002d1c <_svfiprintf_r+0x114>
 8002cee:	9207      	str	r2, [sp, #28]
 8002cf0:	e014      	b.n	8002d1c <_svfiprintf_r+0x114>
 8002cf2:	eba0 0308 	sub.w	r3, r0, r8
 8002cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	9304      	str	r3, [sp, #16]
 8002cfe:	46a2      	mov	sl, r4
 8002d00:	e7d2      	b.n	8002ca8 <_svfiprintf_r+0xa0>
 8002d02:	9b03      	ldr	r3, [sp, #12]
 8002d04:	1d19      	adds	r1, r3, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	9103      	str	r1, [sp, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bfbb      	ittet	lt
 8002d0e:	425b      	neglt	r3, r3
 8002d10:	f042 0202 	orrlt.w	r2, r2, #2
 8002d14:	9307      	strge	r3, [sp, #28]
 8002d16:	9307      	strlt	r3, [sp, #28]
 8002d18:	bfb8      	it	lt
 8002d1a:	9204      	strlt	r2, [sp, #16]
 8002d1c:	7823      	ldrb	r3, [r4, #0]
 8002d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d20:	d10a      	bne.n	8002d38 <_svfiprintf_r+0x130>
 8002d22:	7863      	ldrb	r3, [r4, #1]
 8002d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d26:	d132      	bne.n	8002d8e <_svfiprintf_r+0x186>
 8002d28:	9b03      	ldr	r3, [sp, #12]
 8002d2a:	1d1a      	adds	r2, r3, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	9203      	str	r2, [sp, #12]
 8002d30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d34:	3402      	adds	r4, #2
 8002d36:	9305      	str	r3, [sp, #20]
 8002d38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002dfc <_svfiprintf_r+0x1f4>
 8002d3c:	7821      	ldrb	r1, [r4, #0]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	4650      	mov	r0, sl
 8002d42:	f7fd fa45 	bl	80001d0 <memchr>
 8002d46:	b138      	cbz	r0, 8002d58 <_svfiprintf_r+0x150>
 8002d48:	9b04      	ldr	r3, [sp, #16]
 8002d4a:	eba0 000a 	sub.w	r0, r0, sl
 8002d4e:	2240      	movs	r2, #64	@ 0x40
 8002d50:	4082      	lsls	r2, r0
 8002d52:	4313      	orrs	r3, r2
 8002d54:	3401      	adds	r4, #1
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d5c:	4824      	ldr	r0, [pc, #144]	@ (8002df0 <_svfiprintf_r+0x1e8>)
 8002d5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d62:	2206      	movs	r2, #6
 8002d64:	f7fd fa34 	bl	80001d0 <memchr>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d036      	beq.n	8002dda <_svfiprintf_r+0x1d2>
 8002d6c:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <_svfiprintf_r+0x1ec>)
 8002d6e:	bb1b      	cbnz	r3, 8002db8 <_svfiprintf_r+0x1b0>
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	3307      	adds	r3, #7
 8002d74:	f023 0307 	bic.w	r3, r3, #7
 8002d78:	3308      	adds	r3, #8
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d7e:	4433      	add	r3, r6
 8002d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d82:	e76a      	b.n	8002c5a <_svfiprintf_r+0x52>
 8002d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d88:	460c      	mov	r4, r1
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	e7a8      	b.n	8002ce0 <_svfiprintf_r+0xd8>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	3401      	adds	r4, #1
 8002d92:	9305      	str	r3, [sp, #20]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f04f 0c0a 	mov.w	ip, #10
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002da0:	3a30      	subs	r2, #48	@ 0x30
 8002da2:	2a09      	cmp	r2, #9
 8002da4:	d903      	bls.n	8002dae <_svfiprintf_r+0x1a6>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0c6      	beq.n	8002d38 <_svfiprintf_r+0x130>
 8002daa:	9105      	str	r1, [sp, #20]
 8002dac:	e7c4      	b.n	8002d38 <_svfiprintf_r+0x130>
 8002dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8002db2:	4604      	mov	r4, r0
 8002db4:	2301      	movs	r3, #1
 8002db6:	e7f0      	b.n	8002d9a <_svfiprintf_r+0x192>
 8002db8:	ab03      	add	r3, sp, #12
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	462a      	mov	r2, r5
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <_svfiprintf_r+0x1f0>)
 8002dc0:	a904      	add	r1, sp, #16
 8002dc2:	4638      	mov	r0, r7
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	1c42      	adds	r2, r0, #1
 8002dca:	4606      	mov	r6, r0
 8002dcc:	d1d6      	bne.n	8002d7c <_svfiprintf_r+0x174>
 8002dce:	89ab      	ldrh	r3, [r5, #12]
 8002dd0:	065b      	lsls	r3, r3, #25
 8002dd2:	f53f af2d 	bmi.w	8002c30 <_svfiprintf_r+0x28>
 8002dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002dd8:	e72c      	b.n	8002c34 <_svfiprintf_r+0x2c>
 8002dda:	ab03      	add	r3, sp, #12
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	462a      	mov	r2, r5
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <_svfiprintf_r+0x1f0>)
 8002de2:	a904      	add	r1, sp, #16
 8002de4:	4638      	mov	r0, r7
 8002de6:	f000 f879 	bl	8002edc <_printf_i>
 8002dea:	e7ed      	b.n	8002dc8 <_svfiprintf_r+0x1c0>
 8002dec:	0800325c 	.word	0x0800325c
 8002df0:	08003266 	.word	0x08003266
 8002df4:	00000000 	.word	0x00000000
 8002df8:	08002b51 	.word	0x08002b51
 8002dfc:	08003262 	.word	0x08003262

08002e00 <_printf_common>:
 8002e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e04:	4616      	mov	r6, r2
 8002e06:	4698      	mov	r8, r3
 8002e08:	688a      	ldr	r2, [r1, #8]
 8002e0a:	690b      	ldr	r3, [r1, #16]
 8002e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bfb8      	it	lt
 8002e14:	4613      	movlt	r3, r2
 8002e16:	6033      	str	r3, [r6, #0]
 8002e18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e1c:	4607      	mov	r7, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	b10a      	cbz	r2, 8002e26 <_printf_common+0x26>
 8002e22:	3301      	adds	r3, #1
 8002e24:	6033      	str	r3, [r6, #0]
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	0699      	lsls	r1, r3, #26
 8002e2a:	bf42      	ittt	mi
 8002e2c:	6833      	ldrmi	r3, [r6, #0]
 8002e2e:	3302      	addmi	r3, #2
 8002e30:	6033      	strmi	r3, [r6, #0]
 8002e32:	6825      	ldr	r5, [r4, #0]
 8002e34:	f015 0506 	ands.w	r5, r5, #6
 8002e38:	d106      	bne.n	8002e48 <_printf_common+0x48>
 8002e3a:	f104 0a19 	add.w	sl, r4, #25
 8002e3e:	68e3      	ldr	r3, [r4, #12]
 8002e40:	6832      	ldr	r2, [r6, #0]
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	42ab      	cmp	r3, r5
 8002e46:	dc26      	bgt.n	8002e96 <_printf_common+0x96>
 8002e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e4c:	6822      	ldr	r2, [r4, #0]
 8002e4e:	3b00      	subs	r3, #0
 8002e50:	bf18      	it	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	0692      	lsls	r2, r2, #26
 8002e56:	d42b      	bmi.n	8002eb0 <_printf_common+0xb0>
 8002e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	4638      	mov	r0, r7
 8002e60:	47c8      	blx	r9
 8002e62:	3001      	adds	r0, #1
 8002e64:	d01e      	beq.n	8002ea4 <_printf_common+0xa4>
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	6922      	ldr	r2, [r4, #16]
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf02      	ittt	eq
 8002e72:	68e5      	ldreq	r5, [r4, #12]
 8002e74:	6833      	ldreq	r3, [r6, #0]
 8002e76:	1aed      	subeq	r5, r5, r3
 8002e78:	68a3      	ldr	r3, [r4, #8]
 8002e7a:	bf0c      	ite	eq
 8002e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e80:	2500      	movne	r5, #0
 8002e82:	4293      	cmp	r3, r2
 8002e84:	bfc4      	itt	gt
 8002e86:	1a9b      	subgt	r3, r3, r2
 8002e88:	18ed      	addgt	r5, r5, r3
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	341a      	adds	r4, #26
 8002e8e:	42b5      	cmp	r5, r6
 8002e90:	d11a      	bne.n	8002ec8 <_printf_common+0xc8>
 8002e92:	2000      	movs	r0, #0
 8002e94:	e008      	b.n	8002ea8 <_printf_common+0xa8>
 8002e96:	2301      	movs	r3, #1
 8002e98:	4652      	mov	r2, sl
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	47c8      	blx	r9
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	d103      	bne.n	8002eac <_printf_common+0xac>
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eac:	3501      	adds	r5, #1
 8002eae:	e7c6      	b.n	8002e3e <_printf_common+0x3e>
 8002eb0:	18e1      	adds	r1, r4, r3
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	2030      	movs	r0, #48	@ 0x30
 8002eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002eba:	4422      	add	r2, r4
 8002ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	e7c7      	b.n	8002e58 <_printf_common+0x58>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	4622      	mov	r2, r4
 8002ecc:	4641      	mov	r1, r8
 8002ece:	4638      	mov	r0, r7
 8002ed0:	47c8      	blx	r9
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d0e6      	beq.n	8002ea4 <_printf_common+0xa4>
 8002ed6:	3601      	adds	r6, #1
 8002ed8:	e7d9      	b.n	8002e8e <_printf_common+0x8e>
	...

08002edc <_printf_i>:
 8002edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee0:	7e0f      	ldrb	r7, [r1, #24]
 8002ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ee4:	2f78      	cmp	r7, #120	@ 0x78
 8002ee6:	4691      	mov	r9, r2
 8002ee8:	4680      	mov	r8, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	469a      	mov	sl, r3
 8002eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ef2:	d807      	bhi.n	8002f04 <_printf_i+0x28>
 8002ef4:	2f62      	cmp	r7, #98	@ 0x62
 8002ef6:	d80a      	bhi.n	8002f0e <_printf_i+0x32>
 8002ef8:	2f00      	cmp	r7, #0
 8002efa:	f000 80d2 	beq.w	80030a2 <_printf_i+0x1c6>
 8002efe:	2f58      	cmp	r7, #88	@ 0x58
 8002f00:	f000 80b9 	beq.w	8003076 <_printf_i+0x19a>
 8002f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f0c:	e03a      	b.n	8002f84 <_printf_i+0xa8>
 8002f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f12:	2b15      	cmp	r3, #21
 8002f14:	d8f6      	bhi.n	8002f04 <_printf_i+0x28>
 8002f16:	a101      	add	r1, pc, #4	@ (adr r1, 8002f1c <_printf_i+0x40>)
 8002f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f1c:	08002f75 	.word	0x08002f75
 8002f20:	08002f89 	.word	0x08002f89
 8002f24:	08002f05 	.word	0x08002f05
 8002f28:	08002f05 	.word	0x08002f05
 8002f2c:	08002f05 	.word	0x08002f05
 8002f30:	08002f05 	.word	0x08002f05
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	08002f05 	.word	0x08002f05
 8002f3c:	08002f05 	.word	0x08002f05
 8002f40:	08002f05 	.word	0x08002f05
 8002f44:	08002f05 	.word	0x08002f05
 8002f48:	08003089 	.word	0x08003089
 8002f4c:	08002fb3 	.word	0x08002fb3
 8002f50:	08003043 	.word	0x08003043
 8002f54:	08002f05 	.word	0x08002f05
 8002f58:	08002f05 	.word	0x08002f05
 8002f5c:	080030ab 	.word	0x080030ab
 8002f60:	08002f05 	.word	0x08002f05
 8002f64:	08002fb3 	.word	0x08002fb3
 8002f68:	08002f05 	.word	0x08002f05
 8002f6c:	08002f05 	.word	0x08002f05
 8002f70:	0800304b 	.word	0x0800304b
 8002f74:	6833      	ldr	r3, [r6, #0]
 8002f76:	1d1a      	adds	r2, r3, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6032      	str	r2, [r6, #0]
 8002f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f84:	2301      	movs	r3, #1
 8002f86:	e09d      	b.n	80030c4 <_printf_i+0x1e8>
 8002f88:	6833      	ldr	r3, [r6, #0]
 8002f8a:	6820      	ldr	r0, [r4, #0]
 8002f8c:	1d19      	adds	r1, r3, #4
 8002f8e:	6031      	str	r1, [r6, #0]
 8002f90:	0606      	lsls	r6, r0, #24
 8002f92:	d501      	bpl.n	8002f98 <_printf_i+0xbc>
 8002f94:	681d      	ldr	r5, [r3, #0]
 8002f96:	e003      	b.n	8002fa0 <_printf_i+0xc4>
 8002f98:	0645      	lsls	r5, r0, #25
 8002f9a:	d5fb      	bpl.n	8002f94 <_printf_i+0xb8>
 8002f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002fa0:	2d00      	cmp	r5, #0
 8002fa2:	da03      	bge.n	8002fac <_printf_i+0xd0>
 8002fa4:	232d      	movs	r3, #45	@ 0x2d
 8002fa6:	426d      	negs	r5, r5
 8002fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fac:	4859      	ldr	r0, [pc, #356]	@ (8003114 <_printf_i+0x238>)
 8002fae:	230a      	movs	r3, #10
 8002fb0:	e011      	b.n	8002fd6 <_printf_i+0xfa>
 8002fb2:	6821      	ldr	r1, [r4, #0]
 8002fb4:	6833      	ldr	r3, [r6, #0]
 8002fb6:	0608      	lsls	r0, r1, #24
 8002fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002fbc:	d402      	bmi.n	8002fc4 <_printf_i+0xe8>
 8002fbe:	0649      	lsls	r1, r1, #25
 8002fc0:	bf48      	it	mi
 8002fc2:	b2ad      	uxthmi	r5, r5
 8002fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002fc6:	4853      	ldr	r0, [pc, #332]	@ (8003114 <_printf_i+0x238>)
 8002fc8:	6033      	str	r3, [r6, #0]
 8002fca:	bf14      	ite	ne
 8002fcc:	230a      	movne	r3, #10
 8002fce:	2308      	moveq	r3, #8
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002fd6:	6866      	ldr	r6, [r4, #4]
 8002fd8:	60a6      	str	r6, [r4, #8]
 8002fda:	2e00      	cmp	r6, #0
 8002fdc:	bfa2      	ittt	ge
 8002fde:	6821      	ldrge	r1, [r4, #0]
 8002fe0:	f021 0104 	bicge.w	r1, r1, #4
 8002fe4:	6021      	strge	r1, [r4, #0]
 8002fe6:	b90d      	cbnz	r5, 8002fec <_printf_i+0x110>
 8002fe8:	2e00      	cmp	r6, #0
 8002fea:	d04b      	beq.n	8003084 <_printf_i+0x1a8>
 8002fec:	4616      	mov	r6, r2
 8002fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8002ff6:	5dc7      	ldrb	r7, [r0, r7]
 8002ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ffc:	462f      	mov	r7, r5
 8002ffe:	42bb      	cmp	r3, r7
 8003000:	460d      	mov	r5, r1
 8003002:	d9f4      	bls.n	8002fee <_printf_i+0x112>
 8003004:	2b08      	cmp	r3, #8
 8003006:	d10b      	bne.n	8003020 <_printf_i+0x144>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	07df      	lsls	r7, r3, #31
 800300c:	d508      	bpl.n	8003020 <_printf_i+0x144>
 800300e:	6923      	ldr	r3, [r4, #16]
 8003010:	6861      	ldr	r1, [r4, #4]
 8003012:	4299      	cmp	r1, r3
 8003014:	bfde      	ittt	le
 8003016:	2330      	movle	r3, #48	@ 0x30
 8003018:	f806 3c01 	strble.w	r3, [r6, #-1]
 800301c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003020:	1b92      	subs	r2, r2, r6
 8003022:	6122      	str	r2, [r4, #16]
 8003024:	f8cd a000 	str.w	sl, [sp]
 8003028:	464b      	mov	r3, r9
 800302a:	aa03      	add	r2, sp, #12
 800302c:	4621      	mov	r1, r4
 800302e:	4640      	mov	r0, r8
 8003030:	f7ff fee6 	bl	8002e00 <_printf_common>
 8003034:	3001      	adds	r0, #1
 8003036:	d14a      	bne.n	80030ce <_printf_i+0x1f2>
 8003038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800303c:	b004      	add	sp, #16
 800303e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	f043 0320 	orr.w	r3, r3, #32
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	4833      	ldr	r0, [pc, #204]	@ (8003118 <_printf_i+0x23c>)
 800304c:	2778      	movs	r7, #120	@ 0x78
 800304e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	6831      	ldr	r1, [r6, #0]
 8003056:	061f      	lsls	r7, r3, #24
 8003058:	f851 5b04 	ldr.w	r5, [r1], #4
 800305c:	d402      	bmi.n	8003064 <_printf_i+0x188>
 800305e:	065f      	lsls	r7, r3, #25
 8003060:	bf48      	it	mi
 8003062:	b2ad      	uxthmi	r5, r5
 8003064:	6031      	str	r1, [r6, #0]
 8003066:	07d9      	lsls	r1, r3, #31
 8003068:	bf44      	itt	mi
 800306a:	f043 0320 	orrmi.w	r3, r3, #32
 800306e:	6023      	strmi	r3, [r4, #0]
 8003070:	b11d      	cbz	r5, 800307a <_printf_i+0x19e>
 8003072:	2310      	movs	r3, #16
 8003074:	e7ac      	b.n	8002fd0 <_printf_i+0xf4>
 8003076:	4827      	ldr	r0, [pc, #156]	@ (8003114 <_printf_i+0x238>)
 8003078:	e7e9      	b.n	800304e <_printf_i+0x172>
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	f023 0320 	bic.w	r3, r3, #32
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	e7f6      	b.n	8003072 <_printf_i+0x196>
 8003084:	4616      	mov	r6, r2
 8003086:	e7bd      	b.n	8003004 <_printf_i+0x128>
 8003088:	6833      	ldr	r3, [r6, #0]
 800308a:	6825      	ldr	r5, [r4, #0]
 800308c:	6961      	ldr	r1, [r4, #20]
 800308e:	1d18      	adds	r0, r3, #4
 8003090:	6030      	str	r0, [r6, #0]
 8003092:	062e      	lsls	r6, r5, #24
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	d501      	bpl.n	800309c <_printf_i+0x1c0>
 8003098:	6019      	str	r1, [r3, #0]
 800309a:	e002      	b.n	80030a2 <_printf_i+0x1c6>
 800309c:	0668      	lsls	r0, r5, #25
 800309e:	d5fb      	bpl.n	8003098 <_printf_i+0x1bc>
 80030a0:	8019      	strh	r1, [r3, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	6123      	str	r3, [r4, #16]
 80030a6:	4616      	mov	r6, r2
 80030a8:	e7bc      	b.n	8003024 <_printf_i+0x148>
 80030aa:	6833      	ldr	r3, [r6, #0]
 80030ac:	1d1a      	adds	r2, r3, #4
 80030ae:	6032      	str	r2, [r6, #0]
 80030b0:	681e      	ldr	r6, [r3, #0]
 80030b2:	6862      	ldr	r2, [r4, #4]
 80030b4:	2100      	movs	r1, #0
 80030b6:	4630      	mov	r0, r6
 80030b8:	f7fd f88a 	bl	80001d0 <memchr>
 80030bc:	b108      	cbz	r0, 80030c2 <_printf_i+0x1e6>
 80030be:	1b80      	subs	r0, r0, r6
 80030c0:	6060      	str	r0, [r4, #4]
 80030c2:	6863      	ldr	r3, [r4, #4]
 80030c4:	6123      	str	r3, [r4, #16]
 80030c6:	2300      	movs	r3, #0
 80030c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030cc:	e7aa      	b.n	8003024 <_printf_i+0x148>
 80030ce:	6923      	ldr	r3, [r4, #16]
 80030d0:	4632      	mov	r2, r6
 80030d2:	4649      	mov	r1, r9
 80030d4:	4640      	mov	r0, r8
 80030d6:	47d0      	blx	sl
 80030d8:	3001      	adds	r0, #1
 80030da:	d0ad      	beq.n	8003038 <_printf_i+0x15c>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	079b      	lsls	r3, r3, #30
 80030e0:	d413      	bmi.n	800310a <_printf_i+0x22e>
 80030e2:	68e0      	ldr	r0, [r4, #12]
 80030e4:	9b03      	ldr	r3, [sp, #12]
 80030e6:	4298      	cmp	r0, r3
 80030e8:	bfb8      	it	lt
 80030ea:	4618      	movlt	r0, r3
 80030ec:	e7a6      	b.n	800303c <_printf_i+0x160>
 80030ee:	2301      	movs	r3, #1
 80030f0:	4632      	mov	r2, r6
 80030f2:	4649      	mov	r1, r9
 80030f4:	4640      	mov	r0, r8
 80030f6:	47d0      	blx	sl
 80030f8:	3001      	adds	r0, #1
 80030fa:	d09d      	beq.n	8003038 <_printf_i+0x15c>
 80030fc:	3501      	adds	r5, #1
 80030fe:	68e3      	ldr	r3, [r4, #12]
 8003100:	9903      	ldr	r1, [sp, #12]
 8003102:	1a5b      	subs	r3, r3, r1
 8003104:	42ab      	cmp	r3, r5
 8003106:	dcf2      	bgt.n	80030ee <_printf_i+0x212>
 8003108:	e7eb      	b.n	80030e2 <_printf_i+0x206>
 800310a:	2500      	movs	r5, #0
 800310c:	f104 0619 	add.w	r6, r4, #25
 8003110:	e7f5      	b.n	80030fe <_printf_i+0x222>
 8003112:	bf00      	nop
 8003114:	0800326d 	.word	0x0800326d
 8003118:	0800327e 	.word	0x0800327e

0800311c <memmove>:
 800311c:	4288      	cmp	r0, r1
 800311e:	b510      	push	{r4, lr}
 8003120:	eb01 0402 	add.w	r4, r1, r2
 8003124:	d902      	bls.n	800312c <memmove+0x10>
 8003126:	4284      	cmp	r4, r0
 8003128:	4623      	mov	r3, r4
 800312a:	d807      	bhi.n	800313c <memmove+0x20>
 800312c:	1e43      	subs	r3, r0, #1
 800312e:	42a1      	cmp	r1, r4
 8003130:	d008      	beq.n	8003144 <memmove+0x28>
 8003132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800313a:	e7f8      	b.n	800312e <memmove+0x12>
 800313c:	4402      	add	r2, r0
 800313e:	4601      	mov	r1, r0
 8003140:	428a      	cmp	r2, r1
 8003142:	d100      	bne.n	8003146 <memmove+0x2a>
 8003144:	bd10      	pop	{r4, pc}
 8003146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800314a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800314e:	e7f7      	b.n	8003140 <memmove+0x24>

08003150 <_sbrk_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d06      	ldr	r5, [pc, #24]	@ (800316c <_sbrk_r+0x1c>)
 8003154:	2300      	movs	r3, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	f7fd fd50 	bl	8000c00 <_sbrk>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_sbrk_r+0x1a>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_sbrk_r+0x1a>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	20000238 	.word	0x20000238

08003170 <_realloc_r>:
 8003170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003174:	4680      	mov	r8, r0
 8003176:	4615      	mov	r5, r2
 8003178:	460c      	mov	r4, r1
 800317a:	b921      	cbnz	r1, 8003186 <_realloc_r+0x16>
 800317c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003180:	4611      	mov	r1, r2
 8003182:	f7ff bc59 	b.w	8002a38 <_malloc_r>
 8003186:	b92a      	cbnz	r2, 8003194 <_realloc_r+0x24>
 8003188:	f7ff fbea 	bl	8002960 <_free_r>
 800318c:	2400      	movs	r4, #0
 800318e:	4620      	mov	r0, r4
 8003190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003194:	f000 f81a 	bl	80031cc <_malloc_usable_size_r>
 8003198:	4285      	cmp	r5, r0
 800319a:	4606      	mov	r6, r0
 800319c:	d802      	bhi.n	80031a4 <_realloc_r+0x34>
 800319e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80031a2:	d8f4      	bhi.n	800318e <_realloc_r+0x1e>
 80031a4:	4629      	mov	r1, r5
 80031a6:	4640      	mov	r0, r8
 80031a8:	f7ff fc46 	bl	8002a38 <_malloc_r>
 80031ac:	4607      	mov	r7, r0
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d0ec      	beq.n	800318c <_realloc_r+0x1c>
 80031b2:	42b5      	cmp	r5, r6
 80031b4:	462a      	mov	r2, r5
 80031b6:	4621      	mov	r1, r4
 80031b8:	bf28      	it	cs
 80031ba:	4632      	movcs	r2, r6
 80031bc:	f7ff fbc2 	bl	8002944 <memcpy>
 80031c0:	4621      	mov	r1, r4
 80031c2:	4640      	mov	r0, r8
 80031c4:	f7ff fbcc 	bl	8002960 <_free_r>
 80031c8:	463c      	mov	r4, r7
 80031ca:	e7e0      	b.n	800318e <_realloc_r+0x1e>

080031cc <_malloc_usable_size_r>:
 80031cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d0:	1f18      	subs	r0, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bfbc      	itt	lt
 80031d6:	580b      	ldrlt	r3, [r1, r0]
 80031d8:	18c0      	addlt	r0, r0, r3
 80031da:	4770      	bx	lr

080031dc <_init>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr

080031e8 <_fini>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr
