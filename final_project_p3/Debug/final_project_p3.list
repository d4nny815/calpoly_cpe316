
final_project_p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08004090  08004090  00005090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004458  08004458  000060ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004460  08004460  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004464  08004464  00005464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08004468  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200000ac  08004514  000060ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08004514  00006380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008407  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002239  00000000  00000000  0000e4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00010720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b9  00000000  00000000  00011058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262c5  00000000  00000000  00011711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc9b  00000000  00000000  000379d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3423  00000000  00000000  00043671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  00126ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001291d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004078 	.word	0x08004078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08004078 	.word	0x08004078

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <highscore_init>:


/**
 * @brief Initialize the eeprom, load the high scores from the eeprom
*/
void highscore_init() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
    eeprom_init();
 8000276:	f000 ffd1 	bl	800121c <eeprom_init>
//         tmp.score = 0;
//         store_highscore(tmp, i);
//     }
    
    uint16_t addr;
    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e044      	b.n	800030a <highscore_init+0x9a>
        for (int j = 0; j < MAX_NAME_LEN; j++) {
 8000280:	2300      	movs	r3, #0
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	e021      	b.n	80002ca <highscore_init+0x5a>
            addr = (i * sizeof(HighScore_t) + j) + HIGH_SCORES_START_ADDR;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	b29b      	uxth	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	0092      	lsls	r2, r2, #2
 800028e:	441a      	add	r2, r3
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	4413      	add	r3, r2
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	b29a      	uxth	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	b29b      	uxth	r3, r3
 800029c:	4413      	add	r3, r2
 800029e:	b29b      	uxth	r3, r3
 80002a0:	3369      	adds	r3, #105	@ 0x69
 80002a2:	80fb      	strh	r3, [r7, #6]
            high_scores[i].name[j] = eeprom_load_byte(addr);
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 f856 	bl	8001358 <eeprom_load_byte>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4618      	mov	r0, r3
 80002b0:	4a1e      	ldr	r2, [pc, #120]	@ (800032c <highscore_init+0xbc>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	2116      	movs	r1, #22
 80002b6:	fb01 f303 	mul.w	r3, r1, r3
 80002ba:	441a      	add	r2, r3
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	4413      	add	r3, r2
 80002c0:	4602      	mov	r2, r0
 80002c2:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < MAX_NAME_LEN; j++) {
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	2b14      	cmp	r3, #20
 80002ce:	ddda      	ble.n	8000286 <highscore_init+0x16>
        }

        addr =  (i * sizeof(HighScore_t) + (MAX_NAME_LEN * sizeof(char)) + HIGH_SCORES_START_ADDR);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	461a      	mov	r2, r3
 80002d6:	0092      	lsls	r2, r2, #2
 80002d8:	441a      	add	r2, r3
 80002da:	0052      	lsls	r2, r2, #1
 80002dc:	4413      	add	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	337e      	adds	r3, #126	@ 0x7e
 80002e4:	80fb      	strh	r3, [r7, #6]
        high_scores[i].score = eeprom_load_byte(addr);
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 f835 	bl	8001358 <eeprom_load_byte>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4618      	mov	r0, r3
 80002f2:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <highscore_init+0xbc>)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2116      	movs	r1, #22
 80002f8:	fb01 f303 	mul.w	r3, r1, r3
 80002fc:	4413      	add	r3, r2
 80002fe:	3315      	adds	r3, #21
 8000300:	4602      	mov	r2, r0
 8000302:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3301      	adds	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	2b09      	cmp	r3, #9
 800030e:	ddb7      	ble.n	8000280 <highscore_init+0x10>
    }

    lowest_score = high_scores[MAX_NAME_LEN - 1].score;
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <highscore_init+0xbc>)
 8000312:	f893 21cd 	ldrb.w	r2, [r3, #461]	@ 0x1cd
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <highscore_init+0xc0>)
 8000318:	701a      	strb	r2, [r3, #0]
    highest_score = high_scores[0].score;
 800031a:	4b04      	ldr	r3, [pc, #16]	@ (800032c <highscore_init+0xbc>)
 800031c:	7d5a      	ldrb	r2, [r3, #21]
 800031e:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <highscore_init+0xc4>)
 8000320:	701a      	strb	r2, [r3, #0]

    return;
 8000322:	bf00      	nop
}
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000cc 	.word	0x200000cc
 8000330:	200000c8 	.word	0x200000c8
 8000334:	200000c9 	.word	0x200000c9

08000338 <store_highscore>:
/**
 * @brief Store the high score to the eeprom
 * @param high_scores the high score to store
 * @param index the index of the high score, not include the base address
*/
void store_highscore(HighScore_t high_scores, uint8_t index) {
 8000338:	b084      	sub	sp, #16
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	f107 0c10 	add.w	ip, r7, #16
 8000344:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // write the name
    uint16_t addr;
    for (int j = 0; j < MAX_NAME_LEN; j++) {
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	e01b      	b.n	8000386 <store_highscore+0x4e>
        addr = (index * sizeof(HighScore_t) + j) + HIGH_SCORES_START_ADDR;
 800034e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000352:	b29b      	uxth	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	441a      	add	r2, r3
 800035a:	0052      	lsls	r2, r2, #1
 800035c:	4413      	add	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	b29a      	uxth	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	b29b      	uxth	r3, r3
 8000366:	4413      	add	r3, r2
 8000368:	b29b      	uxth	r3, r3
 800036a:	3369      	adds	r3, #105	@ 0x69
 800036c:	807b      	strh	r3, [r7, #2]
        eeprom_store_byte(high_scores.name[j], addr);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3310      	adds	r3, #16
 8000372:	443b      	add	r3, r7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	887a      	ldrh	r2, [r7, #2]
 8000378:	4611      	mov	r1, r2
 800037a:	4618      	mov	r0, r3
 800037c:	f000 ff82 	bl	8001284 <eeprom_store_byte>
    for (int j = 0; j < MAX_NAME_LEN; j++) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2b14      	cmp	r3, #20
 800038a:	dde0      	ble.n	800034e <store_highscore+0x16>
    }

    // write the score
    addr =  (index * sizeof(HighScore_t) + (MAX_NAME_LEN * sizeof(char)) + HIGH_SCORES_START_ADDR);
 800038c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000390:	b29b      	uxth	r3, r3
 8000392:	461a      	mov	r2, r3
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	441a      	add	r2, r3
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	4413      	add	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	b29b      	uxth	r3, r3
 80003a0:	337e      	adds	r3, #126	@ 0x7e
 80003a2:	807b      	strh	r3, [r7, #2]
    eeprom_store_byte(high_scores.score, addr);
 80003a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80003a8:	887a      	ldrh	r2, [r7, #2]
 80003aa:	4611      	mov	r1, r2
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 ff69 	bl	8001284 <eeprom_store_byte>

    return;
 80003b2:	bf00      	nop
}
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <is_a_highscore>:
/**
 * @brief Check if the score is a high score
 * @param score the score to check
 * @return 1 if the score is a high score, 0 otherwise
*/
uint8_t is_a_highscore(uint8_t score) {
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
    return score > lowest_score;
 80003ca:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <is_a_highscore+0x28>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	79fa      	ldrb	r2, [r7, #7]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	bf8c      	ite	hi
 80003d4:	2301      	movhi	r3, #1
 80003d6:	2300      	movls	r3, #0
 80003d8:	b2db      	uxtb	r3, r3
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	200000c8 	.word	0x200000c8

080003ec <update_highscores>:
 * @brief Update the high scores with the new high score
 * @note  Needs to be called after is_a_highscore 
 * @param high_score the new high score
 
*/
void update_highscores(HighScore_t high_score) {
 80003ec:	b084      	sub	sp, #16
 80003ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f0:	b087      	sub	sp, #28
 80003f2:	af04      	add	r7, sp, #16
 80003f4:	f107 0420 	add.w	r4, r7, #32
 80003f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t i;
    // find the index to insert the new high score
    for (i = 0; i < HIGH_SCORES_NUM; i++) {
 80003fc:	2300      	movs	r3, #0
 80003fe:	71fb      	strb	r3, [r7, #7]
 8000400:	e00e      	b.n	8000420 <update_highscores+0x34>
        if (high_score.score > high_scores[i].score) {
 8000402:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	493a      	ldr	r1, [pc, #232]	@ (80004f4 <update_highscores+0x108>)
 800040a:	2016      	movs	r0, #22
 800040c:	fb00 f303 	mul.w	r3, r0, r3
 8000410:	440b      	add	r3, r1
 8000412:	3315      	adds	r3, #21
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	429a      	cmp	r2, r3
 8000418:	d806      	bhi.n	8000428 <update_highscores+0x3c>
    for (i = 0; i < HIGH_SCORES_NUM; i++) {
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	3301      	adds	r3, #1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b09      	cmp	r3, #9
 8000424:	d9ed      	bls.n	8000402 <update_highscores+0x16>
 8000426:	e000      	b.n	800042a <update_highscores+0x3e>
            break;
 8000428:	bf00      	nop
        }
    }

    // shift all the high scores down
    for (uint8_t j = HIGH_SCORES_NUM - 1; j > i; j--) {
 800042a:	2309      	movs	r3, #9
 800042c:	71bb      	strb	r3, [r7, #6]
 800042e:	e01c      	b.n	800046a <update_highscores+0x7e>
        high_scores[j] = high_scores[j - 1];
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	3b01      	subs	r3, #1
 8000434:	79ba      	ldrb	r2, [r7, #6]
 8000436:	492f      	ldr	r1, [pc, #188]	@ (80004f4 <update_highscores+0x108>)
 8000438:	2016      	movs	r0, #22
 800043a:	fb00 f202 	mul.w	r2, r0, r2
 800043e:	1888      	adds	r0, r1, r2
 8000440:	4a2c      	ldr	r2, [pc, #176]	@ (80004f4 <update_highscores+0x108>)
 8000442:	2116      	movs	r1, #22
 8000444:	fb01 f303 	mul.w	r3, r1, r3
 8000448:	441a      	add	r2, r3
 800044a:	4603      	mov	r3, r0
 800044c:	6811      	ldr	r1, [r2, #0]
 800044e:	6855      	ldr	r5, [r2, #4]
 8000450:	6894      	ldr	r4, [r2, #8]
 8000452:	68d0      	ldr	r0, [r2, #12]
 8000454:	6019      	str	r1, [r3, #0]
 8000456:	605d      	str	r5, [r3, #4]
 8000458:	609c      	str	r4, [r3, #8]
 800045a:	60d8      	str	r0, [r3, #12]
 800045c:	6911      	ldr	r1, [r2, #16]
 800045e:	6119      	str	r1, [r3, #16]
 8000460:	8a92      	ldrh	r2, [r2, #20]
 8000462:	829a      	strh	r2, [r3, #20]
    for (uint8_t j = HIGH_SCORES_NUM - 1; j > i; j--) {
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	3b01      	subs	r3, #1
 8000468:	71bb      	strb	r3, [r7, #6]
 800046a:	79ba      	ldrb	r2, [r7, #6]
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	429a      	cmp	r2, r3
 8000470:	d8de      	bhi.n	8000430 <update_highscores+0x44>
    }

    high_scores[i] = high_score;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4a1f      	ldr	r2, [pc, #124]	@ (80004f4 <update_highscores+0x108>)
 8000476:	2116      	movs	r1, #22
 8000478:	fb01 f303 	mul.w	r3, r1, r3
 800047c:	4413      	add	r3, r2
 800047e:	461d      	mov	r5, r3
 8000480:	f107 0420 	add.w	r4, r7, #32
 8000484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000486:	6028      	str	r0, [r5, #0]
 8000488:	6069      	str	r1, [r5, #4]
 800048a:	60aa      	str	r2, [r5, #8]
 800048c:	60eb      	str	r3, [r5, #12]
 800048e:	6820      	ldr	r0, [r4, #0]
 8000490:	6128      	str	r0, [r5, #16]
 8000492:	88a3      	ldrh	r3, [r4, #4]
 8000494:	82ab      	strh	r3, [r5, #20]
    lowest_score = high_scores[MAX_NAME_LEN - 1].score;
 8000496:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <update_highscores+0x108>)
 8000498:	f893 21cd 	ldrb.w	r2, [r3, #461]	@ 0x1cd
 800049c:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <update_highscores+0x10c>)
 800049e:	701a      	strb	r2, [r3, #0]

    // rewrite the newest high scores to eeprom
    while (i < HIGH_SCORES_NUM) {
 80004a0:	e01d      	b.n	80004de <update_highscores+0xf2>
        store_highscore(high_scores[i], i);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	4a13      	ldr	r2, [pc, #76]	@ (80004f4 <update_highscores+0x108>)
 80004a6:	2116      	movs	r1, #22
 80004a8:	fb01 f303 	mul.w	r3, r1, r3
 80004ac:	4413      	add	r3, r2
 80004ae:	79fa      	ldrb	r2, [r7, #7]
 80004b0:	9202      	str	r2, [sp, #8]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4616      	mov	r6, r2
 80004b6:	685a      	ldr	r2, [r3, #4]
 80004b8:	4611      	mov	r1, r2
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	4615      	mov	r5, r2
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	4614      	mov	r4, r2
 80004c2:	466a      	mov	r2, sp
 80004c4:	3310      	adds	r3, #16
 80004c6:	6818      	ldr	r0, [r3, #0]
 80004c8:	6010      	str	r0, [r2, #0]
 80004ca:	889b      	ldrh	r3, [r3, #4]
 80004cc:	8093      	strh	r3, [r2, #4]
 80004ce:	4630      	mov	r0, r6
 80004d0:	462a      	mov	r2, r5
 80004d2:	4623      	mov	r3, r4
 80004d4:	f7ff ff30 	bl	8000338 <store_highscore>
        i++;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	3301      	adds	r3, #1
 80004dc:	71fb      	strb	r3, [r7, #7]
    while (i < HIGH_SCORES_NUM) {
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b09      	cmp	r3, #9
 80004e2:	d9de      	bls.n	80004a2 <update_highscores+0xb6>
    }

    return;
 80004e4:	bf00      	nop
}
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80004ee:	b004      	add	sp, #16
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200000cc 	.word	0x200000cc
 80004f8:	200000c8 	.word	0x200000c8

080004fc <get_highest_score>:

/**
 * @brief Get the highest score
 * @return the highest score
*/
uint8_t get_highest_score() {
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
    return highest_score;
 8000500:	4b03      	ldr	r3, [pc, #12]	@ (8000510 <get_highest_score+0x14>)
 8000502:	781b      	ldrb	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200000c9 	.word	0x200000c9

08000514 <joystick_pin_init>:
 *      Author: danny
 */

#include "Joystick.h"

void joystick_pin_init() {
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
    // PC0 for vertical, PC1 for horizontal
    // PC2 for button
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000518:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <joystick_pin_init+0x70>)
 800051a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051c:	4a19      	ldr	r2, [pc, #100]	@ (8000584 <joystick_pin_init+0x70>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER |= GPIO_MODER_MODE0 | GPIO_MODER_MODE1; // Analog mode
 8000524:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <joystick_pin_init+0x74>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a17      	ldr	r2, [pc, #92]	@ (8000588 <joystick_pin_init+0x74>)
 800052a:	f043 030f 	orr.w	r3, r3, #15
 800052e:	6013      	str	r3, [r2, #0]
    GPIOC->ASCR |= GPIO_ASCR_ASC0 | GPIO_ASCR_ASC1;  // Connect analog switch to ADC input
 8000530:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <joystick_pin_init+0x74>)
 8000532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000534:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <joystick_pin_init+0x74>)
 8000536:	f043 0303 	orr.w	r3, r3, #3
 800053a:	62d3      	str	r3, [r2, #44]	@ 0x2c

    GPIOC->MODER &= ~GPIO_MODER_MODE2; // Input mode
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <joystick_pin_init+0x74>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a11      	ldr	r2, [pc, #68]	@ (8000588 <joystick_pin_init+0x74>)
 8000542:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000546:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD2; 
 8000548:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <joystick_pin_init+0x74>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	4a0e      	ldr	r2, [pc, #56]	@ (8000588 <joystick_pin_init+0x74>)
 800054e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000552:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= GPIO_PUPDR_PUPD2_0; // Pull-up
 8000554:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <joystick_pin_init+0x74>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a0b      	ldr	r2, [pc, #44]	@ (8000588 <joystick_pin_init+0x74>)
 800055a:	f043 0310 	orr.w	r3, r3, #16
 800055e:	60d3      	str	r3, [r2, #12]
    GPIOC->OTYPER &= ~GPIO_OTYPER_OT2; // Push-pull
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <joystick_pin_init+0x74>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <joystick_pin_init+0x74>)
 8000566:	f023 0304 	bic.w	r3, r3, #4
 800056a:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED2; // Low speed
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <joystick_pin_init+0x74>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a05      	ldr	r2, [pc, #20]	@ (8000588 <joystick_pin_init+0x74>)
 8000572:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000576:	6093      	str	r3, [r2, #8]

    return;
 8000578:	bf00      	nop
}
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	48000800 	.word	0x48000800

0800058c <ADC_init>:

void ADC_init() {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0

    // ADC1, IN1 for vertical
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000592:	4b59      	ldr	r3, [pc, #356]	@ (80006f8 <ADC_init+0x16c>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	4a58      	ldr	r2, [pc, #352]	@ (80006f8 <ADC_init+0x16c>)
 8000598:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800059c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 800059e:	4b57      	ldr	r3, [pc, #348]	@ (80006fc <ADC_init+0x170>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	4a56      	ldr	r2, [pc, #344]	@ (80006fc <ADC_init+0x170>)
 80005a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005a8:	6093      	str	r3, [r2, #8]
    ADC1->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 80005aa:	4b55      	ldr	r3, [pc, #340]	@ (8000700 <ADC_init+0x174>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	4a54      	ldr	r2, [pc, #336]	@ (8000700 <ADC_init+0x174>)
 80005b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80005b4:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 80005b6:	4b52      	ldr	r3, [pc, #328]	@ (8000700 <ADC_init+0x174>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	4a51      	ldr	r2, [pc, #324]	@ (8000700 <ADC_init+0x174>)
 80005bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up 
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	e002      	b.n	80005ce <ADC_init+0x42>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b63      	cmp	r3, #99	@ 0x63
 80005d2:	ddf9      	ble.n	80005c8 <ADC_init+0x3c>

    ADC1->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <ADC_init+0x174>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a49      	ldr	r2, [pc, #292]	@ (8000700 <ADC_init+0x174>)
 80005da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005de:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL; // start calibration
 80005e0:	4b47      	ldr	r3, [pc, #284]	@ (8000700 <ADC_init+0x174>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	4a46      	ldr	r2, [pc, #280]	@ (8000700 <ADC_init+0x174>)
 80005e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005ea:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // wait for calibration to finish
 80005ec:	bf00      	nop
 80005ee:	4b44      	ldr	r3, [pc, #272]	@ (8000700 <ADC_init+0x174>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dbfb      	blt.n	80005ee <ADC_init+0x62>

    ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 80005f6:	4b42      	ldr	r3, [pc, #264]	@ (8000700 <ADC_init+0x174>)
 80005f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80005fc:	4a40      	ldr	r2, [pc, #256]	@ (8000700 <ADC_init+0x174>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC1->ISR |= ADC_ISR_ADRDY; // clear ready flag
 8000606:	4b3e      	ldr	r3, [pc, #248]	@ (8000700 <ADC_init+0x174>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a3d      	ldr	r2, [pc, #244]	@ (8000700 <ADC_init+0x174>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6013      	str	r3, [r2, #0]
    ADC1->CR |= ADC_CR_ADEN; // enable ADC
 8000612:	4b3b      	ldr	r3, [pc, #236]	@ (8000700 <ADC_init+0x174>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a3a      	ldr	r2, [pc, #232]	@ (8000700 <ADC_init+0x174>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 800061e:	bf00      	nop
 8000620:	4b37      	ldr	r3, [pc, #220]	@ (8000700 <ADC_init+0x174>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0f9      	beq.n	8000620 <ADC_init+0x94>

    ADC1->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 800062c:	4b34      	ldr	r3, [pc, #208]	@ (8000700 <ADC_init+0x174>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
    ADC1->SQR1 = (1 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 8000632:	4b33      	ldr	r3, [pc, #204]	@ (8000700 <ADC_init+0x174>)
 8000634:	2240      	movs	r2, #64	@ 0x40
 8000636:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->SMPR1 = (2 << ADC_SMPR1_SMP1_Pos); // 12.5 cycles sampling time
 8000638:	4b31      	ldr	r3, [pc, #196]	@ (8000700 <ADC_init+0x174>)
 800063a:	2210      	movs	r2, #16
 800063c:	615a      	str	r2, [r3, #20]

    // ADC3, IN2 for horizontal
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <ADC_init+0x16c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <ADC_init+0x16c>)
 8000644:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <ADC_init+0x170>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a2b      	ldr	r2, [pc, #172]	@ (80006fc <ADC_init+0x170>)
 8000650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000654:	6093      	str	r3, [r2, #8]
    ADC3->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <ADC_init+0x178>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <ADC_init+0x178>)
 800065c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000660:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <ADC_init+0x178>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <ADC_init+0x178>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066c:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	e002      	b.n	800067a <ADC_init+0xee>
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b63      	cmp	r3, #99	@ 0x63
 800067e:	ddf9      	ble.n	8000674 <ADC_init+0xe8>

    ADC3->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 8000680:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <ADC_init+0x178>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <ADC_init+0x178>)
 8000686:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800068a:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADCAL; // start calibration
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <ADC_init+0x178>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a1c      	ldr	r2, [pc, #112]	@ (8000704 <ADC_init+0x178>)
 8000692:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000696:	6093      	str	r3, [r2, #8]
    while (ADC3->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000698:	bf00      	nop
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <ADC_init+0x178>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dbfb      	blt.n	800069a <ADC_init+0x10e>

    ADC3->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <ADC_init+0x178>)
 80006a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80006a8:	4a16      	ldr	r2, [pc, #88]	@ (8000704 <ADC_init+0x178>)
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC3->ISR |= ADC_ISR_ADRDY; // clear ready flag
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <ADC_init+0x178>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <ADC_init+0x178>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6013      	str	r3, [r2, #0]
    ADC3->CR |= ADC_CR_ADEN; // enable ADC
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <ADC_init+0x178>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	4a10      	ldr	r2, [pc, #64]	@ (8000704 <ADC_init+0x178>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 80006ca:	bf00      	nop
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <ADC_init+0x178>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f9      	beq.n	80006cc <ADC_init+0x140>

    ADC3->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <ADC_init+0x178>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
    ADC3->SQR1 = (2 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <ADC_init+0x178>)
 80006e0:	2280      	movs	r2, #128	@ 0x80
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC3->SMPR1 = (2 << ADC_SMPR1_SMP2_Pos); // 12.5 cycles sampling time
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <ADC_init+0x178>)
 80006e6:	2280      	movs	r2, #128	@ 0x80
 80006e8:	615a      	str	r2, [r3, #20]

    return;
 80006ea:	bf00      	nop
}
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	50040300 	.word	0x50040300
 8000700:	50040000 	.word	0x50040000
 8000704:	50040200 	.word	0x50040200

08000708 <joystick_init>:

void joystick_init() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    joystick_pin_init();
 800070c:	f7ff ff02 	bl	8000514 <joystick_pin_init>
    ADC_init();
 8000710:	f7ff ff3c 	bl	800058c <ADC_init>

    return;
 8000714:	bf00      	nop
}
 8000716:	bd80      	pop	{r7, pc}

08000718 <get_joystick_x>:

uint16_t get_joystick_x() {
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
    ADC3->CR |= ADC_CR_ADSTART; // start conversion
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <get_joystick_x+0x30>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <get_joystick_x+0x30>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 8000728:	bf00      	nop
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <get_joystick_x+0x30>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0f9      	beq.n	800072a <get_joystick_x+0x12>

    return ADC3->DR;
 8000736:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <get_joystick_x+0x30>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	b29b      	uxth	r3, r3
    
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	50040200 	.word	0x50040200

0800074c <get_joystick_y>:

uint16_t get_joystick_y() {
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
    ADC1->CR |= ADC_CR_ADSTART; // start conversion
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <get_joystick_y+0x30>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	4a09      	ldr	r2, [pc, #36]	@ (800077c <get_joystick_y+0x30>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 800075c:	bf00      	nop
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <get_joystick_y+0x30>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f9      	beq.n	800075e <get_joystick_y+0x12>

    return ADC1->DR;
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <get_joystick_y+0x30>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	b29b      	uxth	r3, r3
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	50040000 	.word	0x50040000

08000780 <get_joystick_button>:

uint8_t get_joystick_button() {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    return !(GPIOC->IDR & GPIO_IDR_ID2);
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <get_joystick_button+0x20>)
 8000786:	691b      	ldr	r3, [r3, #16]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	2b00      	cmp	r3, #0
 800078e:	bf0c      	ite	eq
 8000790:	2301      	moveq	r3, #1
 8000792:	2300      	movne	r3, #0
 8000794:	b2db      	uxtb	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	48000800 	.word	0x48000800

080007a4 <same_point>:
 * @brief check if two points are the same
 * @param a: point a
 * @param b: point b
 * @return 1 if same, 0 otherwise
*/
uint8_t same_point(Point_t a, Point_t b) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	80b8      	strh	r0, [r7, #4]
 80007ac:	8039      	strh	r1, [r7, #0]
    return (a.x == b.x && a.y == b.y);
 80007ae:	793a      	ldrb	r2, [r7, #4]
 80007b0:	783b      	ldrb	r3, [r7, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d105      	bne.n	80007c2 <same_point+0x1e>
 80007b6:	797a      	ldrb	r2, [r7, #5]
 80007b8:	787b      	ldrb	r3, [r7, #1]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d101      	bne.n	80007c2 <same_point+0x1e>
 80007be:	2301      	movs	r3, #1
 80007c0:	e000      	b.n	80007c4 <same_point+0x20>
 80007c2:	2300      	movs	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <grid_init>:


/**
 * @brief initialize the border of the grid
*/
void grid_init(uint8_t high_score) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
    uart_clear_screen();
 80007de:	f001 fa9f 	bl	8001d20 <uart_clear_screen>
    uart_send_escape("[0m"); // reset colorQ
 80007e2:	4838      	ldr	r0, [pc, #224]	@ (80008c4 <grid_init+0xf0>)
 80007e4:	f001 fa8e 	bl	8001d04 <uart_send_escape>

    // print top and bottom border
    sprintf(snake_print_buffer, "[%u;%uH", TOP_BOUND, LEFT_BOUND);
 80007e8:	2308      	movs	r3, #8
 80007ea:	2203      	movs	r2, #3
 80007ec:	4936      	ldr	r1, [pc, #216]	@ (80008c8 <grid_init+0xf4>)
 80007ee:	4837      	ldr	r0, [pc, #220]	@ (80008cc <grid_init+0xf8>)
 80007f0:	f002 ffa2 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 80007f4:	4835      	ldr	r0, [pc, #212]	@ (80008cc <grid_init+0xf8>)
 80007f6:	f001 fa85 	bl	8001d04 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 80007fa:	2308      	movs	r3, #8
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	e005      	b.n	800080c <grid_init+0x38>
        uart_send_char('=');
 8000800:	203d      	movs	r0, #61	@ 0x3d
 8000802:	f001 fa41 	bl	8001c88 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	2b64      	cmp	r3, #100	@ 0x64
 8000810:	ddf6      	ble.n	8000800 <grid_init+0x2c>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND, LEFT_BOUND);
 8000812:	2308      	movs	r3, #8
 8000814:	2232      	movs	r2, #50	@ 0x32
 8000816:	492c      	ldr	r1, [pc, #176]	@ (80008c8 <grid_init+0xf4>)
 8000818:	482c      	ldr	r0, [pc, #176]	@ (80008cc <grid_init+0xf8>)
 800081a:	f002 ff8d 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 800081e:	482b      	ldr	r0, [pc, #172]	@ (80008cc <grid_init+0xf8>)
 8000820:	f001 fa70 	bl	8001d04 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000824:	2308      	movs	r3, #8
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e005      	b.n	8000836 <grid_init+0x62>
        uart_send_char('=');
 800082a:	203d      	movs	r0, #61	@ 0x3d
 800082c:	f001 fa2c 	bl	8001c88 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3301      	adds	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	2b64      	cmp	r3, #100	@ 0x64
 800083a:	ddf6      	ble.n	800082a <grid_init+0x56>
    }

    // print left and right border
    for (int i = TOP_BOUND + 1; i < BOTTOM_BOUND; i++) {
 800083c:	2304      	movs	r3, #4
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	e01a      	b.n	8000878 <grid_init+0xa4>
        sprintf(snake_print_buffer, "[%u;%uH", i, LEFT_BOUND);
 8000842:	2308      	movs	r3, #8
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4920      	ldr	r1, [pc, #128]	@ (80008c8 <grid_init+0xf4>)
 8000848:	4820      	ldr	r0, [pc, #128]	@ (80008cc <grid_init+0xf8>)
 800084a:	f002 ff75 	bl	8003738 <siprintf>
        uart_send_escape(snake_print_buffer);
 800084e:	481f      	ldr	r0, [pc, #124]	@ (80008cc <grid_init+0xf8>)
 8000850:	f001 fa58 	bl	8001d04 <uart_send_escape>
        uart_send_char('|');
 8000854:	207c      	movs	r0, #124	@ 0x7c
 8000856:	f001 fa17 	bl	8001c88 <uart_send_char>

        sprintf(snake_print_buffer, "[%u;%uH", i, RIGHT_BOUND);
 800085a:	2364      	movs	r3, #100	@ 0x64
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	491a      	ldr	r1, [pc, #104]	@ (80008c8 <grid_init+0xf4>)
 8000860:	481a      	ldr	r0, [pc, #104]	@ (80008cc <grid_init+0xf8>)
 8000862:	f002 ff69 	bl	8003738 <siprintf>
        uart_send_escape(snake_print_buffer);
 8000866:	4819      	ldr	r0, [pc, #100]	@ (80008cc <grid_init+0xf8>)
 8000868:	f001 fa4c 	bl	8001d04 <uart_send_escape>
        uart_send_char('|');
 800086c:	207c      	movs	r0, #124	@ 0x7c
 800086e:	f001 fa0b 	bl	8001c88 <uart_send_char>
    for (int i = TOP_BOUND + 1; i < BOTTOM_BOUND; i++) {
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b31      	cmp	r3, #49	@ 0x31
 800087c:	dde1      	ble.n	8000842 <grid_init+0x6e>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND + 5, RIGHT_BOUND - 15);
 800087e:	2355      	movs	r3, #85	@ 0x55
 8000880:	2237      	movs	r2, #55	@ 0x37
 8000882:	4911      	ldr	r1, [pc, #68]	@ (80008c8 <grid_init+0xf4>)
 8000884:	4811      	ldr	r0, [pc, #68]	@ (80008cc <grid_init+0xf8>)
 8000886:	f002 ff57 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 800088a:	4810      	ldr	r0, [pc, #64]	@ (80008cc <grid_init+0xf8>)
 800088c:	f001 fa3a 	bl	8001d04 <uart_send_escape>
    sprintf(snake_print_buffer, "High Score: %u", high_score);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	461a      	mov	r2, r3
 8000894:	490e      	ldr	r1, [pc, #56]	@ (80008d0 <grid_init+0xfc>)
 8000896:	480d      	ldr	r0, [pc, #52]	@ (80008cc <grid_init+0xf8>)
 8000898:	f002 ff4e 	bl	8003738 <siprintf>
    uart_send_string(snake_print_buffer);
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <grid_init+0xf8>)
 800089e:	f001 fa0b 	bl	8001cb8 <uart_send_string>

    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X - 7);
 80008a2:	2308      	movs	r3, #8
 80008a4:	2237      	movs	r2, #55	@ 0x37
 80008a6:	4908      	ldr	r1, [pc, #32]	@ (80008c8 <grid_init+0xf4>)
 80008a8:	4808      	ldr	r0, [pc, #32]	@ (80008cc <grid_init+0xf8>)
 80008aa:	f002 ff45 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 80008ae:	4807      	ldr	r0, [pc, #28]	@ (80008cc <grid_init+0xf8>)
 80008b0:	f001 fa28 	bl	8001d04 <uart_send_escape>
    uart_send_string("Score: ");
 80008b4:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <grid_init+0x100>)
 80008b6:	f001 f9ff 	bl	8001cb8 <uart_send_string>

    return;
 80008ba:	bf00      	nop
}
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	08004090 	.word	0x08004090
 80008c8:	08004094 	.word	0x08004094
 80008cc:	200001ac 	.word	0x200001ac
 80008d0:	0800409c 	.word	0x0800409c
 80008d4:	080040ac 	.word	0x080040ac

080008d8 <grid_draw>:

/**
 * @brief draw the snake
 * @param snake: the snake object
*/
void grid_draw(Snake_t snake) {
 80008d8:	b084      	sub	sp, #16
 80008da:	b580      	push	{r7, lr}
 80008dc:	f5ad 7d3e 	sub.w	sp, sp, #760	@ 0x2f8
 80008e0:	afbe      	add	r7, sp, #760	@ 0x2f8
 80008e2:	f107 0c08 	add.w	ip, r7, #8
 80008e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    snake_draw(snake);
 80008ea:	4668      	mov	r0, sp
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 80008f4:	4619      	mov	r1, r3
 80008f6:	f002 ff73 	bl	80037e0 <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000900:	f000 f806 	bl	8000910 <snake_draw>

    return;
 8000904:	bf00      	nop
}
 8000906:	46bd      	mov	sp, r7
 8000908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800090c:	b004      	add	sp, #16
 800090e:	4770      	bx	lr

08000910 <snake_draw>:
/**
 * @brief draw the snake object
 * @param snake: the snake object
 * @note this function is optimized for drawing the snake, since most of the snake is not moving. hehe so no dma
*/
void snake_draw(Snake_t snake) {
 8000910:	b084      	sub	sp, #16
 8000912:	b580      	push	{r7, lr}
 8000914:	f5ad 7d3e 	sub.w	sp, sp, #760	@ 0x2f8
 8000918:	afbe      	add	r7, sp, #760	@ 0x2f8
 800091a:	f107 0c08 	add.w	ip, r7, #8
 800091e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // erase tail
    sprintf(snake_print_buffer, "[%u;%uH", old_tail.pos.y, old_tail.pos.x);
 8000922:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <snake_draw+0x9c>)
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	461a      	mov	r2, r3
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <snake_draw+0x9c>)
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	4920      	ldr	r1, [pc, #128]	@ (80009b0 <snake_draw+0xa0>)
 800092e:	4821      	ldr	r0, [pc, #132]	@ (80009b4 <snake_draw+0xa4>)
 8000930:	f002 ff02 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000934:	481f      	ldr	r0, [pc, #124]	@ (80009b4 <snake_draw+0xa4>)
 8000936:	f001 f9e5 	bl	8001d04 <uart_send_escape>
    uart_send_char(' ');
 800093a:	2020      	movs	r0, #32
 800093c:	f001 f9a4 	bl	8001c88 <uart_send_char>

    // draw head
    sprintf(snake_print_buffer, "[%u;%uH", snake.body[0].pos.y, snake.body[0].pos.x);
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	461a      	mov	r2, r3
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	491a      	ldr	r1, [pc, #104]	@ (80009b0 <snake_draw+0xa0>)
 8000948:	481a      	ldr	r0, [pc, #104]	@ (80009b4 <snake_draw+0xa4>)
 800094a:	f002 fef5 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 800094e:	4819      	ldr	r0, [pc, #100]	@ (80009b4 <snake_draw+0xa4>)
 8000950:	f001 f9d8 	bl	8001d04 <uart_send_escape>
    uart_send_escape("[32m"); // green
 8000954:	4818      	ldr	r0, [pc, #96]	@ (80009b8 <snake_draw+0xa8>)
 8000956:	f001 f9d5 	bl	8001d04 <uart_send_escape>
    uart_send_char('O');
 800095a:	204f      	movs	r0, #79	@ 0x4f
 800095c:	f001 f994 	bl	8001c88 <uart_send_char>

    // print current score
    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X);
 8000960:	230f      	movs	r3, #15
 8000962:	2237      	movs	r2, #55	@ 0x37
 8000964:	4912      	ldr	r1, [pc, #72]	@ (80009b0 <snake_draw+0xa0>)
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <snake_draw+0xa4>)
 8000968:	f002 fee6 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 800096c:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <snake_draw+0xa4>)
 800096e:	f001 f9c9 	bl	8001d04 <uart_send_escape>
    sprintf(snake_print_buffer, "%u", snake_get_score(snake));
 8000972:	4668      	mov	r0, sp
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 800097c:	4619      	mov	r1, r3
 800097e:	f002 ff2f 	bl	80037e0 <memcpy>
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000988:	f000 faac 	bl	8000ee4 <snake_get_score>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	490a      	ldr	r1, [pc, #40]	@ (80009bc <snake_draw+0xac>)
 8000992:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <snake_draw+0xa4>)
 8000994:	f002 fed0 	bl	8003738 <siprintf>
    uart_send_string(snake_print_buffer);
 8000998:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <snake_draw+0xa4>)
 800099a:	f001 f98d 	bl	8001cb8 <uart_send_string>
    
    return;
 800099e:	bf00      	nop
}
 80009a0:	46bd      	mov	sp, r7
 80009a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009a6:	b004      	add	sp, #16
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200001a8 	.word	0x200001a8
 80009b0:	08004094 	.word	0x08004094
 80009b4:	200001ac 	.word	0x200001ac
 80009b8:	080040b4 	.word	0x080040b4
 80009bc:	080040bc 	.word	0x080040bc

080009c0 <snake_init>:

/**
 * @brief init the snake object
 * @param snake: the snake object
*/
void snake_init(Snake_t* snake) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    snake->len = START_LEN;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2205      	movs	r2, #5
 80009cc:	701a      	strb	r2, [r3, #0]
    snake->dir = NORTH;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2304 	strb.w	r2, [r3, #772]	@ 0x304
    snake->alive = 1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 2305 	strb.w	r2, [r3, #773]	@ 0x305
    snake->score = 0;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2306 	strb.w	r2, [r3, #774]	@ 0x306
    
    // so snake body doesn't go over the boundary
    uint8_t x = get_random(LEFT_BOUND + START_BOUNDARY_OFFSET, RIGHT_BOUND - START_BOUNDARY_OFFSET);
 80009e6:	215a      	movs	r1, #90	@ 0x5a
 80009e8:	2012      	movs	r0, #18
 80009ea:	f000 fb19 	bl	8001020 <get_random>
 80009ee:	4603      	mov	r3, r0
 80009f0:	74fb      	strb	r3, [r7, #19]
    uint8_t y = get_random(TOP_BOUND + START_BOUNDARY_OFFSET, BOTTOM_BOUND - START_BOUNDARY_OFFSET - snake->len - 1);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 80009fa:	4619      	mov	r1, r3
 80009fc:	200d      	movs	r0, #13
 80009fe:	f000 fb0f 	bl	8001020 <get_random>
 8000a02:	4603      	mov	r3, r0
 8000a04:	74bb      	strb	r3, [r7, #18]

    // snake will draw vertically
    for (int i = 0; i < snake->len; i++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	e022      	b.n	8000a52 <snake_init+0x92>
        snake->body[i].valid = 1;
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	3301      	adds	r3, #1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.x = x;
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	7cfa      	ldrb	r2, [r7, #19]
 8000a2e:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = y + i;
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	7cbb      	ldrb	r3, [r7, #18]
 8000a36:	4413      	add	r3, r2
 8000a38:	b2d8      	uxtb	r0, r3
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	3303      	adds	r3, #3
 8000a48:	4602      	mov	r2, r0
 8000a4a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake->len; i++) {
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	dbd6      	blt.n	8000a0c <snake_init+0x4c>
    }

    snake->tail = &(snake->body[snake->len - 1]);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
    old_tail = *(snake->tail);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f8d3 2300 	ldr.w	r2, [r3, #768]	@ 0x300
 8000a7c:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <snake_init+0x148>)
 8000a7e:	8811      	ldrh	r1, [r2, #0]
 8000a80:	7892      	ldrb	r2, [r2, #2]
 8000a82:	8019      	strh	r1, [r3, #0]
 8000a84:	709a      	strb	r2, [r3, #2]

    // invalidate the rest of the body
    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	e00b      	b.n	8000aa6 <snake_init+0xe6>
        snake->body[i].valid = 0;
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aaa:	ddf0      	ble.n	8000a8e <snake_init+0xce>
    }
    
    // draw initial snake
    uart_send_escape("[32m"); // green
 8000aac:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <snake_init+0x14c>)
 8000aae:	f001 f929 	bl	8001d04 <uart_send_escape>
    BodyPart_t body;
    for (int i = 0; i < snake->len; i++) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	e01c      	b.n	8000af2 <snake_init+0x132>
        body = snake->body[i];
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	18ca      	adds	r2, r1, r3
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	3201      	adds	r2, #1
 8000aca:	8811      	ldrh	r1, [r2, #0]
 8000acc:	7892      	ldrb	r2, [r2, #2]
 8000ace:	8019      	strh	r1, [r3, #0]
 8000ad0:	709a      	strb	r2, [r3, #2]
        sprintf(snake_print_buffer, "[%u;%uH", body.pos.y, body.pos.x);
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	7b7b      	ldrb	r3, [r7, #13]
 8000ad8:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <snake_init+0x150>)
 8000ada:	480e      	ldr	r0, [pc, #56]	@ (8000b14 <snake_init+0x154>)
 8000adc:	f002 fe2c 	bl	8003738 <siprintf>
        uart_send_escape(snake_print_buffer);
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <snake_init+0x154>)
 8000ae2:	f001 f90f 	bl	8001d04 <uart_send_escape>
        uart_send_char('O');
 8000ae6:	204f      	movs	r0, #79	@ 0x4f
 8000ae8:	f001 f8ce 	bl	8001c88 <uart_send_char>
    for (int i = 0; i < snake->len; i++) {
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	4293      	cmp	r3, r2
 8000afc:	dbdc      	blt.n	8000ab8 <snake_init+0xf8>
    }

    return;
 8000afe:	bf00      	nop
}
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200001a8 	.word	0x200001a8
 8000b0c:	080040b4 	.word	0x080040b4
 8000b10:	08004094 	.word	0x08004094
 8000b14:	200001ac 	.word	0x200001ac

08000b18 <snake_move>:

/**
 * @brief move the snake object
 * @return  -1 if snake ded, 0 if snake is alive
*/
int8_t snake_move(Snake_t* snake) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	f5ad 7d43 	sub.w	sp, sp, #780	@ 0x30c
 8000b1e:	afbe      	add	r7, sp, #760	@ 0x2f8
 8000b20:	6078      	str	r0, [r7, #4]
    if (!snake_is_alive(*snake)) {
 8000b22:	687c      	ldr	r4, [r7, #4]
 8000b24:	4668      	mov	r0, sp
 8000b26:	f104 0310 	add.w	r3, r4, #16
 8000b2a:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f002 fe56 	bl	80037e0 <memcpy>
 8000b34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b38:	f000 f9e2 	bl	8000f00 <snake_is_alive>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <snake_move+0x30>
        return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e098      	b.n	8000c7a <snake_move+0x162>
    }

    snake_change_dir(snake);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f8e1 	bl	8000d10 <snake_change_dir>

    // check if snake collides with boundary
    BodyPart_t* p_head = &snake->body[0];
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
    if (!WITHIN_BOUND(p_head->pos.x, p_head->pos.y)) {
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d90b      	bls.n	8000b74 <snake_move+0x5c>
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	785b      	ldrb	r3, [r3, #1]
 8000b60:	2b63      	cmp	r3, #99	@ 0x63
 8000b62:	d807      	bhi.n	8000b74 <snake_move+0x5c>
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	789b      	ldrb	r3, [r3, #2]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d903      	bls.n	8000b74 <snake_move+0x5c>
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b31      	cmp	r3, #49	@ 0x31
 8000b72:	d905      	bls.n	8000b80 <snake_move+0x68>
        snake_die(snake);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f8bc 	bl	8000cf2 <snake_die>
        return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e07c      	b.n	8000c7a <snake_move+0x162>
    }

    old_tail = *(snake->tail);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 2300 	ldr.w	r2, [r3, #768]	@ 0x300
 8000b86:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <snake_move+0x16c>)
 8000b88:	8811      	ldrh	r1, [r2, #0]
 8000b8a:	7892      	ldrb	r2, [r2, #2]
 8000b8c:	8019      	strh	r1, [r3, #0]
 8000b8e:	709a      	strb	r2, [r3, #2]

    // move body parts
    for (int i = snake->len - 1; i > 0; i--) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e026      	b.n	8000be8 <snake_move+0xd0>
        snake->body[i].pos.x = snake->body[i - 1].pos.x;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	3302      	adds	r3, #2
 8000baa:	7818      	ldrb	r0, [r3, #0]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3302      	adds	r3, #2
 8000bba:	4602      	mov	r2, r0
 8000bbc:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = snake->body[i - 1].pos.y;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	3303      	adds	r3, #3
 8000bce:	7818      	ldrb	r0, [r3, #0]
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4413      	add	r3, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	3303      	adds	r3, #3
 8000bde:	4602      	mov	r2, r0
 8000be0:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len - 1; i > 0; i--) {
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	dcd5      	bgt.n	8000b9a <snake_move+0x82>
    }

    // move head
    switch (snake->dir) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3304 	ldrb.w	r3, [r3, #772]	@ 0x304
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d827      	bhi.n	8000c48 <snake_move+0x130>
 8000bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8000c00 <snake_move+0xe8>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c1f 	.word	0x08000c1f
 8000c08:	08000c2d 	.word	0x08000c2d
 8000c0c:	08000c3b 	.word	0x08000c3b
        case NORTH:
            p_head->pos.y--;
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	709a      	strb	r2, [r3, #2]
            break;
 8000c1c:	e015      	b.n	8000c4a <snake_move+0x132>
        case EAST:
            p_head->pos.x++;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	705a      	strb	r2, [r3, #1]
            break;
 8000c2a:	e00e      	b.n	8000c4a <snake_move+0x132>
        case SOUTH:
            p_head->pos.y++;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	709a      	strb	r2, [r3, #2]
            break;
 8000c38:	e007      	b.n	8000c4a <snake_move+0x132>
        case WEST:
            p_head->pos.x--;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	705a      	strb	r2, [r3, #1]
            break;
 8000c46:	e000      	b.n	8000c4a <snake_move+0x132>
        default:
            break;
 8000c48:	bf00      	nop
    }

    // check if snake collides with itself
    if (snake_hit_itself(p_head->pos, snake->body) == -1) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	1c59      	adds	r1, r3, #1
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	785a      	ldrb	r2, [r3, #1]
 8000c52:	789b      	ldrb	r3, [r3, #2]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	431a      	orrs	r2, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f362 030f 	bfi	r3, r2, #0, #16
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f812 	bl	8000c88 <snake_hit_itself>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6a:	d105      	bne.n	8000c78 <snake_move+0x160>
        snake_die(snake);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 f840 	bl	8000cf2 <snake_die>
        return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e000      	b.n	8000c7a <snake_move+0x162>
    }

    return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001a8 	.word	0x200001a8

08000c88 <snake_hit_itself>:

/**
 * @brief check if snake collides with itself
 * @return  0 if snake is alive, non-zero if snake is ded
*/
int8_t snake_hit_itself(Point_t snake_head, BodyPart_t* body_parts) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	80b8      	strh	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 8000c92:	2301      	movs	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e022      	b.n	8000cde <snake_hit_itself+0x56>
        if (body_parts[i].valid) {
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01d      	beq.n	8000ce6 <snake_hit_itself+0x5e>
            if (same_point(snake_head, body_parts[i].pos)) {
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	785a      	ldrb	r2, [r3, #1]
 8000cb8:	789b      	ldrb	r3, [r3, #2]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f362 030f 	bfi	r3, r2, #0, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fd6c 	bl	80007a4 <same_point>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <snake_hit_itself+0x50>
                return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e008      	b.n	8000cea <snake_hit_itself+0x62>
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ce2:	ddd9      	ble.n	8000c98 <snake_hit_itself+0x10>
 8000ce4:	e000      	b.n	8000ce8 <snake_hit_itself+0x60>
            }
        }
        else {
            break;
 8000ce6:	bf00      	nop
        }
    }

    return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <snake_die>:

/**
 * @brief kill the snake
 * @param snake: the snake object
*/
void snake_die(Snake_t* snake) {
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
    snake->alive = 0;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2305 	strb.w	r2, [r3, #773]	@ 0x305
    // uart_println("Snake ded");
 
    return;
 8000d02:	bf00      	nop
}
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <snake_change_dir>:
/**
 * @brief read the joystick and change the snake direction
 * @param snake: the snake object
 * @return 0 if no change, non zero if change
*/
uint8_t snake_change_dir(Snake_t* snake) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    // TODO: run the adcs in parallel
    uint16_t joy_x = get_joystick_x();
 8000d18:	f7ff fcfe 	bl	8000718 <get_joystick_x>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	81bb      	strh	r3, [r7, #12]
    uint16_t joy_y = get_joystick_y();
 8000d20:	f7ff fd14 	bl	800074c <get_joystick_y>
 8000d24:	4603      	mov	r3, r0
 8000d26:	817b      	strh	r3, [r7, #10]

    Direction_t new_dir;
    uint8_t x_axis;

    // get larger magnitude
    x_axis = abs(joy_x - MID_POINT) > abs(joy_y - MID_POINT); 
 8000d28:	89bb      	ldrh	r3, [r7, #12]
 8000d2a:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8000d2e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d32:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfb8      	it	lt
 8000d40:	425b      	neglt	r3, r3
 8000d42:	429a      	cmp	r2, r3
 8000d44:	bfcc      	ite	gt
 8000d46:	2301      	movgt	r3, #1
 8000d48:	2300      	movle	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	727b      	strb	r3, [r7, #9]

    // only read if direction is pronounced
    if (x_axis) {
 8000d4e:	7a7b      	ldrb	r3, [r7, #9]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d010      	beq.n	8000d76 <snake_change_dir+0x66>
        if (joy_x > RIGHT_QUARTER) {
 8000d54:	89bb      	ldrh	r3, [r7, #12]
 8000d56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000d5a:	d302      	bcc.n	8000d62 <snake_change_dir+0x52>
            new_dir = EAST;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e01a      	b.n	8000d98 <snake_change_dir+0x88>
        }
        else if (joy_x < LEFT_QUARTER) {
 8000d62:	89bb      	ldrh	r3, [r7, #12]
 8000d64:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d802      	bhi.n	8000d72 <snake_change_dir+0x62>
            new_dir = WEST;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e012      	b.n	8000d98 <snake_change_dir+0x88>
        }
        else {
            return 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e048      	b.n	8000e08 <snake_change_dir+0xf8>
        }
    }
    else {
        if (joy_y > TOP_QUARTER) {
 8000d76:	897b      	ldrh	r3, [r7, #10]
 8000d78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000d7c:	d302      	bcc.n	8000d84 <snake_change_dir+0x74>
            new_dir = NORTH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e009      	b.n	8000d98 <snake_change_dir+0x88>
        }
        else if (joy_y < BOTTOM_QUARTER) {
 8000d84:	897b      	ldrh	r3, [r7, #10]
 8000d86:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d802      	bhi.n	8000d94 <snake_change_dir+0x84>
            new_dir = SOUTH;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <snake_change_dir+0x88>
        } else {
            return 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e037      	b.n	8000e08 <snake_change_dir+0xf8>
        }
    }

    // change dir as long as not 180, if same dir then nothing bad happens
    switch (snake->dir) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3304 	ldrb.w	r3, [r3, #772]	@ 0x304
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d831      	bhi.n	8000e06 <snake_change_dir+0xf6>
 8000da2:	a201      	add	r2, pc, #4	@ (adr r2, 8000da8 <snake_change_dir+0x98>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dc9 	.word	0x08000dc9
 8000db0:	08000dd9 	.word	0x08000dd9
 8000db4:	08000de9 	.word	0x08000de9
    case NORTH:
        if (new_dir != SOUTH) snake->dir = new_dir;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d01c      	beq.n	8000df8 <snake_change_dir+0xe8>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	f883 2304 	strb.w	r2, [r3, #772]	@ 0x304
        break;
 8000dc6:	e017      	b.n	8000df8 <snake_change_dir+0xe8>
    case EAST:
        if (new_dir != WEST) snake->dir = new_dir;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d016      	beq.n	8000dfc <snake_change_dir+0xec>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7bfa      	ldrb	r2, [r7, #15]
 8000dd2:	f883 2304 	strb.w	r2, [r3, #772]	@ 0x304
        break;
 8000dd6:	e011      	b.n	8000dfc <snake_change_dir+0xec>
    case SOUTH:
        if (new_dir != NORTH) snake->dir = new_dir;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d010      	beq.n	8000e00 <snake_change_dir+0xf0>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	f883 2304 	strb.w	r2, [r3, #772]	@ 0x304
        break;
 8000de6:	e00b      	b.n	8000e00 <snake_change_dir+0xf0>
    case WEST:
        if (new_dir != EAST) snake->dir = new_dir;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d00a      	beq.n	8000e04 <snake_change_dir+0xf4>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	f883 2304 	strb.w	r2, [r3, #772]	@ 0x304
        break;
 8000df6:	e005      	b.n	8000e04 <snake_change_dir+0xf4>
        break;
 8000df8:	bf00      	nop
 8000dfa:	e004      	b.n	8000e06 <snake_change_dir+0xf6>
        break;
 8000dfc:	bf00      	nop
 8000dfe:	e002      	b.n	8000e06 <snake_change_dir+0xf6>
        break;
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <snake_change_dir+0xf6>
        break;
 8000e04:	bf00      	nop
    }

    return 1;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <snake_check_food>:

/**
 * @brief check snake head collides with food
 * @return  0 if no, non-zero if yes
*/
uint8_t snake_check_food(Snake_t snake, Food_t food) {
 8000e10:	b084      	sub	sp, #16
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	f107 0c08 	add.w	ip, r7, #8
 8000e1a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return same_point((snake.body[0]).pos, food);
 8000e1e:	897a      	ldrh	r2, [r7, #10]
 8000e20:	2300      	movs	r3, #0
 8000e22:	f362 030f 	bfi	r3, r2, #0, #16
 8000e26:	f8d7 1310 	ldr.w	r1, [r7, #784]	@ 0x310
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fcba 	bl	80007a4 <same_point>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e3a:	b004      	add	sp, #16
 8000e3c:	4770      	bx	lr

08000e3e <snake_grow>:

/**
 * @brief grow the snake
 * @param snake: the snake object
*/
void snake_grow(Snake_t* snake) {
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
    snake->body[snake->len].valid = 1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	440b      	add	r3, r1
 8000e54:	4413      	add	r3, r2
 8000e56:	3301      	adds	r3, #1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
    snake->body[snake->len].pos = snake->body[snake->len - 1].pos;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4403      	add	r3, r0
 8000e70:	440b      	add	r3, r1
 8000e72:	1c98      	adds	r0, r3, #2
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3302      	adds	r3, #2
 8000e80:	4602      	mov	r2, r0
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	8013      	strh	r3, [r2, #0]
    snake->tail = &snake->body[snake->len];
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
    
    snake->len++;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	701a      	strb	r2, [r3, #0]
    snake->score++;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3306 	ldrb.w	r3, [r3, #774]	@ 0x306
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f883 2306 	strb.w	r2, [r3, #774]	@ 0x306

    return;
 8000eba:	bf00      	nop
}
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <snake_eat>:
/**
 * @brief eat the food
 * @param snake: the snake object
 * @param food: the food object
*/
void snake_eat(Snake_t* snake, Food_t* food) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
    snake_grow(snake);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ffb4 	bl	8000e3e <snake_grow>
    food_respawn(food);
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f000 f834 	bl	8000f44 <food_respawn>

    return;
 8000edc:	bf00      	nop
}
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <snake_get_score>:
/**
 * @brief get snake score
 * @param snake: snake object
 * @return snake score
*/
uint8_t snake_get_score(Snake_t snake) {
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	b490      	push	{r4, r7}
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	f107 0408 	add.w	r4, r7, #8
 8000eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return snake.score;
 8000ef2:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc90      	pop	{r4, r7}
 8000efc:	b004      	add	sp, #16
 8000efe:	4770      	bx	lr

08000f00 <snake_is_alive>:
/**
 * @brief check if snake is alive
 * @param snake: snake object
 * @return 1 if alive, 0 otherwise
*/
uint8_t snake_is_alive(Snake_t snake) {
 8000f00:	b084      	sub	sp, #16
 8000f02:	b490      	push	{r4, r7}
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f107 0408 	add.w	r4, r7, #8
 8000f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return snake.alive;
 8000f0e:	f897 330d 	ldrb.w	r3, [r7, #781]	@ 0x30d
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc90      	pop	{r4, r7}
 8000f18:	b004      	add	sp, #16
 8000f1a:	4770      	bx	lr

08000f1c <food_init>:

/**
 * @brief init the food object
 * @return the food object
*/
Food_t food_init() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
    Food_t food;
    food_respawn(&food);
 8000f22:	463b      	mov	r3, r7
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f80d 	bl	8000f44 <food_respawn>

    return food;
 8000f2a:	883b      	ldrh	r3, [r7, #0]
 8000f2c:	80bb      	strh	r3, [r7, #4]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	793a      	ldrb	r2, [r7, #4]
 8000f32:	f362 0307 	bfi	r3, r2, #0, #8
 8000f36:	797a      	ldrb	r2, [r7, #5]
 8000f38:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <food_respawn>:

/**
 * @brief respawn the food object
 * @param food: the food object
*/
void food_respawn(Food_t* food) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    // dont spawn on the border
    food->x = get_random(LEFT_BOUND + 1, RIGHT_BOUND - 1);
 8000f4c:	2163      	movs	r1, #99	@ 0x63
 8000f4e:	2009      	movs	r0, #9
 8000f50:	f000 f866 	bl	8001020 <get_random>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	701a      	strb	r2, [r3, #0]
    food->y = get_random(TOP_BOUND + 1, BOTTOM_BOUND - 1);
 8000f5c:	2131      	movs	r1, #49	@ 0x31
 8000f5e:	2004      	movs	r0, #4
 8000f60:	f000 f85e 	bl	8001020 <get_random>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	705a      	strb	r2, [r3, #1]

    food_draw(*food);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	431a      	orrs	r2, r3
 8000f76:	2300      	movs	r3, #0
 8000f78:	f362 030f 	bfi	r3, r2, #0, #16
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f805 	bl	8000f8c <food_draw>
    return;
 8000f82:	bf00      	nop
}
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <food_draw>:


/**
 * @brief draw the food object
*/
void food_draw(Food_t food) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	80b8      	strh	r0, [r7, #4]
    sprintf(snake_print_buffer, "[%u;%uH", food.y, food.x);
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	461a      	mov	r2, r3
 8000f98:	793b      	ldrb	r3, [r7, #4]
 8000f9a:	490b      	ldr	r1, [pc, #44]	@ (8000fc8 <food_draw+0x3c>)
 8000f9c:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <food_draw+0x40>)
 8000f9e:	f002 fbcb 	bl	8003738 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000fa2:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <food_draw+0x40>)
 8000fa4:	f000 feae 	bl	8001d04 <uart_send_escape>
    uart_send_escape("[5m"); // blinking
 8000fa8:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <food_draw+0x44>)
 8000faa:	f000 feab 	bl	8001d04 <uart_send_escape>
    uart_send_escape("[31m"); // red
 8000fae:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <food_draw+0x48>)
 8000fb0:	f000 fea8 	bl	8001d04 <uart_send_escape>
    uart_send_char('X');
 8000fb4:	2058      	movs	r0, #88	@ 0x58
 8000fb6:	f000 fe67 	bl	8001c88 <uart_send_char>
    uart_send_escape("[0m"); // back to default
 8000fba:	4807      	ldr	r0, [pc, #28]	@ (8000fd8 <food_draw+0x4c>)
 8000fbc:	f000 fea2 	bl	8001d04 <uart_send_escape>


    return;
 8000fc0:	bf00      	nop
}
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08004094 	.word	0x08004094
 8000fcc:	200001ac 	.word	0x200001ac
 8000fd0:	080040c0 	.word	0x080040c0
 8000fd4:	080040c4 	.word	0x080040c4
 8000fd8:	08004090 	.word	0x08004090

08000fdc <MX_RNG_Init>:

static void MX_RNG_Init(void);
RNG_HandleTypeDef hrng;


static void MX_RNG_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

    hrng.Instance = RNG;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_RNG_Init+0x20>)
 8000fe2:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <MX_RNG_Init+0x24>)
 8000fe4:	601a      	str	r2, [r3, #0]
    if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_RNG_Init+0x20>)
 8000fe8:	f002 fb4e 	bl	8003688 <HAL_RNG_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_RNG_Init+0x1a>
        Error_Handler();
 8000ff2:	f000 fcd3 	bl	800199c <Error_Handler>
    }
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000210 	.word	0x20000210
 8001000:	50060800 	.word	0x50060800

08001004 <rng_init>:

static uint32_t value;

void rng_init() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    MX_RNG_Init();
 8001008:	f7ff ffe8 	bl	8000fdc <MX_RNG_Init>
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN; // shpuld already be enabled by HAL
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <rng_init+0x18>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001010:	4a02      	ldr	r2, [pc, #8]	@ (800101c <rng_init+0x18>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001016:	64d3      	str	r3, [r2, #76]	@ 0x4c

    return;
 8001018:	bf00      	nop
}
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000

08001020 <get_random>:
 * @brief Get a random number between lower and upper
 * @param lower: the lower bound, inclusive
 * @param upper: the upper bound, inclusive
 * @return the random number
 */
uint32_t get_random(uint32_t lower, uint32_t upper) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    RNG->CR |= RNG_CR_RNGEN;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <get_random+0x54>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a11      	ldr	r2, [pc, #68]	@ (8001074 <get_random+0x54>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6013      	str	r3, [r2, #0]

    while (!(RNG->SR & RNG_SR_DRDY));
 8001036:	bf00      	nop
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <get_random+0x54>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f9      	beq.n	8001038 <get_random+0x18>
    value = RNG->DR;
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <get_random+0x54>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <get_random+0x58>)
 800104a:	6013      	str	r3, [r2, #0]

    return (value % (upper - lower + 1) + lower);
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <get_random+0x58>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6839      	ldr	r1, [r7, #0]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	1a8a      	subs	r2, r1, r2
 8001056:	3201      	adds	r2, #1
 8001058:	fbb3 f1f2 	udiv	r1, r3, r2
 800105c:	fb01 f202 	mul.w	r2, r1, r2
 8001060:	1a9a      	subs	r2, r3, r2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	50060800 	.word	0x50060800
 8001078:	20000220 	.word	0x20000220

0800107c <print_start_screen>:


/**
 * @brief Print the start screen
*/
void print_start_screen() {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
    uart_clear_screen();
 8001082:	f000 fe4d 	bl	8001d20 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 8001086:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <print_start_screen+0x38>)
 8001088:	f000 fe3c 	bl	8001d04 <uart_send_escape>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	e009      	b.n	80010a6 <print_start_screen+0x2a>
        uart_println(START_SCREEN[i]);
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <print_start_screen+0x3c>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fe22 	bl	8001ce4 <uart_println>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	ddf2      	ble.n	8001092 <print_start_screen+0x16>
    }

    return;
 80010ac:	bf00      	nop
}
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	080042d0 	.word	0x080042d0
 80010b8:	20000000 	.word	0x20000000

080010bc <print_game_over>:


/**
 * @brief Print the game over screen
*/
void print_game_over(uint8_t score) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09c      	sub	sp, #112	@ 0x70
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    char buf[100];
    uart_clear_screen();
 80010c6:	f000 fe2b 	bl	8001d20 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 80010ca:	4812      	ldr	r0, [pc, #72]	@ (8001114 <print_game_over+0x58>)
 80010cc:	f000 fe1a 	bl	8001d04 <uart_send_escape>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010d4:	e009      	b.n	80010ea <print_game_over+0x2e>
        uart_println(GAME_OVER_SCREEN[i]);
 80010d6:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <print_game_over+0x5c>)
 80010d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fe00 	bl	8001ce4 <uart_println>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 80010e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010e6:	3301      	adds	r3, #1
 80010e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	ddf2      	ble.n	80010d6 <print_game_over+0x1a>
    }
    sprintf(buf, "Your Score: %hu", score);
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4909      	ldr	r1, [pc, #36]	@ (800111c <print_game_over+0x60>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fb1d 	bl	8003738 <siprintf>
    uart_println(buf);
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fdee 	bl	8001ce4 <uart_println>

    print_high_scores();
 8001108:	f000 f80a 	bl	8001120 <print_high_scores>
    
    return;
 800110c:	bf00      	nop
}
 800110e:	3770      	adds	r7, #112	@ 0x70
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	080042d0 	.word	0x080042d0
 8001118:	20000028 	.word	0x20000028
 800111c:	080042d4 	.word	0x080042d4

08001120 <print_high_scores>:


/**
 * @brief Print the high score table
*/
void print_high_scores() {
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b0a0      	sub	sp, #128	@ 0x80
 8001124:	af00      	add	r7, sp, #0
    HighScore_t tmp;
    char uart_buf[100];

    uart_println(" ====================================");
 8001126:	481b      	ldr	r0, [pc, #108]	@ (8001194 <print_high_scores+0x74>)
 8001128:	f000 fddc 	bl	8001ce4 <uart_println>
    uart_println("| Name          | Score              |");
 800112c:	481a      	ldr	r0, [pc, #104]	@ (8001198 <print_high_scores+0x78>)
 800112e:	f000 fdd9 	bl	8001ce4 <uart_println>
    uart_println(" ====================================");
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <print_high_scores+0x74>)
 8001134:	f000 fdd6 	bl	8001ce4 <uart_println>

    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800113c:	e023      	b.n	8001186 <print_high_scores+0x66>
        // tmp = load_highscore(i);
        tmp = high_scores[i];
 800113e:	4a17      	ldr	r2, [pc, #92]	@ (800119c <print_high_scores+0x7c>)
 8001140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001142:	2116      	movs	r1, #22
 8001144:	fb01 f303 	mul.w	r3, r1, r3
 8001148:	4413      	add	r3, r2
 800114a:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 800114e:	461d      	mov	r5, r3
 8001150:	6828      	ldr	r0, [r5, #0]
 8001152:	6869      	ldr	r1, [r5, #4]
 8001154:	68aa      	ldr	r2, [r5, #8]
 8001156:	68eb      	ldr	r3, [r5, #12]
 8001158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115a:	6928      	ldr	r0, [r5, #16]
 800115c:	6020      	str	r0, [r4, #0]
 800115e:	8aab      	ldrh	r3, [r5, #20]
 8001160:	80a3      	strh	r3, [r4, #4]
        sprintf(uart_buf, "| %-13s | %-18u |", tmp.name, tmp.score);
 8001162:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001166:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800116a:	4638      	mov	r0, r7
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <print_high_scores+0x80>)
 800116e:	f002 fae3 	bl	8003738 <siprintf>
        uart_println(uart_buf);
 8001172:	463b      	mov	r3, r7
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fdb5 	bl	8001ce4 <uart_println>
        uart_println(" ====================================");
 800117a:	4806      	ldr	r0, [pc, #24]	@ (8001194 <print_high_scores+0x74>)
 800117c:	f000 fdb2 	bl	8001ce4 <uart_println>
    for (int i = 0; i < HIGH_SCORES_NUM; i++) {
 8001180:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001182:	3301      	adds	r3, #1
 8001184:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001186:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001188:	2b09      	cmp	r3, #9
 800118a:	ddd8      	ble.n	800113e <print_high_scores+0x1e>
    }

    return;
 800118c:	bf00      	nop
}
 800118e:	3780      	adds	r7, #128	@ 0x80
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	080042e4 	.word	0x080042e4
 8001198:	0800430c 	.word	0x0800430c
 800119c:	200000cc 	.word	0x200000cc
 80011a0:	08004334 	.word	0x08004334

080011a4 <i2c_pin_init>:
 *      Author: danny
 */

#include "eeprom.h"

void i2c_pin_init() {
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
    // PB8 - SCL
    // PB9 - SDA
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <i2c_pin_init+0x70>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <i2c_pin_init+0x70>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <i2c_pin_init+0x74>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <i2c_pin_init+0x74>)
 80011ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011be:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (I2C_AF << GPIO_AFRH_AFSEL8_Pos | I2C_AF << GPIO_AFRH_AFSEL9_Pos);
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <i2c_pin_init+0x74>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <i2c_pin_init+0x74>)
 80011c6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80011ca:	6253      	str	r3, [r2, #36]	@ 0x24

    GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <i2c_pin_init+0x74>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <i2c_pin_init+0x74>)
 80011d2:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80011d6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <i2c_pin_init+0x74>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <i2c_pin_init+0x74>)
 80011de:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80011e2:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9);
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <i2c_pin_init+0x74>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <i2c_pin_init+0x74>)
 80011ea:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80011ee:	60d3      	str	r3, [r2, #12]
    GPIOB->OTYPER |= GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9;
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <i2c_pin_init+0x74>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <i2c_pin_init+0x74>)
 80011f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80011fa:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <i2c_pin_init+0x74>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <i2c_pin_init+0x74>)
 8001202:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001206:	6093      	str	r3, [r2, #8]

    return;
 8001208:	bf00      	nop
}
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	48000400 	.word	0x48000400

0800121c <eeprom_init>:


void eeprom_init() {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    i2c_pin_init();
 8001220:	f7ff ffc0 	bl	80011a4 <i2c_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <eeprom_init+0x5c>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	4a13      	ldr	r2, [pc, #76]	@ (8001278 <eeprom_init+0x5c>)
 800122a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800122e:	6593      	str	r3, [r2, #88]	@ 0x58
    
    // clear PE
    I2C1->CR1 &= ~I2C_CR1_PE;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <eeprom_init+0x60>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a11      	ldr	r2, [pc, #68]	@ (800127c <eeprom_init+0x60>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]

    // configure ANFOFF DNF
    I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <eeprom_init+0x60>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <eeprom_init+0x60>)
 8001242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001246:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_DNF;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <eeprom_init+0x60>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <eeprom_init+0x60>)
 800124e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001252:	6013      	str	r3, [r2, #0]

    I2C1->TIMINGR = MAGIC_IOC_TIMING;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <eeprom_init+0x60>)
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <eeprom_init+0x64>)
 8001258:	611a      	str	r2, [r3, #16]

    // configure NOSTRETCH
    I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <eeprom_init+0x60>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <eeprom_init+0x60>)
 8001260:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001264:	6013      	str	r3, [r2, #0]

    // set PE
    I2C1->CR1 |= I2C_CR1_PE;
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <eeprom_init+0x60>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <eeprom_init+0x60>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6013      	str	r3, [r2, #0]


    return;
 8001272:	bf00      	nop
}
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40005400 	.word	0x40005400
 8001280:	00300f38 	.word	0x00300f38

08001284 <eeprom_store_byte>:


void eeprom_store_byte(uint8_t data, uint16_t addr) {
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	80bb      	strh	r3, [r7, #4]
    // start -> control -> upper addr -> lower addr -> data -> stop

    // configure i2c sending register
    while (I2C1->ISR & I2C_ISR_BUSY);
 8001294:	bf00      	nop
 8001296:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <eeprom_store_byte+0xc8>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <eeprom_store_byte+0x12>
    I2C1->ICR |= I2C_ICR_STOPCF; // clear stop flag ? do i need this here?
 80012a2:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <eeprom_store_byte+0xc8>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a29      	ldr	r2, [pc, #164]	@ (800134c <eeprom_store_byte+0xc8>)
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	61d3      	str	r3, [r2, #28]
    I2C1->CR2 = (ADDRING_MODE << I2C_CR2_ADD10_Pos) |
 80012ae:	4b27      	ldr	r3, [pc, #156]	@ (800134c <eeprom_store_byte+0xc8>)
 80012b0:	4a27      	ldr	r2, [pc, #156]	@ (8001350 <eeprom_store_byte+0xcc>)
 80012b2:	605a      	str	r2, [r3, #4]
                (1 << I2C_CR2_START_Pos) | 
                (0 << I2C_CR2_AUTOEND_Pos) | 
                (BYTES_PER_STORE << I2C_CR2_NBYTES_Pos);

    // send addr upper byte
    while (!(I2C1->ISR & I2C_ISR_TXE));
 80012b4:	bf00      	nop
 80012b6:	4b25      	ldr	r3, [pc, #148]	@ (800134c <eeprom_store_byte+0xc8>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f9      	beq.n	80012b6 <eeprom_store_byte+0x32>
    I2C1->TXDR = (addr >> 8) & 0xFF; // send addr upper byte
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4a20      	ldr	r2, [pc, #128]	@ (800134c <eeprom_store_byte+0xc8>)
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	6293      	str	r3, [r2, #40]	@ 0x28

    // send addr lower byte
    while (!(I2C1->ISR & I2C_ISR_TXE));
 80012ce:	bf00      	nop
 80012d0:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <eeprom_store_byte+0xc8>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f9      	beq.n	80012d0 <eeprom_store_byte+0x4c>
    I2C1->TXDR = addr & 0xFF; // send addr lower byte
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <eeprom_store_byte+0xc8>)
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	6293      	str	r3, [r2, #40]	@ 0x28

    // send data byte 
    while (!(I2C1->ISR & I2C_ISR_TXE));
 80012e4:	bf00      	nop
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <eeprom_store_byte+0xc8>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f9      	beq.n	80012e6 <eeprom_store_byte+0x62>
    I2C1->TXDR = data; // send data byte
 80012f2:	4a16      	ldr	r2, [pc, #88]	@ (800134c <eeprom_store_byte+0xc8>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	6293      	str	r3, [r2, #40]	@ 0x28

    // end of transmission
    while (!(I2C1->ISR & I2C_ISR_TC));
 80012f8:	bf00      	nop
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <eeprom_store_byte+0xc8>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f9      	beq.n	80012fa <eeprom_store_byte+0x76>
    I2C1->CR2 |= I2C_CR2_STOP;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <eeprom_store_byte+0xc8>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a10      	ldr	r2, [pc, #64]	@ (800134c <eeprom_store_byte+0xc8>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6053      	str	r3, [r2, #4]
    while (I2C1->ISR & I2C_ISR_STOPF);
 8001312:	bf00      	nop
 8001314:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <eeprom_store_byte+0xc8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f9      	bne.n	8001314 <eeprom_store_byte+0x90>
    I2C1->ICR |= I2C_ICR_STOPCF;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <eeprom_store_byte+0xc8>)
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	4a09      	ldr	r2, [pc, #36]	@ (800134c <eeprom_store_byte+0xc8>)
 8001326:	f043 0320 	orr.w	r3, r3, #32
 800132a:	61d3      	str	r3, [r2, #28]

    for (uint32_t i=0; i<CPU_FREQ / 1000 * 5; i++); // 5ms delay for write to process
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e002      	b.n	8001338 <eeprom_store_byte+0xb4>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <eeprom_store_byte+0xd0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d9f8      	bls.n	8001332 <eeprom_store_byte+0xae>


    return;
 8001340:	bf00      	nop
}
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40005400 	.word	0x40005400
 8001350:	000320a2 	.word	0x000320a2
 8001354:	000270ff 	.word	0x000270ff

08001358 <eeprom_load_byte>:

uint8_t eeprom_load_byte(uint16_t addr) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
    uint8_t data;

    // configure i2c sending register
    while (I2C1->ISR & I2C_ISR_BUSY);
 8001362:	bf00      	nop
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <eeprom_load_byte+0x90>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f9      	bne.n	8001364 <eeprom_load_byte+0xc>
    I2C1->CR2 = (ADDRING_MODE << I2C_CR2_ADD10_Pos) |
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <eeprom_load_byte+0x90>)
 8001372:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <eeprom_load_byte+0x94>)
 8001374:	605a      	str	r2, [r3, #4]
                (1 << I2C_CR2_START_Pos) | 
                (0 << I2C_CR2_AUTOEND_Pos) | 
                (BYTES_PER_ADDR << I2C_CR2_NBYTES_Pos);

    // send addr upper byte
    while (!(I2C1->ISR & I2C_ISR_TXE));
 8001376:	bf00      	nop
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <eeprom_load_byte+0x90>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f9      	beq.n	8001378 <eeprom_load_byte+0x20>
    I2C1->TXDR = (addr >> 8) & 0xFF;
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	b29b      	uxth	r3, r3
 800138a:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <eeprom_load_byte+0x90>)
 800138c:	b2db      	uxtb	r3, r3
 800138e:	6293      	str	r3, [r2, #40]	@ 0x28

    // send addr lower byte
    while (!(I2C1->ISR & I2C_ISR_TXE));
 8001390:	bf00      	nop
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <eeprom_load_byte+0x90>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f9      	beq.n	8001392 <eeprom_load_byte+0x3a>
    I2C1->TXDR = addr & 0xFF;
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <eeprom_load_byte+0x90>)
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	6293      	str	r3, [r2, #40]	@ 0x28

    // wait
    while (!(I2C1->ISR & I2C_ISR_TC));
 80013a6:	bf00      	nop
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <eeprom_load_byte+0x90>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f9      	beq.n	80013a8 <eeprom_load_byte+0x50>

    // configure i2c reg to read
    I2C1->CR2 = (ADDRING_MODE << I2C_CR2_ADD10_Pos) |
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <eeprom_load_byte+0x90>)
 80013b6:	4a0e      	ldr	r2, [pc, #56]	@ (80013f0 <eeprom_load_byte+0x98>)
 80013b8:	605a      	str	r2, [r3, #4]
                (1 << I2C_CR2_RD_WRN_Pos) | 
                (1 << I2C_CR2_START_Pos) | 
                (0 << I2C_CR2_AUTOEND_Pos) | 
                (BYTES_PER_LOAD << I2C_CR2_NBYTES_Pos);

    while (!(I2C1->ISR & I2C_ISR_RXNE));
 80013ba:	bf00      	nop
 80013bc:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <eeprom_load_byte+0x90>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f9      	beq.n	80013bc <eeprom_load_byte+0x64>
    data = I2C1->RXDR;
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <eeprom_load_byte+0x90>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	73fb      	strb	r3, [r7, #15]

    I2C1->CR2 |= I2C_CR2_NACK | I2C_CR2_STOP;
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <eeprom_load_byte+0x90>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <eeprom_load_byte+0x90>)
 80013d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d8:	6053      	str	r3, [r2, #4]

    return data;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40005400 	.word	0x40005400
 80013ec:	000220a2 	.word	0x000220a2
 80013f0:	000124a2 	.word	0x000124a2

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	@ (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db12      	blt.n	8001468 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	490a      	ldr	r1, [pc, #40]	@ (8001474 <__NVIC_DisableIRQ+0x44>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	3320      	adds	r3, #32
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800145c:	f3bf 8f4f 	dsb	sy
}
 8001460:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001462:	f3bf 8f6f 	isb	sy
}
 8001466:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100

08001478 <main>:
void change_fps(uint32_t fps);
volatile int start_frame = 0;

void SystemClock_Config(void);

int main(void) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	f2ad 6d34 	subw	sp, sp, #1588	@ 0x634
 800147e:	afc0      	add	r7, sp, #768	@ 0x300
    HAL_Init();
 8001480:	f000 fcbf 	bl	8001e02 <HAL_Init>
    SystemClock_Config();
 8001484:	f000 fa38 	bl	80018f8 <SystemClock_Config>

    rng_init();
 8001488:	f7ff fdbc 	bl	8001004 <rng_init>
    uart_init();
 800148c:	f000 fbd2 	bl	8001c34 <uart_init>
    joystick_init();
 8001490:	f7ff f93a 	bl	8000708 <joystick_init>
    highscore_init();
 8001494:	f7fe feec 	bl	8000270 <highscore_init>

    Snake_t snake;
    Food_t food;
    GameState_t state = START;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
    print_start_screen();
 800149e:	f7ff fded 	bl	800107c <print_start_screen>
    uint32_t fps;
    HighScore_t highscore;

    int first_move = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    while (1) {
        switch (state) {
 80014a8:	f897 332f 	ldrb.w	r3, [r7, #815]	@ 0x32f
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	f000 80f9 	beq.w	80016a4 <main+0x22c>
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	dcf8      	bgt.n	80014a8 <main+0x30>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <main+0x48>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d016      	beq.n	80014ec <main+0x74>
 80014be:	e7f3      	b.n	80014a8 <main+0x30>
        case START:
            if (continue_on()) {
 80014c0:	f000 f9c0 	bl	8001844 <continue_on>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8101 	beq.w	80016ce <main+0x256>
                state = PLAYING;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
                first_move = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
                start_new_game(&snake, &food, &fps);
 80014d8:	f107 0218 	add.w	r2, r7, #24
 80014dc:	f107 011c 	add.w	r1, r7, #28
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f901 	bl	80016ec <start_new_game>
            }
            break;
 80014ea:	e0f0      	b.n	80016ce <main+0x256>
        case PLAYING:
            if (!first_move) {
 80014ec:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10c      	bne.n	800150e <main+0x96>
                if (snake_change_dir(&snake)) {
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fc09 	bl	8000d10 <snake_change_dir>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80e6 	beq.w	80016d2 <main+0x25a>
                    first_move = 1;
 8001506:	2301      	movs	r3, #1
 8001508:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
                    break;
 800150c:	e0e8      	b.n	80016e0 <main+0x268>
                }
                continue;
            }

            if (!start_frame) continue;
 800150e:	4b75      	ldr	r3, [pc, #468]	@ (80016e4 <main+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80df 	beq.w	80016d6 <main+0x25e>
            start_frame = 0;
 8001518:	4b72      	ldr	r3, [pc, #456]	@ (80016e4 <main+0x26c>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

            snake_move(&snake);
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff faf8 	bl	8000b18 <snake_move>
            if (snake_check_food(snake, food)) {
 8001528:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800152c:	f5a3 7444 	sub.w	r4, r3, #784	@ 0x310
 8001530:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001534:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	f8ad 32f8 	strh.w	r3, [sp, #760]	@ 0x2f8
 800153e:	4668      	mov	r0, sp
 8001540:	f104 0310 	add.w	r3, r4, #16
 8001544:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8001548:	4619      	mov	r1, r3
 800154a:	f002 f949 	bl	80037e0 <memcpy>
 800154e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001552:	f7ff fc5d 	bl	8000e10 <snake_check_food>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d025      	beq.n	80015a8 <main+0x130>
                snake_eat(&snake, &food);
 800155c:	f107 021c 	add.w	r2, r7, #28
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fcad 	bl	8000ec6 <snake_eat>
                fps *= SPEED_UP_FACTOR;
 800156c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001570:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80016e8 <main+0x270>
 8001582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158a:	ee17 2a90 	vmov	r2, s15
 800158e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001592:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001596:	601a      	str	r2, [r3, #0]
                change_fps(fps);
 8001598:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800159c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f956 	bl	8001854 <change_fps>
            }
            grid_draw(snake);
 80015a8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80015ac:	f5a3 7444 	sub.w	r4, r3, #784	@ 0x310
 80015b0:	4668      	mov	r0, sp
 80015b2:	f104 0310 	add.w	r3, r4, #16
 80015b6:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 80015ba:	4619      	mov	r1, r3
 80015bc:	f002 f910 	bl	80037e0 <memcpy>
 80015c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015c4:	f7ff f988 	bl	80008d8 <grid_draw>

            if (!snake_is_alive(snake)) {
 80015c8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80015cc:	f5a3 7444 	sub.w	r4, r3, #784	@ 0x310
 80015d0:	4668      	mov	r0, sp
 80015d2:	f104 0310 	add.w	r3, r4, #16
 80015d6:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 80015da:	4619      	mov	r1, r3
 80015dc:	f002 f900 	bl	80037e0 <memcpy>
 80015e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015e4:	f7ff fc8c 	bl	8000f00 <snake_is_alive>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d175      	bne.n	80016da <main+0x262>
                if (is_a_highscore(snake_get_score(snake))) {
 80015ee:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80015f2:	f5a3 7444 	sub.w	r4, r3, #784	@ 0x310
 80015f6:	4668      	mov	r0, sp
 80015f8:	f104 0310 	add.w	r3, r4, #16
 80015fc:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8001600:	4619      	mov	r1, r3
 8001602:	f002 f8ed 	bl	80037e0 <memcpy>
 8001606:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800160a:	f7ff fc6b 	bl	8000ee4 <snake_get_score>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe fed5 	bl	80003c0 <is_a_highscore>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02b      	beq.n	8001674 <main+0x1fc>
                    if (get_player_name(highscore.name)) {
 800161c:	463b      	mov	r3, r7
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f88a 	bl	8001738 <get_player_name>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d024      	beq.n	8001674 <main+0x1fc>
                        highscore.score = snake_get_score(snake);
 800162a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800162e:	f5a3 7444 	sub.w	r4, r3, #784	@ 0x310
 8001632:	4668      	mov	r0, sp
 8001634:	f104 0310 	add.w	r3, r4, #16
 8001638:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 800163c:	4619      	mov	r1, r3
 800163e:	f002 f8cf 	bl	80037e0 <memcpy>
 8001642:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001646:	f7ff fc4d 	bl	8000ee4 <snake_get_score>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001652:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001656:	755a      	strb	r2, [r3, #21]
                        update_highscores(highscore);
 8001658:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800165c:	f5a3 724c 	sub.w	r2, r3, #816	@ 0x330
 8001660:	466b      	mov	r3, sp
 8001662:	f102 0110 	add.w	r1, r2, #16
 8001666:	c903      	ldmia	r1, {r0, r1}
 8001668:	6018      	str	r0, [r3, #0]
 800166a:	3304      	adds	r3, #4
 800166c:	8019      	strh	r1, [r3, #0]
 800166e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8001670:	f7fe febc 	bl	80003ec <update_highscores>
                    }
                }
                state = GAME_OVER;
 8001674:	2302      	movs	r3, #2
 8001676:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
                print_game_over(snake_get_score(snake));
 800167a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800167e:	f5a3 7444 	sub.w	r4, r3, #784	@ 0x310
 8001682:	4668      	mov	r0, sp
 8001684:	f104 0310 	add.w	r3, r4, #16
 8001688:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 800168c:	4619      	mov	r1, r3
 800168e:	f002 f8a7 	bl	80037e0 <memcpy>
 8001692:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001696:	f7ff fc25 	bl	8000ee4 <snake_get_score>
 800169a:	4603      	mov	r3, r0
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd0d 	bl	80010bc <print_game_over>
            }
            break;
 80016a2:	e01a      	b.n	80016da <main+0x262>
        case GAME_OVER:
            if (continue_on()) {
 80016a4:	f000 f8ce 	bl	8001844 <continue_on>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d017      	beq.n	80016de <main+0x266>
            	state = PLAYING;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
            	first_move = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            	start_new_game(&snake, &food, &fps);
 80016ba:	f107 0218 	add.w	r2, r7, #24
 80016be:	f107 011c 	add.w	r1, r7, #28
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f810 	bl	80016ec <start_new_game>
            }
            break;
 80016cc:	e007      	b.n	80016de <main+0x266>
            break;
 80016ce:	bf00      	nop
 80016d0:	e6ea      	b.n	80014a8 <main+0x30>
                continue;
 80016d2:	bf00      	nop
 80016d4:	e6e8      	b.n	80014a8 <main+0x30>
            if (!start_frame) continue;
 80016d6:	bf00      	nop
 80016d8:	e6e6      	b.n	80014a8 <main+0x30>
            break;
 80016da:	bf00      	nop
 80016dc:	e6e4      	b.n	80014a8 <main+0x30>
            break;
 80016de:	bf00      	nop
        switch (state) {
 80016e0:	e6e2      	b.n	80014a8 <main+0x30>
 80016e2:	bf00      	nop
 80016e4:	20000224 	.word	0x20000224
 80016e8:	3f933333 	.word	0x3f933333

080016ec <start_new_game>:

    return 0;
}


void start_new_game(Snake_t* snake, Food_t* food, uint32_t* fps) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
    grid_init(get_highest_score());
 80016f8:	f7fe ff00 	bl	80004fc <get_highest_score>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f868 	bl	80007d4 <grid_init>
    snake_init(snake);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff f95b 	bl	80009c0 <snake_init>
    *food = food_init();
 800170a:	f7ff fc07 	bl	8000f1c <food_init>
 800170e:	4602      	mov	r2, r0
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	b212      	sxth	r2, r2
 8001714:	4611      	mov	r1, r2
 8001716:	7019      	strb	r1, [r3, #0]
 8001718:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800171c:	705a      	strb	r2, [r3, #1]
    *fps = START_FPS;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	220a      	movs	r2, #10
 8001722:	601a      	str	r2, [r3, #0]
    change_fps(*fps);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f893 	bl	8001854 <change_fps>

    return;
 800172e:	bf00      	nop
}
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <get_player_name>:


int8_t get_player_name(char* name) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    char c;
    int i = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
    uart_clear_screen();
 8001744:	f000 faec 	bl	8001d20 <uart_clear_screen>
    uart_println("CONGRATS");
 8001748:	482d      	ldr	r0, [pc, #180]	@ (8001800 <get_player_name+0xc8>)
 800174a:	f000 facb 	bl	8001ce4 <uart_println>
    uart_println("You set a new record");
 800174e:	482d      	ldr	r0, [pc, #180]	@ (8001804 <get_player_name+0xcc>)
 8001750:	f000 fac8 	bl	8001ce4 <uart_println>
    uart_println("Enter your name for the highscore:");
 8001754:	482c      	ldr	r0, [pc, #176]	@ (8001808 <get_player_name+0xd0>)
 8001756:	f000 fac5 	bl	8001ce4 <uart_println>


    while (1) {
        if (uart_check_flag()) {
 800175a:	f000 fb05 	bl	8001d68 <uart_check_flag>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0fa      	beq.n	800175a <get_player_name+0x22>
            uart_clear_flag();
 8001764:	f000 fb0c 	bl	8001d80 <uart_clear_flag>
            c = get_uart_char();
 8001768:	f000 fb16 	bl	8001d98 <get_uart_char>
 800176c:	4603      	mov	r3, r0
 800176e:	72fb      	strb	r3, [r7, #11]

            if (i == 0 && c == '\r') {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d104      	bne.n	8001780 <get_player_name+0x48>
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	2b0d      	cmp	r3, #13
 800177a:	d101      	bne.n	8001780 <get_player_name+0x48>
                return 0;
 800177c:	2300      	movs	r3, #0
 800177e:	e03a      	b.n	80017f6 <get_player_name+0xbe>
            }
            else if (c == ENTER_CHAR) {
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	2b0d      	cmp	r3, #13
 8001784:	d10c      	bne.n	80017a0 <get_player_name+0x68>
                uart_println(" ");
 8001786:	4821      	ldr	r0, [pc, #132]	@ (800180c <get_player_name+0xd4>)
 8001788:	f000 faac 	bl	8001ce4 <uart_println>
                uart_println("Give it a sec, memory is being VERY slow");
 800178c:	4820      	ldr	r0, [pc, #128]	@ (8001810 <get_player_name+0xd8>)
 800178e:	f000 faa9 	bl	8001ce4 <uart_println>
                name[i] = '\0';
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
                return 1;
 800179c:	2301      	movs	r3, #1
 800179e:	e02a      	b.n	80017f6 <get_player_name+0xbe>
            }
            else if (c == BACKSPACE_CHAR) {
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80017a4:	d10c      	bne.n	80017c0 <get_player_name+0x88>
                if (i > 0) {
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dd15      	ble.n	80017d8 <get_player_name+0xa0>
                    i--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
                    uart_send_escape("[1D");
 80017b2:	4818      	ldr	r0, [pc, #96]	@ (8001814 <get_player_name+0xdc>)
 80017b4:	f000 faa6 	bl	8001d04 <uart_send_escape>
                    uart_send_escape("[K");
 80017b8:	4817      	ldr	r0, [pc, #92]	@ (8001818 <get_player_name+0xe0>)
 80017ba:	f000 faa3 	bl	8001d04 <uart_send_escape>
 80017be:	e00b      	b.n	80017d8 <get_player_name+0xa0>
                }
            }
            else {
                name[i] = c;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	7afa      	ldrb	r2, [r7, #11]
 80017c8:	701a      	strb	r2, [r3, #0]
                uart_send_char(c);
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fa5b 	bl	8001c88 <uart_send_char>
                i++;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
            }

            if (i == MAX_NAME_LEN - 1) {
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b14      	cmp	r3, #20
 80017dc:	d1bd      	bne.n	800175a <get_player_name+0x22>
                uart_println(" ");
 80017de:	480b      	ldr	r0, [pc, #44]	@ (800180c <get_player_name+0xd4>)
 80017e0:	f000 fa80 	bl	8001ce4 <uart_println>
                uart_println("Give it a sec, memory is being VERY slow");
 80017e4:	480a      	ldr	r0, [pc, #40]	@ (8001810 <get_player_name+0xd8>)
 80017e6:	f000 fa7d 	bl	8001ce4 <uart_println>
                name[i] = '\0';
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
                return 1;
 80017f4:	2301      	movs	r3, #1
            }
        }
    }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	08004348 	.word	0x08004348
 8001804:	08004354 	.word	0x08004354
 8001808:	0800436c 	.word	0x0800436c
 800180c:	08004390 	.word	0x08004390
 8001810:	08004394 	.word	0x08004394
 8001814:	080043c0 	.word	0x080043c0
 8001818:	080043c4 	.word	0x080043c4

0800181c <TIM2_IRQHandler>:


void TIM2_IRQHandler() {
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
    start_frame = 1;
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <TIM2_IRQHandler+0x24>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]
    TIM2->SR &= ~TIM_SR_UIF;
 8001826:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6113      	str	r3, [r2, #16]

    return;
 8001836:	bf00      	nop
}
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000224 	.word	0x20000224

08001844 <continue_on>:


int continue_on() {
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    return get_joystick_button();
 8001848:	f7fe ff9a 	bl	8000780 <get_joystick_button>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <change_fps>:


void change_fps(uint32_t fps) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <change_fps+0x98>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	4a22      	ldr	r2, [pc, #136]	@ (80018ec <change_fps+0x98>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 8001868:	201c      	movs	r0, #28
 800186a:	f7ff fde1 	bl	8001430 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 800186e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 800187e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~TIM_SR_UIF;  
 8001886:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6113      	str	r3, [r2, #16]
    
    
    TIM2->ARR = CPU_FREQ / fps;
 8001896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800189a:	4915      	ldr	r1, [pc, #84]	@ (80018f0 <change_fps+0x9c>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 80018a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018a8:	2200      	movs	r2, #0
 80018aa:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER |= TIM_DIER_UIE;
 80018ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	60d3      	str	r3, [r2, #12]

    DBGMCU->APB1FZR1 |= 1;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <change_fps+0xa0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <change_fps+0xa0>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(TIM2_IRQn);
 80018c8:	201c      	movs	r0, #28
 80018ca:	f7ff fd93 	bl	80013f4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80018ce:	b662      	cpsie	i
}
 80018d0:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 80018d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6013      	str	r3, [r2, #0]
    return;
 80018e2:	bf00      	nop


}
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	01e84800 	.word	0x01e84800
 80018f4:	e0042000 	.word	0xe0042000

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b096      	sub	sp, #88	@ 0x58
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	2244      	movs	r2, #68	@ 0x44
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f001 ff36 	bl	8003778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800191a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800191e:	f000 fbd9 	bl	80020d4 <HAL_PWREx_ControlVoltageScaling>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001928:	f000 f838 	bl	800199c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800192c:	2310      	movs	r3, #16
 800192e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001930:	2301      	movs	r3, #1
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001938:	2360      	movs	r3, #96	@ 0x60
 800193a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	2302      	movs	r3, #2
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001940:	2301      	movs	r3, #1
 8001942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001948:	2310      	movs	r3, #16
 800194a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800194c:	2307      	movs	r3, #7
 800194e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001950:	2302      	movs	r3, #2
 8001952:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001954:	2302      	movs	r3, #2
 8001956:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fc0f 	bl	8002180 <HAL_RCC_OscConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001968:	f000 f818 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196c:	230f      	movs	r3, #15
 800196e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001970:	2303      	movs	r3, #3
 8001972:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001980:	463b      	mov	r3, r7
 8001982:	2101      	movs	r1, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f000 ffd7 	bl	8002938 <HAL_RCC_ClockConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001990:	f000 f804 	bl	800199c <Error_Handler>
  }
}
 8001994:	bf00      	nop
 8001996:	3758      	adds	r7, #88	@ 0x58
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <Error_Handler+0x8>

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_MspInit+0x44>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <HAL_MspInit+0x44>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_MspInit+0x44>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_MspInit+0x44>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <HAL_MspInit+0x44>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_MspInit+0x44>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0a6      	sub	sp, #152	@ 0x98
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	2288      	movs	r2, #136	@ 0x88
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 feb9 	bl	8003778 <memset>
  if(hrng->Instance==RNG)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_RNG_MspInit+0x80>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d12b      	bne.n	8001a68 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001a10:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001a16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001a26:	2310      	movs	r3, #16
 8001a28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001a36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 f965 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001a4c:	f7ff ffa6 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_RNG_MspInit+0x84>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <HAL_RNG_MspInit+0x84>)
 8001a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_RNG_MspInit+0x84>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3798      	adds	r7, #152	@ 0x98
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	50060800 	.word	0x50060800
 8001a74:	40021000 	.word	0x40021000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f000 f9ed 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f001 fe3e 	bl	8003788 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20018000 	.word	0x20018000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000228 	.word	0x20000228
 8001b40:	20000380 	.word	0x20000380

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001ba8:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <uart_pin_init+0x8c>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bac:	4a20      	ldr	r2, [pc, #128]	@ (8001c30 <uart_pin_init+0x8c>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8001bb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bc2:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8001bc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bce:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001bd2:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001bd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001be2:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001be4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bee:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001bf2:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8001bf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bfe:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001c02:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8001c04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c12:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8001c14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c1e:	f023 030c 	bic.w	r3, r3, #12
 8001c22:	6053      	str	r3, [r2, #4]
    return;
 8001c24:	bf00      	nop
}
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
    uart_pin_init();
 8001c38:	f7ff ffb4 	bl	8001ba4 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <uart_init+0x48>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	4a0e      	ldr	r2, [pc, #56]	@ (8001c7c <uart_init+0x48>)
 8001c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c46:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 8001c48:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <uart_init+0x4c>)
 8001c4a:	222c      	movs	r2, #44	@ 0x2c
 8001c4c:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <uart_init+0x4c>)
 8001c50:	f240 1215 	movw	r2, #277	@ 0x115
 8001c54:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 8001c56:	2026      	movs	r0, #38	@ 0x26
 8001c58:	f7ff ff86 	bl	8001b68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5c:	b662      	cpsie	i
}
 8001c5e:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <uart_init+0x4c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <uart_init+0x4c>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 8001c6c:	f000 f858 	bl	8001d20 <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 8001c70:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <uart_init+0x50>)
 8001c72:	f000 f847 	bl	8001d04 <uart_send_escape>
    return;
 8001c76:	bf00      	nop
}
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40004400 	.word	0x40004400
 8001c84:	080043c8 	.word	0x080043c8

08001c88 <uart_send_char>:

void uart_send_char(char c) {
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8001c92:	bf00      	nop
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <uart_send_char+0x2c>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f9      	beq.n	8001c94 <uart_send_char+0xc>
    USART2->TDR = c;
 8001ca0:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <uart_send_char+0x2c>)
 8001ca2:	79fa      	ldrb	r2, [r7, #7]
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8001ca8:	bf00      	nop
}
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <uart_send_string>:

void uart_send_string(const char* str) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8001cc0:	e007      	b.n	8001cd2 <uart_send_string+0x1a>
        uart_send_char(*str);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ffde 	bl	8001c88 <uart_send_char>
        str++;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f3      	bne.n	8001cc2 <uart_send_string+0xa>
    }

    return;
 8001cda:	bf00      	nop
}
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <uart_println>:

void uart_println(const char* str) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    uart_send_string(str);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffe3 	bl	8001cb8 <uart_send_string>
    uart_send_escape("[1E");
 8001cf2:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <uart_println+0x1c>)
 8001cf4:	f000 f806 	bl	8001d04 <uart_send_escape>

    return;
 8001cf8:	bf00      	nop
}
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	080043d0 	.word	0x080043d0

08001d04 <uart_send_escape>:

void uart_send_escape(const char* str) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 8001d0c:	201b      	movs	r0, #27
 8001d0e:	f7ff ffbb 	bl	8001c88 <uart_send_char>
    uart_send_string(str);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffd0 	bl	8001cb8 <uart_send_string>

    return;
 8001d18:	bf00      	nop
}
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <uart_clear_screen>:


void uart_clear_screen(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 8001d24:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <uart_clear_screen+0x14>)
 8001d26:	f7ff ffed 	bl	8001d04 <uart_send_escape>
    uart_send_escape("[H");
 8001d2a:	4803      	ldr	r0, [pc, #12]	@ (8001d38 <uart_clear_screen+0x18>)
 8001d2c:	f7ff ffea 	bl	8001d04 <uart_send_escape>

    return;
 8001d30:	bf00      	nop
}
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	080043d4 	.word	0x080043d4
 8001d38:	080043d8 	.word	0x080043d8

08001d3c <USART2_IRQHandler>:
    uart_send_escape(buf);

    return;
}

void USART2_IRQHandler(void) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <USART2_IRQHandler+0x20>)
 8001d42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <USART2_IRQHandler+0x24>)
 8001d4a:	701a      	strb	r2, [r3, #0]
    flag = 1;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <USART2_IRQHandler+0x28>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    return;
 8001d52:	bf00      	nop
}
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	20000230 	.word	0x20000230
 8001d64:	2000022c 	.word	0x2000022c

08001d68 <uart_check_flag>:

int uart_check_flag() {
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
    return flag;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <uart_check_flag+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000022c 	.word	0x2000022c

08001d80 <uart_clear_flag>:

void uart_clear_flag() {
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
    flag = 0;
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <uart_clear_flag+0x14>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

    return;
 8001d8a:	bf00      	nop
}
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	2000022c 	.word	0x2000022c

08001d98 <get_uart_char>:

char get_uart_char() {
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
    return value;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <get_uart_char+0x14>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20000230 	.word	0x20000230

08001db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001db4:	f7ff fec6 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <LoopForever+0x6>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <LoopForever+0xe>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dfc <LoopForever+0x16>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dde:	f001 fcd9 	bl	8003794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de2:	f7ff fb49 	bl	8001478 <main>

08001de6 <LoopForever>:

LoopForever:
    b LoopForever
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001de8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001df4:	08004468 	.word	0x08004468
  ldr r2, =_sbss
 8001df8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001dfc:	20000380 	.word	0x20000380

08001e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>

08001e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f91f 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f80e 	bl	8001e34 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	e001      	b.n	8001e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e24:	f7ff fdc0 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e40:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_InitTick+0x6c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_InitTick+0x70>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <HAL_InitTick+0x6c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f91d 	bl	800209e <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d809      	bhi.n	8001e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f8f5 	bl	8002066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <HAL_InitTick+0x74>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e007      	b.n	8001e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e004      	b.n	8001e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e001      	b.n	8001e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000058 	.word	0x20000058
 8001ea4:	20000050 	.word	0x20000050
 8001ea8:	20000054 	.word	0x20000054

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000058 	.word	0x20000058
 8001ed0:	20000234 	.word	0x20000234

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000234 	.word	0x20000234

08001eec <__NVIC_SetPriorityGrouping>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff47 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff5c 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffb0 	bl	800200c <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020e2:	d130      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f0:	d038      	beq.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f2:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002102:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2232      	movs	r2, #50	@ 0x32
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0c9b      	lsrs	r3, r3, #18
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002118:	e002      	b.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3b01      	subs	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212c:	d102      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x60>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f2      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002140:	d110      	bne.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00f      	b.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002152:	d007      	beq.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800215c:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002162:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40007000 	.word	0x40007000
 8002178:	20000050 	.word	0x20000050
 800217c:	431bde83 	.word	0x431bde83

08002180 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e3ca      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	4b97      	ldr	r3, [pc, #604]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219c:	4b94      	ldr	r3, [pc, #592]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80e4 	beq.w	800237c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_RCC_OscConfig+0x4a>
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	f040 808b 	bne.w	80022d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 8087 	bne.w	80022d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ca:	4b89      	ldr	r3, [pc, #548]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x62>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e3a2      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	4b82      	ldr	r3, [pc, #520]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_RCC_OscConfig+0x7c>
 80021f2:	4b7f      	ldr	r3, [pc, #508]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021fa:	e005      	b.n	8002208 <HAL_RCC_OscConfig+0x88>
 80021fc:	4b7c      	ldr	r3, [pc, #496]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80021fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002208:	4293      	cmp	r3, r2
 800220a:	d223      	bcs.n	8002254 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fd1d 	bl	8002c50 <RCC_SetFlashLatencyFromMSIRange>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e383      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002220:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a72      	ldr	r2, [pc, #456]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002226:	f043 0308 	orr.w	r3, r3, #8
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b70      	ldr	r3, [pc, #448]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	496d      	ldr	r1, [pc, #436]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223e:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	4968      	ldr	r1, [pc, #416]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
 8002252:	e025      	b.n	80022a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002254:	4b66      	ldr	r3, [pc, #408]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a65      	ldr	r2, [pc, #404]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4960      	ldr	r1, [pc, #384]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002272:	4b5f      	ldr	r3, [pc, #380]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	495b      	ldr	r1, [pc, #364]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fcdd 	bl	8002c50 <RCC_SetFlashLatencyFromMSIRange>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e343      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a0:	f000 fc4a 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b52      	ldr	r3, [pc, #328]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	4950      	ldr	r1, [pc, #320]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	4a4e      	ldr	r2, [pc, #312]	@ (80023f8 <HAL_RCC_OscConfig+0x278>)
 80022be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022c0:	4b4e      	ldr	r3, [pc, #312]	@ (80023fc <HAL_RCC_OscConfig+0x27c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fdb5 	bl	8001e34 <HAL_InitTick>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d052      	beq.n	800237a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	e327      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d032      	beq.n	8002346 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022e0:	4b43      	ldr	r3, [pc, #268]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a42      	ldr	r2, [pc, #264]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fdf2 	bl	8001ed4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f4:	f7ff fdee 	bl	8001ed4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e310      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002306:	4b3a      	ldr	r3, [pc, #232]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002312:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a36      	ldr	r2, [pc, #216]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4931      	ldr	r1, [pc, #196]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002330:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	492c      	ldr	r1, [pc, #176]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e01a      	b.n	800237c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002346:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a29      	ldr	r2, [pc, #164]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002352:	f7ff fdbf 	bl	8001ed4 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800235a:	f7ff fdbb 	bl	8001ed4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e2dd      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x1da>
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800237a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d074      	beq.n	8002472 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b08      	cmp	r3, #8
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x21a>
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d10e      	bne.n	80023b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d064      	beq.n	8002470 <HAL_RCC_OscConfig+0x2f0>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d160      	bne.n	8002470 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e2ba      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x24a>
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0b      	ldr	r2, [pc, #44]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e026      	b.n	8002418 <HAL_RCC_OscConfig+0x298>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d2:	d115      	bne.n	8002400 <HAL_RCC_OscConfig+0x280>
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b03      	ldr	r3, [pc, #12]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a02      	ldr	r2, [pc, #8]	@ (80023f0 <HAL_RCC_OscConfig+0x270>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x298>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	080043e4 	.word	0x080043e4
 80023f8:	20000050 	.word	0x20000050
 80023fc:	20000054 	.word	0x20000054
 8002400:	4ba0      	ldr	r3, [pc, #640]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a9f      	ldr	r2, [pc, #636]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b9d      	ldr	r3, [pc, #628]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a9c      	ldr	r2, [pc, #624]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff fd58 	bl	8001ed4 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fd54 	bl	8001ed4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e276      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243a:	4b92      	ldr	r3, [pc, #584]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x2a8>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff fd44 	bl	8001ed4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff fd40 	bl	8001ed4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e262      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002462:	4b88      	ldr	r3, [pc, #544]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x2d0>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d060      	beq.n	8002540 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x310>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d119      	bne.n	80024be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d116      	bne.n	80024be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002490:	4b7c      	ldr	r3, [pc, #496]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x328>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e23f      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b76      	ldr	r3, [pc, #472]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	4973      	ldr	r1, [pc, #460]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	e040      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d023      	beq.n	800250e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff fcff 	bl	8001ed4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff fcfb 	bl	8001ed4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e21d      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ec:	4b65      	ldr	r3, [pc, #404]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b62      	ldr	r3, [pc, #392]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	495f      	ldr	r1, [pc, #380]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e018      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b5d      	ldr	r3, [pc, #372]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a5c      	ldr	r2, [pc, #368]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7ff fcdb 	bl	8001ed4 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fcd7 	bl	8001ed4 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1f9      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002534:	4b53      	ldr	r3, [pc, #332]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01c      	beq.n	800258e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002554:	4b4b      	ldr	r3, [pc, #300]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255a:	4a4a      	ldr	r2, [pc, #296]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7ff fcb6 	bl	8001ed4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256c:	f7ff fcb2 	bl	8001ed4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1d4      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800257e:	4b41      	ldr	r3, [pc, #260]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <HAL_RCC_OscConfig+0x3ec>
 800258c:	e01b      	b.n	80025c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258e:	4b3d      	ldr	r3, [pc, #244]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002594:	4a3b      	ldr	r2, [pc, #236]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7ff fc99 	bl	8001ed4 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a6:	f7ff fc95 	bl	8001ed4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1b7      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b8:	4b32      	ldr	r3, [pc, #200]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ef      	bne.n	80025a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80a6 	beq.w	8002720 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e8:	4a26      	ldr	r2, [pc, #152]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f0:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fc:	2301      	movs	r3, #1
 80025fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <HAL_RCC_OscConfig+0x508>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d118      	bne.n	800263e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260c:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <HAL_RCC_OscConfig+0x508>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <HAL_RCC_OscConfig+0x508>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002616:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002618:	f7ff fc5c 	bl	8001ed4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7ff fc58 	bl	8001ed4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e17a      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_RCC_OscConfig+0x508>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x4d8>
 8002646:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002656:	e029      	b.n	80026ac <HAL_RCC_OscConfig+0x52c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d115      	bne.n	800268c <HAL_RCC_OscConfig+0x50c>
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002666:	4a07      	ldr	r2, [pc, #28]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	4a03      	ldr	r2, [pc, #12]	@ (8002684 <HAL_RCC_OscConfig+0x504>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002680:	e014      	b.n	80026ac <HAL_RCC_OscConfig+0x52c>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	4b9c      	ldr	r3, [pc, #624]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	4a9b      	ldr	r2, [pc, #620]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800269c:	4b98      	ldr	r3, [pc, #608]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	4a97      	ldr	r2, [pc, #604]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d016      	beq.n	80026e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff fc0e 	bl	8001ed4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7ff fc0a 	bl	8001ed4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e12a      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ed      	beq.n	80026bc <HAL_RCC_OscConfig+0x53c>
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7ff fbf7 	bl	8001ed4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7ff fbf3 	bl	8001ed4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e113      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002700:	4b7f      	ldr	r3, [pc, #508]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ed      	bne.n	80026ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270e:	7ffb      	ldrb	r3, [r7, #31]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b7a      	ldr	r3, [pc, #488]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002718:	4a79      	ldr	r2, [pc, #484]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80fe 	beq.w	8002926 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	2b02      	cmp	r3, #2
 8002730:	f040 80d0 	bne.w	80028d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002734:	4b72      	ldr	r3, [pc, #456]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	429a      	cmp	r2, r3
 8002746:	d130      	bne.n	80027aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d127      	bne.n	80027aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002764:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d11f      	bne.n	80027aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002774:	2a07      	cmp	r2, #7
 8002776:	bf14      	ite	ne
 8002778:	2201      	movne	r2, #1
 800277a:	2200      	moveq	r2, #0
 800277c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800277e:	4293      	cmp	r3, r2
 8002780:	d113      	bne.n	80027aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	3b01      	subs	r3, #1
 8002790:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d109      	bne.n	80027aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	3b01      	subs	r3, #1
 80027a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d06e      	beq.n	8002888 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b0c      	cmp	r3, #12
 80027ae:	d069      	beq.n	8002884 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027b0:	4b53      	ldr	r3, [pc, #332]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027bc:	4b50      	ldr	r3, [pc, #320]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0ad      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027d8:	f7ff fb7c 	bl	8001ed4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff fb78 	bl	8001ed4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e09a      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f2:	4b43      	ldr	r3, [pc, #268]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fe:	4b40      	ldr	r3, [pc, #256]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b40      	ldr	r3, [pc, #256]	@ (8002904 <HAL_RCC_OscConfig+0x784>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800280e:	3a01      	subs	r2, #1
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002818:	0212      	lsls	r2, r2, #8
 800281a:	4311      	orrs	r1, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002820:	0852      	lsrs	r2, r2, #1
 8002822:	3a01      	subs	r2, #1
 8002824:	0552      	lsls	r2, r2, #21
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800282c:	0852      	lsrs	r2, r2, #1
 800282e:	3a01      	subs	r2, #1
 8002830:	0652      	lsls	r2, r2, #25
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002838:	0912      	lsrs	r2, r2, #4
 800283a:	0452      	lsls	r2, r2, #17
 800283c:	430a      	orrs	r2, r1
 800283e:	4930      	ldr	r1, [pc, #192]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002840:	4313      	orrs	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002844:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2d      	ldr	r2, [pc, #180]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a2a      	ldr	r2, [pc, #168]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800285a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800285c:	f7ff fb3a 	bl	8001ed4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff fb36 	bl	8001ed4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e058      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002882:	e050      	b.n	8002926 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e04f      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002888:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d148      	bne.n	8002926 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002894:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028a0:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ac:	f7ff fb12 	bl	8001ed4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7ff fb0e 	bl	8001ed4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e030      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x734>
 80028d2:	e028      	b.n	8002926 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d023      	beq.n	8002922 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a08      	ldr	r2, [pc, #32]	@ (8002900 <HAL_RCC_OscConfig+0x780>)
 80028e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff faf5 	bl	8001ed4 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ec:	e00c      	b.n	8002908 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff faf1 	bl	8001ed4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d905      	bls.n	8002908 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e013      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
 8002900:	40021000 	.word	0x40021000
 8002904:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_RCC_OscConfig+0x7b0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ec      	bne.n	80028ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_RCC_OscConfig+0x7b0>)
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	4905      	ldr	r1, [pc, #20]	@ (8002930 <HAL_RCC_OscConfig+0x7b0>)
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_OscConfig+0x7b4>)
 800291c:	4013      	ands	r3, r2
 800291e:	60cb      	str	r3, [r1, #12]
 8002920:	e001      	b.n	8002926 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	feeefffc 	.word	0xfeeefffc

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0e7      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b75      	ldr	r3, [pc, #468]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d910      	bls.n	800297c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b72      	ldr	r3, [pc, #456]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	4970      	ldr	r1, [pc, #448]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0cf      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d010      	beq.n	80029aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b66      	ldr	r3, [pc, #408]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002994:	429a      	cmp	r2, r3
 8002996:	d908      	bls.n	80029aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b63      	ldr	r3, [pc, #396]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4960      	ldr	r1, [pc, #384]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d04c      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	4b5a      	ldr	r3, [pc, #360]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d121      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0a6      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d6:	4b54      	ldr	r3, [pc, #336]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d115      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e09a      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e08e      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e086      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b46      	ldr	r3, [pc, #280]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4943      	ldr	r1, [pc, #268]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a20:	f7ff fa58 	bl	8001ed4 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7ff fa54 	bl	8001ed4 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e06e      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d010      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4b31      	ldr	r3, [pc, #196]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d208      	bcs.n	8002a7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	492b      	ldr	r1, [pc, #172]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7e:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d210      	bcs.n	8002aae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8c:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 0207 	bic.w	r2, r3, #7
 8002a94:	4923      	ldr	r1, [pc, #140]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9c:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e036      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aba:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4918      	ldr	r1, [pc, #96]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad8:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4910      	ldr	r1, [pc, #64]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aec:	f000 f824 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	490b      	ldr	r1, [pc, #44]	@ (8002b2c <HAL_RCC_ClockConfig+0x1f4>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	4a09      	ldr	r2, [pc, #36]	@ (8002b30 <HAL_RCC_ClockConfig+0x1f8>)
 8002b0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b0c:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <HAL_RCC_ClockConfig+0x1fc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f98f 	bl	8001e34 <HAL_InitTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40022000 	.word	0x40022000
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	080043e4 	.word	0x080043e4
 8002b30:	20000050 	.word	0x20000050
 8002b34:	20000054 	.word	0x20000054

08002b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	@ 0x24
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b46:	4b3e      	ldr	r3, [pc, #248]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b50:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x34>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d121      	bne.n	8002baa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d11e      	bne.n	8002baa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b6c:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b78:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e005      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b88:	4b2d      	ldr	r3, [pc, #180]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b94:	4a2b      	ldr	r2, [pc, #172]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10d      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb0:	4b25      	ldr	r3, [pc, #148]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	e004      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bbc:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d134      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0xa6>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d003      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0xac>
 8002bdc:	e005      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002be0:	617b      	str	r3, [r7, #20]
      break;
 8002be2:	e005      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002be6:	617b      	str	r3, [r7, #20]
      break;
 8002be8:	e002      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	617b      	str	r3, [r7, #20]
      break;
 8002bee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf0:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	0e5b      	lsrs	r3, r3, #25
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	3301      	adds	r3, #1
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c30:	69bb      	ldr	r3, [r7, #24]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	@ 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	080043f4 	.word	0x080043f4
 8002c48:	00f42400 	.word	0x00f42400
 8002c4c:	007a1200 	.word	0x007a1200

08002c50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c68:	f7ff fa26 	bl	80020b8 <HAL_PWREx_GetVoltageRange>
 8002c6c:	6178      	str	r0, [r7, #20]
 8002c6e:	e014      	b.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c74:	4a24      	ldr	r2, [pc, #144]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7c:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c88:	f7ff fa16 	bl	80020b8 <HAL_PWREx_GetVoltageRange>
 8002c8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca0:	d10b      	bne.n	8002cba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b80      	cmp	r3, #128	@ 0x80
 8002ca6:	d919      	bls.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cac:	d902      	bls.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cae:	2302      	movs	r3, #2
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	e013      	b.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	e010      	b.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b80      	cmp	r3, #128	@ 0x80
 8002cbe:	d902      	bls.n	8002cc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e00a      	b.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b80      	cmp	r3, #128	@ 0x80
 8002cca:	d102      	bne.n	8002cd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ccc:	2302      	movs	r3, #2
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	e004      	b.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b70      	cmp	r3, #112	@ 0x70
 8002cd6:	d101      	bne.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cd8:	2301      	movs	r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 0207 	bic.w	r2, r3, #7
 8002ce4:	4909      	ldr	r1, [pc, #36]	@ (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cec:	4b07      	ldr	r3, [pc, #28]	@ (8002d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40022000 	.word	0x40022000

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d041      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d34:	d02a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d3a:	d824      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d40:	d008      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d46:	d81e      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d50:	d010      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d52:	e018      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d54:	4b86      	ldr	r3, [pc, #536]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a85      	ldr	r2, [pc, #532]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d60:	e015      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fabb 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d72:	e00c      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3320      	adds	r3, #32
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fba6 	bl	80034cc <RCCEx_PLLSAI2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d84:	e003      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	74fb      	strb	r3, [r7, #19]
      break;
 8002d8a:	e000      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d94:	4b76      	ldr	r3, [pc, #472]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da2:	4973      	ldr	r1, [pc, #460]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002daa:	e001      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d041      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dc4:	d02a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dca:	d824      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dd0:	d008      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dd6:	d81e      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de0:	d010      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de2:	e018      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de4:	4b62      	ldr	r3, [pc, #392]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a61      	ldr	r2, [pc, #388]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002df0:	e015      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fa73 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e02:	e00c      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3320      	adds	r3, #32
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fb5e 	bl	80034cc <RCCEx_PLLSAI2_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e14:	e003      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	74fb      	strb	r3, [r7, #19]
      break;
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e24:	4b52      	ldr	r3, [pc, #328]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e32:	494f      	ldr	r1, [pc, #316]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e3a:	e001      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a0 	beq.w	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e52:	4b47      	ldr	r3, [pc, #284]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e68:	4b41      	ldr	r3, [pc, #260]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	4a40      	ldr	r2, [pc, #256]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e74:	4b3e      	ldr	r3, [pc, #248]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e80:	2301      	movs	r3, #1
 8002e82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e84:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3a      	ldr	r2, [pc, #232]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e90:	f7ff f820 	bl	8001ed4 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e96:	e009      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e98:	f7ff f81c 	bl	8001ed4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d902      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	74fb      	strb	r3, [r7, #19]
        break;
 8002eaa:	e005      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eac:	4b31      	ldr	r3, [pc, #196]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ef      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d15c      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01f      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d019      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002edc:	4b24      	ldr	r3, [pc, #144]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee8:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	4a20      	ldr	r2, [pc, #128]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f08:	4a19      	ldr	r2, [pc, #100]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe ffdb 	bl	8001ed4 <HAL_GetTick>
 8002f1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f20:	e00b      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe ffd7 	bl	8001ed4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d902      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	74fb      	strb	r3, [r7, #19]
            break;
 8002f38:	e006      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ec      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4e:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f5e:	4904      	ldr	r1, [pc, #16]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f66:	e009      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	74bb      	strb	r3, [r7, #18]
 8002f6c:	e006      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7c:	7c7b      	ldrb	r3, [r7, #17]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f82:	4b9e      	ldr	r3, [pc, #632]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	4a9d      	ldr	r2, [pc, #628]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f9a:	4b98      	ldr	r3, [pc, #608]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f023 0203 	bic.w	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	4994      	ldr	r1, [pc, #592]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	f023 020c 	bic.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	498c      	ldr	r1, [pc, #560]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fde:	4b87      	ldr	r3, [pc, #540]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	4983      	ldr	r1, [pc, #524]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003000:	4b7e      	ldr	r3, [pc, #504]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	497b      	ldr	r1, [pc, #492]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003022:	4b76      	ldr	r3, [pc, #472]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003030:	4972      	ldr	r1, [pc, #456]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003044:	4b6d      	ldr	r3, [pc, #436]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	496a      	ldr	r1, [pc, #424]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003066:	4b65      	ldr	r3, [pc, #404]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	4961      	ldr	r1, [pc, #388]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003088:	4b5c      	ldr	r3, [pc, #368]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003096:	4959      	ldr	r1, [pc, #356]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030aa:	4b54      	ldr	r3, [pc, #336]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b8:	4950      	ldr	r1, [pc, #320]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030cc:	4b4b      	ldr	r3, [pc, #300]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	4948      	ldr	r1, [pc, #288]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ee:	4b43      	ldr	r3, [pc, #268]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fc:	493f      	ldr	r1, [pc, #252]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d028      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003110:	4b3a      	ldr	r3, [pc, #232]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800311e:	4937      	ldr	r1, [pc, #220]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800312e:	d106      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003130:	4b32      	ldr	r3, [pc, #200]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a31      	ldr	r2, [pc, #196]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313a:	60d3      	str	r3, [r2, #12]
 800313c:	e011      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003142:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003146:	d10c      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f8c8 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d028      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800316e:	4b23      	ldr	r3, [pc, #140]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003174:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317c:	491f      	ldr	r1, [pc, #124]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800318c:	d106      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800318e:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4a1a      	ldr	r2, [pc, #104]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003198:	60d3      	str	r3, [r2, #12]
 800319a:	e011      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f899 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02b      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031da:	4908      	ldr	r1, [pc, #32]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ea:	d109      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ec:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a02      	ldr	r2, [pc, #8]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031f6:	60d3      	str	r3, [r2, #12]
 80031f8:	e014      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003204:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003208:	d10c      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	2101      	movs	r1, #1
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f867 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d02f      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003230:	4b2b      	ldr	r3, [pc, #172]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800323e:	4928      	ldr	r1, [pc, #160]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800324a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800324e:	d10d      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f844 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	74bb      	strb	r3, [r7, #18]
 800326a:	e011      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003274:	d10c      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3320      	adds	r3, #32
 800327a:	2102      	movs	r1, #2
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f925 	bl	80034cc <RCCEx_PLLSAI2_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800329c:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032aa:	490d      	ldr	r1, [pc, #52]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032be:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ce:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000

080032e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032f2:	4b75      	ldr	r3, [pc, #468]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032fe:	4b72      	ldr	r3, [pc, #456]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0203 	and.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d10d      	bne.n	800332a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
       ||
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003316:	4b6c      	ldr	r3, [pc, #432]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
       ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d047      	beq.n	80033ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	e044      	b.n	80033ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d018      	beq.n	800336a <RCCEx_PLLSAI1_Config+0x86>
 8003338:	2b03      	cmp	r3, #3
 800333a:	d825      	bhi.n	8003388 <RCCEx_PLLSAI1_Config+0xa4>
 800333c:	2b01      	cmp	r3, #1
 800333e:	d002      	beq.n	8003346 <RCCEx_PLLSAI1_Config+0x62>
 8003340:	2b02      	cmp	r3, #2
 8003342:	d009      	beq.n	8003358 <RCCEx_PLLSAI1_Config+0x74>
 8003344:	e020      	b.n	8003388 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003346:	4b60      	ldr	r3, [pc, #384]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11d      	bne.n	800338e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003356:	e01a      	b.n	800338e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003358:	4b5b      	ldr	r3, [pc, #364]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d116      	bne.n	8003392 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003368:	e013      	b.n	8003392 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800336a:	4b57      	ldr	r3, [pc, #348]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003376:	4b54      	ldr	r3, [pc, #336]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003386:	e006      	b.n	8003396 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e004      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800338e:	bf00      	nop
 8003390:	e002      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003396:	bf00      	nop
    }

    if(status == HAL_OK)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800339e:	4b4a      	ldr	r3, [pc, #296]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	430b      	orrs	r3, r1
 80033b4:	4944      	ldr	r1, [pc, #272]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d17d      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033c0:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a40      	ldr	r2, [pc, #256]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fe fd82 	bl	8001ed4 <HAL_GetTick>
 80033d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033d2:	e009      	b.n	80033e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d4:	f7fe fd7e 	bl	8001ed4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	73fb      	strb	r3, [r7, #15]
        break;
 80033e6:	e005      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e8:	4b37      	ldr	r3, [pc, #220]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ef      	bne.n	80033d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d160      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d111      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003400:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6892      	ldr	r2, [r2, #8]
 8003410:	0211      	lsls	r1, r2, #8
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68d2      	ldr	r2, [r2, #12]
 8003416:	0912      	lsrs	r2, r2, #4
 8003418:	0452      	lsls	r2, r2, #17
 800341a:	430a      	orrs	r2, r1
 800341c:	492a      	ldr	r1, [pc, #168]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]
 8003422:	e027      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d112      	bne.n	8003450 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800342a:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003432:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	0211      	lsls	r1, r2, #8
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6912      	ldr	r2, [r2, #16]
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	3a01      	subs	r2, #1
 8003444:	0552      	lsls	r2, r2, #21
 8003446:	430a      	orrs	r2, r1
 8003448:	491f      	ldr	r1, [pc, #124]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]
 800344e:	e011      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003458:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6892      	ldr	r2, [r2, #8]
 8003460:	0211      	lsls	r1, r2, #8
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6952      	ldr	r2, [r2, #20]
 8003466:	0852      	lsrs	r2, r2, #1
 8003468:	3a01      	subs	r2, #1
 800346a:	0652      	lsls	r2, r2, #25
 800346c:	430a      	orrs	r2, r1
 800346e:	4916      	ldr	r1, [pc, #88]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003474:	4b14      	ldr	r3, [pc, #80]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a13      	ldr	r2, [pc, #76]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800347e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fe fd28 	bl	8001ed4 <HAL_GetTick>
 8003484:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003486:	e009      	b.n	800349c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003488:	f7fe fd24 	bl	8001ed4 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d902      	bls.n	800349c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	73fb      	strb	r3, [r7, #15]
          break;
 800349a:	e005      	b.n	80034a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800349c:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ef      	beq.n	8003488 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	4904      	ldr	r1, [pc, #16]	@ (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000

080034cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034da:	4b6a      	ldr	r3, [pc, #424]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d018      	beq.n	8003518 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034e6:	4b67      	ldr	r3, [pc, #412]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d10d      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
       ||
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034fe:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
       ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d047      	beq.n	80035a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	e044      	b.n	80035a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d018      	beq.n	8003552 <RCCEx_PLLSAI2_Config+0x86>
 8003520:	2b03      	cmp	r3, #3
 8003522:	d825      	bhi.n	8003570 <RCCEx_PLLSAI2_Config+0xa4>
 8003524:	2b01      	cmp	r3, #1
 8003526:	d002      	beq.n	800352e <RCCEx_PLLSAI2_Config+0x62>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d009      	beq.n	8003540 <RCCEx_PLLSAI2_Config+0x74>
 800352c:	e020      	b.n	8003570 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800352e:	4b55      	ldr	r3, [pc, #340]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11d      	bne.n	8003576 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353e:	e01a      	b.n	8003576 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003540:	4b50      	ldr	r3, [pc, #320]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e013      	b.n	800357a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003552:	4b4c      	ldr	r3, [pc, #304]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800355e:	4b49      	ldr	r3, [pc, #292]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800356e:	e006      	b.n	800357e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e004      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003586:	4b3f      	ldr	r3, [pc, #252]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	430b      	orrs	r3, r1
 800359c:	4939      	ldr	r1, [pc, #228]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d167      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035a8:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a35      	ldr	r2, [pc, #212]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fe fc8e 	bl	8001ed4 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ba:	e009      	b.n	80035d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035bc:	f7fe fc8a 	bl	8001ed4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d902      	bls.n	80035d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	73fb      	strb	r3, [r7, #15]
        break;
 80035ce:	e005      	b.n	80035dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ef      	bne.n	80035bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d14a      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d111      	bne.n	800360c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035e8:	4b26      	ldr	r3, [pc, #152]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80035f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	0211      	lsls	r1, r2, #8
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	0912      	lsrs	r2, r2, #4
 8003600:	0452      	lsls	r2, r2, #17
 8003602:	430a      	orrs	r2, r1
 8003604:	491f      	ldr	r1, [pc, #124]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003606:	4313      	orrs	r3, r2
 8003608:	614b      	str	r3, [r1, #20]
 800360a:	e011      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800360c:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003614:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6892      	ldr	r2, [r2, #8]
 800361c:	0211      	lsls	r1, r2, #8
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6912      	ldr	r2, [r2, #16]
 8003622:	0852      	lsrs	r2, r2, #1
 8003624:	3a01      	subs	r2, #1
 8003626:	0652      	lsls	r2, r2, #25
 8003628:	430a      	orrs	r2, r1
 800362a:	4916      	ldr	r1, [pc, #88]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362c:	4313      	orrs	r3, r2
 800362e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003630:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fc4a 	bl	8001ed4 <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003642:	e009      	b.n	8003658 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003644:	f7fe fc46 	bl	8001ed4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d902      	bls.n	8003658 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	73fb      	strb	r3, [r7, #15]
          break;
 8003656:	e005      	b.n	8003664 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ef      	beq.n	8003644 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4904      	ldr	r1, [pc, #16]	@ (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e049      	b.n	800372e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	795b      	ldrb	r3, [r3, #5]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fe f9a0 	bl	80019f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0204 	orr.w	r2, r2, #4
 80036c4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b40      	cmp	r3, #64	@ 0x40
 80036d2:	d104      	bne.n	80036de <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2204      	movs	r2, #4
 80036d8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e027      	b.n	800372e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80036de:	f7fe fbf9 	bl	8001ed4 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80036e4:	e015      	b.n	8003712 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80036e6:	f7fe fbf5 	bl	8001ed4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d90e      	bls.n	8003712 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2204      	movs	r2, #4
 8003706:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e00d      	b.n	800372e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d0e2      	beq.n	80036e6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <siprintf>:
 8003738:	b40e      	push	{r1, r2, r3}
 800373a:	b500      	push	{lr}
 800373c:	b09c      	sub	sp, #112	@ 0x70
 800373e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003740:	9002      	str	r0, [sp, #8]
 8003742:	9006      	str	r0, [sp, #24]
 8003744:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003748:	4809      	ldr	r0, [pc, #36]	@ (8003770 <siprintf+0x38>)
 800374a:	9107      	str	r1, [sp, #28]
 800374c:	9104      	str	r1, [sp, #16]
 800374e:	4909      	ldr	r1, [pc, #36]	@ (8003774 <siprintf+0x3c>)
 8003750:	f853 2b04 	ldr.w	r2, [r3], #4
 8003754:	9105      	str	r1, [sp, #20]
 8003756:	6800      	ldr	r0, [r0, #0]
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	a902      	add	r1, sp, #8
 800375c:	f000 f9a2 	bl	8003aa4 <_svfiprintf_r>
 8003760:	9b02      	ldr	r3, [sp, #8]
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	b01c      	add	sp, #112	@ 0x70
 8003768:	f85d eb04 	ldr.w	lr, [sp], #4
 800376c:	b003      	add	sp, #12
 800376e:	4770      	bx	lr
 8003770:	2000005c 	.word	0x2000005c
 8003774:	ffff0208 	.word	0xffff0208

08003778 <memset>:
 8003778:	4402      	add	r2, r0
 800377a:	4603      	mov	r3, r0
 800377c:	4293      	cmp	r3, r2
 800377e:	d100      	bne.n	8003782 <memset+0xa>
 8003780:	4770      	bx	lr
 8003782:	f803 1b01 	strb.w	r1, [r3], #1
 8003786:	e7f9      	b.n	800377c <memset+0x4>

08003788 <__errno>:
 8003788:	4b01      	ldr	r3, [pc, #4]	@ (8003790 <__errno+0x8>)
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	2000005c 	.word	0x2000005c

08003794 <__libc_init_array>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	4d0d      	ldr	r5, [pc, #52]	@ (80037cc <__libc_init_array+0x38>)
 8003798:	4c0d      	ldr	r4, [pc, #52]	@ (80037d0 <__libc_init_array+0x3c>)
 800379a:	1b64      	subs	r4, r4, r5
 800379c:	10a4      	asrs	r4, r4, #2
 800379e:	2600      	movs	r6, #0
 80037a0:	42a6      	cmp	r6, r4
 80037a2:	d109      	bne.n	80037b8 <__libc_init_array+0x24>
 80037a4:	4d0b      	ldr	r5, [pc, #44]	@ (80037d4 <__libc_init_array+0x40>)
 80037a6:	4c0c      	ldr	r4, [pc, #48]	@ (80037d8 <__libc_init_array+0x44>)
 80037a8:	f000 fc66 	bl	8004078 <_init>
 80037ac:	1b64      	subs	r4, r4, r5
 80037ae:	10a4      	asrs	r4, r4, #2
 80037b0:	2600      	movs	r6, #0
 80037b2:	42a6      	cmp	r6, r4
 80037b4:	d105      	bne.n	80037c2 <__libc_init_array+0x2e>
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037bc:	4798      	blx	r3
 80037be:	3601      	adds	r6, #1
 80037c0:	e7ee      	b.n	80037a0 <__libc_init_array+0xc>
 80037c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c6:	4798      	blx	r3
 80037c8:	3601      	adds	r6, #1
 80037ca:	e7f2      	b.n	80037b2 <__libc_init_array+0x1e>
 80037cc:	08004460 	.word	0x08004460
 80037d0:	08004460 	.word	0x08004460
 80037d4:	08004460 	.word	0x08004460
 80037d8:	08004464 	.word	0x08004464

080037dc <__retarget_lock_acquire_recursive>:
 80037dc:	4770      	bx	lr

080037de <__retarget_lock_release_recursive>:
 80037de:	4770      	bx	lr

080037e0 <memcpy>:
 80037e0:	440a      	add	r2, r1
 80037e2:	4291      	cmp	r1, r2
 80037e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037e8:	d100      	bne.n	80037ec <memcpy+0xc>
 80037ea:	4770      	bx	lr
 80037ec:	b510      	push	{r4, lr}
 80037ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f6:	4291      	cmp	r1, r2
 80037f8:	d1f9      	bne.n	80037ee <memcpy+0xe>
 80037fa:	bd10      	pop	{r4, pc}

080037fc <_free_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4605      	mov	r5, r0
 8003800:	2900      	cmp	r1, #0
 8003802:	d041      	beq.n	8003888 <_free_r+0x8c>
 8003804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003808:	1f0c      	subs	r4, r1, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfb8      	it	lt
 800380e:	18e4      	addlt	r4, r4, r3
 8003810:	f000 f8e0 	bl	80039d4 <__malloc_lock>
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <_free_r+0x90>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	b933      	cbnz	r3, 8003828 <_free_r+0x2c>
 800381a:	6063      	str	r3, [r4, #4]
 800381c:	6014      	str	r4, [r2, #0]
 800381e:	4628      	mov	r0, r5
 8003820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003824:	f000 b8dc 	b.w	80039e0 <__malloc_unlock>
 8003828:	42a3      	cmp	r3, r4
 800382a:	d908      	bls.n	800383e <_free_r+0x42>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	1821      	adds	r1, r4, r0
 8003830:	428b      	cmp	r3, r1
 8003832:	bf01      	itttt	eq
 8003834:	6819      	ldreq	r1, [r3, #0]
 8003836:	685b      	ldreq	r3, [r3, #4]
 8003838:	1809      	addeq	r1, r1, r0
 800383a:	6021      	streq	r1, [r4, #0]
 800383c:	e7ed      	b.n	800381a <_free_r+0x1e>
 800383e:	461a      	mov	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b10b      	cbz	r3, 8003848 <_free_r+0x4c>
 8003844:	42a3      	cmp	r3, r4
 8003846:	d9fa      	bls.n	800383e <_free_r+0x42>
 8003848:	6811      	ldr	r1, [r2, #0]
 800384a:	1850      	adds	r0, r2, r1
 800384c:	42a0      	cmp	r0, r4
 800384e:	d10b      	bne.n	8003868 <_free_r+0x6c>
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	4401      	add	r1, r0
 8003854:	1850      	adds	r0, r2, r1
 8003856:	4283      	cmp	r3, r0
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	d1e0      	bne.n	800381e <_free_r+0x22>
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	6053      	str	r3, [r2, #4]
 8003862:	4408      	add	r0, r1
 8003864:	6010      	str	r0, [r2, #0]
 8003866:	e7da      	b.n	800381e <_free_r+0x22>
 8003868:	d902      	bls.n	8003870 <_free_r+0x74>
 800386a:	230c      	movs	r3, #12
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	e7d6      	b.n	800381e <_free_r+0x22>
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	1821      	adds	r1, r4, r0
 8003874:	428b      	cmp	r3, r1
 8003876:	bf04      	itt	eq
 8003878:	6819      	ldreq	r1, [r3, #0]
 800387a:	685b      	ldreq	r3, [r3, #4]
 800387c:	6063      	str	r3, [r4, #4]
 800387e:	bf04      	itt	eq
 8003880:	1809      	addeq	r1, r1, r0
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	6054      	str	r4, [r2, #4]
 8003886:	e7ca      	b.n	800381e <_free_r+0x22>
 8003888:	bd38      	pop	{r3, r4, r5, pc}
 800388a:	bf00      	nop
 800388c:	2000037c 	.word	0x2000037c

08003890 <sbrk_aligned>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4e0f      	ldr	r6, [pc, #60]	@ (80038d0 <sbrk_aligned+0x40>)
 8003894:	460c      	mov	r4, r1
 8003896:	6831      	ldr	r1, [r6, #0]
 8003898:	4605      	mov	r5, r0
 800389a:	b911      	cbnz	r1, 80038a2 <sbrk_aligned+0x12>
 800389c:	f000 fba6 	bl	8003fec <_sbrk_r>
 80038a0:	6030      	str	r0, [r6, #0]
 80038a2:	4621      	mov	r1, r4
 80038a4:	4628      	mov	r0, r5
 80038a6:	f000 fba1 	bl	8003fec <_sbrk_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	d103      	bne.n	80038b6 <sbrk_aligned+0x26>
 80038ae:	f04f 34ff 	mov.w	r4, #4294967295
 80038b2:	4620      	mov	r0, r4
 80038b4:	bd70      	pop	{r4, r5, r6, pc}
 80038b6:	1cc4      	adds	r4, r0, #3
 80038b8:	f024 0403 	bic.w	r4, r4, #3
 80038bc:	42a0      	cmp	r0, r4
 80038be:	d0f8      	beq.n	80038b2 <sbrk_aligned+0x22>
 80038c0:	1a21      	subs	r1, r4, r0
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 fb92 	bl	8003fec <_sbrk_r>
 80038c8:	3001      	adds	r0, #1
 80038ca:	d1f2      	bne.n	80038b2 <sbrk_aligned+0x22>
 80038cc:	e7ef      	b.n	80038ae <sbrk_aligned+0x1e>
 80038ce:	bf00      	nop
 80038d0:	20000378 	.word	0x20000378

080038d4 <_malloc_r>:
 80038d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d8:	1ccd      	adds	r5, r1, #3
 80038da:	f025 0503 	bic.w	r5, r5, #3
 80038de:	3508      	adds	r5, #8
 80038e0:	2d0c      	cmp	r5, #12
 80038e2:	bf38      	it	cc
 80038e4:	250c      	movcc	r5, #12
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	4606      	mov	r6, r0
 80038ea:	db01      	blt.n	80038f0 <_malloc_r+0x1c>
 80038ec:	42a9      	cmp	r1, r5
 80038ee:	d904      	bls.n	80038fa <_malloc_r+0x26>
 80038f0:	230c      	movs	r3, #12
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	2000      	movs	r0, #0
 80038f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039d0 <_malloc_r+0xfc>
 80038fe:	f000 f869 	bl	80039d4 <__malloc_lock>
 8003902:	f8d8 3000 	ldr.w	r3, [r8]
 8003906:	461c      	mov	r4, r3
 8003908:	bb44      	cbnz	r4, 800395c <_malloc_r+0x88>
 800390a:	4629      	mov	r1, r5
 800390c:	4630      	mov	r0, r6
 800390e:	f7ff ffbf 	bl	8003890 <sbrk_aligned>
 8003912:	1c43      	adds	r3, r0, #1
 8003914:	4604      	mov	r4, r0
 8003916:	d158      	bne.n	80039ca <_malloc_r+0xf6>
 8003918:	f8d8 4000 	ldr.w	r4, [r8]
 800391c:	4627      	mov	r7, r4
 800391e:	2f00      	cmp	r7, #0
 8003920:	d143      	bne.n	80039aa <_malloc_r+0xd6>
 8003922:	2c00      	cmp	r4, #0
 8003924:	d04b      	beq.n	80039be <_malloc_r+0xea>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	4639      	mov	r1, r7
 800392a:	4630      	mov	r0, r6
 800392c:	eb04 0903 	add.w	r9, r4, r3
 8003930:	f000 fb5c 	bl	8003fec <_sbrk_r>
 8003934:	4581      	cmp	r9, r0
 8003936:	d142      	bne.n	80039be <_malloc_r+0xea>
 8003938:	6821      	ldr	r1, [r4, #0]
 800393a:	1a6d      	subs	r5, r5, r1
 800393c:	4629      	mov	r1, r5
 800393e:	4630      	mov	r0, r6
 8003940:	f7ff ffa6 	bl	8003890 <sbrk_aligned>
 8003944:	3001      	adds	r0, #1
 8003946:	d03a      	beq.n	80039be <_malloc_r+0xea>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	442b      	add	r3, r5
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	f8d8 3000 	ldr.w	r3, [r8]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	bb62      	cbnz	r2, 80039b0 <_malloc_r+0xdc>
 8003956:	f8c8 7000 	str.w	r7, [r8]
 800395a:	e00f      	b.n	800397c <_malloc_r+0xa8>
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	1b52      	subs	r2, r2, r5
 8003960:	d420      	bmi.n	80039a4 <_malloc_r+0xd0>
 8003962:	2a0b      	cmp	r2, #11
 8003964:	d917      	bls.n	8003996 <_malloc_r+0xc2>
 8003966:	1961      	adds	r1, r4, r5
 8003968:	42a3      	cmp	r3, r4
 800396a:	6025      	str	r5, [r4, #0]
 800396c:	bf18      	it	ne
 800396e:	6059      	strne	r1, [r3, #4]
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	bf08      	it	eq
 8003974:	f8c8 1000 	streq.w	r1, [r8]
 8003978:	5162      	str	r2, [r4, r5]
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f82f 	bl	80039e0 <__malloc_unlock>
 8003982:	f104 000b 	add.w	r0, r4, #11
 8003986:	1d23      	adds	r3, r4, #4
 8003988:	f020 0007 	bic.w	r0, r0, #7
 800398c:	1ac2      	subs	r2, r0, r3
 800398e:	bf1c      	itt	ne
 8003990:	1a1b      	subne	r3, r3, r0
 8003992:	50a3      	strne	r3, [r4, r2]
 8003994:	e7af      	b.n	80038f6 <_malloc_r+0x22>
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	42a3      	cmp	r3, r4
 800399a:	bf0c      	ite	eq
 800399c:	f8c8 2000 	streq.w	r2, [r8]
 80039a0:	605a      	strne	r2, [r3, #4]
 80039a2:	e7eb      	b.n	800397c <_malloc_r+0xa8>
 80039a4:	4623      	mov	r3, r4
 80039a6:	6864      	ldr	r4, [r4, #4]
 80039a8:	e7ae      	b.n	8003908 <_malloc_r+0x34>
 80039aa:	463c      	mov	r4, r7
 80039ac:	687f      	ldr	r7, [r7, #4]
 80039ae:	e7b6      	b.n	800391e <_malloc_r+0x4a>
 80039b0:	461a      	mov	r2, r3
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	d1fb      	bne.n	80039b0 <_malloc_r+0xdc>
 80039b8:	2300      	movs	r3, #0
 80039ba:	6053      	str	r3, [r2, #4]
 80039bc:	e7de      	b.n	800397c <_malloc_r+0xa8>
 80039be:	230c      	movs	r3, #12
 80039c0:	6033      	str	r3, [r6, #0]
 80039c2:	4630      	mov	r0, r6
 80039c4:	f000 f80c 	bl	80039e0 <__malloc_unlock>
 80039c8:	e794      	b.n	80038f4 <_malloc_r+0x20>
 80039ca:	6005      	str	r5, [r0, #0]
 80039cc:	e7d6      	b.n	800397c <_malloc_r+0xa8>
 80039ce:	bf00      	nop
 80039d0:	2000037c 	.word	0x2000037c

080039d4 <__malloc_lock>:
 80039d4:	4801      	ldr	r0, [pc, #4]	@ (80039dc <__malloc_lock+0x8>)
 80039d6:	f7ff bf01 	b.w	80037dc <__retarget_lock_acquire_recursive>
 80039da:	bf00      	nop
 80039dc:	20000374 	.word	0x20000374

080039e0 <__malloc_unlock>:
 80039e0:	4801      	ldr	r0, [pc, #4]	@ (80039e8 <__malloc_unlock+0x8>)
 80039e2:	f7ff befc 	b.w	80037de <__retarget_lock_release_recursive>
 80039e6:	bf00      	nop
 80039e8:	20000374 	.word	0x20000374

080039ec <__ssputs_r>:
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	688e      	ldr	r6, [r1, #8]
 80039f2:	461f      	mov	r7, r3
 80039f4:	42be      	cmp	r6, r7
 80039f6:	680b      	ldr	r3, [r1, #0]
 80039f8:	4682      	mov	sl, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	4690      	mov	r8, r2
 80039fe:	d82d      	bhi.n	8003a5c <__ssputs_r+0x70>
 8003a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a08:	d026      	beq.n	8003a58 <__ssputs_r+0x6c>
 8003a0a:	6965      	ldr	r5, [r4, #20]
 8003a0c:	6909      	ldr	r1, [r1, #16]
 8003a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a12:	eba3 0901 	sub.w	r9, r3, r1
 8003a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a1a:	1c7b      	adds	r3, r7, #1
 8003a1c:	444b      	add	r3, r9
 8003a1e:	106d      	asrs	r5, r5, #1
 8003a20:	429d      	cmp	r5, r3
 8003a22:	bf38      	it	cc
 8003a24:	461d      	movcc	r5, r3
 8003a26:	0553      	lsls	r3, r2, #21
 8003a28:	d527      	bpl.n	8003a7a <__ssputs_r+0x8e>
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f7ff ff52 	bl	80038d4 <_malloc_r>
 8003a30:	4606      	mov	r6, r0
 8003a32:	b360      	cbz	r0, 8003a8e <__ssputs_r+0xa2>
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	464a      	mov	r2, r9
 8003a38:	f7ff fed2 	bl	80037e0 <memcpy>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	6126      	str	r6, [r4, #16]
 8003a4a:	6165      	str	r5, [r4, #20]
 8003a4c:	444e      	add	r6, r9
 8003a4e:	eba5 0509 	sub.w	r5, r5, r9
 8003a52:	6026      	str	r6, [r4, #0]
 8003a54:	60a5      	str	r5, [r4, #8]
 8003a56:	463e      	mov	r6, r7
 8003a58:	42be      	cmp	r6, r7
 8003a5a:	d900      	bls.n	8003a5e <__ssputs_r+0x72>
 8003a5c:	463e      	mov	r6, r7
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	4632      	mov	r2, r6
 8003a62:	4641      	mov	r1, r8
 8003a64:	f000 faa8 	bl	8003fb8 <memmove>
 8003a68:	68a3      	ldr	r3, [r4, #8]
 8003a6a:	1b9b      	subs	r3, r3, r6
 8003a6c:	60a3      	str	r3, [r4, #8]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	4433      	add	r3, r6
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	2000      	movs	r0, #0
 8003a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7a:	462a      	mov	r2, r5
 8003a7c:	f000 fac6 	bl	800400c <_realloc_r>
 8003a80:	4606      	mov	r6, r0
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d1e0      	bne.n	8003a48 <__ssputs_r+0x5c>
 8003a86:	6921      	ldr	r1, [r4, #16]
 8003a88:	4650      	mov	r0, sl
 8003a8a:	f7ff feb7 	bl	80037fc <_free_r>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	f8ca 3000 	str.w	r3, [sl]
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a9a:	81a3      	strh	r3, [r4, #12]
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	e7e9      	b.n	8003a76 <__ssputs_r+0x8a>
	...

08003aa4 <_svfiprintf_r>:
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	4698      	mov	r8, r3
 8003aaa:	898b      	ldrh	r3, [r1, #12]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	b09d      	sub	sp, #116	@ 0x74
 8003ab0:	4607      	mov	r7, r0
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	d510      	bpl.n	8003ada <_svfiprintf_r+0x36>
 8003ab8:	690b      	ldr	r3, [r1, #16]
 8003aba:	b973      	cbnz	r3, 8003ada <_svfiprintf_r+0x36>
 8003abc:	2140      	movs	r1, #64	@ 0x40
 8003abe:	f7ff ff09 	bl	80038d4 <_malloc_r>
 8003ac2:	6028      	str	r0, [r5, #0]
 8003ac4:	6128      	str	r0, [r5, #16]
 8003ac6:	b930      	cbnz	r0, 8003ad6 <_svfiprintf_r+0x32>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	b01d      	add	sp, #116	@ 0x74
 8003ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad6:	2340      	movs	r3, #64	@ 0x40
 8003ad8:	616b      	str	r3, [r5, #20]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ade:	2320      	movs	r3, #32
 8003ae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ae8:	2330      	movs	r3, #48	@ 0x30
 8003aea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c88 <_svfiprintf_r+0x1e4>
 8003aee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003af2:	f04f 0901 	mov.w	r9, #1
 8003af6:	4623      	mov	r3, r4
 8003af8:	469a      	mov	sl, r3
 8003afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003afe:	b10a      	cbz	r2, 8003b04 <_svfiprintf_r+0x60>
 8003b00:	2a25      	cmp	r2, #37	@ 0x25
 8003b02:	d1f9      	bne.n	8003af8 <_svfiprintf_r+0x54>
 8003b04:	ebba 0b04 	subs.w	fp, sl, r4
 8003b08:	d00b      	beq.n	8003b22 <_svfiprintf_r+0x7e>
 8003b0a:	465b      	mov	r3, fp
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4638      	mov	r0, r7
 8003b12:	f7ff ff6b 	bl	80039ec <__ssputs_r>
 8003b16:	3001      	adds	r0, #1
 8003b18:	f000 80a7 	beq.w	8003c6a <_svfiprintf_r+0x1c6>
 8003b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b1e:	445a      	add	r2, fp
 8003b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b22:	f89a 3000 	ldrb.w	r3, [sl]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 809f 	beq.w	8003c6a <_svfiprintf_r+0x1c6>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b36:	f10a 0a01 	add.w	sl, sl, #1
 8003b3a:	9304      	str	r3, [sp, #16]
 8003b3c:	9307      	str	r3, [sp, #28]
 8003b3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b42:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b44:	4654      	mov	r4, sl
 8003b46:	2205      	movs	r2, #5
 8003b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4c:	484e      	ldr	r0, [pc, #312]	@ (8003c88 <_svfiprintf_r+0x1e4>)
 8003b4e:	f7fc fb3f 	bl	80001d0 <memchr>
 8003b52:	9a04      	ldr	r2, [sp, #16]
 8003b54:	b9d8      	cbnz	r0, 8003b8e <_svfiprintf_r+0xea>
 8003b56:	06d0      	lsls	r0, r2, #27
 8003b58:	bf44      	itt	mi
 8003b5a:	2320      	movmi	r3, #32
 8003b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b60:	0711      	lsls	r1, r2, #28
 8003b62:	bf44      	itt	mi
 8003b64:	232b      	movmi	r3, #43	@ 0x2b
 8003b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b70:	d015      	beq.n	8003b9e <_svfiprintf_r+0xfa>
 8003b72:	9a07      	ldr	r2, [sp, #28]
 8003b74:	4654      	mov	r4, sl
 8003b76:	2000      	movs	r0, #0
 8003b78:	f04f 0c0a 	mov.w	ip, #10
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b82:	3b30      	subs	r3, #48	@ 0x30
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	d94b      	bls.n	8003c20 <_svfiprintf_r+0x17c>
 8003b88:	b1b0      	cbz	r0, 8003bb8 <_svfiprintf_r+0x114>
 8003b8a:	9207      	str	r2, [sp, #28]
 8003b8c:	e014      	b.n	8003bb8 <_svfiprintf_r+0x114>
 8003b8e:	eba0 0308 	sub.w	r3, r0, r8
 8003b92:	fa09 f303 	lsl.w	r3, r9, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	46a2      	mov	sl, r4
 8003b9c:	e7d2      	b.n	8003b44 <_svfiprintf_r+0xa0>
 8003b9e:	9b03      	ldr	r3, [sp, #12]
 8003ba0:	1d19      	adds	r1, r3, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	9103      	str	r1, [sp, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bfbb      	ittet	lt
 8003baa:	425b      	neglt	r3, r3
 8003bac:	f042 0202 	orrlt.w	r2, r2, #2
 8003bb0:	9307      	strge	r3, [sp, #28]
 8003bb2:	9307      	strlt	r3, [sp, #28]
 8003bb4:	bfb8      	it	lt
 8003bb6:	9204      	strlt	r2, [sp, #16]
 8003bb8:	7823      	ldrb	r3, [r4, #0]
 8003bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bbc:	d10a      	bne.n	8003bd4 <_svfiprintf_r+0x130>
 8003bbe:	7863      	ldrb	r3, [r4, #1]
 8003bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bc2:	d132      	bne.n	8003c2a <_svfiprintf_r+0x186>
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	9203      	str	r2, [sp, #12]
 8003bcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bd0:	3402      	adds	r4, #2
 8003bd2:	9305      	str	r3, [sp, #20]
 8003bd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c98 <_svfiprintf_r+0x1f4>
 8003bd8:	7821      	ldrb	r1, [r4, #0]
 8003bda:	2203      	movs	r2, #3
 8003bdc:	4650      	mov	r0, sl
 8003bde:	f7fc faf7 	bl	80001d0 <memchr>
 8003be2:	b138      	cbz	r0, 8003bf4 <_svfiprintf_r+0x150>
 8003be4:	9b04      	ldr	r3, [sp, #16]
 8003be6:	eba0 000a 	sub.w	r0, r0, sl
 8003bea:	2240      	movs	r2, #64	@ 0x40
 8003bec:	4082      	lsls	r2, r0
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	3401      	adds	r4, #1
 8003bf2:	9304      	str	r3, [sp, #16]
 8003bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf8:	4824      	ldr	r0, [pc, #144]	@ (8003c8c <_svfiprintf_r+0x1e8>)
 8003bfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bfe:	2206      	movs	r2, #6
 8003c00:	f7fc fae6 	bl	80001d0 <memchr>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d036      	beq.n	8003c76 <_svfiprintf_r+0x1d2>
 8003c08:	4b21      	ldr	r3, [pc, #132]	@ (8003c90 <_svfiprintf_r+0x1ec>)
 8003c0a:	bb1b      	cbnz	r3, 8003c54 <_svfiprintf_r+0x1b0>
 8003c0c:	9b03      	ldr	r3, [sp, #12]
 8003c0e:	3307      	adds	r3, #7
 8003c10:	f023 0307 	bic.w	r3, r3, #7
 8003c14:	3308      	adds	r3, #8
 8003c16:	9303      	str	r3, [sp, #12]
 8003c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c1a:	4433      	add	r3, r6
 8003c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c1e:	e76a      	b.n	8003af6 <_svfiprintf_r+0x52>
 8003c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c24:	460c      	mov	r4, r1
 8003c26:	2001      	movs	r0, #1
 8003c28:	e7a8      	b.n	8003b7c <_svfiprintf_r+0xd8>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	3401      	adds	r4, #1
 8003c2e:	9305      	str	r3, [sp, #20]
 8003c30:	4619      	mov	r1, r3
 8003c32:	f04f 0c0a 	mov.w	ip, #10
 8003c36:	4620      	mov	r0, r4
 8003c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3c:	3a30      	subs	r2, #48	@ 0x30
 8003c3e:	2a09      	cmp	r2, #9
 8003c40:	d903      	bls.n	8003c4a <_svfiprintf_r+0x1a6>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0c6      	beq.n	8003bd4 <_svfiprintf_r+0x130>
 8003c46:	9105      	str	r1, [sp, #20]
 8003c48:	e7c4      	b.n	8003bd4 <_svfiprintf_r+0x130>
 8003c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c4e:	4604      	mov	r4, r0
 8003c50:	2301      	movs	r3, #1
 8003c52:	e7f0      	b.n	8003c36 <_svfiprintf_r+0x192>
 8003c54:	ab03      	add	r3, sp, #12
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	462a      	mov	r2, r5
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c94 <_svfiprintf_r+0x1f0>)
 8003c5c:	a904      	add	r1, sp, #16
 8003c5e:	4638      	mov	r0, r7
 8003c60:	f3af 8000 	nop.w
 8003c64:	1c42      	adds	r2, r0, #1
 8003c66:	4606      	mov	r6, r0
 8003c68:	d1d6      	bne.n	8003c18 <_svfiprintf_r+0x174>
 8003c6a:	89ab      	ldrh	r3, [r5, #12]
 8003c6c:	065b      	lsls	r3, r3, #25
 8003c6e:	f53f af2d 	bmi.w	8003acc <_svfiprintf_r+0x28>
 8003c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c74:	e72c      	b.n	8003ad0 <_svfiprintf_r+0x2c>
 8003c76:	ab03      	add	r3, sp, #12
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	462a      	mov	r2, r5
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <_svfiprintf_r+0x1f0>)
 8003c7e:	a904      	add	r1, sp, #16
 8003c80:	4638      	mov	r0, r7
 8003c82:	f000 f879 	bl	8003d78 <_printf_i>
 8003c86:	e7ed      	b.n	8003c64 <_svfiprintf_r+0x1c0>
 8003c88:	08004424 	.word	0x08004424
 8003c8c:	0800442e 	.word	0x0800442e
 8003c90:	00000000 	.word	0x00000000
 8003c94:	080039ed 	.word	0x080039ed
 8003c98:	0800442a 	.word	0x0800442a

08003c9c <_printf_common>:
 8003c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	4616      	mov	r6, r2
 8003ca2:	4698      	mov	r8, r3
 8003ca4:	688a      	ldr	r2, [r1, #8]
 8003ca6:	690b      	ldr	r3, [r1, #16]
 8003ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bfb8      	it	lt
 8003cb0:	4613      	movlt	r3, r2
 8003cb2:	6033      	str	r3, [r6, #0]
 8003cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cb8:	4607      	mov	r7, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	b10a      	cbz	r2, 8003cc2 <_printf_common+0x26>
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	6033      	str	r3, [r6, #0]
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	0699      	lsls	r1, r3, #26
 8003cc6:	bf42      	ittt	mi
 8003cc8:	6833      	ldrmi	r3, [r6, #0]
 8003cca:	3302      	addmi	r3, #2
 8003ccc:	6033      	strmi	r3, [r6, #0]
 8003cce:	6825      	ldr	r5, [r4, #0]
 8003cd0:	f015 0506 	ands.w	r5, r5, #6
 8003cd4:	d106      	bne.n	8003ce4 <_printf_common+0x48>
 8003cd6:	f104 0a19 	add.w	sl, r4, #25
 8003cda:	68e3      	ldr	r3, [r4, #12]
 8003cdc:	6832      	ldr	r2, [r6, #0]
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	42ab      	cmp	r3, r5
 8003ce2:	dc26      	bgt.n	8003d32 <_printf_common+0x96>
 8003ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	3b00      	subs	r3, #0
 8003cec:	bf18      	it	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	0692      	lsls	r2, r2, #26
 8003cf2:	d42b      	bmi.n	8003d4c <_printf_common+0xb0>
 8003cf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	47c8      	blx	r9
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d01e      	beq.n	8003d40 <_printf_common+0xa4>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	6922      	ldr	r2, [r4, #16]
 8003d06:	f003 0306 	and.w	r3, r3, #6
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	bf02      	ittt	eq
 8003d0e:	68e5      	ldreq	r5, [r4, #12]
 8003d10:	6833      	ldreq	r3, [r6, #0]
 8003d12:	1aed      	subeq	r5, r5, r3
 8003d14:	68a3      	ldr	r3, [r4, #8]
 8003d16:	bf0c      	ite	eq
 8003d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d1c:	2500      	movne	r5, #0
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bfc4      	itt	gt
 8003d22:	1a9b      	subgt	r3, r3, r2
 8003d24:	18ed      	addgt	r5, r5, r3
 8003d26:	2600      	movs	r6, #0
 8003d28:	341a      	adds	r4, #26
 8003d2a:	42b5      	cmp	r5, r6
 8003d2c:	d11a      	bne.n	8003d64 <_printf_common+0xc8>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	e008      	b.n	8003d44 <_printf_common+0xa8>
 8003d32:	2301      	movs	r3, #1
 8003d34:	4652      	mov	r2, sl
 8003d36:	4641      	mov	r1, r8
 8003d38:	4638      	mov	r0, r7
 8003d3a:	47c8      	blx	r9
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d103      	bne.n	8003d48 <_printf_common+0xac>
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d48:	3501      	adds	r5, #1
 8003d4a:	e7c6      	b.n	8003cda <_printf_common+0x3e>
 8003d4c:	18e1      	adds	r1, r4, r3
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	2030      	movs	r0, #48	@ 0x30
 8003d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d56:	4422      	add	r2, r4
 8003d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d60:	3302      	adds	r3, #2
 8003d62:	e7c7      	b.n	8003cf4 <_printf_common+0x58>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4622      	mov	r2, r4
 8003d68:	4641      	mov	r1, r8
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	47c8      	blx	r9
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d0e6      	beq.n	8003d40 <_printf_common+0xa4>
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7d9      	b.n	8003d2a <_printf_common+0x8e>
	...

08003d78 <_printf_i>:
 8003d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7c:	7e0f      	ldrb	r7, [r1, #24]
 8003d7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d80:	2f78      	cmp	r7, #120	@ 0x78
 8003d82:	4691      	mov	r9, r2
 8003d84:	4680      	mov	r8, r0
 8003d86:	460c      	mov	r4, r1
 8003d88:	469a      	mov	sl, r3
 8003d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d8e:	d807      	bhi.n	8003da0 <_printf_i+0x28>
 8003d90:	2f62      	cmp	r7, #98	@ 0x62
 8003d92:	d80a      	bhi.n	8003daa <_printf_i+0x32>
 8003d94:	2f00      	cmp	r7, #0
 8003d96:	f000 80d2 	beq.w	8003f3e <_printf_i+0x1c6>
 8003d9a:	2f58      	cmp	r7, #88	@ 0x58
 8003d9c:	f000 80b9 	beq.w	8003f12 <_printf_i+0x19a>
 8003da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003da8:	e03a      	b.n	8003e20 <_printf_i+0xa8>
 8003daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dae:	2b15      	cmp	r3, #21
 8003db0:	d8f6      	bhi.n	8003da0 <_printf_i+0x28>
 8003db2:	a101      	add	r1, pc, #4	@ (adr r1, 8003db8 <_printf_i+0x40>)
 8003db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003db8:	08003e11 	.word	0x08003e11
 8003dbc:	08003e25 	.word	0x08003e25
 8003dc0:	08003da1 	.word	0x08003da1
 8003dc4:	08003da1 	.word	0x08003da1
 8003dc8:	08003da1 	.word	0x08003da1
 8003dcc:	08003da1 	.word	0x08003da1
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003da1 	.word	0x08003da1
 8003dd8:	08003da1 	.word	0x08003da1
 8003ddc:	08003da1 	.word	0x08003da1
 8003de0:	08003da1 	.word	0x08003da1
 8003de4:	08003f25 	.word	0x08003f25
 8003de8:	08003e4f 	.word	0x08003e4f
 8003dec:	08003edf 	.word	0x08003edf
 8003df0:	08003da1 	.word	0x08003da1
 8003df4:	08003da1 	.word	0x08003da1
 8003df8:	08003f47 	.word	0x08003f47
 8003dfc:	08003da1 	.word	0x08003da1
 8003e00:	08003e4f 	.word	0x08003e4f
 8003e04:	08003da1 	.word	0x08003da1
 8003e08:	08003da1 	.word	0x08003da1
 8003e0c:	08003ee7 	.word	0x08003ee7
 8003e10:	6833      	ldr	r3, [r6, #0]
 8003e12:	1d1a      	adds	r2, r3, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6032      	str	r2, [r6, #0]
 8003e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e20:	2301      	movs	r3, #1
 8003e22:	e09d      	b.n	8003f60 <_printf_i+0x1e8>
 8003e24:	6833      	ldr	r3, [r6, #0]
 8003e26:	6820      	ldr	r0, [r4, #0]
 8003e28:	1d19      	adds	r1, r3, #4
 8003e2a:	6031      	str	r1, [r6, #0]
 8003e2c:	0606      	lsls	r6, r0, #24
 8003e2e:	d501      	bpl.n	8003e34 <_printf_i+0xbc>
 8003e30:	681d      	ldr	r5, [r3, #0]
 8003e32:	e003      	b.n	8003e3c <_printf_i+0xc4>
 8003e34:	0645      	lsls	r5, r0, #25
 8003e36:	d5fb      	bpl.n	8003e30 <_printf_i+0xb8>
 8003e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	da03      	bge.n	8003e48 <_printf_i+0xd0>
 8003e40:	232d      	movs	r3, #45	@ 0x2d
 8003e42:	426d      	negs	r5, r5
 8003e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e48:	4859      	ldr	r0, [pc, #356]	@ (8003fb0 <_printf_i+0x238>)
 8003e4a:	230a      	movs	r3, #10
 8003e4c:	e011      	b.n	8003e72 <_printf_i+0xfa>
 8003e4e:	6821      	ldr	r1, [r4, #0]
 8003e50:	6833      	ldr	r3, [r6, #0]
 8003e52:	0608      	lsls	r0, r1, #24
 8003e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e58:	d402      	bmi.n	8003e60 <_printf_i+0xe8>
 8003e5a:	0649      	lsls	r1, r1, #25
 8003e5c:	bf48      	it	mi
 8003e5e:	b2ad      	uxthmi	r5, r5
 8003e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e62:	4853      	ldr	r0, [pc, #332]	@ (8003fb0 <_printf_i+0x238>)
 8003e64:	6033      	str	r3, [r6, #0]
 8003e66:	bf14      	ite	ne
 8003e68:	230a      	movne	r3, #10
 8003e6a:	2308      	moveq	r3, #8
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e72:	6866      	ldr	r6, [r4, #4]
 8003e74:	60a6      	str	r6, [r4, #8]
 8003e76:	2e00      	cmp	r6, #0
 8003e78:	bfa2      	ittt	ge
 8003e7a:	6821      	ldrge	r1, [r4, #0]
 8003e7c:	f021 0104 	bicge.w	r1, r1, #4
 8003e80:	6021      	strge	r1, [r4, #0]
 8003e82:	b90d      	cbnz	r5, 8003e88 <_printf_i+0x110>
 8003e84:	2e00      	cmp	r6, #0
 8003e86:	d04b      	beq.n	8003f20 <_printf_i+0x1a8>
 8003e88:	4616      	mov	r6, r2
 8003e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8003e92:	5dc7      	ldrb	r7, [r0, r7]
 8003e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e98:	462f      	mov	r7, r5
 8003e9a:	42bb      	cmp	r3, r7
 8003e9c:	460d      	mov	r5, r1
 8003e9e:	d9f4      	bls.n	8003e8a <_printf_i+0x112>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d10b      	bne.n	8003ebc <_printf_i+0x144>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	07df      	lsls	r7, r3, #31
 8003ea8:	d508      	bpl.n	8003ebc <_printf_i+0x144>
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	6861      	ldr	r1, [r4, #4]
 8003eae:	4299      	cmp	r1, r3
 8003eb0:	bfde      	ittt	le
 8003eb2:	2330      	movle	r3, #48	@ 0x30
 8003eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ebc:	1b92      	subs	r2, r2, r6
 8003ebe:	6122      	str	r2, [r4, #16]
 8003ec0:	f8cd a000 	str.w	sl, [sp]
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	aa03      	add	r2, sp, #12
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f7ff fee6 	bl	8003c9c <_printf_common>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d14a      	bne.n	8003f6a <_printf_i+0x1f2>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	b004      	add	sp, #16
 8003eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	4833      	ldr	r0, [pc, #204]	@ (8003fb4 <_printf_i+0x23c>)
 8003ee8:	2778      	movs	r7, #120	@ 0x78
 8003eea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	6831      	ldr	r1, [r6, #0]
 8003ef2:	061f      	lsls	r7, r3, #24
 8003ef4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ef8:	d402      	bmi.n	8003f00 <_printf_i+0x188>
 8003efa:	065f      	lsls	r7, r3, #25
 8003efc:	bf48      	it	mi
 8003efe:	b2ad      	uxthmi	r5, r5
 8003f00:	6031      	str	r1, [r6, #0]
 8003f02:	07d9      	lsls	r1, r3, #31
 8003f04:	bf44      	itt	mi
 8003f06:	f043 0320 	orrmi.w	r3, r3, #32
 8003f0a:	6023      	strmi	r3, [r4, #0]
 8003f0c:	b11d      	cbz	r5, 8003f16 <_printf_i+0x19e>
 8003f0e:	2310      	movs	r3, #16
 8003f10:	e7ac      	b.n	8003e6c <_printf_i+0xf4>
 8003f12:	4827      	ldr	r0, [pc, #156]	@ (8003fb0 <_printf_i+0x238>)
 8003f14:	e7e9      	b.n	8003eea <_printf_i+0x172>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f023 0320 	bic.w	r3, r3, #32
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	e7f6      	b.n	8003f0e <_printf_i+0x196>
 8003f20:	4616      	mov	r6, r2
 8003f22:	e7bd      	b.n	8003ea0 <_printf_i+0x128>
 8003f24:	6833      	ldr	r3, [r6, #0]
 8003f26:	6825      	ldr	r5, [r4, #0]
 8003f28:	6961      	ldr	r1, [r4, #20]
 8003f2a:	1d18      	adds	r0, r3, #4
 8003f2c:	6030      	str	r0, [r6, #0]
 8003f2e:	062e      	lsls	r6, r5, #24
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	d501      	bpl.n	8003f38 <_printf_i+0x1c0>
 8003f34:	6019      	str	r1, [r3, #0]
 8003f36:	e002      	b.n	8003f3e <_printf_i+0x1c6>
 8003f38:	0668      	lsls	r0, r5, #25
 8003f3a:	d5fb      	bpl.n	8003f34 <_printf_i+0x1bc>
 8003f3c:	8019      	strh	r1, [r3, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6123      	str	r3, [r4, #16]
 8003f42:	4616      	mov	r6, r2
 8003f44:	e7bc      	b.n	8003ec0 <_printf_i+0x148>
 8003f46:	6833      	ldr	r3, [r6, #0]
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	6032      	str	r2, [r6, #0]
 8003f4c:	681e      	ldr	r6, [r3, #0]
 8003f4e:	6862      	ldr	r2, [r4, #4]
 8003f50:	2100      	movs	r1, #0
 8003f52:	4630      	mov	r0, r6
 8003f54:	f7fc f93c 	bl	80001d0 <memchr>
 8003f58:	b108      	cbz	r0, 8003f5e <_printf_i+0x1e6>
 8003f5a:	1b80      	subs	r0, r0, r6
 8003f5c:	6060      	str	r0, [r4, #4]
 8003f5e:	6863      	ldr	r3, [r4, #4]
 8003f60:	6123      	str	r3, [r4, #16]
 8003f62:	2300      	movs	r3, #0
 8003f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f68:	e7aa      	b.n	8003ec0 <_printf_i+0x148>
 8003f6a:	6923      	ldr	r3, [r4, #16]
 8003f6c:	4632      	mov	r2, r6
 8003f6e:	4649      	mov	r1, r9
 8003f70:	4640      	mov	r0, r8
 8003f72:	47d0      	blx	sl
 8003f74:	3001      	adds	r0, #1
 8003f76:	d0ad      	beq.n	8003ed4 <_printf_i+0x15c>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	079b      	lsls	r3, r3, #30
 8003f7c:	d413      	bmi.n	8003fa6 <_printf_i+0x22e>
 8003f7e:	68e0      	ldr	r0, [r4, #12]
 8003f80:	9b03      	ldr	r3, [sp, #12]
 8003f82:	4298      	cmp	r0, r3
 8003f84:	bfb8      	it	lt
 8003f86:	4618      	movlt	r0, r3
 8003f88:	e7a6      	b.n	8003ed8 <_printf_i+0x160>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4640      	mov	r0, r8
 8003f92:	47d0      	blx	sl
 8003f94:	3001      	adds	r0, #1
 8003f96:	d09d      	beq.n	8003ed4 <_printf_i+0x15c>
 8003f98:	3501      	adds	r5, #1
 8003f9a:	68e3      	ldr	r3, [r4, #12]
 8003f9c:	9903      	ldr	r1, [sp, #12]
 8003f9e:	1a5b      	subs	r3, r3, r1
 8003fa0:	42ab      	cmp	r3, r5
 8003fa2:	dcf2      	bgt.n	8003f8a <_printf_i+0x212>
 8003fa4:	e7eb      	b.n	8003f7e <_printf_i+0x206>
 8003fa6:	2500      	movs	r5, #0
 8003fa8:	f104 0619 	add.w	r6, r4, #25
 8003fac:	e7f5      	b.n	8003f9a <_printf_i+0x222>
 8003fae:	bf00      	nop
 8003fb0:	08004435 	.word	0x08004435
 8003fb4:	08004446 	.word	0x08004446

08003fb8 <memmove>:
 8003fb8:	4288      	cmp	r0, r1
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	eb01 0402 	add.w	r4, r1, r2
 8003fc0:	d902      	bls.n	8003fc8 <memmove+0x10>
 8003fc2:	4284      	cmp	r4, r0
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	d807      	bhi.n	8003fd8 <memmove+0x20>
 8003fc8:	1e43      	subs	r3, r0, #1
 8003fca:	42a1      	cmp	r1, r4
 8003fcc:	d008      	beq.n	8003fe0 <memmove+0x28>
 8003fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fd6:	e7f8      	b.n	8003fca <memmove+0x12>
 8003fd8:	4402      	add	r2, r0
 8003fda:	4601      	mov	r1, r0
 8003fdc:	428a      	cmp	r2, r1
 8003fde:	d100      	bne.n	8003fe2 <memmove+0x2a>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fea:	e7f7      	b.n	8003fdc <memmove+0x24>

08003fec <_sbrk_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d06      	ldr	r5, [pc, #24]	@ (8004008 <_sbrk_r+0x1c>)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	f7fd fd6e 	bl	8001ad8 <_sbrk>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d102      	bne.n	8004006 <_sbrk_r+0x1a>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	b103      	cbz	r3, 8004006 <_sbrk_r+0x1a>
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	20000370 	.word	0x20000370

0800400c <_realloc_r>:
 800400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004010:	4680      	mov	r8, r0
 8004012:	4615      	mov	r5, r2
 8004014:	460c      	mov	r4, r1
 8004016:	b921      	cbnz	r1, 8004022 <_realloc_r+0x16>
 8004018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800401c:	4611      	mov	r1, r2
 800401e:	f7ff bc59 	b.w	80038d4 <_malloc_r>
 8004022:	b92a      	cbnz	r2, 8004030 <_realloc_r+0x24>
 8004024:	f7ff fbea 	bl	80037fc <_free_r>
 8004028:	2400      	movs	r4, #0
 800402a:	4620      	mov	r0, r4
 800402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004030:	f000 f81a 	bl	8004068 <_malloc_usable_size_r>
 8004034:	4285      	cmp	r5, r0
 8004036:	4606      	mov	r6, r0
 8004038:	d802      	bhi.n	8004040 <_realloc_r+0x34>
 800403a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800403e:	d8f4      	bhi.n	800402a <_realloc_r+0x1e>
 8004040:	4629      	mov	r1, r5
 8004042:	4640      	mov	r0, r8
 8004044:	f7ff fc46 	bl	80038d4 <_malloc_r>
 8004048:	4607      	mov	r7, r0
 800404a:	2800      	cmp	r0, #0
 800404c:	d0ec      	beq.n	8004028 <_realloc_r+0x1c>
 800404e:	42b5      	cmp	r5, r6
 8004050:	462a      	mov	r2, r5
 8004052:	4621      	mov	r1, r4
 8004054:	bf28      	it	cs
 8004056:	4632      	movcs	r2, r6
 8004058:	f7ff fbc2 	bl	80037e0 <memcpy>
 800405c:	4621      	mov	r1, r4
 800405e:	4640      	mov	r0, r8
 8004060:	f7ff fbcc 	bl	80037fc <_free_r>
 8004064:	463c      	mov	r4, r7
 8004066:	e7e0      	b.n	800402a <_realloc_r+0x1e>

08004068 <_malloc_usable_size_r>:
 8004068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800406c:	1f18      	subs	r0, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfbc      	itt	lt
 8004072:	580b      	ldrlt	r3, [r1, r0]
 8004074:	18c0      	addlt	r0, r0, r3
 8004076:	4770      	bx	lr

08004078 <_init>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr

08004084 <_fini>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr
