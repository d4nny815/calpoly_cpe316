
final_project_p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be4  08003be4  000050ac  2**0
                  CONTENTS
  4 .ARM          00000008  08003be4  08003be4  00004be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bec  08003bec  000050ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00004bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08003bf4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200000ac  08003ca0  000050ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003ca0  000052a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa7  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e87  00000000  00000000  0000cb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000644  00000000  00000000  0000f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025edc  00000000  00000000  0000f8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c5e  00000000  00000000  000357c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3927  00000000  00000000  0003f426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a0  00000000  00000000  00122d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00125230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038d0 	.word	0x080038d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	080038d0 	.word	0x080038d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <joystick_pin_init>:
 *      Author: danny
 */

#include "Joystick.h"

void joystick_pin_init() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    // PC0 for vertical, PC1 for horizontal
    // PC2 for button
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000274:	4b1a      	ldr	r3, [pc, #104]	@ (80002e0 <joystick_pin_init+0x70>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000278:	4a19      	ldr	r2, [pc, #100]	@ (80002e0 <joystick_pin_init+0x70>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER |= GPIO_MODER_MODE0 | GPIO_MODER_MODE1; // Analog mode
 8000280:	4b18      	ldr	r3, [pc, #96]	@ (80002e4 <joystick_pin_init+0x74>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a17      	ldr	r2, [pc, #92]	@ (80002e4 <joystick_pin_init+0x74>)
 8000286:	f043 030f 	orr.w	r3, r3, #15
 800028a:	6013      	str	r3, [r2, #0]
    GPIOC->ASCR |= GPIO_ASCR_ASC0 | GPIO_ASCR_ASC1;  // Connect analog switch to ADC input
 800028c:	4b15      	ldr	r3, [pc, #84]	@ (80002e4 <joystick_pin_init+0x74>)
 800028e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000290:	4a14      	ldr	r2, [pc, #80]	@ (80002e4 <joystick_pin_init+0x74>)
 8000292:	f043 0303 	orr.w	r3, r3, #3
 8000296:	62d3      	str	r3, [r2, #44]	@ 0x2c

    GPIOC->MODER &= ~GPIO_MODER_MODE2; // Input mode
 8000298:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <joystick_pin_init+0x74>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a11      	ldr	r2, [pc, #68]	@ (80002e4 <joystick_pin_init+0x74>)
 800029e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002a2:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD2; 
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <joystick_pin_init+0x74>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a0e      	ldr	r2, [pc, #56]	@ (80002e4 <joystick_pin_init+0x74>)
 80002aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002ae:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= GPIO_PUPDR_PUPD2_0; // Pull-up
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <joystick_pin_init+0x74>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a0b      	ldr	r2, [pc, #44]	@ (80002e4 <joystick_pin_init+0x74>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	60d3      	str	r3, [r2, #12]
    GPIOC->OTYPER &= ~GPIO_OTYPER_OT2; // Push-pull
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <joystick_pin_init+0x74>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <joystick_pin_init+0x74>)
 80002c2:	f023 0304 	bic.w	r3, r3, #4
 80002c6:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED2; // Low speed
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <joystick_pin_init+0x74>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <joystick_pin_init+0x74>)
 80002ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002d2:	6093      	str	r3, [r2, #8]

    return;
 80002d4:	bf00      	nop
}
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	48000800 	.word	0x48000800

080002e8 <ADC_init>:

void ADC_init() {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0

    // ADC1, IN1 for vertical
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80002ee:	4b59      	ldr	r3, [pc, #356]	@ (8000454 <ADC_init+0x16c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a58      	ldr	r2, [pc, #352]	@ (8000454 <ADC_init+0x16c>)
 80002f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 80002fa:	4b57      	ldr	r3, [pc, #348]	@ (8000458 <ADC_init+0x170>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	4a56      	ldr	r2, [pc, #344]	@ (8000458 <ADC_init+0x170>)
 8000300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000304:	6093      	str	r3, [r2, #8]
    ADC1->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 8000306:	4b55      	ldr	r3, [pc, #340]	@ (800045c <ADC_init+0x174>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a54      	ldr	r2, [pc, #336]	@ (800045c <ADC_init+0x174>)
 800030c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000310:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 8000312:	4b52      	ldr	r3, [pc, #328]	@ (800045c <ADC_init+0x174>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	4a51      	ldr	r2, [pc, #324]	@ (800045c <ADC_init+0x174>)
 8000318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800031c:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up 
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e002      	b.n	800032a <ADC_init+0x42>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3301      	adds	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b63      	cmp	r3, #99	@ 0x63
 800032e:	ddf9      	ble.n	8000324 <ADC_init+0x3c>

    ADC1->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 8000330:	4b4a      	ldr	r3, [pc, #296]	@ (800045c <ADC_init+0x174>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a49      	ldr	r2, [pc, #292]	@ (800045c <ADC_init+0x174>)
 8000336:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800033a:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL; // start calibration
 800033c:	4b47      	ldr	r3, [pc, #284]	@ (800045c <ADC_init+0x174>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a46      	ldr	r2, [pc, #280]	@ (800045c <ADC_init+0x174>)
 8000342:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000346:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000348:	bf00      	nop
 800034a:	4b44      	ldr	r3, [pc, #272]	@ (800045c <ADC_init+0x174>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	2b00      	cmp	r3, #0
 8000350:	dbfb      	blt.n	800034a <ADC_init+0x62>

    ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 8000352:	4b42      	ldr	r3, [pc, #264]	@ (800045c <ADC_init+0x174>)
 8000354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000358:	4a40      	ldr	r2, [pc, #256]	@ (800045c <ADC_init+0x174>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC1->ISR |= ADC_ISR_ADRDY; // clear ready flag
 8000362:	4b3e      	ldr	r3, [pc, #248]	@ (800045c <ADC_init+0x174>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a3d      	ldr	r2, [pc, #244]	@ (800045c <ADC_init+0x174>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6013      	str	r3, [r2, #0]
    ADC1->CR |= ADC_CR_ADEN; // enable ADC
 800036e:	4b3b      	ldr	r3, [pc, #236]	@ (800045c <ADC_init+0x174>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	4a3a      	ldr	r2, [pc, #232]	@ (800045c <ADC_init+0x174>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 800037a:	bf00      	nop
 800037c:	4b37      	ldr	r3, [pc, #220]	@ (800045c <ADC_init+0x174>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <ADC_init+0x94>

    ADC1->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 8000388:	4b34      	ldr	r3, [pc, #208]	@ (800045c <ADC_init+0x174>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
    ADC1->SQR1 = (1 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 800038e:	4b33      	ldr	r3, [pc, #204]	@ (800045c <ADC_init+0x174>)
 8000390:	2240      	movs	r2, #64	@ 0x40
 8000392:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->SMPR1 = (2 << ADC_SMPR1_SMP1_Pos); // 12.5 cycles sampling time
 8000394:	4b31      	ldr	r3, [pc, #196]	@ (800045c <ADC_init+0x174>)
 8000396:	2210      	movs	r2, #16
 8000398:	615a      	str	r2, [r3, #20]

    // ADC3, IN2 for horizontal
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <ADC_init+0x16c>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	4a2d      	ldr	r2, [pc, #180]	@ (8000454 <ADC_init+0x16c>)
 80003a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 80003a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000458 <ADC_init+0x170>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000458 <ADC_init+0x170>)
 80003ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003b0:	6093      	str	r3, [r2, #8]
    ADC3->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 80003b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000460 <ADC_init+0x178>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000460 <ADC_init+0x178>)
 80003b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80003bc:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 80003be:	4b28      	ldr	r3, [pc, #160]	@ (8000460 <ADC_init+0x178>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	4a27      	ldr	r2, [pc, #156]	@ (8000460 <ADC_init+0x178>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c8:	6093      	str	r3, [r2, #8]
    for (int _=0; _<100; _++); // wait for regulator to start up
 80003ca:	2300      	movs	r3, #0
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	e002      	b.n	80003d6 <ADC_init+0xee>
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	3301      	adds	r3, #1
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	2b63      	cmp	r3, #99	@ 0x63
 80003da:	ddf9      	ble.n	80003d0 <ADC_init+0xe8>

    ADC3->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 80003dc:	4b20      	ldr	r3, [pc, #128]	@ (8000460 <ADC_init+0x178>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000460 <ADC_init+0x178>)
 80003e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80003e6:	6093      	str	r3, [r2, #8]
    ADC3->CR |= ADC_CR_ADCAL; // start calibration
 80003e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000460 <ADC_init+0x178>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000460 <ADC_init+0x178>)
 80003ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80003f2:	6093      	str	r3, [r2, #8]
    while (ADC3->CR & ADC_CR_ADCAL); // wait for calibration to finish
 80003f4:	bf00      	nop
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <ADC_init+0x178>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	dbfb      	blt.n	80003f6 <ADC_init+0x10e>

    ADC3->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 80003fe:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <ADC_init+0x178>)
 8000400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000404:	4a16      	ldr	r2, [pc, #88]	@ (8000460 <ADC_init+0x178>)
 8000406:	f023 0301 	bic.w	r3, r3, #1
 800040a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC3->ISR |= ADC_ISR_ADRDY; // clear ready flag
 800040e:	4b14      	ldr	r3, [pc, #80]	@ (8000460 <ADC_init+0x178>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a13      	ldr	r2, [pc, #76]	@ (8000460 <ADC_init+0x178>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6013      	str	r3, [r2, #0]
    ADC3->CR |= ADC_CR_ADEN; // enable ADC
 800041a:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <ADC_init+0x178>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	4a10      	ldr	r2, [pc, #64]	@ (8000460 <ADC_init+0x178>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000426:	bf00      	nop
 8000428:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <ADC_init+0x178>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f9      	beq.n	8000428 <ADC_init+0x140>

    ADC3->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 8000434:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <ADC_init+0x178>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
    ADC3->SQR1 = (2 << ADC_SQR1_SQ1_Pos); // 1 conversion in regular sequence
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ADC_init+0x178>)
 800043c:	2280      	movs	r2, #128	@ 0x80
 800043e:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC3->SMPR1 = (2 << ADC_SMPR1_SMP2_Pos); // 12.5 cycles sampling time
 8000440:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <ADC_init+0x178>)
 8000442:	2280      	movs	r2, #128	@ 0x80
 8000444:	615a      	str	r2, [r3, #20]

    return;
 8000446:	bf00      	nop
}
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	50040300 	.word	0x50040300
 800045c:	50040000 	.word	0x50040000
 8000460:	50040200 	.word	0x50040200

08000464 <joystick_init>:

void joystick_init() {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
    joystick_pin_init();
 8000468:	f7ff ff02 	bl	8000270 <joystick_pin_init>
    ADC_init();
 800046c:	f7ff ff3c 	bl	80002e8 <ADC_init>

    return;
 8000470:	bf00      	nop
}
 8000472:	bd80      	pop	{r7, pc}

08000474 <get_joystick_x>:

uint16_t get_joystick_x() {
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
    ADC3->CR |= ADC_CR_ADSTART; // start conversion
 8000478:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <get_joystick_x+0x30>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a09      	ldr	r2, [pc, #36]	@ (80004a4 <get_joystick_x+0x30>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6093      	str	r3, [r2, #8]
    while (!(ADC3->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 8000484:	bf00      	nop
 8000486:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <get_joystick_x+0x30>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f9      	beq.n	8000486 <get_joystick_x+0x12>

    return ADC3->DR;
 8000492:	4b04      	ldr	r3, [pc, #16]	@ (80004a4 <get_joystick_x+0x30>)
 8000494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000496:	b29b      	uxth	r3, r3
    
}
 8000498:	4618      	mov	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	50040200 	.word	0x50040200

080004a8 <get_joystick_y>:

uint16_t get_joystick_y() {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
    ADC1->CR |= ADC_CR_ADSTART; // start conversion
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <get_joystick_y+0x30>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <get_joystick_y+0x30>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_EOC)); // wait for conversion to finish
 80004b8:	bf00      	nop
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <get_joystick_y+0x30>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <get_joystick_y+0x12>

    return ADC1->DR;
 80004c6:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <get_joystick_y+0x30>)
 80004c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ca:	b29b      	uxth	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	50040000 	.word	0x50040000

080004dc <get_joystick_button>:

uint8_t get_joystick_button() {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
    return !(GPIOC->IDR & GPIO_IDR_ID2);
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <get_joystick_button+0x20>)
 80004e2:	691b      	ldr	r3, [r3, #16]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	bf0c      	ite	eq
 80004ec:	2301      	moveq	r3, #1
 80004ee:	2300      	movne	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	48000800 	.word	0x48000800

08000500 <same_point>:

#include "Objects.h"

static BodyPart_t old_tail;

uint8_t same_point(Point_t a, Point_t b) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	80b8      	strh	r0, [r7, #4]
 8000508:	8039      	strh	r1, [r7, #0]
    return (a.x == b.x && a.y == b.y);
 800050a:	793a      	ldrb	r2, [r7, #4]
 800050c:	783b      	ldrb	r3, [r7, #0]
 800050e:	429a      	cmp	r2, r3
 8000510:	d105      	bne.n	800051e <same_point+0x1e>
 8000512:	797a      	ldrb	r2, [r7, #5]
 8000514:	787b      	ldrb	r3, [r7, #1]
 8000516:	429a      	cmp	r2, r3
 8000518:	d101      	bne.n	800051e <same_point+0x1e>
 800051a:	2301      	movs	r3, #1
 800051c:	e000      	b.n	8000520 <same_point+0x20>
 800051e:	2300      	movs	r3, #0
 8000520:	b2db      	uxtb	r3, r3
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <grid_init>:


/**
 * @brief Initialize the grid with black color
*/
void grid_init(uint8_t high_score) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
    uart_clear_screen();
 800053a:	f001 f841 	bl	80015c0 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 800053e:	4838      	ldr	r0, [pc, #224]	@ (8000620 <grid_init+0xf0>)
 8000540:	f001 f830 	bl	80015a4 <uart_send_escape>

    // print top and bottom border
    sprintf(snake_print_buffer, "[%u;%uH", TOP_BOUND, LEFT_BOUND);
 8000544:	2308      	movs	r3, #8
 8000546:	2203      	movs	r2, #3
 8000548:	4936      	ldr	r1, [pc, #216]	@ (8000624 <grid_init+0xf4>)
 800054a:	4837      	ldr	r0, [pc, #220]	@ (8000628 <grid_init+0xf8>)
 800054c:	f002 fd20 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000550:	4835      	ldr	r0, [pc, #212]	@ (8000628 <grid_init+0xf8>)
 8000552:	f001 f827 	bl	80015a4 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000556:	2308      	movs	r3, #8
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e005      	b.n	8000568 <grid_init+0x38>
        uart_send_char('=');
 800055c:	203d      	movs	r0, #61	@ 0x3d
 800055e:	f000 ffe3 	bl	8001528 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	2b64      	cmp	r3, #100	@ 0x64
 800056c:	ddf6      	ble.n	800055c <grid_init+0x2c>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND, LEFT_BOUND);
 800056e:	2308      	movs	r3, #8
 8000570:	2232      	movs	r2, #50	@ 0x32
 8000572:	492c      	ldr	r1, [pc, #176]	@ (8000624 <grid_init+0xf4>)
 8000574:	482c      	ldr	r0, [pc, #176]	@ (8000628 <grid_init+0xf8>)
 8000576:	f002 fd0b 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 800057a:	482b      	ldr	r0, [pc, #172]	@ (8000628 <grid_init+0xf8>)
 800057c:	f001 f812 	bl	80015a4 <uart_send_escape>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 8000580:	2308      	movs	r3, #8
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	e005      	b.n	8000592 <grid_init+0x62>
        uart_send_char('=');
 8000586:	203d      	movs	r0, #61	@ 0x3d
 8000588:	f000 ffce 	bl	8001528 <uart_send_char>
    for (int i = LEFT_BOUND; i < RIGHT_BOUND + 1; i++) {
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	3301      	adds	r3, #1
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	2b64      	cmp	r3, #100	@ 0x64
 8000596:	ddf6      	ble.n	8000586 <grid_init+0x56>
    }

    // print left and right border
    for (int i = TOP_BOUND + 1; i < BOTTOM_BOUND; i++) {
 8000598:	2304      	movs	r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e01a      	b.n	80005d4 <grid_init+0xa4>
        sprintf(snake_print_buffer, "[%u;%uH", i, LEFT_BOUND);
 800059e:	2308      	movs	r3, #8
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4920      	ldr	r1, [pc, #128]	@ (8000624 <grid_init+0xf4>)
 80005a4:	4820      	ldr	r0, [pc, #128]	@ (8000628 <grid_init+0xf8>)
 80005a6:	f002 fcf3 	bl	8002f90 <siprintf>
        uart_send_escape(snake_print_buffer);
 80005aa:	481f      	ldr	r0, [pc, #124]	@ (8000628 <grid_init+0xf8>)
 80005ac:	f000 fffa 	bl	80015a4 <uart_send_escape>
        uart_send_char('|');
 80005b0:	207c      	movs	r0, #124	@ 0x7c
 80005b2:	f000 ffb9 	bl	8001528 <uart_send_char>

        sprintf(snake_print_buffer, "[%u;%uH", i, RIGHT_BOUND);
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	491a      	ldr	r1, [pc, #104]	@ (8000624 <grid_init+0xf4>)
 80005bc:	481a      	ldr	r0, [pc, #104]	@ (8000628 <grid_init+0xf8>)
 80005be:	f002 fce7 	bl	8002f90 <siprintf>
        uart_send_escape(snake_print_buffer);
 80005c2:	4819      	ldr	r0, [pc, #100]	@ (8000628 <grid_init+0xf8>)
 80005c4:	f000 ffee 	bl	80015a4 <uart_send_escape>
        uart_send_char('|');
 80005c8:	207c      	movs	r0, #124	@ 0x7c
 80005ca:	f000 ffad 	bl	8001528 <uart_send_char>
    for (int i = TOP_BOUND + 1; i < BOTTOM_BOUND; i++) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b31      	cmp	r3, #49	@ 0x31
 80005d8:	dde1      	ble.n	800059e <grid_init+0x6e>
    }

    sprintf(snake_print_buffer, "[%u;%uH", BOTTOM_BOUND + 5, RIGHT_BOUND - 15);
 80005da:	2355      	movs	r3, #85	@ 0x55
 80005dc:	2237      	movs	r2, #55	@ 0x37
 80005de:	4911      	ldr	r1, [pc, #68]	@ (8000624 <grid_init+0xf4>)
 80005e0:	4811      	ldr	r0, [pc, #68]	@ (8000628 <grid_init+0xf8>)
 80005e2:	f002 fcd5 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 80005e6:	4810      	ldr	r0, [pc, #64]	@ (8000628 <grid_init+0xf8>)
 80005e8:	f000 ffdc 	bl	80015a4 <uart_send_escape>
    sprintf(snake_print_buffer, "High Score: %u", high_score);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	461a      	mov	r2, r3
 80005f0:	490e      	ldr	r1, [pc, #56]	@ (800062c <grid_init+0xfc>)
 80005f2:	480d      	ldr	r0, [pc, #52]	@ (8000628 <grid_init+0xf8>)
 80005f4:	f002 fccc 	bl	8002f90 <siprintf>
    uart_send_string(snake_print_buffer);
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <grid_init+0xf8>)
 80005fa:	f000 ffad 	bl	8001558 <uart_send_string>

    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X - 7);
 80005fe:	2308      	movs	r3, #8
 8000600:	2237      	movs	r2, #55	@ 0x37
 8000602:	4908      	ldr	r1, [pc, #32]	@ (8000624 <grid_init+0xf4>)
 8000604:	4808      	ldr	r0, [pc, #32]	@ (8000628 <grid_init+0xf8>)
 8000606:	f002 fcc3 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 800060a:	4807      	ldr	r0, [pc, #28]	@ (8000628 <grid_init+0xf8>)
 800060c:	f000 ffca 	bl	80015a4 <uart_send_escape>
    uart_send_string("Score: ");
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <grid_init+0x100>)
 8000612:	f000 ffa1 	bl	8001558 <uart_send_string>




    return;
 8000616:	bf00      	nop
}
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	080038e8 	.word	0x080038e8
 8000624:	080038ec 	.word	0x080038ec
 8000628:	200000c8 	.word	0x200000c8
 800062c:	080038f4 	.word	0x080038f4
 8000630:	08003904 	.word	0x08003904

08000634 <grid_draw>:
/**
 * @brief Draw the snake and food on the grid
 * @param snake: the snake object
 * @param food: the food object
*/
void grid_draw(Snake_t snake, Food_t food) {
 8000634:	b084      	sub	sp, #16
 8000636:	b580      	push	{r7, lr}
 8000638:	b0a4      	sub	sp, #144	@ 0x90
 800063a:	af24      	add	r7, sp, #144	@ 0x90
 800063c:	f107 0c08 	add.w	ip, r7, #8
 8000640:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // uart_clear_screen();
    snake_draw(snake);
 8000644:	4668      	mov	r0, sp
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2290      	movs	r2, #144	@ 0x90
 800064c:	4619      	mov	r1, r3
 800064e:	f002 fcf3 	bl	8003038 <memcpy>
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000658:	f000 f806 	bl	8000668 <snake_draw>

    return;
 800065c:	bf00      	nop
}
 800065e:	46bd      	mov	sp, r7
 8000660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <snake_draw>:

/**
 * @brief Draw the snake object
 * @param snake: the snake object
*/
void snake_draw(Snake_t snake) {
 8000668:	b084      	sub	sp, #16
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
 800066e:	f107 0c08 	add.w	ip, r7, #8
 8000672:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // erase tail
    // sprintf(snake_print_buffer, "[%u;%uH", snake.tail->pos.y, snake.tail->pos.x);
    sprintf(snake_print_buffer, "[%u;%uH", old_tail.pos.y, old_tail.pos.x);
 8000676:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <snake_draw+0x80>)
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	461a      	mov	r2, r3
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <snake_draw+0x80>)
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	491a      	ldr	r1, [pc, #104]	@ (80006ec <snake_draw+0x84>)
 8000682:	481b      	ldr	r0, [pc, #108]	@ (80006f0 <snake_draw+0x88>)
 8000684:	f002 fc84 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000688:	4819      	ldr	r0, [pc, #100]	@ (80006f0 <snake_draw+0x88>)
 800068a:	f000 ff8b 	bl	80015a4 <uart_send_escape>
    uart_send_char(' ');
 800068e:	2020      	movs	r0, #32
 8000690:	f000 ff4a 	bl	8001528 <uart_send_char>

    // draw head
    sprintf(snake_print_buffer, "[%u;%uH", snake.body[0].pos.y, snake.body[0].pos.x);
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	461a      	mov	r2, r3
 8000698:	7abb      	ldrb	r3, [r7, #10]
 800069a:	4914      	ldr	r1, [pc, #80]	@ (80006ec <snake_draw+0x84>)
 800069c:	4814      	ldr	r0, [pc, #80]	@ (80006f0 <snake_draw+0x88>)
 800069e:	f002 fc77 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 80006a2:	4813      	ldr	r0, [pc, #76]	@ (80006f0 <snake_draw+0x88>)
 80006a4:	f000 ff7e 	bl	80015a4 <uart_send_escape>
    uart_send_escape("[32m"); // green
 80006a8:	4812      	ldr	r0, [pc, #72]	@ (80006f4 <snake_draw+0x8c>)
 80006aa:	f000 ff7b 	bl	80015a4 <uart_send_escape>
    uart_send_char('O');
 80006ae:	204f      	movs	r0, #79	@ 0x4f
 80006b0:	f000 ff3a 	bl	8001528 <uart_send_char>

    // print current score
    sprintf(snake_print_buffer, "[%u;%uH", SCORE_CURSOR_Y, SCORE_CURSOR_X);
 80006b4:	230f      	movs	r3, #15
 80006b6:	2237      	movs	r2, #55	@ 0x37
 80006b8:	490c      	ldr	r1, [pc, #48]	@ (80006ec <snake_draw+0x84>)
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <snake_draw+0x88>)
 80006bc:	f002 fc68 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 80006c0:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <snake_draw+0x88>)
 80006c2:	f000 ff6f 	bl	80015a4 <uart_send_escape>
    sprintf(snake_print_buffer, "%u", snake.score);
 80006c6:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80006ca:	461a      	mov	r2, r3
 80006cc:	490a      	ldr	r1, [pc, #40]	@ (80006f8 <snake_draw+0x90>)
 80006ce:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <snake_draw+0x88>)
 80006d0:	f002 fc5e 	bl	8002f90 <siprintf>
    uart_send_string(snake_print_buffer);
 80006d4:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <snake_draw+0x88>)
 80006d6:	f000 ff3f 	bl	8001558 <uart_send_string>
    
    return;
 80006da:	bf00      	nop
}
 80006dc:	46bd      	mov	sp, r7
 80006de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e2:	b004      	add	sp, #16
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2000012c 	.word	0x2000012c
 80006ec:	080038ec 	.word	0x080038ec
 80006f0:	200000c8 	.word	0x200000c8
 80006f4:	0800390c 	.word	0x0800390c
 80006f8:	08003914 	.word	0x08003914

080006fc <snake_init>:

/**
 * @brief Initialize the snake object
 * @return the snake object
*/
void snake_init(Snake_t* snake) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    snake->len = START_LEN;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2205      	movs	r2, #5
 8000708:	701a      	strb	r2, [r3, #0]
    snake->dir = NORTH;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2200      	movs	r2, #0
 800070e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    snake->alive = 1;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    snake->score = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
    
    uint8_t x = get_random(LEFT_BOUND + START_BOUNDARY_OFFSET, RIGHT_BOUND - START_BOUNDARY_OFFSET);
 8000722:	215a      	movs	r1, #90	@ 0x5a
 8000724:	2012      	movs	r0, #18
 8000726:	f000 fb03 	bl	8000d30 <get_random>
 800072a:	4603      	mov	r3, r0
 800072c:	74fb      	strb	r3, [r7, #19]
    uint8_t y = get_random(TOP_BOUND + START_BOUNDARY_OFFSET, BOTTOM_BOUND - START_BOUNDARY_OFFSET - snake->len - 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 8000736:	4619      	mov	r1, r3
 8000738:	200d      	movs	r0, #13
 800073a:	f000 faf9 	bl	8000d30 <get_random>
 800073e:	4603      	mov	r3, r0
 8000740:	74bb      	strb	r3, [r7, #18]

    for (int i = 0; i < snake->len; i++) {
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	e022      	b.n	800078e <snake_init+0x92>
        snake->body[i].valid = 1;
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	69fa      	ldr	r2, [r7, #28]
 800074c:	4613      	mov	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	440b      	add	r3, r1
 8000754:	3301      	adds	r3, #1
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.x = x;
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	69fa      	ldr	r2, [r7, #28]
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	440b      	add	r3, r1
 8000766:	3302      	adds	r3, #2
 8000768:	7cfa      	ldrb	r2, [r7, #19]
 800076a:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = y + i;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7cbb      	ldrb	r3, [r7, #18]
 8000772:	4413      	add	r3, r2
 8000774:	b2d8      	uxtb	r0, r3
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	440b      	add	r3, r1
 8000782:	3303      	adds	r3, #3
 8000784:	4602      	mov	r2, r0
 8000786:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake->len; i++) {
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3301      	adds	r3, #1
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	4293      	cmp	r3, r2
 8000798:	dbd6      	blt.n	8000748 <snake_init+0x4c>
    }

    snake->tail = &(snake->body[snake->len - 1]);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	1e5a      	subs	r2, r3, #1
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    old_tail = *(snake->tail);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <snake_init+0x148>)
 80007ba:	8811      	ldrh	r1, [r2, #0]
 80007bc:	7892      	ldrb	r2, [r2, #2]
 80007be:	8019      	strh	r1, [r3, #0]
 80007c0:	709a      	strb	r2, [r3, #2]

    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	e00b      	b.n	80007e2 <snake_init+0xe6>
        snake->body[i].valid = 0;
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	3301      	adds	r3, #1
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len; i < MAX_SNAKE_LEN; i++) {
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	3301      	adds	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	2b31      	cmp	r3, #49	@ 0x31
 80007e6:	ddf0      	ble.n	80007ca <snake_init+0xce>
    }
    
    // draw initial snake
    uart_send_escape("[32m"); // green
 80007e8:	4817      	ldr	r0, [pc, #92]	@ (8000848 <snake_init+0x14c>)
 80007ea:	f000 fedb 	bl	80015a4 <uart_send_escape>
    BodyPart_t body;
    for (int i = 0; i < snake->len; i++) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e01c      	b.n	800082e <snake_init+0x132>
        body = snake->body[i];
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	18ca      	adds	r2, r1, r3
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	3201      	adds	r2, #1
 8000806:	8811      	ldrh	r1, [r2, #0]
 8000808:	7892      	ldrb	r2, [r2, #2]
 800080a:	8019      	strh	r1, [r3, #0]
 800080c:	709a      	strb	r2, [r3, #2]
        sprintf(snake_print_buffer, "[%u;%uH", body.pos.y, body.pos.x);
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	461a      	mov	r2, r3
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	490d      	ldr	r1, [pc, #52]	@ (800084c <snake_init+0x150>)
 8000816:	480e      	ldr	r0, [pc, #56]	@ (8000850 <snake_init+0x154>)
 8000818:	f002 fbba 	bl	8002f90 <siprintf>
        uart_send_escape(snake_print_buffer);
 800081c:	480c      	ldr	r0, [pc, #48]	@ (8000850 <snake_init+0x154>)
 800081e:	f000 fec1 	bl	80015a4 <uart_send_escape>
        uart_send_char('O');
 8000822:	204f      	movs	r0, #79	@ 0x4f
 8000824:	f000 fe80 	bl	8001528 <uart_send_char>
    for (int i = 0; i < snake->len; i++) {
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	3301      	adds	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	4293      	cmp	r3, r2
 8000838:	dbdc      	blt.n	80007f4 <snake_init+0xf8>
    }

    return;
 800083a:	bf00      	nop
}
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000012c 	.word	0x2000012c
 8000848:	0800390c 	.word	0x0800390c
 800084c:	080038ec 	.word	0x080038ec
 8000850:	200000c8 	.word	0x200000c8

08000854 <snake_move>:
/**
 * @brief Move the snake object
 * @return  -1 if snake ded
 *           0 if snake is alive
*/
int8_t snake_move(Snake_t* snake) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    if (!snake->alive) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <snake_move+0x18>
        return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800086a:	e098      	b.n	800099e <snake_move+0x14a>
    }

    snake_change_dir(snake);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f8e5 	bl	8000a3c <snake_change_dir>

    // check if snake collides with boundary
    if (!WITHIN_BOUND(snake->body[0].pos.x, snake->body[0].pos.y)) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	2b08      	cmp	r3, #8
 8000878:	d90b      	bls.n	8000892 <snake_move+0x3e>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	2b63      	cmp	r3, #99	@ 0x63
 8000880:	d807      	bhi.n	8000892 <snake_move+0x3e>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	78db      	ldrb	r3, [r3, #3]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d903      	bls.n	8000892 <snake_move+0x3e>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	78db      	ldrb	r3, [r3, #3]
 800088e:	2b31      	cmp	r3, #49	@ 0x31
 8000890:	d905      	bls.n	800089e <snake_move+0x4a>
        snake_die(snake);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 f8c0 	bl	8000a18 <snake_die>
        return -1;
 8000898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800089c:	e07f      	b.n	800099e <snake_move+0x14a>
    }

    BodyPart_t* p_head = &snake->body[0];
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]

    old_tail = *(snake->tail);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80008aa:	4b3f      	ldr	r3, [pc, #252]	@ (80009a8 <snake_move+0x154>)
 80008ac:	8811      	ldrh	r1, [r2, #0]
 80008ae:	7892      	ldrb	r2, [r2, #2]
 80008b0:	8019      	strh	r1, [r3, #0]
 80008b2:	709a      	strb	r2, [r3, #2]

    // move body parts
    for (int i = snake->len - 1; i > 0; i--) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e026      	b.n	800090c <snake_move+0xb8>
        snake->body[i].pos.x = snake->body[i - 1].pos.x;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	3302      	adds	r3, #2
 80008ce:	7818      	ldrb	r0, [r3, #0]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	440b      	add	r3, r1
 80008dc:	3302      	adds	r3, #2
 80008de:	4602      	mov	r2, r0
 80008e0:	701a      	strb	r2, [r3, #0]
        snake->body[i].pos.y = snake->body[i - 1].pos.y;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	440b      	add	r3, r1
 80008f0:	3303      	adds	r3, #3
 80008f2:	7818      	ldrb	r0, [r3, #0]
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	440b      	add	r3, r1
 8000900:	3303      	adds	r3, #3
 8000902:	4602      	mov	r2, r0
 8000904:	701a      	strb	r2, [r3, #0]
    for (int i = snake->len - 1; i > 0; i--) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3b01      	subs	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	dcd5      	bgt.n	80008be <snake_move+0x6a>
    }

    // move head
    switch (snake->dir) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000918:	2b03      	cmp	r3, #3
 800091a:	d827      	bhi.n	800096c <snake_move+0x118>
 800091c:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <snake_move+0xd0>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	08000943 	.word	0x08000943
 800092c:	08000951 	.word	0x08000951
 8000930:	0800095f 	.word	0x0800095f
        case NORTH:
            p_head->pos.y--;
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	3b01      	subs	r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	709a      	strb	r2, [r3, #2]
            break;
 8000940:	e015      	b.n	800096e <snake_move+0x11a>
        case EAST:
            p_head->pos.x++;
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	3301      	adds	r3, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	705a      	strb	r2, [r3, #1]
            break;
 800094e:	e00e      	b.n	800096e <snake_move+0x11a>
        case SOUTH:
            p_head->pos.y++;
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	709a      	strb	r2, [r3, #2]
            break;
 800095c:	e007      	b.n	800096e <snake_move+0x11a>
        case WEST:
            p_head->pos.x--;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	3b01      	subs	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	705a      	strb	r2, [r3, #1]
            break;
 800096a:	e000      	b.n	800096e <snake_move+0x11a>
        default:
            break;
 800096c:	bf00      	nop
    }

    // check if snake collides with itself
    if (snake_hit_itself(p_head->pos, snake->body) == -1) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	1c59      	adds	r1, r3, #1
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	785a      	ldrb	r2, [r3, #1]
 8000976:	789b      	ldrb	r3, [r3, #2]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	431a      	orrs	r2, r3
 800097c:	2300      	movs	r3, #0
 800097e:	f362 030f 	bfi	r3, r2, #0, #16
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f812 	bl	80009ac <snake_hit_itself>
 8000988:	4603      	mov	r3, r0
 800098a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800098e:	d105      	bne.n	800099c <snake_move+0x148>
        snake_die(snake);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f841 	bl	8000a18 <snake_die>
        return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800099a:	e000      	b.n	800099e <snake_move+0x14a>
    }

    return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000012c 	.word	0x2000012c

080009ac <snake_hit_itself>:
/**
 * @brief Check if snake collides with itself
 * @return  0 if snake is alive,
 *          non-zero if snake is ded  
*/
int8_t snake_hit_itself(Point_t snake_head, BodyPart_t* body_parts) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	80b8      	strh	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 80009b6:	2301      	movs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e022      	b.n	8000a02 <snake_hit_itself+0x56>
        if (body_parts[i].valid) {
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d01d      	beq.n	8000a0a <snake_hit_itself+0x5e>
            if (same_point(snake_head, body_parts[i].pos)) {
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	785a      	ldrb	r2, [r3, #1]
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	431a      	orrs	r2, r3
 80009e2:	2300      	movs	r3, #0
 80009e4:	f362 030f 	bfi	r3, r2, #0, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fd88 	bl	8000500 <same_point>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <snake_hit_itself+0x50>
                return -1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009fa:	e008      	b.n	8000a0e <snake_hit_itself+0x62>
    for (int i = 1; i < MAX_SNAKE_LEN; i++) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b31      	cmp	r3, #49	@ 0x31
 8000a06:	ddd9      	ble.n	80009bc <snake_hit_itself+0x10>
 8000a08:	e000      	b.n	8000a0c <snake_hit_itself+0x60>
            }
        }
        else {
            break;
 8000a0a:	bf00      	nop
        }
    }

    return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <snake_die>:

/**
 * @brief kill the snake
 * @param snake: the snake object
*/
void snake_die(Snake_t* snake) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    snake->alive = 0;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    uart_println("Snake ded");
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <snake_die+0x20>)
 8000a2a:	f000 fdab 	bl	8001584 <uart_println>
 
    return;
 8000a2e:	bf00      	nop
}
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	08003918 	.word	0x08003918

08000a3c <snake_change_dir>:
 * @brief Read the UART input and change the snake direction
 * @param snake: the snake object
 * @return 0 if no change
 *          non zero if change
*/
uint8_t snake_change_dir(Snake_t* snake) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    uint16_t joy_x = get_joystick_x();
 8000a44:	f7ff fd16 	bl	8000474 <get_joystick_x>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	81bb      	strh	r3, [r7, #12]
    uint16_t joy_y = get_joystick_y();
 8000a4c:	f7ff fd2c 	bl	80004a8 <get_joystick_y>
 8000a50:	4603      	mov	r3, r0
 8000a52:	817b      	strh	r3, [r7, #10]

    Direction_t new_dir;
    uint8_t x_axis;

    x_axis = abs(joy_x - 2048) > abs(joy_y - 2048); 
 8000a54:	89bb      	ldrh	r3, [r7, #12]
 8000a56:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000a5a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a5e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a62:	897b      	ldrh	r3, [r7, #10]
 8000a64:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bfb8      	it	lt
 8000a6c:	425b      	neglt	r3, r3
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	bfcc      	ite	gt
 8000a72:	2301      	movgt	r3, #1
 8000a74:	2300      	movle	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	727b      	strb	r3, [r7, #9]

    if (x_axis) {
 8000a7a:	7a7b      	ldrb	r3, [r7, #9]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d010      	beq.n	8000aa2 <snake_change_dir+0x66>
        if (joy_x > RIGHT_QUARTER) {
 8000a80:	89bb      	ldrh	r3, [r7, #12]
 8000a82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000a86:	d302      	bcc.n	8000a8e <snake_change_dir+0x52>
            new_dir = EAST;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e01a      	b.n	8000ac4 <snake_change_dir+0x88>
        }
        else if (joy_x < LEFT_QUARTER) {
 8000a8e:	89bb      	ldrh	r3, [r7, #12]
 8000a90:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d802      	bhi.n	8000a9e <snake_change_dir+0x62>
            new_dir = WEST;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e012      	b.n	8000ac4 <snake_change_dir+0x88>
        }
        else {
            return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e048      	b.n	8000b34 <snake_change_dir+0xf8>
        }
    }
    else {
        if (joy_y > TOP_QUARTER) {
 8000aa2:	897b      	ldrh	r3, [r7, #10]
 8000aa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000aa8:	d302      	bcc.n	8000ab0 <snake_change_dir+0x74>
            new_dir = NORTH;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	e009      	b.n	8000ac4 <snake_change_dir+0x88>
        }
        else if (joy_y < BOTTOM_QUARTER) {
 8000ab0:	897b      	ldrh	r3, [r7, #10]
 8000ab2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d802      	bhi.n	8000ac0 <snake_change_dir+0x84>
            new_dir = SOUTH;
 8000aba:	2302      	movs	r3, #2
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e001      	b.n	8000ac4 <snake_change_dir+0x88>
        } else {
            return 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e037      	b.n	8000b34 <snake_change_dir+0xf8>
        }
    }

    // change dir as long as not 180, if same dir then nothing happens
    switch (snake->dir) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d831      	bhi.n	8000b32 <snake_change_dir+0xf6>
 8000ace:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad4 <snake_change_dir+0x98>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000af5 	.word	0x08000af5
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	08000b15 	.word	0x08000b15
    case NORTH:
        if (new_dir != SOUTH) snake->dir = new_dir;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d01c      	beq.n	8000b24 <snake_change_dir+0xe8>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7bfa      	ldrb	r2, [r7, #15]
 8000aee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000af2:	e017      	b.n	8000b24 <snake_change_dir+0xe8>
    case EAST:
        if (new_dir != WEST) snake->dir = new_dir;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d016      	beq.n	8000b28 <snake_change_dir+0xec>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000b02:	e011      	b.n	8000b28 <snake_change_dir+0xec>
    case SOUTH:
        if (new_dir != NORTH) snake->dir = new_dir;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d010      	beq.n	8000b2c <snake_change_dir+0xf0>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7bfa      	ldrb	r2, [r7, #15]
 8000b0e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000b12:	e00b      	b.n	8000b2c <snake_change_dir+0xf0>
    case WEST:
        if (new_dir != EAST) snake->dir = new_dir;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d00a      	beq.n	8000b30 <snake_change_dir+0xf4>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
        break;
 8000b22:	e005      	b.n	8000b30 <snake_change_dir+0xf4>
        break;
 8000b24:	bf00      	nop
 8000b26:	e004      	b.n	8000b32 <snake_change_dir+0xf6>
        break;
 8000b28:	bf00      	nop
 8000b2a:	e002      	b.n	8000b32 <snake_change_dir+0xf6>
        break;
 8000b2c:	bf00      	nop
 8000b2e:	e000      	b.n	8000b32 <snake_change_dir+0xf6>
        break;
 8000b30:	bf00      	nop
    }

    return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <snake_check_food>:
/**
 * @brief check snake head collides with food
 * @return  0 if no
 *          non-zero if yes
*/
uint8_t snake_check_food(Snake_t snake, Food_t food) {
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	f107 0c08 	add.w	ip, r7, #8
 8000b46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return same_point((snake.body[0]).pos, food);
 8000b4a:	897a      	ldrh	r2, [r7, #10]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f362 030f 	bfi	r3, r2, #0, #16
 8000b52:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fcd2 	bl	8000500 <same_point>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b66:	b004      	add	sp, #16
 8000b68:	4770      	bx	lr

08000b6a <snake_grow>:

/**
 * @brief Grow the snake
 * @param snake: the snake object
*/
void snake_grow(Snake_t* snake) {
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
    snake->body[snake->len].valid = 1;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4619      	mov	r1, r3
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	440b      	add	r3, r1
 8000b80:	4413      	add	r3, r2
 8000b82:	3301      	adds	r3, #1
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
    snake->body[snake->len].pos = snake->body[snake->len - 1].pos;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	1e5a      	subs	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	4603      	mov	r3, r0
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4403      	add	r3, r0
 8000b9c:	440b      	add	r3, r1
 8000b9e:	1c98      	adds	r0, r3, #2
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	3302      	adds	r3, #2
 8000bac:	4602      	mov	r2, r0
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	8013      	strh	r3, [r2, #0]
    snake->tail = &snake->body[snake->len];
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    
    snake->len++;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	701a      	strb	r2, [r3, #0]
    snake->score++;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

    return;
 8000be6:	bf00      	nop
}
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <snake_eat>:
/**
 * @brief Eat the food
 * @param snake: the snake object
 * @param food: the food object
*/
void snake_eat(Snake_t* snake, Food_t* food) {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
    snake_grow(snake);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ffb4 	bl	8000b6a <snake_grow>
    food_respawn(food);
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f000 f826 	bl	8000c54 <food_respawn>

    return;
 8000c08:	bf00      	nop
}
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <snake_get_score>:
/**
 * @brief get snake score
 * @param snake: snake object
 * @return snake score
*/
uint8_t snake_get_score(Snake_t snake) {
 8000c10:	b084      	sub	sp, #16
 8000c12:	b490      	push	{r4, r7}
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	f107 0408 	add.w	r4, r7, #8
 8000c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return snake.score;
 8000c1e:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc90      	pop	{r4, r7}
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <food_init>:

/**
 * @brief Initialize the food object
 * @return the food object
*/
Food_t food_init() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
    Food_t food;
    food_respawn(&food);
 8000c32:	463b      	mov	r3, r7
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f80d 	bl	8000c54 <food_respawn>

    return food;
 8000c3a:	883b      	ldrh	r3, [r7, #0]
 8000c3c:	80bb      	strh	r3, [r7, #4]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	793a      	ldrb	r2, [r7, #4]
 8000c42:	f362 0307 	bfi	r3, r2, #0, #8
 8000c46:	797a      	ldrb	r2, [r7, #5]
 8000c48:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <food_respawn>:

/**
 * @brief Respawn the food object
 * @param food: the food object
*/
void food_respawn(Food_t* food) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    food->x = get_random(LEFT_BOUND + 1, RIGHT_BOUND - 1);
 8000c5c:	2163      	movs	r1, #99	@ 0x63
 8000c5e:	2009      	movs	r0, #9
 8000c60:	f000 f866 	bl	8000d30 <get_random>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	701a      	strb	r2, [r3, #0]
    food->y = get_random(TOP_BOUND + 1, BOTTOM_BOUND - 1);
 8000c6c:	2131      	movs	r1, #49	@ 0x31
 8000c6e:	2004      	movs	r0, #4
 8000c70:	f000 f85e 	bl	8000d30 <get_random>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	705a      	strb	r2, [r3, #1]

    food_draw(*food);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	785b      	ldrb	r3, [r3, #1]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	431a      	orrs	r2, r3
 8000c86:	2300      	movs	r3, #0
 8000c88:	f362 030f 	bfi	r3, r2, #0, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f805 	bl	8000c9c <food_draw>
    return;
 8000c92:	bf00      	nop
}
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <food_draw>:


/**
 * @brief Draw the food object
*/
void food_draw(Food_t food) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	80b8      	strh	r0, [r7, #4]
    sprintf(snake_print_buffer, "[%u;%uH", food.y, food.x);
 8000ca4:	797b      	ldrb	r3, [r7, #5]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	793b      	ldrb	r3, [r7, #4]
 8000caa:	490b      	ldr	r1, [pc, #44]	@ (8000cd8 <food_draw+0x3c>)
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <food_draw+0x40>)
 8000cae:	f002 f96f 	bl	8002f90 <siprintf>
    uart_send_escape(snake_print_buffer);
 8000cb2:	480a      	ldr	r0, [pc, #40]	@ (8000cdc <food_draw+0x40>)
 8000cb4:	f000 fc76 	bl	80015a4 <uart_send_escape>
    uart_send_escape("[5m"); // blinking
 8000cb8:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <food_draw+0x44>)
 8000cba:	f000 fc73 	bl	80015a4 <uart_send_escape>
    uart_send_escape("[31m"); // red
 8000cbe:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <food_draw+0x48>)
 8000cc0:	f000 fc70 	bl	80015a4 <uart_send_escape>
    uart_send_char('X');
 8000cc4:	2058      	movs	r0, #88	@ 0x58
 8000cc6:	f000 fc2f 	bl	8001528 <uart_send_char>
    uart_send_escape("[0m"); // back to default
 8000cca:	4807      	ldr	r0, [pc, #28]	@ (8000ce8 <food_draw+0x4c>)
 8000ccc:	f000 fc6a 	bl	80015a4 <uart_send_escape>


    return;
 8000cd0:	bf00      	nop
}
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	080038ec 	.word	0x080038ec
 8000cdc:	200000c8 	.word	0x200000c8
 8000ce0:	08003924 	.word	0x08003924
 8000ce4:	08003928 	.word	0x08003928
 8000ce8:	080038e8 	.word	0x080038e8

08000cec <MX_RNG_Init>:

static void MX_RNG_Init(void);
RNG_HandleTypeDef hrng;


static void MX_RNG_Init(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

    hrng.Instance = RNG;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_RNG_Init+0x20>)
 8000cf2:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <MX_RNG_Init+0x24>)
 8000cf4:	601a      	str	r2, [r3, #0]
    if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_RNG_Init+0x20>)
 8000cf8:	f002 f8f2 	bl	8002ee0 <HAL_RNG_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_RNG_Init+0x1a>
        Error_Handler();
 8000d02:	f000 fa9b 	bl	800123c <Error_Handler>
    }
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000130 	.word	0x20000130
 8000d10:	50060800 	.word	0x50060800

08000d14 <rng_init>:

static uint32_t value;

void rng_init() {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    MX_RNG_Init();
 8000d18:	f7ff ffe8 	bl	8000cec <MX_RNG_Init>
    RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN; // shpuld already be enabled by HAL
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <rng_init+0x18>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	4a02      	ldr	r2, [pc, #8]	@ (8000d2c <rng_init+0x18>)
 8000d22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d26:	64d3      	str	r3, [r2, #76]	@ 0x4c

    return;
 8000d28:	bf00      	nop
}
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000

08000d30 <get_random>:

uint32_t get_random(uint32_t lower, uint32_t upper) {
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
    RNG->CR |= RNG_CR_RNGEN;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <get_random+0x54>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <get_random+0x54>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6013      	str	r3, [r2, #0]

    while (!(RNG->SR & RNG_SR_DRDY));
 8000d46:	bf00      	nop
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <get_random+0x54>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f9      	beq.n	8000d48 <get_random+0x18>

    value = RNG->DR;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <get_random+0x54>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <get_random+0x58>)
 8000d5a:	6013      	str	r3, [r2, #0]

    return (value % (upper - lower + 1) + lower);
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <get_random+0x58>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	3201      	adds	r2, #1
 8000d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d6c:	fb01 f202 	mul.w	r2, r1, r2
 8000d70:	1a9a      	subs	r2, r3, r2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	50060800 	.word	0x50060800
 8000d88:	20000140 	.word	0x20000140

08000d8c <print_start_screen>:
 *      Author: D4nny
 */

#include "Screen.h"

void print_start_screen() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
    uart_clear_screen();
 8000d92:	f000 fc15 	bl	80015c0 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <print_start_screen+0x38>)
 8000d98:	f000 fc04 	bl	80015a4 <uart_send_escape>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	e009      	b.n	8000db6 <print_start_screen+0x2a>
        uart_println(START_SCREEN[i]);
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <print_start_screen+0x3c>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fbea 	bl	8001584 <uart_println>
    for (int i = 0; i < START_SCREEN_LEN; i++) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	ddf2      	ble.n	8000da2 <print_start_screen+0x16>
    }

    return;
 8000dbc:	bf00      	nop
}
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	08003b34 	.word	0x08003b34
 8000dc8:	20000000 	.word	0x20000000

08000dcc <print_game_over>:

void print_game_over(uint8_t score, uint8_t high_score) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09c      	sub	sp, #112	@ 0x70
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
    char buf[100];
    uart_clear_screen();
 8000ddc:	f000 fbf0 	bl	80015c0 <uart_clear_screen>
    uart_send_escape("[0m"); // reset color
 8000de0:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <print_game_over+0x5c>)
 8000de2:	f000 fbdf 	bl	80015a4 <uart_send_escape>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000dea:	e009      	b.n	8000e00 <print_game_over+0x34>
        uart_println(GAME_OVER_SCREEN[i]);
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <print_game_over+0x60>)
 8000dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fbc5 	bl	8001584 <uart_println>
    for (int i = 0; i < GAME_OVER_LEN; i++) {
 8000dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e02:	2b09      	cmp	r3, #9
 8000e04:	ddf2      	ble.n	8000dec <print_game_over+0x20>
    }
    sprintf(buf, "Score: %u HIGH SCORE: %u", score, high_score);
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	f107 0008 	add.w	r0, r7, #8
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <print_game_over+0x64>)
 8000e10:	f002 f8be 	bl	8002f90 <siprintf>
    uart_println(buf);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fbb3 	bl	8001584 <uart_println>
    return;
 8000e1e:	bf00      	nop
}
 8000e20:	3770      	adds	r7, #112	@ 0x70
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08003b34 	.word	0x08003b34
 8000e2c:	20000028 	.word	0x20000028
 8000e30:	08003b38 	.word	0x08003b38

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	@ (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db12      	blt.n	8000ea8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	490a      	ldr	r1, [pc, #40]	@ (8000eb4 <__NVIC_DisableIRQ+0x44>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	3320      	adds	r3, #32
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e9c:	f3bf 8f4f 	dsb	sy
}
 8000ea0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ea2:	f3bf 8f6f 	isb	sy
}
 8000ea6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <main>:
void change_fps(uint32_t fps);
volatile int start_frame = 0;

void SystemClock_Config(void);

int main(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0d4      	sub	sp, #336	@ 0x150
 8000ebc:	af26      	add	r7, sp, #152	@ 0x98
    HAL_Init();
 8000ebe:	f000 fbcc 	bl	800165a <HAL_Init>
    SystemClock_Config();
 8000ec2:	f000 f969 	bl	8001198 <SystemClock_Config>

    rng_init();
 8000ec6:	f7ff ff25 	bl	8000d14 <rng_init>
    uart_init();
 8000eca:	f000 fb03 	bl	80014d4 <uart_init>
    joystick_init();
 8000ece:	f7ff fac9 	bl	8000464 <joystick_init>

    Snake_t snake;
    Food_t food;
    GameState_t state = START;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    print_start_screen();
 8000ed8:	f7ff ff58 	bl	8000d8c <print_start_screen>
    uint32_t fps;
    uint8_t high_score = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    

    int first_move = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    while (1) {
        switch (state) {
 8000ee8:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	f000 80bd 	beq.w	800106c <main+0x1b4>
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	dcf8      	bgt.n	8000ee8 <main+0x30>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <main+0x48>
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d01f      	beq.n	8000f3e <main+0x86>
 8000efe:	e7f3      	b.n	8000ee8 <main+0x30>
        case START:
            if (continue_on()) {
 8000f00:	f000 f8f8 	bl	80010f4 <continue_on>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 80d1 	beq.w	80010ae <main+0x1f6>
                state = PLAYING;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                grid_init(high_score);
 8000f12:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb0a 	bl	8000530 <grid_init>
                snake_init(&snake);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fbeb 	bl	80006fc <snake_init>
                food = food_init();
 8000f26:	f7ff fe81 	bl	8000c2c <food_init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80bb      	strh	r3, [r7, #4]
                fps = START_FPS;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 8000f34:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8000f38:	f000 f8e4 	bl	8001104 <change_fps>

            }
            break;
 8000f3c:	e0b7      	b.n	80010ae <main+0x1f6>
        case PLAYING:
            if (!first_move) {
 8000f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <main+0xa8>
                if (snake_change_dir(&snake)) {
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fd76 	bl	8000a3c <snake_change_dir>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80ad 	beq.w	80010b2 <main+0x1fa>
                    first_move = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    break;
 8000f5e:	e0af      	b.n	80010c0 <main+0x208>
                }
                continue;
            }

            if (!start_frame) continue;
 8000f60:	4b58      	ldr	r3, [pc, #352]	@ (80010c4 <main+0x20c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80a6 	beq.w	80010b6 <main+0x1fe>
            start_frame = 0;
 8000f6a:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <main+0x20c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

            snake_move(&snake);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fc6d 	bl	8000854 <snake_move>
            if (snake_check_food(snake, food)) {
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 8000f80:	4668      	mov	r0, sp
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	2290      	movs	r2, #144	@ 0x90
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f002 f855 	bl	8003038 <memcpy>
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f94:	f7ff fdd2 	bl	8000b3c <snake_check_food>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01a      	beq.n	8000fd4 <main+0x11c>
                snake_eat(&snake, &food);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe23 	bl	8000bf2 <snake_eat>
                fps *= SPEED_UP_FACTOR;
 8000fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb8:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80010c8 <main+0x210>
 8000fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc4:	ee17 3a90 	vmov	r3, s15
 8000fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 8000fcc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8000fd0:	f000 f898 	bl	8001104 <change_fps>
            }
            grid_draw(snake, food);
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 8000fda:	4668      	mov	r0, sp
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	2290      	movs	r2, #144	@ 0x90
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f002 f828 	bl	8003038 <memcpy>
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fee:	f7ff fb21 	bl	8000634 <grid_draw>

            if (!snake.alive) {
 8000ff2:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d15f      	bne.n	80010ba <main+0x202>
                state = GAME_OVER;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                if (snake_get_score(snake) > high_score) high_score = snake_get_score(snake);
 8001000:	4668      	mov	r0, sp
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	2290      	movs	r2, #144	@ 0x90
 8001008:	4619      	mov	r1, r3
 800100a:	f002 f815 	bl	8003038 <memcpy>
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001014:	f7ff fdfc 	bl	8000c10 <snake_get_score>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001020:	4293      	cmp	r3, r2
 8001022:	d20e      	bcs.n	8001042 <main+0x18a>
 8001024:	4668      	mov	r0, sp
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2290      	movs	r2, #144	@ 0x90
 800102c:	4619      	mov	r1, r3
 800102e:	f002 f803 	bl	8003038 <memcpy>
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	f7ff fdea 	bl	8000c10 <snake_get_score>
 800103c:	4603      	mov	r3, r0
 800103e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                print_game_over(snake_get_score(snake), high_score);
 8001042:	4668      	mov	r0, sp
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	2290      	movs	r2, #144	@ 0x90
 800104a:	4619      	mov	r1, r3
 800104c:	f001 fff4 	bl	8003038 <memcpy>
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	f7ff fddb 	bl	8000c10 <snake_get_score>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001062:	4619      	mov	r1, r3
 8001064:	4610      	mov	r0, r2
 8001066:	f7ff feb1 	bl	8000dcc <print_game_over>
            }
            break;
 800106a:	e026      	b.n	80010ba <main+0x202>
        case GAME_OVER:
            if (continue_on()) {
 800106c:	f000 f842 	bl	80010f4 <continue_on>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d023      	beq.n	80010be <main+0x206>
            	state = PLAYING;
 8001076:	2301      	movs	r3, #1
 8001078:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            	grid_init(high_score);
 800107c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa55 	bl	8000530 <grid_init>
            	snake_init(&snake);
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fb36 	bl	80006fc <snake_init>
            	food = food_init();
 8001090:	f7ff fdcc 	bl	8000c2c <food_init>
 8001094:	4603      	mov	r3, r0
 8001096:	80bb      	strh	r3, [r7, #4]
            	first_move = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                fps = START_FPS;
 800109e:	230a      	movs	r3, #10
 80010a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                change_fps(fps);
 80010a4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80010a8:	f000 f82c 	bl	8001104 <change_fps>
            }
            break;
 80010ac:	e007      	b.n	80010be <main+0x206>
            break;
 80010ae:	bf00      	nop
 80010b0:	e71a      	b.n	8000ee8 <main+0x30>
                continue;
 80010b2:	bf00      	nop
 80010b4:	e718      	b.n	8000ee8 <main+0x30>
            if (!start_frame) continue;
 80010b6:	bf00      	nop
 80010b8:	e716      	b.n	8000ee8 <main+0x30>
            break;
 80010ba:	bf00      	nop
 80010bc:	e714      	b.n	8000ee8 <main+0x30>
            break;
 80010be:	bf00      	nop
        switch (state) {
 80010c0:	e712      	b.n	8000ee8 <main+0x30>
 80010c2:	bf00      	nop
 80010c4:	20000144 	.word	0x20000144
 80010c8:	3f933333 	.word	0x3f933333

080010cc <TIM2_IRQHandler>:

    return 0;
}


void TIM2_IRQHandler() {
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
    start_frame = 1;
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <TIM2_IRQHandler+0x24>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
    TIM2->SR &= ~TIM_SR_UIF;
 80010d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6113      	str	r3, [r2, #16]

    return;
 80010e6:	bf00      	nop
}
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20000144 	.word	0x20000144

080010f4 <continue_on>:



int continue_on() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    return get_joystick_button();
 80010f8:	f7ff f9f0 	bl	80004dc <get_joystick_button>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <change_fps>:


void change_fps(uint32_t fps) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <change_fps+0x8c>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <change_fps+0x8c>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 8001118:	201c      	movs	r0, #28
 800111a:	f7ff fea9 	bl	8000e70 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 800111e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 800112e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~TIM_SR_UIF;  
 8001136:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	6113      	str	r3, [r2, #16]
    
    
    TIM2->ARR = CPU_FREQ / fps;
 8001146:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114a:	4912      	ldr	r1, [pc, #72]	@ (8001194 <change_fps+0x90>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001152:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 8001154:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER |= TIM_DIER_UIE;
 800115c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	60d3      	str	r3, [r2, #12]

//    DBGMCU->APB1FZR1 |= 1;

    NVIC_EnableIRQ(TIM2_IRQn);
 800116c:	201c      	movs	r0, #28
 800116e:	f7ff fe61 	bl	8000e34 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001172:	b662      	cpsie	i
}
 8001174:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8001176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6013      	str	r3, [r2, #0]
    return;
 8001186:	bf00      	nop


}
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	01e84800 	.word	0x01e84800

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	@ 0x58
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2244      	movs	r2, #68	@ 0x44
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 ff12 	bl	8002fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011be:	f000 fbb5 	bl	800192c <HAL_PWREx_ControlVoltageScaling>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c8:	f000 f838 	bl	800123c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011cc:	2310      	movs	r3, #16
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011d8:	2360      	movs	r3, #96	@ 0x60
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011dc:	2302      	movs	r3, #2
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011e0:	2301      	movs	r3, #1
 80011e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011e8:	2310      	movs	r3, #16
 80011ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ec:	2307      	movs	r3, #7
 80011ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fbeb 	bl	80019d8 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001208:	f000 f818 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2303      	movs	r3, #3
 8001212:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	2101      	movs	r1, #1
 8001224:	4618      	mov	r0, r3
 8001226:	f000 ffb3 	bl	8002190 <HAL_RCC_ClockConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001230:	f000 f804 	bl	800123c <Error_Handler>
  }
}
 8001234:	bf00      	nop
 8001236:	3758      	adds	r7, #88	@ 0x58
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <Error_Handler+0x8>

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_MspInit+0x44>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001252:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <HAL_MspInit+0x44>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6613      	str	r3, [r2, #96]	@ 0x60
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_MspInit+0x44>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_MspInit+0x44>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_MspInit+0x44>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	6593      	str	r3, [r2, #88]	@ 0x58
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_MspInit+0x44>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0a6      	sub	sp, #152	@ 0x98
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2288      	movs	r2, #136	@ 0x88
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fe95 	bl	8002fd0 <memset>
  if(hrng->Instance==RNG)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <HAL_RNG_MspInit+0x80>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d12b      	bne.n	8001308 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80012b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80012b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80012b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012be:	2301      	movs	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80012c6:	2310      	movs	r3, #16
 80012c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012ca:	2307      	movs	r3, #7
 80012cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 f941 	bl	8002568 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80012ec:	f7ff ffa6 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_RNG_MspInit+0x84>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <HAL_RNG_MspInit+0x84>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RNG_MspInit+0x84>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3798      	adds	r7, #152	@ 0x98
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	50060800 	.word	0x50060800
 8001314:	40021000 	.word	0x40021000

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f9c9 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f001 fe1a 	bl	8002fe0 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20018000 	.word	0x20018000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000148 	.word	0x20000148
 80013e0:	200002a0 	.word	0x200002a0

080013e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	@ (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001448:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <uart_pin_init+0x8c>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	4a20      	ldr	r2, [pc, #128]	@ (80014d0 <uart_pin_init+0x8c>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8001454:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800145e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001462:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8001464:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800146e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001472:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800147e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001482:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001484:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800148e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001492:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8001494:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800149e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80014a2:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 80014a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80014ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014b2:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 80014b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80014be:	f023 030c 	bic.w	r3, r3, #12
 80014c2:	6053      	str	r3, [r2, #4]
    return;
 80014c4:	bf00      	nop
}
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    uart_pin_init();
 80014d8:	f7ff ffb4 	bl	8001444 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <uart_init+0x48>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <uart_init+0x48>)
 80014e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e6:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <uart_init+0x4c>)
 80014ea:	222c      	movs	r2, #44	@ 0x2c
 80014ec:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <uart_init+0x4c>)
 80014f0:	f240 1215 	movw	r2, #277	@ 0x115
 80014f4:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 80014f6:	2026      	movs	r0, #38	@ 0x26
 80014f8:	f7ff ff86 	bl	8001408 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80014fc:	b662      	cpsie	i
}
 80014fe:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <uart_init+0x4c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <uart_init+0x4c>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 800150c:	f000 f858 	bl	80015c0 <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <uart_init+0x50>)
 8001512:	f000 f847 	bl	80015a4 <uart_send_escape>
    return;
 8001516:	bf00      	nop
}
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	40004400 	.word	0x40004400
 8001524:	08003b54 	.word	0x08003b54

08001528 <uart_send_char>:

void uart_send_char(char c) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8001532:	bf00      	nop
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <uart_send_char+0x2c>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f9      	beq.n	8001534 <uart_send_char+0xc>
    USART2->TDR = c;
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <uart_send_char+0x2c>)
 8001542:	79fa      	ldrb	r2, [r7, #7]
 8001544:	b292      	uxth	r2, r2
 8001546:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8001548:	bf00      	nop
}
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40004400 	.word	0x40004400

08001558 <uart_send_string>:

void uart_send_string(const char* str) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8001560:	e007      	b.n	8001572 <uart_send_string+0x1a>
        uart_send_char(*str);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffde 	bl	8001528 <uart_send_char>
        str++;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3301      	adds	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f3      	bne.n	8001562 <uart_send_string+0xa>
    }

    return;
 800157a:	bf00      	nop
}
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <uart_println>:

void uart_println(const char* str) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    uart_send_string(str);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe3 	bl	8001558 <uart_send_string>
    uart_send_escape("[1E");
 8001592:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <uart_println+0x1c>)
 8001594:	f000 f806 	bl	80015a4 <uart_send_escape>

    return;
 8001598:	bf00      	nop
}
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	08003b5c 	.word	0x08003b5c

080015a4 <uart_send_escape>:

void uart_send_escape(const char* str) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 80015ac:	201b      	movs	r0, #27
 80015ae:	f7ff ffbb 	bl	8001528 <uart_send_char>
    uart_send_string(str);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffd0 	bl	8001558 <uart_send_string>

    return;
 80015b8:	bf00      	nop
}
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <uart_clear_screen>:


void uart_clear_screen(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <uart_clear_screen+0x14>)
 80015c6:	f7ff ffed 	bl	80015a4 <uart_send_escape>
    uart_send_escape("[H");
 80015ca:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <uart_clear_screen+0x18>)
 80015cc:	f7ff ffea 	bl	80015a4 <uart_send_escape>

    return;
 80015d0:	bf00      	nop
}
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	08003b60 	.word	0x08003b60
 80015d8:	08003b64 	.word	0x08003b64

080015dc <USART2_IRQHandler>:
    uart_send_escape(buf);

    return;
}

void USART2_IRQHandler(void) {
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <USART2_IRQHandler+0x20>)
 80015e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <USART2_IRQHandler+0x24>)
 80015ea:	701a      	strb	r2, [r3, #0]
    flag = 1;
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <USART2_IRQHandler+0x28>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
    return;
 80015f2:	bf00      	nop
}
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40004400 	.word	0x40004400
 8001600:	20000150 	.word	0x20000150
 8001604:	2000014c 	.word	0x2000014c

08001608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001640 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800160c:	f7ff feea 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <LoopForever+0x6>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	@ (8001648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <LoopForever+0xe>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	@ (8001654 <LoopForever+0x16>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f001 fcd9 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163a:	f7ff fc3d 	bl	8000eb8 <main>

0800163e <LoopForever>:

LoopForever:
    b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001640:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800164c:	08003bf4 	.word	0x08003bf4
  ldr r2, =_sbss
 8001650:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001654:	200002a0 	.word	0x200002a0

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>

0800165a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f91f 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166a:	200f      	movs	r0, #15
 800166c:	f000 f80e 	bl	800168c <HAL_InitTick>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	e001      	b.n	8001680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167c:	f7ff fde4 	bl	8001248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001680:	79fb      	ldrb	r3, [r7, #7]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <HAL_InitTick+0x6c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_InitTick+0x70>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_InitTick+0x6c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f91d 	bl	80018f6 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d809      	bhi.n	80016dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016d0:	f000 f8f5 	bl	80018be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_InitTick+0x74>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e007      	b.n	80016ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e004      	b.n	80016ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e001      	b.n	80016ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000058 	.word	0x20000058
 80016fc:	20000050 	.word	0x20000050
 8001700:	20000054 	.word	0x20000054

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000058 	.word	0x20000058
 8001728:	20000154 	.word	0x20000154

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000154 	.word	0x20000154

08001744 <__NVIC_SetPriorityGrouping>:
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	@ (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	@ (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff47 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff5c 	bl	800178c <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffb0 	bl	8001864 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <HAL_PWREx_GetVoltageRange+0x18>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40007000 	.word	0x40007000

0800192c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800193a:	d130      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001948:	d038      	beq.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001952:	4a1e      	ldr	r2, [pc, #120]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2232      	movs	r2, #50	@ 0x32
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001970:	e002      	b.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3b01      	subs	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001984:	d102      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f2      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001998:	d110      	bne.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e00f      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d007      	beq.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019b4:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40007000 	.word	0x40007000
 80019d0:	20000050 	.word	0x20000050
 80019d4:	431bde83 	.word	0x431bde83

080019d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e3ca      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ea:	4b97      	ldr	r3, [pc, #604]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f4:	4b94      	ldr	r3, [pc, #592]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80e4 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4a>
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	f040 808b 	bne.w	8001b30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	f040 8087 	bne.w	8001b30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a22:	4b89      	ldr	r3, [pc, #548]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e3a2      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1a      	ldr	r2, [r3, #32]
 8001a3e:	4b82      	ldr	r3, [pc, #520]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_RCC_OscConfig+0x7c>
 8001a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a52:	e005      	b.n	8001a60 <HAL_RCC_OscConfig+0x88>
 8001a54:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d223      	bcs.n	8001aac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fd1d 	bl	80024a8 <RCC_SetFlashLatencyFromMSIRange>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e383      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a78:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a72      	ldr	r2, [pc, #456]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b70      	ldr	r3, [pc, #448]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	496d      	ldr	r1, [pc, #436]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a96:	4b6c      	ldr	r3, [pc, #432]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	4968      	ldr	r1, [pc, #416]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	e025      	b.n	8001af8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aac:	4b66      	ldr	r3, [pc, #408]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b63      	ldr	r3, [pc, #396]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4960      	ldr	r1, [pc, #384]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aca:	4b5f      	ldr	r3, [pc, #380]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	495b      	ldr	r1, [pc, #364]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fcdd 	bl	80024a8 <RCC_SetFlashLatencyFromMSIRange>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e343      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af8:	f000 fc4a 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b52      	ldr	r3, [pc, #328]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	4950      	ldr	r1, [pc, #320]	@ (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	4a4e      	ldr	r2, [pc, #312]	@ (8001c50 <HAL_RCC_OscConfig+0x278>)
 8001b16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b18:	4b4e      	ldr	r3, [pc, #312]	@ (8001c54 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fdb5 	bl	800168c <HAL_InitTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d052      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	e327      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d032      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b38:	4b43      	ldr	r3, [pc, #268]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a42      	ldr	r2, [pc, #264]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fdf2 	bl	800172c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fdee 	bl	800172c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e310      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a36      	ldr	r2, [pc, #216]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4931      	ldr	r1, [pc, #196]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b88:	4b2f      	ldr	r3, [pc, #188]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	492c      	ldr	r1, [pc, #176]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e01a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a29      	ldr	r2, [pc, #164]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fdbf 	bl	800172c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fdbb 	bl	800172c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e2dd      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bc4:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x1da>
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d074      	beq.n	8001cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x21a>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d10e      	bne.n	8001c0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d10b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d064      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d160      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e2ba      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x24a>
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e026      	b.n	8001c70 <HAL_RCC_OscConfig+0x298>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c2a:	d115      	bne.n	8001c58 <HAL_RCC_OscConfig+0x280>
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a02      	ldr	r2, [pc, #8]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e014      	b.n	8001c70 <HAL_RCC_OscConfig+0x298>
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08003b70 	.word	0x08003b70
 8001c50:	20000050 	.word	0x20000050
 8001c54:	20000054 	.word	0x20000054
 8001c58:	4ba0      	ldr	r3, [pc, #640]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a9f      	ldr	r2, [pc, #636]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b9d      	ldr	r3, [pc, #628]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a9c      	ldr	r2, [pc, #624]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fd58 	bl	800172c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fd54 	bl	800172c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e276      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c92:	4b92      	ldr	r3, [pc, #584]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x2a8>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fd44 	bl	800172c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fd40 	bl	800172c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e262      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2d0>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d060      	beq.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x310>
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d119      	bne.n	8001d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d116      	bne.n	8001d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce8:	4b7c      	ldr	r3, [pc, #496]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_OscConfig+0x328>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e23f      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b76      	ldr	r3, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	4973      	ldr	r1, [pc, #460]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d14:	e040      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d023      	beq.n	8001d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fcff 	bl	800172c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff fcfb 	bl	800172c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e21d      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d44:	4b65      	ldr	r3, [pc, #404]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b62      	ldr	r3, [pc, #392]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	495f      	ldr	r1, [pc, #380]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
 8001d64:	e018      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d66:	4b5d      	ldr	r3, [pc, #372]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fcdb 	bl	800172c <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fcd7 	bl	800172c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1f9      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d03c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dac:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db2:	4a4a      	ldr	r2, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fcb6 	bl	800172c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fcb2 	bl	800172c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1d4      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ef      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x3ec>
 8001de4:	e01b      	b.n	8001e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dec:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff fc99 	bl	800172c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fc95 	bl	800172c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e1b7      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e10:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ef      	bne.n	8001dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80a6 	beq.w	8001f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e30:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d118      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fc5c 	bl	800172c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7ff fc58 	bl	800172c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e17a      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_RCC_OscConfig+0x508>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4d8>
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eae:	e029      	b.n	8001f04 <HAL_RCC_OscConfig+0x52c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d115      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x50c>
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a03      	ldr	r2, [pc, #12]	@ (8001edc <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x52c>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	4b9c      	ldr	r3, [pc, #624]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a9b      	ldr	r2, [pc, #620]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef4:	4b98      	ldr	r3, [pc, #608]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	4a97      	ldr	r2, [pc, #604]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d016      	beq.n	8001f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fc0e 	bl	800172c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7ff fc0a 	bl	800172c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e12a      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ed      	beq.n	8001f14 <HAL_RCC_OscConfig+0x53c>
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fbf7 	bl	800172c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fbf3 	bl	800172c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e113      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f58:	4b7f      	ldr	r3, [pc, #508]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ed      	bne.n	8001f42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f66:	7ffb      	ldrb	r3, [r7, #31]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f70:	4a79      	ldr	r2, [pc, #484]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80fe 	beq.w	800217e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	f040 80d0 	bne.w	800212c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f8c:	4b72      	ldr	r3, [pc, #456]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d130      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	3b01      	subs	r3, #1
 8001fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d127      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d11f      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fcc:	2a07      	cmp	r2, #7
 8001fce:	bf14      	ite	ne
 8001fd0:	2201      	movne	r2, #1
 8001fd2:	2200      	moveq	r2, #0
 8001fd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d113      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d06e      	beq.n	80020e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b0c      	cmp	r3, #12
 8002006:	d069      	beq.n	80020dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002014:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0ad      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002024:	4b4c      	ldr	r3, [pc, #304]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a4b      	ldr	r2, [pc, #300]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002030:	f7ff fb7c 	bl	800172c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff fb78 	bl	800172c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e09a      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204a:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002056:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b40      	ldr	r3, [pc, #256]	@ (800215c <HAL_RCC_OscConfig+0x784>)
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002066:	3a01      	subs	r2, #1
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002070:	0212      	lsls	r2, r2, #8
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002078:	0852      	lsrs	r2, r2, #1
 800207a:	3a01      	subs	r2, #1
 800207c:	0552      	lsls	r2, r2, #21
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002084:	0852      	lsrs	r2, r2, #1
 8002086:	3a01      	subs	r2, #1
 8002088:	0652      	lsls	r2, r2, #25
 800208a:	4311      	orrs	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002090:	0912      	lsrs	r2, r2, #4
 8002092:	0452      	lsls	r2, r2, #17
 8002094:	430a      	orrs	r2, r1
 8002096:	4930      	ldr	r1, [pc, #192]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002098:	4313      	orrs	r3, r2
 800209a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800209c:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b4:	f7ff fb3a 	bl	800172c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020bc:	f7ff fb36 	bl	800172c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e058      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020da:	e050      	b.n	800217e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e04f      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d148      	bne.n	800217e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a16      	ldr	r2, [pc, #88]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002102:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002104:	f7ff fb12 	bl	800172c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fb0e 	bl	800172c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e030      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x734>
 800212a:	e028      	b.n	800217e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d023      	beq.n	800217a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a08      	ldr	r2, [pc, #32]	@ (8002158 <HAL_RCC_OscConfig+0x780>)
 8002138:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800213c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7ff faf5 	bl	800172c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002144:	e00c      	b.n	8002160 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7ff faf1 	bl	800172c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d905      	bls.n	8002160 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e013      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
 8002158:	40021000 	.word	0x40021000
 800215c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_OscConfig+0x7b0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ec      	bne.n	8002146 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_RCC_OscConfig+0x7b0>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4905      	ldr	r1, [pc, #20]	@ (8002188 <HAL_RCC_OscConfig+0x7b0>)
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_OscConfig+0x7b4>)
 8002174:	4013      	ands	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
 8002178:	e001      	b.n	800217e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	feeefffc 	.word	0xfeeefffc

08002190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0e7      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b75      	ldr	r3, [pc, #468]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d910      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b72      	ldr	r3, [pc, #456]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4970      	ldr	r1, [pc, #448]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b6e      	ldr	r3, [pc, #440]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0cf      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b66      	ldr	r3, [pc, #408]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d908      	bls.n	8002202 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4960      	ldr	r1, [pc, #384]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d04c      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	4b5a      	ldr	r3, [pc, #360]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d121      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0a6      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222e:	4b54      	ldr	r3, [pc, #336]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e09a      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002246:	4b4e      	ldr	r3, [pc, #312]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e08e      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e086      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4943      	ldr	r1, [pc, #268]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002278:	f7ff fa58 	bl	800172c <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7ff fa54 	bl	800172c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e06e      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d208      	bcs.n	80022d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	492b      	ldr	r1, [pc, #172]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d6:	4b29      	ldr	r3, [pc, #164]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d210      	bcs.n	8002306 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e4:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 0207 	bic.w	r2, r3, #7
 80022ec:	4923      	ldr	r1, [pc, #140]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <HAL_RCC_ClockConfig+0x1ec>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e036      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4918      	ldr	r1, [pc, #96]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4910      	ldr	r1, [pc, #64]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002344:	f000 f824 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	490b      	ldr	r1, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x1f4>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002364:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1fc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f98f 	bl	800168c <HAL_InitTick>
 800236e:	4603      	mov	r3, r0
 8002370:	72fb      	strb	r3, [r7, #11]

  return status;
 8002372:	7afb      	ldrb	r3, [r7, #11]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
 8002384:	08003b70 	.word	0x08003b70
 8002388:	20000050 	.word	0x20000050
 800238c:	20000054 	.word	0x20000054

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x34>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d121      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11e      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023c4:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d0:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ec:	4a2b      	ldr	r2, [pc, #172]	@ (800249c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d102      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002408:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	e004      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d101      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002414:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002416:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d134      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0xa6>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d003      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xac>
 8002434:	e005      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002438:	617b      	str	r3, [r7, #20]
      break;
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800243e:	617b      	str	r3, [r7, #20]
      break;
 8002440:	e002      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	617b      	str	r3, [r7, #20]
      break;
 8002446:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002448:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	fb03 f202 	mul.w	r2, r3, r2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	0e5b      	lsrs	r3, r3, #25
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	3301      	adds	r3, #1
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002488:	69bb      	ldr	r3, [r7, #24]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	08003b80 	.word	0x08003b80
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	007a1200 	.word	0x007a1200

080024a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024c0:	f7ff fa26 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 80024c4:	6178      	str	r0, [r7, #20]
 80024c6:	e014      	b.n	80024f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b25      	ldr	r3, [pc, #148]	@ (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024cc:	4a24      	ldr	r2, [pc, #144]	@ (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d4:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024e0:	f7ff fa16 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 80024e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024f8:	d10b      	bne.n	8002512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b80      	cmp	r3, #128	@ 0x80
 80024fe:	d919      	bls.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2ba0      	cmp	r3, #160	@ 0xa0
 8002504:	d902      	bls.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002506:	2302      	movs	r3, #2
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	e013      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	e010      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b80      	cmp	r3, #128	@ 0x80
 8002516:	d902      	bls.n	800251e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002518:	2303      	movs	r3, #3
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e00a      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b80      	cmp	r3, #128	@ 0x80
 8002522:	d102      	bne.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002524:	2302      	movs	r3, #2
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e004      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b70      	cmp	r3, #112	@ 0x70
 800252e:	d101      	bne.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002530:	2301      	movs	r3, #1
 8002532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 0207 	bic.w	r2, r3, #7
 800253c:	4909      	ldr	r1, [pc, #36]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002544:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	40022000 	.word	0x40022000

08002568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002570:	2300      	movs	r3, #0
 8002572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002574:	2300      	movs	r3, #0
 8002576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002580:	2b00      	cmp	r3, #0
 8002582:	d041      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002588:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800258c:	d02a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800258e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002592:	d824      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002594:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800259a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800259e:	d81e      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025a8:	d010      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025aa:	e018      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ac:	4b86      	ldr	r3, [pc, #536]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a85      	ldr	r2, [pc, #532]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b8:	e015      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fabb 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ca:	e00c      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3320      	adds	r3, #32
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fba6 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025dc:	e003      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	74fb      	strb	r3, [r7, #19]
      break;
 80025e2:	e000      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ec:	4b76      	ldr	r3, [pc, #472]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025fa:	4973      	ldr	r1, [pc, #460]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002602:	e001      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d041      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002618:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800261c:	d02a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800261e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002622:	d824      	bhi.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002628:	d008      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800262a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800262e:	d81e      	bhi.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002638:	d010      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800263a:	e018      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800263c:	4b62      	ldr	r3, [pc, #392]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a61      	ldr	r2, [pc, #388]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002646:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002648:	e015      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fa73 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265a:	e00c      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3320      	adds	r3, #32
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fb5e 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800266c:	e003      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	74fb      	strb	r3, [r7, #19]
      break;
 8002672:	e000      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800267c:	4b52      	ldr	r3, [pc, #328]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002682:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800268a:	494f      	ldr	r1, [pc, #316]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002692:	e001      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a0 	beq.w	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026aa:	4b47      	ldr	r3, [pc, #284]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	4a40      	ldr	r2, [pc, #256]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80026cc:	4b3e      	ldr	r3, [pc, #248]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026dc:	4b3b      	ldr	r3, [pc, #236]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3a      	ldr	r2, [pc, #232]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026e8:	f7ff f820 	bl	800172c <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ee:	e009      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7ff f81c 	bl	800172c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d902      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	74fb      	strb	r3, [r7, #19]
        break;
 8002702:	e005      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002704:	4b31      	ldr	r3, [pc, #196]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ef      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d15c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002716:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002720:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01f      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d019      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002734:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800273e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002740:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002746:	4a20      	ldr	r2, [pc, #128]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002760:	4a19      	ldr	r2, [pc, #100]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe ffdb 	bl	800172c <HAL_GetTick>
 8002776:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002778:	e00b      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe ffd7 	bl	800172c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
            break;
 8002790:	e006      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002792:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ec      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b6:	4904      	ldr	r1, [pc, #16]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027be:	e009      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
 80027c4:	e006      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d4:	7c7b      	ldrb	r3, [r7, #17]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b9e      	ldr	r3, [pc, #632]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027de:	4a9d      	ldr	r2, [pc, #628]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f2:	4b98      	ldr	r3, [pc, #608]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f023 0203 	bic.w	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	4994      	ldr	r1, [pc, #592]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002814:	4b8f      	ldr	r3, [pc, #572]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	f023 020c 	bic.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002822:	498c      	ldr	r1, [pc, #560]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002836:	4b87      	ldr	r3, [pc, #540]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	4983      	ldr	r1, [pc, #524]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002858:	4b7e      	ldr	r3, [pc, #504]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	497b      	ldr	r1, [pc, #492]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800287a:	4b76      	ldr	r3, [pc, #472]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002888:	4972      	ldr	r1, [pc, #456]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800289c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	496a      	ldr	r1, [pc, #424]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028be:	4b65      	ldr	r3, [pc, #404]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028cc:	4961      	ldr	r1, [pc, #388]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ee:	4959      	ldr	r1, [pc, #356]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002902:	4b54      	ldr	r3, [pc, #336]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002910:	4950      	ldr	r1, [pc, #320]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002924:	4b4b      	ldr	r3, [pc, #300]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	4948      	ldr	r1, [pc, #288]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002946:	4b43      	ldr	r3, [pc, #268]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	493f      	ldr	r1, [pc, #252]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d028      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002968:	4b3a      	ldr	r3, [pc, #232]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002976:	4937      	ldr	r1, [pc, #220]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002986:	d106      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002988:	4b32      	ldr	r3, [pc, #200]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a31      	ldr	r2, [pc, #196]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002992:	60d3      	str	r3, [r2, #12]
 8002994:	e011      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800299e:	d10c      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f8c8 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d028      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029c6:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	491f      	ldr	r1, [pc, #124]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029e4:	d106      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f0:	60d3      	str	r3, [r2, #12]
 80029f2:	e011      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f899 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02b      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a32:	4908      	ldr	r1, [pc, #32]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a42:	d109      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a02      	ldr	r2, [pc, #8]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4e:	60d3      	str	r3, [r2, #12]
 8002a50:	e014      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f867 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02f      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a88:	4b2b      	ldr	r3, [pc, #172]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a96:	4928      	ldr	r1, [pc, #160]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f844 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d014      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	74bb      	strb	r3, [r7, #18]
 8002ac2:	e011      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3320      	adds	r3, #32
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f925 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002af4:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b02:	490d      	ldr	r1, [pc, #52]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b26:	4904      	ldr	r1, [pc, #16]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000

08002b3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b4a:	4b75      	ldr	r3, [pc, #468]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d018      	beq.n	8002b88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b56:	4b72      	ldr	r3, [pc, #456]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0203 	and.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d10d      	bne.n	8002b82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
       ||
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d047      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	e044      	b.n	8002c12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d018      	beq.n	8002bc2 <RCCEx_PLLSAI1_Config+0x86>
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d825      	bhi.n	8002be0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d002      	beq.n	8002b9e <RCCEx_PLLSAI1_Config+0x62>
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d009      	beq.n	8002bb0 <RCCEx_PLLSAI1_Config+0x74>
 8002b9c:	e020      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9e:	4b60      	ldr	r3, [pc, #384]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11d      	bne.n	8002be6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bae:	e01a      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d116      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e013      	b.n	8002bea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bc2:	4b57      	ldr	r3, [pc, #348]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bce:	4b54      	ldr	r3, [pc, #336]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bde:	e006      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e004      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	4944      	ldr	r1, [pc, #272]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d17d      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c18:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe fd82 	bl	800172c <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2a:	e009      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c2c:	f7fe fd7e 	bl	800172c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d902      	bls.n	8002c40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c3e:	e005      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c40:	4b37      	ldr	r3, [pc, #220]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ef      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d160      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d111      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c58:	4b31      	ldr	r3, [pc, #196]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6892      	ldr	r2, [r2, #8]
 8002c68:	0211      	lsls	r1, r2, #8
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68d2      	ldr	r2, [r2, #12]
 8002c6e:	0912      	lsrs	r2, r2, #4
 8002c70:	0452      	lsls	r2, r2, #17
 8002c72:	430a      	orrs	r2, r1
 8002c74:	492a      	ldr	r1, [pc, #168]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	610b      	str	r3, [r1, #16]
 8002c7a:	e027      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d112      	bne.n	8002ca8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c82:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c8a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
 8002c92:	0211      	lsls	r1, r2, #8
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6912      	ldr	r2, [r2, #16]
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0552      	lsls	r2, r2, #21
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	491f      	ldr	r1, [pc, #124]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	610b      	str	r3, [r1, #16]
 8002ca6:	e011      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	0211      	lsls	r1, r2, #8
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6952      	ldr	r2, [r2, #20]
 8002cbe:	0852      	lsrs	r2, r2, #1
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0652      	lsls	r2, r2, #25
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	4916      	ldr	r1, [pc, #88]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fd28 	bl	800172c <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cde:	e009      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce0:	f7fe fd24 	bl	800172c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf2:	e005      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	4904      	ldr	r1, [pc, #16]	@ (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000

08002d24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d32:	4b6a      	ldr	r3, [pc, #424]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d3e:	4b67      	ldr	r3, [pc, #412]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10d      	bne.n	8002d6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
       ||
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d56:	4b61      	ldr	r3, [pc, #388]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
       ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d047      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e044      	b.n	8002dfa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d018      	beq.n	8002daa <RCCEx_PLLSAI2_Config+0x86>
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d825      	bhi.n	8002dc8 <RCCEx_PLLSAI2_Config+0xa4>
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d002      	beq.n	8002d86 <RCCEx_PLLSAI2_Config+0x62>
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d009      	beq.n	8002d98 <RCCEx_PLLSAI2_Config+0x74>
 8002d84:	e020      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d86:	4b55      	ldr	r3, [pc, #340]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11d      	bne.n	8002dce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d96:	e01a      	b.n	8002dce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d98:	4b50      	ldr	r3, [pc, #320]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da8:	e013      	b.n	8002dd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002daa:	4b4c      	ldr	r3, [pc, #304]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002db6:	4b49      	ldr	r3, [pc, #292]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dc6:	e006      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e004      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e002      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dde:	4b3f      	ldr	r3, [pc, #252]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6819      	ldr	r1, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	430b      	orrs	r3, r1
 8002df4:	4939      	ldr	r1, [pc, #228]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d167      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e00:	4b36      	ldr	r3, [pc, #216]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a35      	ldr	r2, [pc, #212]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fc8e 	bl	800172c <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e12:	e009      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e14:	f7fe fc8a 	bl	800172c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	73fb      	strb	r3, [r7, #15]
        break;
 8002e26:	e005      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e28:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ef      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d14a      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d111      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e40:	4b26      	ldr	r3, [pc, #152]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	0211      	lsls	r1, r2, #8
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	0912      	lsrs	r2, r2, #4
 8002e58:	0452      	lsls	r2, r2, #17
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	491f      	ldr	r1, [pc, #124]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	614b      	str	r3, [r1, #20]
 8002e62:	e011      	b.n	8002e88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	0211      	lsls	r1, r2, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6912      	ldr	r2, [r2, #16]
 8002e7a:	0852      	lsrs	r2, r2, #1
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0652      	lsls	r2, r2, #25
 8002e80:	430a      	orrs	r2, r1
 8002e82:	4916      	ldr	r1, [pc, #88]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e88:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fc4a 	bl	800172c <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e9a:	e009      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e9c:	f7fe fc46 	bl	800172c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d902      	bls.n	8002eb0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	73fb      	strb	r3, [r7, #15]
          break;
 8002eae:	e005      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ef      	beq.n	8002e9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4904      	ldr	r1, [pc, #16]	@ (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e049      	b.n	8002f86 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	795b      	ldrb	r3, [r3, #5]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe f9c4 	bl	8001290 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0204 	orr.w	r2, r2, #4
 8002f1c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f28:	2b40      	cmp	r3, #64	@ 0x40
 8002f2a:	d104      	bne.n	8002f36 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e027      	b.n	8002f86 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f36:	f7fe fbf9 	bl	800172c <HAL_GetTick>
 8002f3a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002f3c:	e015      	b.n	8002f6a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002f3e:	f7fe fbf5 	bl	800172c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d90e      	bls.n	8002f6a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d107      	bne.n	8002f6a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00d      	b.n	8002f86 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d0e2      	beq.n	8002f3e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <siprintf>:
 8002f90:	b40e      	push	{r1, r2, r3}
 8002f92:	b500      	push	{lr}
 8002f94:	b09c      	sub	sp, #112	@ 0x70
 8002f96:	ab1d      	add	r3, sp, #116	@ 0x74
 8002f98:	9002      	str	r0, [sp, #8]
 8002f9a:	9006      	str	r0, [sp, #24]
 8002f9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002fa0:	4809      	ldr	r0, [pc, #36]	@ (8002fc8 <siprintf+0x38>)
 8002fa2:	9107      	str	r1, [sp, #28]
 8002fa4:	9104      	str	r1, [sp, #16]
 8002fa6:	4909      	ldr	r1, [pc, #36]	@ (8002fcc <siprintf+0x3c>)
 8002fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fac:	9105      	str	r1, [sp, #20]
 8002fae:	6800      	ldr	r0, [r0, #0]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	a902      	add	r1, sp, #8
 8002fb4:	f000 f9a2 	bl	80032fc <_svfiprintf_r>
 8002fb8:	9b02      	ldr	r3, [sp, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	b01c      	add	sp, #112	@ 0x70
 8002fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fc4:	b003      	add	sp, #12
 8002fc6:	4770      	bx	lr
 8002fc8:	2000005c 	.word	0x2000005c
 8002fcc:	ffff0208 	.word	0xffff0208

08002fd0 <memset>:
 8002fd0:	4402      	add	r2, r0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d100      	bne.n	8002fda <memset+0xa>
 8002fd8:	4770      	bx	lr
 8002fda:	f803 1b01 	strb.w	r1, [r3], #1
 8002fde:	e7f9      	b.n	8002fd4 <memset+0x4>

08002fe0 <__errno>:
 8002fe0:	4b01      	ldr	r3, [pc, #4]	@ (8002fe8 <__errno+0x8>)
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	2000005c 	.word	0x2000005c

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	4d0d      	ldr	r5, [pc, #52]	@ (8003024 <__libc_init_array+0x38>)
 8002ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8003028 <__libc_init_array+0x3c>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	4d0b      	ldr	r5, [pc, #44]	@ (800302c <__libc_init_array+0x40>)
 8002ffe:	4c0c      	ldr	r4, [pc, #48]	@ (8003030 <__libc_init_array+0x44>)
 8003000:	f000 fc66 	bl	80038d0 <_init>
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	2600      	movs	r6, #0
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	4798      	blx	r3
 8003016:	3601      	adds	r6, #1
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	4798      	blx	r3
 8003020:	3601      	adds	r6, #1
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	08003bec 	.word	0x08003bec
 8003028:	08003bec 	.word	0x08003bec
 800302c:	08003bec 	.word	0x08003bec
 8003030:	08003bf0 	.word	0x08003bf0

08003034 <__retarget_lock_acquire_recursive>:
 8003034:	4770      	bx	lr

08003036 <__retarget_lock_release_recursive>:
 8003036:	4770      	bx	lr

08003038 <memcpy>:
 8003038:	440a      	add	r2, r1
 800303a:	4291      	cmp	r1, r2
 800303c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003040:	d100      	bne.n	8003044 <memcpy+0xc>
 8003042:	4770      	bx	lr
 8003044:	b510      	push	{r4, lr}
 8003046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800304a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800304e:	4291      	cmp	r1, r2
 8003050:	d1f9      	bne.n	8003046 <memcpy+0xe>
 8003052:	bd10      	pop	{r4, pc}

08003054 <_free_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4605      	mov	r5, r0
 8003058:	2900      	cmp	r1, #0
 800305a:	d041      	beq.n	80030e0 <_free_r+0x8c>
 800305c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003060:	1f0c      	subs	r4, r1, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	bfb8      	it	lt
 8003066:	18e4      	addlt	r4, r4, r3
 8003068:	f000 f8e0 	bl	800322c <__malloc_lock>
 800306c:	4a1d      	ldr	r2, [pc, #116]	@ (80030e4 <_free_r+0x90>)
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	b933      	cbnz	r3, 8003080 <_free_r+0x2c>
 8003072:	6063      	str	r3, [r4, #4]
 8003074:	6014      	str	r4, [r2, #0]
 8003076:	4628      	mov	r0, r5
 8003078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307c:	f000 b8dc 	b.w	8003238 <__malloc_unlock>
 8003080:	42a3      	cmp	r3, r4
 8003082:	d908      	bls.n	8003096 <_free_r+0x42>
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	1821      	adds	r1, r4, r0
 8003088:	428b      	cmp	r3, r1
 800308a:	bf01      	itttt	eq
 800308c:	6819      	ldreq	r1, [r3, #0]
 800308e:	685b      	ldreq	r3, [r3, #4]
 8003090:	1809      	addeq	r1, r1, r0
 8003092:	6021      	streq	r1, [r4, #0]
 8003094:	e7ed      	b.n	8003072 <_free_r+0x1e>
 8003096:	461a      	mov	r2, r3
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	b10b      	cbz	r3, 80030a0 <_free_r+0x4c>
 800309c:	42a3      	cmp	r3, r4
 800309e:	d9fa      	bls.n	8003096 <_free_r+0x42>
 80030a0:	6811      	ldr	r1, [r2, #0]
 80030a2:	1850      	adds	r0, r2, r1
 80030a4:	42a0      	cmp	r0, r4
 80030a6:	d10b      	bne.n	80030c0 <_free_r+0x6c>
 80030a8:	6820      	ldr	r0, [r4, #0]
 80030aa:	4401      	add	r1, r0
 80030ac:	1850      	adds	r0, r2, r1
 80030ae:	4283      	cmp	r3, r0
 80030b0:	6011      	str	r1, [r2, #0]
 80030b2:	d1e0      	bne.n	8003076 <_free_r+0x22>
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	6053      	str	r3, [r2, #4]
 80030ba:	4408      	add	r0, r1
 80030bc:	6010      	str	r0, [r2, #0]
 80030be:	e7da      	b.n	8003076 <_free_r+0x22>
 80030c0:	d902      	bls.n	80030c8 <_free_r+0x74>
 80030c2:	230c      	movs	r3, #12
 80030c4:	602b      	str	r3, [r5, #0]
 80030c6:	e7d6      	b.n	8003076 <_free_r+0x22>
 80030c8:	6820      	ldr	r0, [r4, #0]
 80030ca:	1821      	adds	r1, r4, r0
 80030cc:	428b      	cmp	r3, r1
 80030ce:	bf04      	itt	eq
 80030d0:	6819      	ldreq	r1, [r3, #0]
 80030d2:	685b      	ldreq	r3, [r3, #4]
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	bf04      	itt	eq
 80030d8:	1809      	addeq	r1, r1, r0
 80030da:	6021      	streq	r1, [r4, #0]
 80030dc:	6054      	str	r4, [r2, #4]
 80030de:	e7ca      	b.n	8003076 <_free_r+0x22>
 80030e0:	bd38      	pop	{r3, r4, r5, pc}
 80030e2:	bf00      	nop
 80030e4:	2000029c 	.word	0x2000029c

080030e8 <sbrk_aligned>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4e0f      	ldr	r6, [pc, #60]	@ (8003128 <sbrk_aligned+0x40>)
 80030ec:	460c      	mov	r4, r1
 80030ee:	6831      	ldr	r1, [r6, #0]
 80030f0:	4605      	mov	r5, r0
 80030f2:	b911      	cbnz	r1, 80030fa <sbrk_aligned+0x12>
 80030f4:	f000 fba6 	bl	8003844 <_sbrk_r>
 80030f8:	6030      	str	r0, [r6, #0]
 80030fa:	4621      	mov	r1, r4
 80030fc:	4628      	mov	r0, r5
 80030fe:	f000 fba1 	bl	8003844 <_sbrk_r>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d103      	bne.n	800310e <sbrk_aligned+0x26>
 8003106:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800310a:	4620      	mov	r0, r4
 800310c:	bd70      	pop	{r4, r5, r6, pc}
 800310e:	1cc4      	adds	r4, r0, #3
 8003110:	f024 0403 	bic.w	r4, r4, #3
 8003114:	42a0      	cmp	r0, r4
 8003116:	d0f8      	beq.n	800310a <sbrk_aligned+0x22>
 8003118:	1a21      	subs	r1, r4, r0
 800311a:	4628      	mov	r0, r5
 800311c:	f000 fb92 	bl	8003844 <_sbrk_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d1f2      	bne.n	800310a <sbrk_aligned+0x22>
 8003124:	e7ef      	b.n	8003106 <sbrk_aligned+0x1e>
 8003126:	bf00      	nop
 8003128:	20000298 	.word	0x20000298

0800312c <_malloc_r>:
 800312c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003130:	1ccd      	adds	r5, r1, #3
 8003132:	f025 0503 	bic.w	r5, r5, #3
 8003136:	3508      	adds	r5, #8
 8003138:	2d0c      	cmp	r5, #12
 800313a:	bf38      	it	cc
 800313c:	250c      	movcc	r5, #12
 800313e:	2d00      	cmp	r5, #0
 8003140:	4606      	mov	r6, r0
 8003142:	db01      	blt.n	8003148 <_malloc_r+0x1c>
 8003144:	42a9      	cmp	r1, r5
 8003146:	d904      	bls.n	8003152 <_malloc_r+0x26>
 8003148:	230c      	movs	r3, #12
 800314a:	6033      	str	r3, [r6, #0]
 800314c:	2000      	movs	r0, #0
 800314e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003228 <_malloc_r+0xfc>
 8003156:	f000 f869 	bl	800322c <__malloc_lock>
 800315a:	f8d8 3000 	ldr.w	r3, [r8]
 800315e:	461c      	mov	r4, r3
 8003160:	bb44      	cbnz	r4, 80031b4 <_malloc_r+0x88>
 8003162:	4629      	mov	r1, r5
 8003164:	4630      	mov	r0, r6
 8003166:	f7ff ffbf 	bl	80030e8 <sbrk_aligned>
 800316a:	1c43      	adds	r3, r0, #1
 800316c:	4604      	mov	r4, r0
 800316e:	d158      	bne.n	8003222 <_malloc_r+0xf6>
 8003170:	f8d8 4000 	ldr.w	r4, [r8]
 8003174:	4627      	mov	r7, r4
 8003176:	2f00      	cmp	r7, #0
 8003178:	d143      	bne.n	8003202 <_malloc_r+0xd6>
 800317a:	2c00      	cmp	r4, #0
 800317c:	d04b      	beq.n	8003216 <_malloc_r+0xea>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	4639      	mov	r1, r7
 8003182:	4630      	mov	r0, r6
 8003184:	eb04 0903 	add.w	r9, r4, r3
 8003188:	f000 fb5c 	bl	8003844 <_sbrk_r>
 800318c:	4581      	cmp	r9, r0
 800318e:	d142      	bne.n	8003216 <_malloc_r+0xea>
 8003190:	6821      	ldr	r1, [r4, #0]
 8003192:	1a6d      	subs	r5, r5, r1
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f7ff ffa6 	bl	80030e8 <sbrk_aligned>
 800319c:	3001      	adds	r0, #1
 800319e:	d03a      	beq.n	8003216 <_malloc_r+0xea>
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	442b      	add	r3, r5
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	f8d8 3000 	ldr.w	r3, [r8]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	bb62      	cbnz	r2, 8003208 <_malloc_r+0xdc>
 80031ae:	f8c8 7000 	str.w	r7, [r8]
 80031b2:	e00f      	b.n	80031d4 <_malloc_r+0xa8>
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	1b52      	subs	r2, r2, r5
 80031b8:	d420      	bmi.n	80031fc <_malloc_r+0xd0>
 80031ba:	2a0b      	cmp	r2, #11
 80031bc:	d917      	bls.n	80031ee <_malloc_r+0xc2>
 80031be:	1961      	adds	r1, r4, r5
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	6025      	str	r5, [r4, #0]
 80031c4:	bf18      	it	ne
 80031c6:	6059      	strne	r1, [r3, #4]
 80031c8:	6863      	ldr	r3, [r4, #4]
 80031ca:	bf08      	it	eq
 80031cc:	f8c8 1000 	streq.w	r1, [r8]
 80031d0:	5162      	str	r2, [r4, r5]
 80031d2:	604b      	str	r3, [r1, #4]
 80031d4:	4630      	mov	r0, r6
 80031d6:	f000 f82f 	bl	8003238 <__malloc_unlock>
 80031da:	f104 000b 	add.w	r0, r4, #11
 80031de:	1d23      	adds	r3, r4, #4
 80031e0:	f020 0007 	bic.w	r0, r0, #7
 80031e4:	1ac2      	subs	r2, r0, r3
 80031e6:	bf1c      	itt	ne
 80031e8:	1a1b      	subne	r3, r3, r0
 80031ea:	50a3      	strne	r3, [r4, r2]
 80031ec:	e7af      	b.n	800314e <_malloc_r+0x22>
 80031ee:	6862      	ldr	r2, [r4, #4]
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	bf0c      	ite	eq
 80031f4:	f8c8 2000 	streq.w	r2, [r8]
 80031f8:	605a      	strne	r2, [r3, #4]
 80031fa:	e7eb      	b.n	80031d4 <_malloc_r+0xa8>
 80031fc:	4623      	mov	r3, r4
 80031fe:	6864      	ldr	r4, [r4, #4]
 8003200:	e7ae      	b.n	8003160 <_malloc_r+0x34>
 8003202:	463c      	mov	r4, r7
 8003204:	687f      	ldr	r7, [r7, #4]
 8003206:	e7b6      	b.n	8003176 <_malloc_r+0x4a>
 8003208:	461a      	mov	r2, r3
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	42a3      	cmp	r3, r4
 800320e:	d1fb      	bne.n	8003208 <_malloc_r+0xdc>
 8003210:	2300      	movs	r3, #0
 8003212:	6053      	str	r3, [r2, #4]
 8003214:	e7de      	b.n	80031d4 <_malloc_r+0xa8>
 8003216:	230c      	movs	r3, #12
 8003218:	6033      	str	r3, [r6, #0]
 800321a:	4630      	mov	r0, r6
 800321c:	f000 f80c 	bl	8003238 <__malloc_unlock>
 8003220:	e794      	b.n	800314c <_malloc_r+0x20>
 8003222:	6005      	str	r5, [r0, #0]
 8003224:	e7d6      	b.n	80031d4 <_malloc_r+0xa8>
 8003226:	bf00      	nop
 8003228:	2000029c 	.word	0x2000029c

0800322c <__malloc_lock>:
 800322c:	4801      	ldr	r0, [pc, #4]	@ (8003234 <__malloc_lock+0x8>)
 800322e:	f7ff bf01 	b.w	8003034 <__retarget_lock_acquire_recursive>
 8003232:	bf00      	nop
 8003234:	20000294 	.word	0x20000294

08003238 <__malloc_unlock>:
 8003238:	4801      	ldr	r0, [pc, #4]	@ (8003240 <__malloc_unlock+0x8>)
 800323a:	f7ff befc 	b.w	8003036 <__retarget_lock_release_recursive>
 800323e:	bf00      	nop
 8003240:	20000294 	.word	0x20000294

08003244 <__ssputs_r>:
 8003244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003248:	688e      	ldr	r6, [r1, #8]
 800324a:	461f      	mov	r7, r3
 800324c:	42be      	cmp	r6, r7
 800324e:	680b      	ldr	r3, [r1, #0]
 8003250:	4682      	mov	sl, r0
 8003252:	460c      	mov	r4, r1
 8003254:	4690      	mov	r8, r2
 8003256:	d82d      	bhi.n	80032b4 <__ssputs_r+0x70>
 8003258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800325c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003260:	d026      	beq.n	80032b0 <__ssputs_r+0x6c>
 8003262:	6965      	ldr	r5, [r4, #20]
 8003264:	6909      	ldr	r1, [r1, #16]
 8003266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800326a:	eba3 0901 	sub.w	r9, r3, r1
 800326e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003272:	1c7b      	adds	r3, r7, #1
 8003274:	444b      	add	r3, r9
 8003276:	106d      	asrs	r5, r5, #1
 8003278:	429d      	cmp	r5, r3
 800327a:	bf38      	it	cc
 800327c:	461d      	movcc	r5, r3
 800327e:	0553      	lsls	r3, r2, #21
 8003280:	d527      	bpl.n	80032d2 <__ssputs_r+0x8e>
 8003282:	4629      	mov	r1, r5
 8003284:	f7ff ff52 	bl	800312c <_malloc_r>
 8003288:	4606      	mov	r6, r0
 800328a:	b360      	cbz	r0, 80032e6 <__ssputs_r+0xa2>
 800328c:	6921      	ldr	r1, [r4, #16]
 800328e:	464a      	mov	r2, r9
 8003290:	f7ff fed2 	bl	8003038 <memcpy>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800329a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800329e:	81a3      	strh	r3, [r4, #12]
 80032a0:	6126      	str	r6, [r4, #16]
 80032a2:	6165      	str	r5, [r4, #20]
 80032a4:	444e      	add	r6, r9
 80032a6:	eba5 0509 	sub.w	r5, r5, r9
 80032aa:	6026      	str	r6, [r4, #0]
 80032ac:	60a5      	str	r5, [r4, #8]
 80032ae:	463e      	mov	r6, r7
 80032b0:	42be      	cmp	r6, r7
 80032b2:	d900      	bls.n	80032b6 <__ssputs_r+0x72>
 80032b4:	463e      	mov	r6, r7
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	4632      	mov	r2, r6
 80032ba:	4641      	mov	r1, r8
 80032bc:	f000 faa8 	bl	8003810 <memmove>
 80032c0:	68a3      	ldr	r3, [r4, #8]
 80032c2:	1b9b      	subs	r3, r3, r6
 80032c4:	60a3      	str	r3, [r4, #8]
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	4433      	add	r3, r6
 80032ca:	6023      	str	r3, [r4, #0]
 80032cc:	2000      	movs	r0, #0
 80032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d2:	462a      	mov	r2, r5
 80032d4:	f000 fac6 	bl	8003864 <_realloc_r>
 80032d8:	4606      	mov	r6, r0
 80032da:	2800      	cmp	r0, #0
 80032dc:	d1e0      	bne.n	80032a0 <__ssputs_r+0x5c>
 80032de:	6921      	ldr	r1, [r4, #16]
 80032e0:	4650      	mov	r0, sl
 80032e2:	f7ff feb7 	bl	8003054 <_free_r>
 80032e6:	230c      	movs	r3, #12
 80032e8:	f8ca 3000 	str.w	r3, [sl]
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f2:	81a3      	strh	r3, [r4, #12]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032f8:	e7e9      	b.n	80032ce <__ssputs_r+0x8a>
	...

080032fc <_svfiprintf_r>:
 80032fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003300:	4698      	mov	r8, r3
 8003302:	898b      	ldrh	r3, [r1, #12]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	b09d      	sub	sp, #116	@ 0x74
 8003308:	4607      	mov	r7, r0
 800330a:	460d      	mov	r5, r1
 800330c:	4614      	mov	r4, r2
 800330e:	d510      	bpl.n	8003332 <_svfiprintf_r+0x36>
 8003310:	690b      	ldr	r3, [r1, #16]
 8003312:	b973      	cbnz	r3, 8003332 <_svfiprintf_r+0x36>
 8003314:	2140      	movs	r1, #64	@ 0x40
 8003316:	f7ff ff09 	bl	800312c <_malloc_r>
 800331a:	6028      	str	r0, [r5, #0]
 800331c:	6128      	str	r0, [r5, #16]
 800331e:	b930      	cbnz	r0, 800332e <_svfiprintf_r+0x32>
 8003320:	230c      	movs	r3, #12
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003328:	b01d      	add	sp, #116	@ 0x74
 800332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800332e:	2340      	movs	r3, #64	@ 0x40
 8003330:	616b      	str	r3, [r5, #20]
 8003332:	2300      	movs	r3, #0
 8003334:	9309      	str	r3, [sp, #36]	@ 0x24
 8003336:	2320      	movs	r3, #32
 8003338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800333c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003340:	2330      	movs	r3, #48	@ 0x30
 8003342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80034e0 <_svfiprintf_r+0x1e4>
 8003346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800334a:	f04f 0901 	mov.w	r9, #1
 800334e:	4623      	mov	r3, r4
 8003350:	469a      	mov	sl, r3
 8003352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003356:	b10a      	cbz	r2, 800335c <_svfiprintf_r+0x60>
 8003358:	2a25      	cmp	r2, #37	@ 0x25
 800335a:	d1f9      	bne.n	8003350 <_svfiprintf_r+0x54>
 800335c:	ebba 0b04 	subs.w	fp, sl, r4
 8003360:	d00b      	beq.n	800337a <_svfiprintf_r+0x7e>
 8003362:	465b      	mov	r3, fp
 8003364:	4622      	mov	r2, r4
 8003366:	4629      	mov	r1, r5
 8003368:	4638      	mov	r0, r7
 800336a:	f7ff ff6b 	bl	8003244 <__ssputs_r>
 800336e:	3001      	adds	r0, #1
 8003370:	f000 80a7 	beq.w	80034c2 <_svfiprintf_r+0x1c6>
 8003374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003376:	445a      	add	r2, fp
 8003378:	9209      	str	r2, [sp, #36]	@ 0x24
 800337a:	f89a 3000 	ldrb.w	r3, [sl]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 809f 	beq.w	80034c2 <_svfiprintf_r+0x1c6>
 8003384:	2300      	movs	r3, #0
 8003386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800338a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800338e:	f10a 0a01 	add.w	sl, sl, #1
 8003392:	9304      	str	r3, [sp, #16]
 8003394:	9307      	str	r3, [sp, #28]
 8003396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800339a:	931a      	str	r3, [sp, #104]	@ 0x68
 800339c:	4654      	mov	r4, sl
 800339e:	2205      	movs	r2, #5
 80033a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033a4:	484e      	ldr	r0, [pc, #312]	@ (80034e0 <_svfiprintf_r+0x1e4>)
 80033a6:	f7fc ff13 	bl	80001d0 <memchr>
 80033aa:	9a04      	ldr	r2, [sp, #16]
 80033ac:	b9d8      	cbnz	r0, 80033e6 <_svfiprintf_r+0xea>
 80033ae:	06d0      	lsls	r0, r2, #27
 80033b0:	bf44      	itt	mi
 80033b2:	2320      	movmi	r3, #32
 80033b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033b8:	0711      	lsls	r1, r2, #28
 80033ba:	bf44      	itt	mi
 80033bc:	232b      	movmi	r3, #43	@ 0x2b
 80033be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033c2:	f89a 3000 	ldrb.w	r3, [sl]
 80033c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80033c8:	d015      	beq.n	80033f6 <_svfiprintf_r+0xfa>
 80033ca:	9a07      	ldr	r2, [sp, #28]
 80033cc:	4654      	mov	r4, sl
 80033ce:	2000      	movs	r0, #0
 80033d0:	f04f 0c0a 	mov.w	ip, #10
 80033d4:	4621      	mov	r1, r4
 80033d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033da:	3b30      	subs	r3, #48	@ 0x30
 80033dc:	2b09      	cmp	r3, #9
 80033de:	d94b      	bls.n	8003478 <_svfiprintf_r+0x17c>
 80033e0:	b1b0      	cbz	r0, 8003410 <_svfiprintf_r+0x114>
 80033e2:	9207      	str	r2, [sp, #28]
 80033e4:	e014      	b.n	8003410 <_svfiprintf_r+0x114>
 80033e6:	eba0 0308 	sub.w	r3, r0, r8
 80033ea:	fa09 f303 	lsl.w	r3, r9, r3
 80033ee:	4313      	orrs	r3, r2
 80033f0:	9304      	str	r3, [sp, #16]
 80033f2:	46a2      	mov	sl, r4
 80033f4:	e7d2      	b.n	800339c <_svfiprintf_r+0xa0>
 80033f6:	9b03      	ldr	r3, [sp, #12]
 80033f8:	1d19      	adds	r1, r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	9103      	str	r1, [sp, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bfbb      	ittet	lt
 8003402:	425b      	neglt	r3, r3
 8003404:	f042 0202 	orrlt.w	r2, r2, #2
 8003408:	9307      	strge	r3, [sp, #28]
 800340a:	9307      	strlt	r3, [sp, #28]
 800340c:	bfb8      	it	lt
 800340e:	9204      	strlt	r2, [sp, #16]
 8003410:	7823      	ldrb	r3, [r4, #0]
 8003412:	2b2e      	cmp	r3, #46	@ 0x2e
 8003414:	d10a      	bne.n	800342c <_svfiprintf_r+0x130>
 8003416:	7863      	ldrb	r3, [r4, #1]
 8003418:	2b2a      	cmp	r3, #42	@ 0x2a
 800341a:	d132      	bne.n	8003482 <_svfiprintf_r+0x186>
 800341c:	9b03      	ldr	r3, [sp, #12]
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	9203      	str	r2, [sp, #12]
 8003424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003428:	3402      	adds	r4, #2
 800342a:	9305      	str	r3, [sp, #20]
 800342c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80034f0 <_svfiprintf_r+0x1f4>
 8003430:	7821      	ldrb	r1, [r4, #0]
 8003432:	2203      	movs	r2, #3
 8003434:	4650      	mov	r0, sl
 8003436:	f7fc fecb 	bl	80001d0 <memchr>
 800343a:	b138      	cbz	r0, 800344c <_svfiprintf_r+0x150>
 800343c:	9b04      	ldr	r3, [sp, #16]
 800343e:	eba0 000a 	sub.w	r0, r0, sl
 8003442:	2240      	movs	r2, #64	@ 0x40
 8003444:	4082      	lsls	r2, r0
 8003446:	4313      	orrs	r3, r2
 8003448:	3401      	adds	r4, #1
 800344a:	9304      	str	r3, [sp, #16]
 800344c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003450:	4824      	ldr	r0, [pc, #144]	@ (80034e4 <_svfiprintf_r+0x1e8>)
 8003452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003456:	2206      	movs	r2, #6
 8003458:	f7fc feba 	bl	80001d0 <memchr>
 800345c:	2800      	cmp	r0, #0
 800345e:	d036      	beq.n	80034ce <_svfiprintf_r+0x1d2>
 8003460:	4b21      	ldr	r3, [pc, #132]	@ (80034e8 <_svfiprintf_r+0x1ec>)
 8003462:	bb1b      	cbnz	r3, 80034ac <_svfiprintf_r+0x1b0>
 8003464:	9b03      	ldr	r3, [sp, #12]
 8003466:	3307      	adds	r3, #7
 8003468:	f023 0307 	bic.w	r3, r3, #7
 800346c:	3308      	adds	r3, #8
 800346e:	9303      	str	r3, [sp, #12]
 8003470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003472:	4433      	add	r3, r6
 8003474:	9309      	str	r3, [sp, #36]	@ 0x24
 8003476:	e76a      	b.n	800334e <_svfiprintf_r+0x52>
 8003478:	fb0c 3202 	mla	r2, ip, r2, r3
 800347c:	460c      	mov	r4, r1
 800347e:	2001      	movs	r0, #1
 8003480:	e7a8      	b.n	80033d4 <_svfiprintf_r+0xd8>
 8003482:	2300      	movs	r3, #0
 8003484:	3401      	adds	r4, #1
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	4619      	mov	r1, r3
 800348a:	f04f 0c0a 	mov.w	ip, #10
 800348e:	4620      	mov	r0, r4
 8003490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003494:	3a30      	subs	r2, #48	@ 0x30
 8003496:	2a09      	cmp	r2, #9
 8003498:	d903      	bls.n	80034a2 <_svfiprintf_r+0x1a6>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0c6      	beq.n	800342c <_svfiprintf_r+0x130>
 800349e:	9105      	str	r1, [sp, #20]
 80034a0:	e7c4      	b.n	800342c <_svfiprintf_r+0x130>
 80034a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80034a6:	4604      	mov	r4, r0
 80034a8:	2301      	movs	r3, #1
 80034aa:	e7f0      	b.n	800348e <_svfiprintf_r+0x192>
 80034ac:	ab03      	add	r3, sp, #12
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	462a      	mov	r2, r5
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <_svfiprintf_r+0x1f0>)
 80034b4:	a904      	add	r1, sp, #16
 80034b6:	4638      	mov	r0, r7
 80034b8:	f3af 8000 	nop.w
 80034bc:	1c42      	adds	r2, r0, #1
 80034be:	4606      	mov	r6, r0
 80034c0:	d1d6      	bne.n	8003470 <_svfiprintf_r+0x174>
 80034c2:	89ab      	ldrh	r3, [r5, #12]
 80034c4:	065b      	lsls	r3, r3, #25
 80034c6:	f53f af2d 	bmi.w	8003324 <_svfiprintf_r+0x28>
 80034ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034cc:	e72c      	b.n	8003328 <_svfiprintf_r+0x2c>
 80034ce:	ab03      	add	r3, sp, #12
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	462a      	mov	r2, r5
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <_svfiprintf_r+0x1f0>)
 80034d6:	a904      	add	r1, sp, #16
 80034d8:	4638      	mov	r0, r7
 80034da:	f000 f879 	bl	80035d0 <_printf_i>
 80034de:	e7ed      	b.n	80034bc <_svfiprintf_r+0x1c0>
 80034e0:	08003bb0 	.word	0x08003bb0
 80034e4:	08003bba 	.word	0x08003bba
 80034e8:	00000000 	.word	0x00000000
 80034ec:	08003245 	.word	0x08003245
 80034f0:	08003bb6 	.word	0x08003bb6

080034f4 <_printf_common>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	4616      	mov	r6, r2
 80034fa:	4698      	mov	r8, r3
 80034fc:	688a      	ldr	r2, [r1, #8]
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003504:	4293      	cmp	r3, r2
 8003506:	bfb8      	it	lt
 8003508:	4613      	movlt	r3, r2
 800350a:	6033      	str	r3, [r6, #0]
 800350c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003510:	4607      	mov	r7, r0
 8003512:	460c      	mov	r4, r1
 8003514:	b10a      	cbz	r2, 800351a <_printf_common+0x26>
 8003516:	3301      	adds	r3, #1
 8003518:	6033      	str	r3, [r6, #0]
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	0699      	lsls	r1, r3, #26
 800351e:	bf42      	ittt	mi
 8003520:	6833      	ldrmi	r3, [r6, #0]
 8003522:	3302      	addmi	r3, #2
 8003524:	6033      	strmi	r3, [r6, #0]
 8003526:	6825      	ldr	r5, [r4, #0]
 8003528:	f015 0506 	ands.w	r5, r5, #6
 800352c:	d106      	bne.n	800353c <_printf_common+0x48>
 800352e:	f104 0a19 	add.w	sl, r4, #25
 8003532:	68e3      	ldr	r3, [r4, #12]
 8003534:	6832      	ldr	r2, [r6, #0]
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	42ab      	cmp	r3, r5
 800353a:	dc26      	bgt.n	800358a <_printf_common+0x96>
 800353c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	3b00      	subs	r3, #0
 8003544:	bf18      	it	ne
 8003546:	2301      	movne	r3, #1
 8003548:	0692      	lsls	r2, r2, #26
 800354a:	d42b      	bmi.n	80035a4 <_printf_common+0xb0>
 800354c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003550:	4641      	mov	r1, r8
 8003552:	4638      	mov	r0, r7
 8003554:	47c8      	blx	r9
 8003556:	3001      	adds	r0, #1
 8003558:	d01e      	beq.n	8003598 <_printf_common+0xa4>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	6922      	ldr	r2, [r4, #16]
 800355e:	f003 0306 	and.w	r3, r3, #6
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf02      	ittt	eq
 8003566:	68e5      	ldreq	r5, [r4, #12]
 8003568:	6833      	ldreq	r3, [r6, #0]
 800356a:	1aed      	subeq	r5, r5, r3
 800356c:	68a3      	ldr	r3, [r4, #8]
 800356e:	bf0c      	ite	eq
 8003570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003574:	2500      	movne	r5, #0
 8003576:	4293      	cmp	r3, r2
 8003578:	bfc4      	itt	gt
 800357a:	1a9b      	subgt	r3, r3, r2
 800357c:	18ed      	addgt	r5, r5, r3
 800357e:	2600      	movs	r6, #0
 8003580:	341a      	adds	r4, #26
 8003582:	42b5      	cmp	r5, r6
 8003584:	d11a      	bne.n	80035bc <_printf_common+0xc8>
 8003586:	2000      	movs	r0, #0
 8003588:	e008      	b.n	800359c <_printf_common+0xa8>
 800358a:	2301      	movs	r3, #1
 800358c:	4652      	mov	r2, sl
 800358e:	4641      	mov	r1, r8
 8003590:	4638      	mov	r0, r7
 8003592:	47c8      	blx	r9
 8003594:	3001      	adds	r0, #1
 8003596:	d103      	bne.n	80035a0 <_printf_common+0xac>
 8003598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a0:	3501      	adds	r5, #1
 80035a2:	e7c6      	b.n	8003532 <_printf_common+0x3e>
 80035a4:	18e1      	adds	r1, r4, r3
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	2030      	movs	r0, #48	@ 0x30
 80035aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ae:	4422      	add	r2, r4
 80035b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035b8:	3302      	adds	r3, #2
 80035ba:	e7c7      	b.n	800354c <_printf_common+0x58>
 80035bc:	2301      	movs	r3, #1
 80035be:	4622      	mov	r2, r4
 80035c0:	4641      	mov	r1, r8
 80035c2:	4638      	mov	r0, r7
 80035c4:	47c8      	blx	r9
 80035c6:	3001      	adds	r0, #1
 80035c8:	d0e6      	beq.n	8003598 <_printf_common+0xa4>
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7d9      	b.n	8003582 <_printf_common+0x8e>
	...

080035d0 <_printf_i>:
 80035d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	7e0f      	ldrb	r7, [r1, #24]
 80035d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035d8:	2f78      	cmp	r7, #120	@ 0x78
 80035da:	4691      	mov	r9, r2
 80035dc:	4680      	mov	r8, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	469a      	mov	sl, r3
 80035e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035e6:	d807      	bhi.n	80035f8 <_printf_i+0x28>
 80035e8:	2f62      	cmp	r7, #98	@ 0x62
 80035ea:	d80a      	bhi.n	8003602 <_printf_i+0x32>
 80035ec:	2f00      	cmp	r7, #0
 80035ee:	f000 80d2 	beq.w	8003796 <_printf_i+0x1c6>
 80035f2:	2f58      	cmp	r7, #88	@ 0x58
 80035f4:	f000 80b9 	beq.w	800376a <_printf_i+0x19a>
 80035f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003600:	e03a      	b.n	8003678 <_printf_i+0xa8>
 8003602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003606:	2b15      	cmp	r3, #21
 8003608:	d8f6      	bhi.n	80035f8 <_printf_i+0x28>
 800360a:	a101      	add	r1, pc, #4	@ (adr r1, 8003610 <_printf_i+0x40>)
 800360c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003610:	08003669 	.word	0x08003669
 8003614:	0800367d 	.word	0x0800367d
 8003618:	080035f9 	.word	0x080035f9
 800361c:	080035f9 	.word	0x080035f9
 8003620:	080035f9 	.word	0x080035f9
 8003624:	080035f9 	.word	0x080035f9
 8003628:	0800367d 	.word	0x0800367d
 800362c:	080035f9 	.word	0x080035f9
 8003630:	080035f9 	.word	0x080035f9
 8003634:	080035f9 	.word	0x080035f9
 8003638:	080035f9 	.word	0x080035f9
 800363c:	0800377d 	.word	0x0800377d
 8003640:	080036a7 	.word	0x080036a7
 8003644:	08003737 	.word	0x08003737
 8003648:	080035f9 	.word	0x080035f9
 800364c:	080035f9 	.word	0x080035f9
 8003650:	0800379f 	.word	0x0800379f
 8003654:	080035f9 	.word	0x080035f9
 8003658:	080036a7 	.word	0x080036a7
 800365c:	080035f9 	.word	0x080035f9
 8003660:	080035f9 	.word	0x080035f9
 8003664:	0800373f 	.word	0x0800373f
 8003668:	6833      	ldr	r3, [r6, #0]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6032      	str	r2, [r6, #0]
 8003670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003678:	2301      	movs	r3, #1
 800367a:	e09d      	b.n	80037b8 <_printf_i+0x1e8>
 800367c:	6833      	ldr	r3, [r6, #0]
 800367e:	6820      	ldr	r0, [r4, #0]
 8003680:	1d19      	adds	r1, r3, #4
 8003682:	6031      	str	r1, [r6, #0]
 8003684:	0606      	lsls	r6, r0, #24
 8003686:	d501      	bpl.n	800368c <_printf_i+0xbc>
 8003688:	681d      	ldr	r5, [r3, #0]
 800368a:	e003      	b.n	8003694 <_printf_i+0xc4>
 800368c:	0645      	lsls	r5, r0, #25
 800368e:	d5fb      	bpl.n	8003688 <_printf_i+0xb8>
 8003690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003694:	2d00      	cmp	r5, #0
 8003696:	da03      	bge.n	80036a0 <_printf_i+0xd0>
 8003698:	232d      	movs	r3, #45	@ 0x2d
 800369a:	426d      	negs	r5, r5
 800369c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036a0:	4859      	ldr	r0, [pc, #356]	@ (8003808 <_printf_i+0x238>)
 80036a2:	230a      	movs	r3, #10
 80036a4:	e011      	b.n	80036ca <_printf_i+0xfa>
 80036a6:	6821      	ldr	r1, [r4, #0]
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	0608      	lsls	r0, r1, #24
 80036ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80036b0:	d402      	bmi.n	80036b8 <_printf_i+0xe8>
 80036b2:	0649      	lsls	r1, r1, #25
 80036b4:	bf48      	it	mi
 80036b6:	b2ad      	uxthmi	r5, r5
 80036b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036ba:	4853      	ldr	r0, [pc, #332]	@ (8003808 <_printf_i+0x238>)
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	bf14      	ite	ne
 80036c0:	230a      	movne	r3, #10
 80036c2:	2308      	moveq	r3, #8
 80036c4:	2100      	movs	r1, #0
 80036c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036ca:	6866      	ldr	r6, [r4, #4]
 80036cc:	60a6      	str	r6, [r4, #8]
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	bfa2      	ittt	ge
 80036d2:	6821      	ldrge	r1, [r4, #0]
 80036d4:	f021 0104 	bicge.w	r1, r1, #4
 80036d8:	6021      	strge	r1, [r4, #0]
 80036da:	b90d      	cbnz	r5, 80036e0 <_printf_i+0x110>
 80036dc:	2e00      	cmp	r6, #0
 80036de:	d04b      	beq.n	8003778 <_printf_i+0x1a8>
 80036e0:	4616      	mov	r6, r2
 80036e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80036e6:	fb03 5711 	mls	r7, r3, r1, r5
 80036ea:	5dc7      	ldrb	r7, [r0, r7]
 80036ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036f0:	462f      	mov	r7, r5
 80036f2:	42bb      	cmp	r3, r7
 80036f4:	460d      	mov	r5, r1
 80036f6:	d9f4      	bls.n	80036e2 <_printf_i+0x112>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d10b      	bne.n	8003714 <_printf_i+0x144>
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	07df      	lsls	r7, r3, #31
 8003700:	d508      	bpl.n	8003714 <_printf_i+0x144>
 8003702:	6923      	ldr	r3, [r4, #16]
 8003704:	6861      	ldr	r1, [r4, #4]
 8003706:	4299      	cmp	r1, r3
 8003708:	bfde      	ittt	le
 800370a:	2330      	movle	r3, #48	@ 0x30
 800370c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003710:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003714:	1b92      	subs	r2, r2, r6
 8003716:	6122      	str	r2, [r4, #16]
 8003718:	f8cd a000 	str.w	sl, [sp]
 800371c:	464b      	mov	r3, r9
 800371e:	aa03      	add	r2, sp, #12
 8003720:	4621      	mov	r1, r4
 8003722:	4640      	mov	r0, r8
 8003724:	f7ff fee6 	bl	80034f4 <_printf_common>
 8003728:	3001      	adds	r0, #1
 800372a:	d14a      	bne.n	80037c2 <_printf_i+0x1f2>
 800372c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003730:	b004      	add	sp, #16
 8003732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	f043 0320 	orr.w	r3, r3, #32
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	4833      	ldr	r0, [pc, #204]	@ (800380c <_printf_i+0x23c>)
 8003740:	2778      	movs	r7, #120	@ 0x78
 8003742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	6831      	ldr	r1, [r6, #0]
 800374a:	061f      	lsls	r7, r3, #24
 800374c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003750:	d402      	bmi.n	8003758 <_printf_i+0x188>
 8003752:	065f      	lsls	r7, r3, #25
 8003754:	bf48      	it	mi
 8003756:	b2ad      	uxthmi	r5, r5
 8003758:	6031      	str	r1, [r6, #0]
 800375a:	07d9      	lsls	r1, r3, #31
 800375c:	bf44      	itt	mi
 800375e:	f043 0320 	orrmi.w	r3, r3, #32
 8003762:	6023      	strmi	r3, [r4, #0]
 8003764:	b11d      	cbz	r5, 800376e <_printf_i+0x19e>
 8003766:	2310      	movs	r3, #16
 8003768:	e7ac      	b.n	80036c4 <_printf_i+0xf4>
 800376a:	4827      	ldr	r0, [pc, #156]	@ (8003808 <_printf_i+0x238>)
 800376c:	e7e9      	b.n	8003742 <_printf_i+0x172>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	f023 0320 	bic.w	r3, r3, #32
 8003774:	6023      	str	r3, [r4, #0]
 8003776:	e7f6      	b.n	8003766 <_printf_i+0x196>
 8003778:	4616      	mov	r6, r2
 800377a:	e7bd      	b.n	80036f8 <_printf_i+0x128>
 800377c:	6833      	ldr	r3, [r6, #0]
 800377e:	6825      	ldr	r5, [r4, #0]
 8003780:	6961      	ldr	r1, [r4, #20]
 8003782:	1d18      	adds	r0, r3, #4
 8003784:	6030      	str	r0, [r6, #0]
 8003786:	062e      	lsls	r6, r5, #24
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	d501      	bpl.n	8003790 <_printf_i+0x1c0>
 800378c:	6019      	str	r1, [r3, #0]
 800378e:	e002      	b.n	8003796 <_printf_i+0x1c6>
 8003790:	0668      	lsls	r0, r5, #25
 8003792:	d5fb      	bpl.n	800378c <_printf_i+0x1bc>
 8003794:	8019      	strh	r1, [r3, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	6123      	str	r3, [r4, #16]
 800379a:	4616      	mov	r6, r2
 800379c:	e7bc      	b.n	8003718 <_printf_i+0x148>
 800379e:	6833      	ldr	r3, [r6, #0]
 80037a0:	1d1a      	adds	r2, r3, #4
 80037a2:	6032      	str	r2, [r6, #0]
 80037a4:	681e      	ldr	r6, [r3, #0]
 80037a6:	6862      	ldr	r2, [r4, #4]
 80037a8:	2100      	movs	r1, #0
 80037aa:	4630      	mov	r0, r6
 80037ac:	f7fc fd10 	bl	80001d0 <memchr>
 80037b0:	b108      	cbz	r0, 80037b6 <_printf_i+0x1e6>
 80037b2:	1b80      	subs	r0, r0, r6
 80037b4:	6060      	str	r0, [r4, #4]
 80037b6:	6863      	ldr	r3, [r4, #4]
 80037b8:	6123      	str	r3, [r4, #16]
 80037ba:	2300      	movs	r3, #0
 80037bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037c0:	e7aa      	b.n	8003718 <_printf_i+0x148>
 80037c2:	6923      	ldr	r3, [r4, #16]
 80037c4:	4632      	mov	r2, r6
 80037c6:	4649      	mov	r1, r9
 80037c8:	4640      	mov	r0, r8
 80037ca:	47d0      	blx	sl
 80037cc:	3001      	adds	r0, #1
 80037ce:	d0ad      	beq.n	800372c <_printf_i+0x15c>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	079b      	lsls	r3, r3, #30
 80037d4:	d413      	bmi.n	80037fe <_printf_i+0x22e>
 80037d6:	68e0      	ldr	r0, [r4, #12]
 80037d8:	9b03      	ldr	r3, [sp, #12]
 80037da:	4298      	cmp	r0, r3
 80037dc:	bfb8      	it	lt
 80037de:	4618      	movlt	r0, r3
 80037e0:	e7a6      	b.n	8003730 <_printf_i+0x160>
 80037e2:	2301      	movs	r3, #1
 80037e4:	4632      	mov	r2, r6
 80037e6:	4649      	mov	r1, r9
 80037e8:	4640      	mov	r0, r8
 80037ea:	47d0      	blx	sl
 80037ec:	3001      	adds	r0, #1
 80037ee:	d09d      	beq.n	800372c <_printf_i+0x15c>
 80037f0:	3501      	adds	r5, #1
 80037f2:	68e3      	ldr	r3, [r4, #12]
 80037f4:	9903      	ldr	r1, [sp, #12]
 80037f6:	1a5b      	subs	r3, r3, r1
 80037f8:	42ab      	cmp	r3, r5
 80037fa:	dcf2      	bgt.n	80037e2 <_printf_i+0x212>
 80037fc:	e7eb      	b.n	80037d6 <_printf_i+0x206>
 80037fe:	2500      	movs	r5, #0
 8003800:	f104 0619 	add.w	r6, r4, #25
 8003804:	e7f5      	b.n	80037f2 <_printf_i+0x222>
 8003806:	bf00      	nop
 8003808:	08003bc1 	.word	0x08003bc1
 800380c:	08003bd2 	.word	0x08003bd2

08003810 <memmove>:
 8003810:	4288      	cmp	r0, r1
 8003812:	b510      	push	{r4, lr}
 8003814:	eb01 0402 	add.w	r4, r1, r2
 8003818:	d902      	bls.n	8003820 <memmove+0x10>
 800381a:	4284      	cmp	r4, r0
 800381c:	4623      	mov	r3, r4
 800381e:	d807      	bhi.n	8003830 <memmove+0x20>
 8003820:	1e43      	subs	r3, r0, #1
 8003822:	42a1      	cmp	r1, r4
 8003824:	d008      	beq.n	8003838 <memmove+0x28>
 8003826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800382a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800382e:	e7f8      	b.n	8003822 <memmove+0x12>
 8003830:	4402      	add	r2, r0
 8003832:	4601      	mov	r1, r0
 8003834:	428a      	cmp	r2, r1
 8003836:	d100      	bne.n	800383a <memmove+0x2a>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800383e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003842:	e7f7      	b.n	8003834 <memmove+0x24>

08003844 <_sbrk_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d06      	ldr	r5, [pc, #24]	@ (8003860 <_sbrk_r+0x1c>)
 8003848:	2300      	movs	r3, #0
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	f7fd fd92 	bl	8001378 <_sbrk>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d102      	bne.n	800385e <_sbrk_r+0x1a>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b103      	cbz	r3, 800385e <_sbrk_r+0x1a>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	20000290 	.word	0x20000290

08003864 <_realloc_r>:
 8003864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003868:	4680      	mov	r8, r0
 800386a:	4615      	mov	r5, r2
 800386c:	460c      	mov	r4, r1
 800386e:	b921      	cbnz	r1, 800387a <_realloc_r+0x16>
 8003870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003874:	4611      	mov	r1, r2
 8003876:	f7ff bc59 	b.w	800312c <_malloc_r>
 800387a:	b92a      	cbnz	r2, 8003888 <_realloc_r+0x24>
 800387c:	f7ff fbea 	bl	8003054 <_free_r>
 8003880:	2400      	movs	r4, #0
 8003882:	4620      	mov	r0, r4
 8003884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003888:	f000 f81a 	bl	80038c0 <_malloc_usable_size_r>
 800388c:	4285      	cmp	r5, r0
 800388e:	4606      	mov	r6, r0
 8003890:	d802      	bhi.n	8003898 <_realloc_r+0x34>
 8003892:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003896:	d8f4      	bhi.n	8003882 <_realloc_r+0x1e>
 8003898:	4629      	mov	r1, r5
 800389a:	4640      	mov	r0, r8
 800389c:	f7ff fc46 	bl	800312c <_malloc_r>
 80038a0:	4607      	mov	r7, r0
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d0ec      	beq.n	8003880 <_realloc_r+0x1c>
 80038a6:	42b5      	cmp	r5, r6
 80038a8:	462a      	mov	r2, r5
 80038aa:	4621      	mov	r1, r4
 80038ac:	bf28      	it	cs
 80038ae:	4632      	movcs	r2, r6
 80038b0:	f7ff fbc2 	bl	8003038 <memcpy>
 80038b4:	4621      	mov	r1, r4
 80038b6:	4640      	mov	r0, r8
 80038b8:	f7ff fbcc 	bl	8003054 <_free_r>
 80038bc:	463c      	mov	r4, r7
 80038be:	e7e0      	b.n	8003882 <_realloc_r+0x1e>

080038c0 <_malloc_usable_size_r>:
 80038c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038c4:	1f18      	subs	r0, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bfbc      	itt	lt
 80038ca:	580b      	ldrlt	r3, [r1, r0]
 80038cc:	18c0      	addlt	r0, r0, r3
 80038ce:	4770      	bx	lr

080038d0 <_init>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr

080038dc <_fini>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr
