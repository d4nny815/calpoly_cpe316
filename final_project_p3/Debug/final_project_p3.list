
final_project_p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001774  08001774  00002774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001838  08001838  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001838  08001838  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001838  08001838  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001838  08001838  00002838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800183c  0800183c  0000283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001840  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  0800184c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  0800184c  00003034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000494a  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117b  00000000  00000000  00007986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00008b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000455  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001302  00000000  00000000  00009555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b97  00000000  00000000  0000a857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de35b  00000000  00000000  000103ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015a8  00000000  00000000  000ee78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000efd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800175c 	.word	0x0800175c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800175c 	.word	0x0800175c

080001c8 <spi_init>:
 */

#include "TFTDisplay.h"

// Configure GPIOs and SPI Regs
void spi_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    // PA5 - SCLK
    // PA6 - DC, SW controlled
    // PA7 - MOSI


    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001cc:	4b45      	ldr	r3, [pc, #276]	@ (80002e4 <spi_init+0x11c>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d0:	4a44      	ldr	r2, [pc, #272]	@ (80002e4 <spi_init+0x11c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL7);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001dc:	6a1b      	ldr	r3, [r3, #32]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80001e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (SPI_AF << GPIO_AFRL_AFSEL5_Pos |
 80001ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001f0:	6a1b      	ldr	r3, [r3, #32]
 80001f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f6:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80001fa:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80001fe:	6213      	str	r3, [r2, #32]
                      SPI_AF << GPIO_AFRL_AFSEL7_Pos);

    GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7); // clear mode
 8000200:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800020a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800020e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1);  // AF for mosi, sclk
 8000210:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800021a:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 800021e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE6_0);  // digital out for cs, dc 
 8000220:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800022a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800022e:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7); // push pull
 8000230:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800023a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800023e:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7); // no res
 8000240:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800024a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800024e:	60d3      	str	r3, [r2, #12]
    GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7); // high speed
 8000250:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800025a:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 800025e:	6093      	str	r3, [r2, #8]

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000260:	4b20      	ldr	r3, [pc, #128]	@ (80002e4 <spi_init+0x11c>)
 8000262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000264:	4a1f      	ldr	r2, [pc, #124]	@ (80002e4 <spi_init+0x11c>)
 8000266:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800026a:	6613      	str	r3, [r2, #96]	@ 0x60

    // baudRate = f_clk / 2, 1st edge, idle low, 1-line bidirectional, output enabled (transmit only), msb first, no crc, software slave select, master
    SPI1->CR1 = 0;  // disable
 800026c:	4b1e      	ldr	r3, [pc, #120]	@ (80002e8 <spi_init+0x120>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
    SPI1->CR1 &= ~(SPI_CR1_BR); // f_pclk / 2
 8000272:	4b1d      	ldr	r3, [pc, #116]	@ (80002e8 <spi_init+0x120>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a1c      	ldr	r2, [pc, #112]	@ (80002e8 <spi_init+0x120>)
 8000278:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800027c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_CPHA | SPI_CR1_CPOL); // 1st edge, idle low
 800027e:	4b1a      	ldr	r3, [pc, #104]	@ (80002e8 <spi_init+0x120>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a19      	ldr	r2, [pc, #100]	@ (80002e8 <spi_init+0x120>)
 8000284:	f023 0303 	bic.w	r3, r3, #3
 8000288:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE; // 1-line bidirectional, output enabled
 800028a:	4b17      	ldr	r3, [pc, #92]	@ (80002e8 <spi_init+0x120>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a16      	ldr	r2, [pc, #88]	@ (80002e8 <spi_init+0x120>)
 8000290:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000294:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_LSBFIRST); // msb first
 8000296:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <spi_init+0x120>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a13      	ldr	r2, [pc, #76]	@ (80002e8 <spi_init+0x120>)
 800029c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002a0:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_CRCEN); // no crc
 80002a2:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <spi_init+0x120>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a10      	ldr	r2, [pc, #64]	@ (80002e8 <spi_init+0x120>)
 80002a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002ac:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSM; // software slave select
 80002ae:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <spi_init+0x120>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <spi_init+0x120>)
 80002b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002b8:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_MSTR; // master
 80002ba:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <spi_init+0x120>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <spi_init+0x120>)
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	6013      	str	r3, [r2, #0]
                // SPI_CR1_CRCEN |
                // SPI_CR1_SSM |
                // SPI_CR1_MSTR);

    // 8bit data frame    
    SPI1->CR2 = (0x7 << SPI_CR2_DS_Pos);    
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <spi_init+0x120>)
 80002c8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80002cc:	605a      	str	r2, [r3, #4]

    SPI1->CR1 |= SPI_CR1_SPE;   // enable SPI
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <spi_init+0x120>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <spi_init+0x120>)
 80002d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002d8:	6013      	str	r3, [r2, #0]
    
    return;
 80002da:	bf00      	nop
}
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40013000 	.word	0x40013000

080002ec <display_init>:

void display_init() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
    spi_init();
 80002f2:	f7ff ff69 	bl	80001c8 <spi_init>

    uint8_t num_commands = ILI9341_cmds[0];
 80002f6:	2316      	movs	r3, #22
 80002f8:	717b      	strb	r3, [r7, #5]
    uint8_t cmd = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	713b      	strb	r3, [r7, #4]
    uint8_t num_args = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	70fb      	strb	r3, [r7, #3]
    uint8_t arg = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	70bb      	strb	r3, [r7, #2]

    for (uint8_t i = 1; i < num_commands; i++) {
 8000306:	2301      	movs	r3, #1
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	e029      	b.n	8000360 <display_init+0x74>
        cmd = ILI9341_cmds[i];
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a18      	ldr	r2, [pc, #96]	@ (8000370 <display_init+0x84>)
 8000310:	5cd3      	ldrb	r3, [r2, r3]
 8000312:	713b      	strb	r3, [r7, #4]
        num_args = ILI9341_cmds[++i];
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	3301      	adds	r3, #1
 8000318:	71fb      	strb	r3, [r7, #7]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4a14      	ldr	r2, [pc, #80]	@ (8000370 <display_init+0x84>)
 800031e:	5cd3      	ldrb	r3, [r2, r3]
 8000320:	70fb      	strb	r3, [r7, #3]

        send_command(cmd);
 8000322:	793b      	ldrb	r3, [r7, #4]
 8000324:	4618      	mov	r0, r3
 8000326:	f000 f825 	bl	8000374 <send_command>

        for (uint8_t j = 0; j < num_args; j++) {
 800032a:	2300      	movs	r3, #0
 800032c:	71bb      	strb	r3, [r7, #6]
 800032e:	e010      	b.n	8000352 <display_init+0x66>
            arg = ILI9341_cmds[++i];
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	3301      	adds	r3, #1
 8000334:	71fb      	strb	r3, [r7, #7]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4a0d      	ldr	r2, [pc, #52]	@ (8000370 <display_init+0x84>)
 800033a:	5cd3      	ldrb	r3, [r2, r3]
 800033c:	70bb      	strb	r3, [r7, #2]
            send_data(arg);
 800033e:	78bb      	ldrb	r3, [r7, #2]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f830 	bl	80003a6 <send_data>
            delay_ms(250);
 8000346:	20fa      	movs	r0, #250	@ 0xfa
 8000348:	f000 f85e 	bl	8000408 <delay_ms>
        for (uint8_t j = 0; j < num_args; j++) {
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	3301      	adds	r3, #1
 8000350:	71bb      	strb	r3, [r7, #6]
 8000352:	79ba      	ldrb	r2, [r7, #6]
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	429a      	cmp	r2, r3
 8000358:	d3ea      	bcc.n	8000330 <display_init+0x44>
    for (uint8_t i = 1; i < num_commands; i++) {
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	3301      	adds	r3, #1
 800035e:	71fb      	strb	r3, [r7, #7]
 8000360:	79fa      	ldrb	r2, [r7, #7]
 8000362:	797b      	ldrb	r3, [r7, #5]
 8000364:	429a      	cmp	r2, r3
 8000366:	d3d1      	bcc.n	800030c <display_init+0x20>
        }
    }


    return;
 8000368:	bf00      	nop
}
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	08001788 	.word	0x08001788

08000374 <send_command>:


void send_command(uint8_t command) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
    COMMAND_DC();
 800037e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000382:	2240      	movs	r2, #64	@ 0x40
 8000384:	629a      	str	r2, [r3, #40]	@ 0x28
    CS_L();
 8000386:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800038a:	2210      	movs	r2, #16
 800038c:	629a      	str	r2, [r3, #40]	@ 0x28
    spi_write(command);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f821 	bl	80003d8 <spi_write>
    CS_H();
 8000396:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800039a:	2210      	movs	r2, #16
 800039c:	619a      	str	r2, [r3, #24]

    return;
 800039e:	bf00      	nop
}
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <send_data>:

void send_data(uint8_t data) {
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	4603      	mov	r3, r0
 80003ae:	71fb      	strb	r3, [r7, #7]
    DATA_DC();
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b4:	2240      	movs	r2, #64	@ 0x40
 80003b6:	619a      	str	r2, [r3, #24]
    CS_L();
 80003b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003bc:	2210      	movs	r2, #16
 80003be:	629a      	str	r2, [r3, #40]	@ 0x28
    spi_write(data);
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f808 	bl	80003d8 <spi_write>
    CS_H();
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003cc:	2210      	movs	r2, #16
 80003ce:	619a      	str	r2, [r3, #24]

    return;
 80003d0:	bf00      	nop
}
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <spi_write>:

void spi_write(uint8_t data) {
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 80003e2:	bf00      	nop
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <spi_write+0x2c>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	f003 0302 	and.w	r3, r3, #2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <spi_write+0xc>
    SPI1->DR = data;
 80003f0:	4a04      	ldr	r2, [pc, #16]	@ (8000404 <spi_write+0x2c>)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	60d3      	str	r3, [r2, #12]

    return;
 80003f6:	bf00      	nop
}
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40013000 	.word	0x40013000

08000408 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
    uint32_t cnt = CPU_FREQ / 1000 * ms;  
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000416:	fb02 f303 	mul.w	r3, r2, r3
 800041a:	60fb      	str	r3, [r7, #12]
    while (cnt--);
 800041c:	bf00      	nop
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	60fa      	str	r2, [r7, #12]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1fa      	bne.n	800041e <delay_ms+0x16>
    return;
 8000428:	bf00      	nop
}
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <main>:
#include "uart.h"

void SystemClock_Config(void);


int main(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
    HAL_Init();
 8000438:	f000 f9dd 	bl	80007f6 <HAL_Init>
    SystemClock_Config();
 800043c:	f000 f806 	bl	800044c <SystemClock_Config>

    display_init();
 8000440:	f7ff ff54 	bl	80002ec <display_init>
    uart_init();
 8000444:	f000 f926 	bl	8000694 <uart_init>

    while (1) {
 8000448:	bf00      	nop
 800044a:	e7fd      	b.n	8000448 <main+0x14>

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b096      	sub	sp, #88	@ 0x58
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	2244      	movs	r2, #68	@ 0x44
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 f952 	bl	8001704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	463b      	mov	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800046e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000472:	f000 fb29 	bl	8000ac8 <HAL_PWREx_ControlVoltageScaling>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800047c:	f000 f838 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000480:	2310      	movs	r3, #16
 8000482:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800048c:	2360      	movs	r3, #96	@ 0x60
 800048e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000494:	2301      	movs	r3, #1
 8000496:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000498:	2301      	movs	r3, #1
 800049a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800049c:	2310      	movs	r3, #16
 800049e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004a0:	2307      	movs	r3, #7
 80004a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fb5f 	bl	8000b74 <HAL_RCC_OscConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80004bc:	f000 f818 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c0:	230f      	movs	r3, #15
 80004c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c4:	2303      	movs	r3, #3
 80004c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80004c8:	2390      	movs	r3, #144	@ 0x90
 80004ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d4:	463b      	mov	r3, r7
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 ff27 	bl	800132c <HAL_RCC_ClockConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004e4:	f000 f804 	bl	80004f0 <Error_Handler>
  }
}
 80004e8:	bf00      	nop
 80004ea:	3758      	adds	r7, #88	@ 0x58
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <HAL_MspInit+0x44>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000506:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <HAL_MspInit+0x44>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6613      	str	r3, [r2, #96]	@ 0x60
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <HAL_MspInit+0x44>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <HAL_MspInit+0x44>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800051e:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <HAL_MspInit+0x44>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	6593      	str	r3, [r2, #88]	@ 0x58
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_MspInit+0x44>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <NMI_Handler+0x4>

0800054c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <MemManage_Handler+0x4>

0800055c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <UsageFault_Handler+0x4>

0800056c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059a:	f000 f981 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <SystemInit+0x20>)
 80005aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <SystemInit+0x20>)
 80005b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	@ (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <uart_pin_init+0x8c>)
 800060a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060c:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <uart_pin_init+0x8c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8000614:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000618:	6a1b      	ldr	r3, [r3, #32]
 800061a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800061e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000622:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8000624:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000628:	6a1b      	ldr	r3, [r3, #32]
 800062a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800062e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000632:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000634:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800063e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000642:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000644:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800064e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000652:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800065e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000662:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000664:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800066e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000672:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000674:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800067e:	f023 030c 	bic.w	r3, r3, #12
 8000682:	6053      	str	r3, [r2, #4]
    return;
 8000684:	bf00      	nop
}
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    uart_pin_init();
 8000698:	f7ff ffb4 	bl	8000604 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <uart_init+0x44>)
 800069e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a0:	4a0d      	ldr	r2, [pc, #52]	@ (80006d8 <uart_init+0x44>)
 80006a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a6:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <uart_init+0x48>)
 80006aa:	222c      	movs	r2, #44	@ 0x2c
 80006ac:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <uart_init+0x48>)
 80006b0:	2222      	movs	r2, #34	@ 0x22
 80006b2:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 80006b4:	2026      	movs	r0, #38	@ 0x26
 80006b6:	f7ff ff87 	bl	80005c8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80006ba:	b662      	cpsie	i
}
 80006bc:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <uart_init+0x48>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a06      	ldr	r2, [pc, #24]	@ (80006dc <uart_init+0x48>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 80006ca:	f000 f847 	bl	800075c <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <uart_init+0x4c>)
 80006d0:	f000 f835 	bl	800073e <uart_send_escape>
    return;
 80006d4:	bf00      	nop
}
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40004400 	.word	0x40004400
 80006e0:	08001774 	.word	0x08001774

080006e4 <uart_send_char>:

void uart_send_char(char c) {
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 80006ee:	bf00      	nop
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <uart_send_char+0x2c>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f9      	beq.n	80006f0 <uart_send_char+0xc>
    USART2->TDR = c;
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <uart_send_char+0x2c>)
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	b292      	uxth	r2, r2
 8000702:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8000704:	bf00      	nop
}
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40004400 	.word	0x40004400

08000714 <uart_send_string>:

void uart_send_string(const char* str) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 800071c:	e007      	b.n	800072e <uart_send_string+0x1a>
        uart_send_char(*str);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ffde 	bl	80006e4 <uart_send_char>
        str++;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f3      	bne.n	800071e <uart_send_string+0xa>
    }

    return;
 8000736:	bf00      	nop
}
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <uart_send_escape>:
    uart_send_escape("[1E");

    return;
}

void uart_send_escape(const char* str) {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 8000746:	201b      	movs	r0, #27
 8000748:	f7ff ffcc 	bl	80006e4 <uart_send_char>
    uart_send_string(str);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ffe1 	bl	8000714 <uart_send_string>

    return;
 8000752:	bf00      	nop
}
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <uart_clear_screen>:


void uart_clear_screen(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <uart_clear_screen+0x14>)
 8000762:	f7ff ffec 	bl	800073e <uart_send_escape>
    uart_send_escape("[H");
 8000766:	4803      	ldr	r0, [pc, #12]	@ (8000774 <uart_clear_screen+0x18>)
 8000768:	f7ff ffe9 	bl	800073e <uart_send_escape>

    return;
 800076c:	bf00      	nop
}
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08001780 	.word	0x08001780
 8000774:	08001784 	.word	0x08001784

08000778 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <USART2_IRQHandler+0x20>)
 800077e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <USART2_IRQHandler+0x24>)
 8000786:	701a      	strb	r2, [r3, #0]
    flag = 1;
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <USART2_IRQHandler+0x28>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
    return;
 800078e:	bf00      	nop
}
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40004400 	.word	0x40004400
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	20000028 	.word	0x20000028

080007a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a8:	f7ff fefc 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	@ (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	@ (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d2:	f000 ff9f 	bl	8001714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d6:	f7ff fe2d 	bl	8000434 <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e8:	08001840 	.word	0x08001840
  ldr r2, =_sbss
 80007ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f0:	20000034 	.word	0x20000034

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>

080007f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f91f 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000806:	200f      	movs	r0, #15
 8000808:	f000 f80e 	bl	8000828 <HAL_InitTick>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e001      	b.n	800081c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000818:	f7ff fe70 	bl	80004fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800081c:	79fb      	ldrb	r3, [r7, #7]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <HAL_InitTick+0x6c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d023      	beq.n	8000884 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <HAL_InitTick+0x70>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <HAL_InitTick+0x6c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084a:	fbb3 f3f1 	udiv	r3, r3, r1
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f91d 	bl	8000a92 <HAL_SYSTICK_Config>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10f      	bne.n	800087e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d809      	bhi.n	8000878 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800086c:	f000 f8f5 	bl	8000a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000870:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_InitTick+0x74>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	e007      	b.n	8000888 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	73fb      	strb	r3, [r7, #15]
 800087c:	e004      	b.n	8000888 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	e001      	b.n	8000888 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000008 	.word	0x20000008
 8000898:	20000000 	.word	0x20000000
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_IncTick+0x20>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_IncTick+0x24>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <HAL_IncTick+0x24>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000030 	.word	0x20000030

080008c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <HAL_GetTick+0x14>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000030 	.word	0x20000030

080008e0 <__NVIC_SetPriorityGrouping>:
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	@ (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	@ (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	@ 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	@ 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a10:	d301      	bcc.n	8000a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00f      	b.n	8000a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <SysTick_Config+0x40>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a24:	f7ff ff8e 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <SysTick_Config+0x40>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <SysTick_Config+0x40>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff47 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6c:	f7ff ff5c 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff8e 	bl	8000998 <NVIC_EncodePriority>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff5d 	bl	8000944 <__NVIC_SetPriority>
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffb0 	bl	8000a00 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ad6:	d130      	bne.n	8000b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ad8:	4b23      	ldr	r3, [pc, #140]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ae4:	d038      	beq.n	8000b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae6:	4b20      	ldr	r3, [pc, #128]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000aee:	4a1e      	ldr	r2, [pc, #120]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000af0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2232      	movs	r2, #50	@ 0x32
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b0c:	e002      	b.n	8000b14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b20:	d102      	bne.n	8000b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f2      	bne.n	8000b0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b34:	d110      	bne.n	8000b58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e00f      	b.n	8000b5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b46:	d007      	beq.n	8000b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b50:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40007000 	.word	0x40007000
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	431bde83 	.word	0x431bde83

08000b74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e3ca      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b86:	4b97      	ldr	r3, [pc, #604]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b90:	4b94      	ldr	r3, [pc, #592]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80e4 	beq.w	8000d70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <HAL_RCC_OscConfig+0x4a>
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	2b0c      	cmp	r3, #12
 8000bb2:	f040 808b 	bne.w	8000ccc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	f040 8087 	bne.w	8000ccc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bbe:	4b89      	ldr	r3, [pc, #548]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d005      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x62>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e3a2      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a1a      	ldr	r2, [r3, #32]
 8000bda:	4b82      	ldr	r3, [pc, #520]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d004      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x7c>
 8000be6:	4b7f      	ldr	r3, [pc, #508]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000bee:	e005      	b.n	8000bfc <HAL_RCC_OscConfig+0x88>
 8000bf0:	4b7c      	ldr	r3, [pc, #496]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d223      	bcs.n	8000c48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fd1d 	bl	8001644 <RCC_SetFlashLatencyFromMSIRange>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e383      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c14:	4b73      	ldr	r3, [pc, #460]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a72      	ldr	r2, [pc, #456]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b70      	ldr	r3, [pc, #448]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	496d      	ldr	r1, [pc, #436]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c32:	4b6c      	ldr	r3, [pc, #432]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	4968      	ldr	r1, [pc, #416]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	604b      	str	r3, [r1, #4]
 8000c46:	e025      	b.n	8000c94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c48:	4b66      	ldr	r3, [pc, #408]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a65      	ldr	r2, [pc, #404]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b63      	ldr	r3, [pc, #396]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a1b      	ldr	r3, [r3, #32]
 8000c60:	4960      	ldr	r1, [pc, #384]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c62:	4313      	orrs	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c66:	4b5f      	ldr	r3, [pc, #380]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	495b      	ldr	r1, [pc, #364]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d109      	bne.n	8000c94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fcdd 	bl	8001644 <RCC_SetFlashLatencyFromMSIRange>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e343      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c94:	f000 fc4a 	bl	800152c <HAL_RCC_GetSysClockFreq>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	4b52      	ldr	r3, [pc, #328]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	4950      	ldr	r1, [pc, #320]	@ (8000de8 <HAL_RCC_OscConfig+0x274>)
 8000ca6:	5ccb      	ldrb	r3, [r1, r3]
 8000ca8:	f003 031f 	and.w	r3, r3, #31
 8000cac:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb0:	4a4e      	ldr	r2, [pc, #312]	@ (8000dec <HAL_RCC_OscConfig+0x278>)
 8000cb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8000df0 <HAL_RCC_OscConfig+0x27c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fdb5 	bl	8000828 <HAL_InitTick>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d052      	beq.n	8000d6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	e327      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d032      	beq.n	8000d3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cd4:	4b43      	ldr	r3, [pc, #268]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a42      	ldr	r2, [pc, #264]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fdf2 	bl	80008c8 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fdee 	bl	80008c8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e310      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f0      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d06:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a36      	ldr	r2, [pc, #216]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b34      	ldr	r3, [pc, #208]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	4931      	ldr	r1, [pc, #196]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d24:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	492c      	ldr	r1, [pc, #176]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
 8000d38:	e01a      	b.n	8000d70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a29      	ldr	r2, [pc, #164]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d46:	f7ff fdbf 	bl	80008c8 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fdbb 	bl	80008c8 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e2dd      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f0      	bne.n	8000d4e <HAL_RCC_OscConfig+0x1da>
 8000d6c:	e000      	b.n	8000d70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d074      	beq.n	8000e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d005      	beq.n	8000d8e <HAL_RCC_OscConfig+0x21a>
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	d10e      	bne.n	8000da6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d10b      	bne.n	8000da6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d064      	beq.n	8000e64 <HAL_RCC_OscConfig+0x2f0>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d160      	bne.n	8000e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e2ba      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x24a>
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e026      	b.n	8000e0c <HAL_RCC_OscConfig+0x298>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dc6:	d115      	bne.n	8000df4 <HAL_RCC_OscConfig+0x280>
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000dce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a02      	ldr	r2, [pc, #8]	@ (8000de4 <HAL_RCC_OscConfig+0x270>)
 8000dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e014      	b.n	8000e0c <HAL_RCC_OscConfig+0x298>
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	080017f8 	.word	0x080017f8
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000004 	.word	0x20000004
 8000df4:	4ba0      	ldr	r3, [pc, #640]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a9f      	ldr	r2, [pc, #636]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b9d      	ldr	r3, [pc, #628]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a9c      	ldr	r2, [pc, #624]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d013      	beq.n	8000e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fd58 	bl	80008c8 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fd54 	bl	80008c8 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	@ 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e276      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e2e:	4b92      	ldr	r3, [pc, #584]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x2a8>
 8000e3a:	e014      	b.n	8000e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fd44 	bl	80008c8 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fd40 	bl	80008c8 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	@ 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e262      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e56:	4b88      	ldr	r3, [pc, #544]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x2d0>
 8000e62:	e000      	b.n	8000e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d060      	beq.n	8000f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d005      	beq.n	8000e84 <HAL_RCC_OscConfig+0x310>
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b0c      	cmp	r3, #12
 8000e7c:	d119      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d116      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e84:	4b7c      	ldr	r3, [pc, #496]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <HAL_RCC_OscConfig+0x328>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e23f      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b76      	ldr	r3, [pc, #472]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	061b      	lsls	r3, r3, #24
 8000eaa:	4973      	ldr	r1, [pc, #460]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000eac:	4313      	orrs	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eb0:	e040      	b.n	8000f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d023      	beq.n	8000f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eba:	4b6f      	ldr	r3, [pc, #444]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6e      	ldr	r2, [pc, #440]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fcff 	bl	80008c8 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ece:	f7ff fcfb 	bl	80008c8 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e21d      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ee0:	4b65      	ldr	r3, [pc, #404]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f0      	beq.n	8000ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eec:	4b62      	ldr	r3, [pc, #392]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	061b      	lsls	r3, r3, #24
 8000efa:	495f      	ldr	r1, [pc, #380]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000efc:	4313      	orrs	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
 8000f00:	e018      	b.n	8000f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f02:	4b5d      	ldr	r3, [pc, #372]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a5c      	ldr	r2, [pc, #368]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fcdb 	bl	80008c8 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f16:	f7ff fcd7 	bl	80008c8 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e1f9      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f28:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f0      	bne.n	8000f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d03c      	beq.n	8000fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f48:	4b4b      	ldr	r3, [pc, #300]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f58:	f7ff fcb6 	bl	80008c8 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f60:	f7ff fcb2 	bl	80008c8 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e1d4      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f72:	4b41      	ldr	r3, [pc, #260]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0ef      	beq.n	8000f60 <HAL_RCC_OscConfig+0x3ec>
 8000f80:	e01b      	b.n	8000fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f88:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f92:	f7ff fc99 	bl	80008c8 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fc95 	bl	80008c8 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e1b7      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fac:	4b32      	ldr	r3, [pc, #200]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ef      	bne.n	8000f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 80a6 	beq.w	8001114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10d      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	4b27      	ldr	r3, [pc, #156]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fdc:	4a26      	ldr	r2, [pc, #152]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff4:	4b21      	ldr	r3, [pc, #132]	@ (800107c <HAL_RCC_OscConfig+0x508>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d118      	bne.n	8001032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <HAL_RCC_OscConfig+0x508>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1d      	ldr	r2, [pc, #116]	@ (800107c <HAL_RCC_OscConfig+0x508>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800100c:	f7ff fc5c 	bl	80008c8 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001014:	f7ff fc58 	bl	80008c8 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e17a      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <HAL_RCC_OscConfig+0x508>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <HAL_RCC_OscConfig+0x4d8>
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 800103c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800104a:	e029      	b.n	80010a0 <HAL_RCC_OscConfig+0x52c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d115      	bne.n	8001080 <HAL_RCC_OscConfig+0x50c>
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8001056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800105a:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001064:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 8001066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800106a:	4a03      	ldr	r2, [pc, #12]	@ (8001078 <HAL_RCC_OscConfig+0x504>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x52c>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	40007000 	.word	0x40007000
 8001080:	4b9c      	ldr	r3, [pc, #624]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 8001082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001086:	4a9b      	ldr	r2, [pc, #620]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001090:	4b98      	ldr	r3, [pc, #608]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 8001092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001096:	4a97      	ldr	r2, [pc, #604]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d016      	beq.n	80010d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc0e 	bl	80008c8 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010ae:	e00a      	b.n	80010c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b0:	f7ff fc0a 	bl	80008c8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010be:	4293      	cmp	r3, r2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e12a      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010c6:	4b8b      	ldr	r3, [pc, #556]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80010c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0ed      	beq.n	80010b0 <HAL_RCC_OscConfig+0x53c>
 80010d4:	e015      	b.n	8001102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d6:	f7ff fbf7 	bl	80008c8 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fbf3 	bl	80008c8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e113      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010f4:	4b7f      	ldr	r3, [pc, #508]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80010f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1ed      	bne.n	80010de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001102:	7ffb      	ldrb	r3, [r7, #31]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001108:	4b7a      	ldr	r3, [pc, #488]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	4a79      	ldr	r2, [pc, #484]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800110e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001112:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80fe 	beq.w	800131a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001122:	2b02      	cmp	r3, #2
 8001124:	f040 80d0 	bne.w	80012c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001128:	4b72      	ldr	r3, [pc, #456]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	429a      	cmp	r2, r3
 800113a:	d130      	bne.n	800119e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	3b01      	subs	r3, #1
 8001148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800114a:	429a      	cmp	r2, r3
 800114c:	d127      	bne.n	800119e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001158:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d11f      	bne.n	800119e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001168:	2a07      	cmp	r2, #7
 800116a:	bf14      	ite	ne
 800116c:	2201      	movne	r2, #1
 800116e:	2200      	moveq	r2, #0
 8001170:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001172:	4293      	cmp	r3, r2
 8001174:	d113      	bne.n	800119e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001180:	085b      	lsrs	r3, r3, #1
 8001182:	3b01      	subs	r3, #1
 8001184:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001186:	429a      	cmp	r2, r3
 8001188:	d109      	bne.n	800119e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	085b      	lsrs	r3, r3, #1
 8001196:	3b01      	subs	r3, #1
 8001198:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800119a:	429a      	cmp	r2, r3
 800119c:	d06e      	beq.n	800127c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d069      	beq.n	8001278 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80011a4:	4b53      	ldr	r3, [pc, #332]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80011b0:	4b50      	ldr	r3, [pc, #320]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0ad      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80011c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011cc:	f7ff fb7c 	bl	80008c8 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d4:	f7ff fb78 	bl	80008c8 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e09a      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011e6:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f2:	4b40      	ldr	r3, [pc, #256]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <HAL_RCC_OscConfig+0x784>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001202:	3a01      	subs	r2, #1
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	4311      	orrs	r1, r2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800120c:	0212      	lsls	r2, r2, #8
 800120e:	4311      	orrs	r1, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001214:	0852      	lsrs	r2, r2, #1
 8001216:	3a01      	subs	r2, #1
 8001218:	0552      	lsls	r2, r2, #21
 800121a:	4311      	orrs	r1, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	3a01      	subs	r2, #1
 8001224:	0652      	lsls	r2, r2, #25
 8001226:	4311      	orrs	r1, r2
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800122c:	0912      	lsrs	r2, r2, #4
 800122e:	0452      	lsls	r2, r2, #17
 8001230:	430a      	orrs	r2, r1
 8001232:	4930      	ldr	r1, [pc, #192]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 8001234:	4313      	orrs	r3, r2
 8001236:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001238:	4b2e      	ldr	r3, [pc, #184]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a2d      	ldr	r2, [pc, #180]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800123e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001242:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001244:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a2a      	ldr	r2, [pc, #168]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800124a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800124e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001250:	f7ff fb3a 	bl	80008c8 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fb36 	bl	80008c8 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e058      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800126a:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001276:	e050      	b.n	800131a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e04f      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127c:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d148      	bne.n	800131a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800128e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001292:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001294:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 800129a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800129e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012a0:	f7ff fb12 	bl	80008c8 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fb0e 	bl	80008c8 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e030      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x734>
 80012c6:	e028      	b.n	800131a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d023      	beq.n	8001316 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_RCC_OscConfig+0x780>)
 80012d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff faf5 	bl	80008c8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e0:	e00c      	b.n	80012fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff faf1 	bl	80008c8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d905      	bls.n	80012fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e013      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_RCC_OscConfig+0x7b0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ec      	bne.n	80012e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_RCC_OscConfig+0x7b0>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4905      	ldr	r1, [pc, #20]	@ (8001324 <HAL_RCC_OscConfig+0x7b0>)
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_RCC_OscConfig+0x7b4>)
 8001310:	4013      	ands	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
 8001314:	e001      	b.n	800131a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	feeefffc 	.word	0xfeeefffc

0800132c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0e7      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001340:	4b75      	ldr	r3, [pc, #468]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d910      	bls.n	8001370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b72      	ldr	r3, [pc, #456]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 0207 	bic.w	r2, r3, #7
 8001356:	4970      	ldr	r1, [pc, #448]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b6e      	ldr	r3, [pc, #440]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0cf      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d010      	beq.n	800139e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	4b66      	ldr	r3, [pc, #408]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001388:	429a      	cmp	r2, r3
 800138a:	d908      	bls.n	800139e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138c:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4960      	ldr	r1, [pc, #384]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d04c      	beq.n	8001444 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b2:	4b5a      	ldr	r3, [pc, #360]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d121      	bne.n	8001402 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0a6      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ca:	4b54      	ldr	r3, [pc, #336]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d115      	bne.n	8001402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e09a      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e2:	4b4e      	ldr	r3, [pc, #312]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e08e      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f2:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e086      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001402:	4b46      	ldr	r3, [pc, #280]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f023 0203 	bic.w	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4943      	ldr	r1, [pc, #268]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 8001410:	4313      	orrs	r3, r2
 8001412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001414:	f7ff fa58 	bl	80008c8 <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141a:	e00a      	b.n	8001432 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141c:	f7ff fa54 	bl	80008c8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e06e      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001432:	4b3a      	ldr	r3, [pc, #232]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 020c 	and.w	r2, r3, #12
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	429a      	cmp	r2, r3
 8001442:	d1eb      	bne.n	800141c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d010      	beq.n	8001472 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4b31      	ldr	r3, [pc, #196]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800145c:	429a      	cmp	r2, r3
 800145e:	d208      	bcs.n	8001472 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	492b      	ldr	r1, [pc, #172]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001472:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d210      	bcs.n	80014a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 0207 	bic.w	r2, r3, #7
 8001488:	4923      	ldr	r1, [pc, #140]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001490:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <HAL_RCC_ClockConfig+0x1ec>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e036      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4918      	ldr	r1, [pc, #96]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d009      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4910      	ldr	r1, [pc, #64]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e0:	f000 f824 	bl	800152c <HAL_RCC_GetSysClockFreq>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	490b      	ldr	r1, [pc, #44]	@ (8001520 <HAL_RCC_ClockConfig+0x1f4>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_RCC_ClockConfig+0x1f8>)
 80014fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_RCC_ClockConfig+0x1fc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f98f 	bl	8000828 <HAL_InitTick>
 800150a:	4603      	mov	r3, r0
 800150c:	72fb      	strb	r3, [r7, #11]

  return status;
 800150e:	7afb      	ldrb	r3, [r7, #11]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40022000 	.word	0x40022000
 800151c:	40021000 	.word	0x40021000
 8001520:	080017f8 	.word	0x080017f8
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b3e      	ldr	r3, [pc, #248]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001544:	4b3b      	ldr	r3, [pc, #236]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x34>
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d121      	bne.n	800159e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d11e      	bne.n	800159e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001560:	4b34      	ldr	r3, [pc, #208]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d107      	bne.n	800157c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800156c:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	e005      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800157c:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001588:	4a2b      	ldr	r2, [pc, #172]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x10c>)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800159c:	e00a      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d102      	bne.n	80015aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <HAL_RCC_GetSysClockFreq+0x110>)
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	e004      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015b0:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x114>)
 80015b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	d134      	bne.n	8001624 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d003      	beq.n	80015d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d003      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0xac>
 80015d0:	e005      	b.n	80015de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <HAL_RCC_GetSysClockFreq+0x110>)
 80015d4:	617b      	str	r3, [r7, #20]
      break;
 80015d6:	e005      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015d8:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x114>)
 80015da:	617b      	str	r3, [r7, #20]
      break;
 80015dc:	e002      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	617b      	str	r3, [r7, #20]
      break;
 80015e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	3301      	adds	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	fb03 f202 	mul.w	r2, r3, r2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x108>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	0e5b      	lsrs	r3, r3, #25
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	3301      	adds	r3, #1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001624:	69bb      	ldr	r3, [r7, #24]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	08001808 	.word	0x08001808
 800163c:	00f42400 	.word	0x00f42400
 8001640:	007a1200 	.word	0x007a1200

08001644 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800165c:	f7ff fa26 	bl	8000aac <HAL_PWREx_GetVoltageRange>
 8001660:	6178      	str	r0, [r7, #20]
 8001662:	e014      	b.n	800168e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	4a24      	ldr	r2, [pc, #144]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800167c:	f7ff fa16 	bl	8000aac <HAL_PWREx_GetVoltageRange>
 8001680:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001686:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800168c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001694:	d10b      	bne.n	80016ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b80      	cmp	r3, #128	@ 0x80
 800169a:	d919      	bls.n	80016d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2ba0      	cmp	r3, #160	@ 0xa0
 80016a0:	d902      	bls.n	80016a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016a2:	2302      	movs	r3, #2
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e013      	b.n	80016d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016a8:	2301      	movs	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	e010      	b.n	80016d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b80      	cmp	r3, #128	@ 0x80
 80016b2:	d902      	bls.n	80016ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016b4:	2303      	movs	r3, #3
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	e00a      	b.n	80016d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b80      	cmp	r3, #128	@ 0x80
 80016be:	d102      	bne.n	80016c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016c0:	2302      	movs	r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	e004      	b.n	80016d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b70      	cmp	r3, #112	@ 0x70
 80016ca:	d101      	bne.n	80016d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016cc:	2301      	movs	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 0207 	bic.w	r2, r3, #7
 80016d8:	4909      	ldr	r1, [pc, #36]	@ (8001700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d001      	beq.n	80016f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40022000 	.word	0x40022000

08001704 <memset>:
 8001704:	4402      	add	r2, r0
 8001706:	4603      	mov	r3, r0
 8001708:	4293      	cmp	r3, r2
 800170a:	d100      	bne.n	800170e <memset+0xa>
 800170c:	4770      	bx	lr
 800170e:	f803 1b01 	strb.w	r1, [r3], #1
 8001712:	e7f9      	b.n	8001708 <memset+0x4>

08001714 <__libc_init_array>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4d0d      	ldr	r5, [pc, #52]	@ (800174c <__libc_init_array+0x38>)
 8001718:	4c0d      	ldr	r4, [pc, #52]	@ (8001750 <__libc_init_array+0x3c>)
 800171a:	1b64      	subs	r4, r4, r5
 800171c:	10a4      	asrs	r4, r4, #2
 800171e:	2600      	movs	r6, #0
 8001720:	42a6      	cmp	r6, r4
 8001722:	d109      	bne.n	8001738 <__libc_init_array+0x24>
 8001724:	4d0b      	ldr	r5, [pc, #44]	@ (8001754 <__libc_init_array+0x40>)
 8001726:	4c0c      	ldr	r4, [pc, #48]	@ (8001758 <__libc_init_array+0x44>)
 8001728:	f000 f818 	bl	800175c <_init>
 800172c:	1b64      	subs	r4, r4, r5
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	2600      	movs	r6, #0
 8001732:	42a6      	cmp	r6, r4
 8001734:	d105      	bne.n	8001742 <__libc_init_array+0x2e>
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	f855 3b04 	ldr.w	r3, [r5], #4
 800173c:	4798      	blx	r3
 800173e:	3601      	adds	r6, #1
 8001740:	e7ee      	b.n	8001720 <__libc_init_array+0xc>
 8001742:	f855 3b04 	ldr.w	r3, [r5], #4
 8001746:	4798      	blx	r3
 8001748:	3601      	adds	r6, #1
 800174a:	e7f2      	b.n	8001732 <__libc_init_array+0x1e>
 800174c:	08001838 	.word	0x08001838
 8001750:	08001838 	.word	0x08001838
 8001754:	08001838 	.word	0x08001838
 8001758:	0800183c 	.word	0x0800183c

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr
