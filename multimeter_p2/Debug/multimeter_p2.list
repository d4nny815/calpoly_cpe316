
multimeter_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004094  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011fc4  08004224  08004224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080161e8  080161e8  00018088  2**0
                  CONTENTS
  4 .ARM          00000008  080161e8  080161e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080161f0  080161f0  00018088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080161f0  080161f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080161f4  080161f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080161f8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000088  08016280  00018088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08016280  00018208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b325  00000000  00000000  000180b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cd  00000000  00000000  000233dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  000254b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004b5  00000000  00000000  00025c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256e1  00000000  00000000  0002613d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c8e  00000000  00000000  0004b81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e43d5  00000000  00000000  000534ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00137881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002250  00000000  00000000  00137934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00139b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000046a3  00000000  00000000  00139be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000130  00000000  00000000  0013e287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800420c 	.word	0x0800420c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800420c 	.word	0x0800420c

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <ADC_pin_init>:
#include "ADC.h"

static volatile uint16_t value;
static volatile int flag;

void ADC_pin_init() {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <ADC_pin_init+0x3c>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <ADC_pin_init+0x3c>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOA->MODER |= GPIO_MODER_MODE0; // Analog mode
 8000c94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c9e:	f043 0303 	orr.w	r3, r3, #3
 8000ca2:	6013      	str	r3, [r2, #0]
    GPIOA->ASCR |= GPIO_ASCR_ASC0;  // Connect analog switch to ADC input
 8000ca4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000caa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

    return;
 8000cb4:	bf00      	nop
}
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <ADC_init>:


void ADC_init() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
//
//    ADC1->IER |= ADC_IER_EOCIE; // enable end-of-conversion interrupt
//    NVIC_EnableIRQ(ADC1_IRQn); // enable ADC interrupt
//    __enable_irq();
//
    ADC_pin_init();
 8000cca:	f7ff ffdb 	bl	8000c84 <ADC_pin_init>

        RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000cce:	4b33      	ldr	r3, [pc, #204]	@ (8000d9c <ADC_init+0xd8>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a32      	ldr	r2, [pc, #200]	@ (8000d9c <ADC_init+0xd8>)
 8000cd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
        ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 8000cda:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <ADC_init+0xdc>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	4a30      	ldr	r2, [pc, #192]	@ (8000da0 <ADC_init+0xdc>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce4:	6093      	str	r3, [r2, #8]
        ADC1->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <ADC_init+0xe0>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	4a2e      	ldr	r2, [pc, #184]	@ (8000da4 <ADC_init+0xe0>)
 8000cec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000cf0:	6093      	str	r3, [r2, #8]
        ADC1->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <ADC_init+0xe0>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8000da4 <ADC_init+0xe0>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6093      	str	r3, [r2, #8]
        for (int _=0; _<100; _++); // wait for regulator to start up
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	e002      	b.n	8000d0a <ADC_init+0x46>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b63      	cmp	r3, #99	@ 0x63
 8000d0e:	ddf9      	ble.n	8000d04 <ADC_init+0x40>
        // ! for 4MHz but will work for higher freqs

        ADC1->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <ADC_init+0xe0>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	4a23      	ldr	r2, [pc, #140]	@ (8000da4 <ADC_init+0xe0>)
 8000d16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000d1a:	6093      	str	r3, [r2, #8]
        ADC1->CR |= ADC_CR_ADCAL; // start calibration
 8000d1c:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <ADC_init+0xe0>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4a20      	ldr	r2, [pc, #128]	@ (8000da4 <ADC_init+0xe0>)
 8000d22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d26:	6093      	str	r3, [r2, #8]
        while (ADC1->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000d28:	bf00      	nop
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <ADC_init+0xe0>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	dbfb      	blt.n	8000d2a <ADC_init+0x66>

        ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <ADC_init+0xe0>)
 8000d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000d38:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <ADC_init+0xe0>)
 8000d3a:	f023 0301 	bic.w	r3, r3, #1
 8000d3e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

        ADC1->ISR |= ADC_ISR_ADRDY; // clear ready flag
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <ADC_init+0xe0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a17      	ldr	r2, [pc, #92]	@ (8000da4 <ADC_init+0xe0>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6013      	str	r3, [r2, #0]
        ADC1->CR |= ADC_CR_ADEN; // enable ADC
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <ADC_init+0xe0>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <ADC_init+0xe0>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6093      	str	r3, [r2, #8]
        while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000d5a:	bf00      	nop
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <ADC_init+0xe0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f9      	beq.n	8000d5c <ADC_init+0x98>

        ADC1->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
 8000d68:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <ADC_init+0xe0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
        ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos); // one conversion in sequence
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <ADC_init+0xe0>)
 8000d70:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d74:	631a      	str	r2, [r3, #48]	@ 0x30
        ADC1->SMPR1 = ~ADC_SMPR1_SMP5_Msk; // 2.5 clock sample on channel 5
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <ADC_init+0xe0>)
 8000d78:	f46f 3260 	mvn.w	r2, #229376	@ 0x38000
 8000d7c:	615a      	str	r2, [r3, #20]
    //    ADC1->SMPR1 = (7 << ADC_SMPR1_SMP5_Pos); // 640.5 clock sample on channel 5
    //    ADC1->SMPR1 = (4 << ADC_SMPR1_SMP5_Pos); // 47.5 clock sample on channel 5

        ADC1->IER |= ADC_IER_EOCIE; // enable end-of-conversion interrupt
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <ADC_init+0xe0>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <ADC_init+0xe0>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6053      	str	r3, [r2, #4]
        NVIC_EnableIRQ(ADC1_IRQn); // enable ADC interrupt
 8000d8a:	2012      	movs	r0, #18
 8000d8c:	f7ff ff5c 	bl	8000c48 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d90:	b662      	cpsie	i
}
 8000d92:	bf00      	nop
        __enable_irq();

        return;
 8000d94:	bf00      	nop

    return;
}
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	50040300 	.word	0x50040300
 8000da4:	50040000 	.word	0x50040000

08000da8 <ADC_to_mv>:

uint16_t ADC_to_mv(uint16_t val) {
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
//    return val * VREF / ADC_REF;

    // This from the linear calibration but I noticed better accuracy with the ideal conversion
     int32_t uv = val * MAGIC_CAL_X - MAGIC_CAL_Y;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8000dc0:	3b29      	subs	r3, #41	@ 0x29
 8000dc2:	60fb      	str	r3, [r7, #12]
     return uv > 0 ? uv / UV_TO_MV : 0;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	dd08      	ble.n	8000ddc <ADC_to_mv+0x34>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <ADC_to_mv+0x44>)
 8000dce:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd2:	1192      	asrs	r2, r2, #6
 8000dd4:	17db      	asrs	r3, r3, #31
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	e000      	b.n	8000dde <ADC_to_mv+0x36>
 8000ddc:	2300      	movs	r3, #0
 }
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	10624dd3 	.word	0x10624dd3

08000df0 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
    value = ADC1->DR;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <ADC1_2_IRQHandler+0x20>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <ADC1_2_IRQHandler+0x24>)
 8000dfc:	801a      	strh	r2, [r3, #0]
    flag = 1;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <ADC1_2_IRQHandler+0x28>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	50040000 	.word	0x50040000
 8000e14:	200000a4 	.word	0x200000a4
 8000e18:	200000a8 	.word	0x200000a8

08000e1c <get_ADC_val>:

uint16_t get_ADC_val() {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    return value;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <get_ADC_val+0x14>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	b29b      	uxth	r3, r3
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	200000a4 	.word	0x200000a4

08000e34 <ADC_check_flag>:

int ADC_check_flag() {
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
    return flag;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <ADC_check_flag+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200000a8 	.word	0x200000a8

08000e4c <ADC_clear_flag>:

void ADC_clear_flag() {
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
    flag = 0;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <ADC_clear_flag+0x14>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]

    return;
 8000e56:	bf00      	nop
}
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	200000a8 	.word	0x200000a8

08000e64 <__NVIC_EnableIRQ>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	@ (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <main>:
int AC = 1;


void SystemClock_Config(void);

int main(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	f5ad 4dc0 	sub.w	sp, sp, #24576	@ 0x6000
 8000ea6:	b08e      	sub	sp, #56	@ 0x38
 8000ea8:	af00      	add	r7, sp, #0
    HAL_Init();
 8000eaa:	f000 fe78 	bl	8001b9e <HAL_Init>
    SystemClock_Config();
 8000eae:	f000 fc44 	bl	800173a <SystemClock_Config>


    // * init  
    uart_init();
 8000eb2:	f000 fd9d 	bl	80019f0 <uart_init>
    print_start_screen();
 8000eb6:	f000 fac5 	bl	8001444 <print_start_screen>

    ADC_init();
 8000eba:	f7ff ff03 	bl	8000cc4 <ADC_init>
    arm_rfft_instance_q15 rfft_instance;
    arm_status status = arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 8000ebe:	f507 40c0 	add.w	r0, r7, #24576	@ 0x6000
 8000ec2:	f100 000c 	add.w	r0, r0, #12
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ece:	f001 ff0b 	bl	8002ce8 <arm_rfft_init_q15>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000ed8:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000edc:	7013      	strb	r3, [r2, #0]
    while (status != ARM_MATH_SUCCESS) {
 8000ede:	e00f      	b.n	8000f00 <main+0x60>
        status = arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 8000ee0:	f507 40c0 	add.w	r0, r7, #24576	@ 0x6000
 8000ee4:	f100 000c 	add.w	r0, r0, #12
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef0:	f001 fefa 	bl	8002ce8 <arm_rfft_init_q15>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000efa:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000efe:	7013      	strb	r3, [r2, #0]
    while (status != ARM_MATH_SUCCESS) {
 8000f00:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 8000f04:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000f08:	f993 3000 	ldrsb.w	r3, [r3]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1e7      	bne.n	8000ee0 <main+0x40>
    }

    timer_init();
 8000f10:	f000 f9f0 	bl	80012f4 <timer_init>

    // * real work
    uint16_t voltage;
    uint16_t freq = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000f1a:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000f1e:	8013      	strh	r3, [r2, #0]

    uint16_t dc_adc_vals[DC_VOLT_SIZE];
    size_t dc_ind = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000f26:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000f2a:	6013      	str	r3, [r2, #0]

    q15_t ac_adc_vals[FFT_SIZE];
    size_t ac_ind = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000f32:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8000f36:	6013      	str	r3, [r2, #0]
    q15_t max;
    uint32_t max_ind;


    uint16_t rms_adc_vals[RMS_SIZE];
    size_t rms_ind = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000f3e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8000f42:	6013      	str	r3, [r2, #0]
    struct VoltStats_t stats = {0, 0};
 8000f44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f823 2c38 	strh.w	r2, [r3, #-56]
 8000f4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f52:	2200      	movs	r2, #0
 8000f54:	f823 2c36 	strh.w	r2, [r3, #-54]


    while (1) {
        switch (state) {
 8000f58:	4bb1      	ldr	r3, [pc, #708]	@ (8001220 <main+0x380>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d8fa      	bhi.n	8000f58 <main+0xb8>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <main+0xc8>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f59 	.word	0x08000f59
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08001035 	.word	0x08001035
 8000f74:	0800113d 	.word	0x0800113d
 8000f78:	080011ed 	.word	0x080011ed
        case IDLE_ST:

            break;
        case DC_ST:
            if (ADC_check_flag()) {
 8000f7c:	f7ff ff5a 	bl	8000e34 <ADC_check_flag>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8144 	beq.w	8001210 <main+0x370>
                ADC_clear_flag();
 8000f88:	f7ff ff60 	bl	8000e4c <ADC_clear_flag>
                dc_adc_vals[dc_ind] = get_ADC_val();
 8000f8c:	f7ff ff46 	bl	8000e1c <get_ADC_val>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4619      	mov	r1, r3
 8000f94:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8000f98:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 8000fa2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	460a      	mov	r2, r1
 8000fae:	f823 2c2c 	strh.w	r2, [r3, #-44]
                dc_ind++;
 8000fb2:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 8000fb6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000fc2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000fc6:	6013      	str	r3, [r2, #0]
                
                if (dc_ind == DC_VOLT_SIZE) { // done getting measurements
 8000fc8:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 8000fcc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000fd6:	d126      	bne.n	8001026 <main+0x186>
                    dc_ind = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8000fde:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000fe2:	6013      	str	r3, [r2, #0]
                    stats.voltage = get_avg_arr(dc_adc_vals, DC_VOLT_SIZE);
 8000fe4:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8000fe8:	f103 0318 	add.w	r3, r3, #24
 8000fec:	3b0c      	subs	r3, #12
 8000fee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 faae 	bl	8001554 <get_avg_arr>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001000:	f823 2c36 	strh.w	r2, [r3, #-54]
                    stats.voltage = ADC_to_mv(stats.voltage);
 8001004:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001008:	f833 3c36 	ldrh.w	r3, [r3, #-54]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fecb 	bl	8000da8 <ADC_to_mv>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800101a:	f823 2c36 	strh.w	r2, [r3, #-54]

                    state = PRINT_ST;
 800101e:	4b80      	ldr	r3, [pc, #512]	@ (8001220 <main+0x380>)
 8001020:	2204      	movs	r2, #4
 8001022:	701a      	strb	r2, [r3, #0]
                    break;
 8001024:	e0fa      	b.n	800121c <main+0x37c>
                }

                ADC_start_conversion();
 8001026:	4b7f      	ldr	r3, [pc, #508]	@ (8001224 <main+0x384>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4a7e      	ldr	r2, [pc, #504]	@ (8001224 <main+0x384>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6093      	str	r3, [r2, #8]
            }

            break;
 8001032:	e0ed      	b.n	8001210 <main+0x370>
        case FFT_ST:
            if (ADC_check_flag()) {
 8001034:	f7ff fefe 	bl	8000e34 <ADC_check_flag>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80ea 	beq.w	8001214 <main+0x374>
                ADC_clear_flag();
 8001040:	f7ff ff04 	bl	8000e4c <ADC_clear_flag>

                ac_adc_vals[ac_ind] = get_ADC_val() << 3;
 8001044:	f7ff feea 	bl	8000e1c <get_ADC_val>
 8001048:	4603      	mov	r3, r0
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	b21a      	sxth	r2, r3
 800104e:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8001052:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001056:	4619      	mov	r1, r3
 8001058:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 800105c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	440b      	add	r3, r1
 8001066:	f823 2c2c 	strh.w	r2, [r3, #-44]
                ac_ind++;
 800106a:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 800106e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 800107a:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800107e:	6013      	str	r3, [r2, #0]
                if (ac_ind == FFT_SIZE) {
 8001080:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 8001084:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800108e:	f040 80c1 	bne.w	8001214 <main+0x374>
                    ac_ind = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8001098:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800109c:	6013      	str	r3, [r2, #0]
                    arm_rfft_q15(&rfft_instance, ac_adc_vals, fft_out);
 800109e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80010a2:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80010a6:	3a2c      	subs	r2, #44	@ 0x2c
 80010a8:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80010ac:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80010b0:	3b2c      	subs	r3, #44	@ 0x2c
 80010b2:	f507 40c0 	add.w	r0, r7, #24576	@ 0x6000
 80010b6:	f100 000c 	add.w	r0, r0, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	f001 fdb6 	bl	8002c2c <arm_rfft_q15>
                    arm_cmplx_mag_q15(fft_out, mag_out, FFT_SIZE);
 80010c0:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80010c4:	f101 0118 	add.w	r1, r1, #24
 80010c8:	392c      	subs	r1, #44	@ 0x2c
 80010ca:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80010ce:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80010d2:	3b2c      	subs	r3, #44	@ 0x2c
 80010d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fe8d 	bl	8002df8 <arm_cmplx_mag_q15>
                    mag_out[0] = 0;
 80010de:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80010e2:	f103 0318 	add.w	r3, r3, #24
 80010e6:	2200      	movs	r2, #0
 80010e8:	f823 2c2c 	strh.w	r2, [r3, #-44]
                    arm_max_q15(mag_out, FFT_SIZE_DIV_2, &max, &max_ind);
 80010ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80010f0:	f103 0318 	add.w	r3, r3, #24
 80010f4:	3b34      	subs	r3, #52	@ 0x34
 80010f6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80010fa:	f102 0218 	add.w	r2, r2, #24
 80010fe:	3a2e      	subs	r2, #46	@ 0x2e
 8001100:	f507 5081 	add.w	r0, r7, #4128	@ 0x1020
 8001104:	f100 0018 	add.w	r0, r0, #24
 8001108:	382c      	subs	r0, #44	@ 0x2c
 800110a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800110e:	f001 fccd 	bl	8002aac <arm_max_q15>
                    freq = max_ind * SAMPLING_RATE / FFT_SIZE;
 8001112:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001116:	f103 0318 	add.w	r3, r3, #24
 800111a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800111e:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8001122:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001126:	8013      	strh	r3, [r2, #0]

                    state = VRMS_ST;
 8001128:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <main+0x380>)
 800112a:	2203      	movs	r2, #3
 800112c:	701a      	strb	r2, [r3, #0]
                    ADC_ABORT_1();
 800112e:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <main+0x384>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	4a3c      	ldr	r2, [pc, #240]	@ (8001224 <main+0x384>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6093      	str	r3, [r2, #8]
                }
            }

            break;
 800113a:	e06b      	b.n	8001214 <main+0x374>
        case VRMS_ST:
            if (ADC_check_flag()) {
 800113c:	f7ff fe7a 	bl	8000e34 <ADC_check_flag>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d068      	beq.n	8001218 <main+0x378>
                ADC_clear_flag();
 8001146:	f7ff fe81 	bl	8000e4c <ADC_clear_flag>
                voltage = get_ADC_val();
 800114a:	f7ff fe67 	bl	8000e1c <get_ADC_val>
 800114e:	4603      	mov	r3, r0
 8001150:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8001154:	f102 0226 	add.w	r2, r2, #38	@ 0x26
 8001158:	8013      	strh	r3, [r2, #0]
                rms_adc_vals[rms_ind] = ADC_to_mv(voltage);
 800115a:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 800115e:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fe1f 	bl	8000da8 <ADC_to_mv>
 800116a:	4603      	mov	r3, r0
 800116c:	4619      	mov	r1, r3
 800116e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001172:	461a      	mov	r2, r3
 8001174:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 8001178:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	460a      	mov	r2, r1
 8001184:	f823 2c34 	strh.w	r2, [r3, #-52]
                rms_ind++;
 8001188:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 800118c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 8001198:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800119c:	6013      	str	r3, [r2, #0]
                if (rms_ind == RMS_SIZE) {
 800119e:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 80011a2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011ac:	d134      	bne.n	8001218 <main+0x378>
                    rms_ind = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 80011b4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80011b8:	6013      	str	r3, [r2, #0]
                    get_voltage_stats(&stats, rms_adc_vals, RMS_SIZE, freq);
 80011ba:	f507 43c0 	add.w	r3, r7, #24576	@ 0x6000
 80011be:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80011c8:	3934      	subs	r1, #52	@ 0x34
 80011ca:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80011ce:	3838      	subs	r0, #56	@ 0x38
 80011d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011d4:	f000 fa8c 	bl	80016f0 <get_voltage_stats>
                    state = PRINT_ST;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <main+0x380>)
 80011da:	2204      	movs	r2, #4
 80011dc:	701a      	strb	r2, [r3, #0]
                    ADC_ABORT_1();
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <main+0x384>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <main+0x384>)
 80011e4:	f043 0310 	orr.w	r3, r3, #16
 80011e8:	6093      	str	r3, [r2, #8]
                }
            }

            break;
 80011ea:	e015      	b.n	8001218 <main+0x378>
        case PRINT_ST:
            print_stats(AC, stats, freq);
 80011ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <main+0x388>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f507 42c0 	add.w	r2, r7, #24576	@ 0x6000
 80011f4:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80011fe:	f851 1c38 	ldr.w	r1, [r1, #-56]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f8b4 	bl	8001370 <print_stats>
            state = IDLE_ST;
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <main+0x380>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
            break;
 800120e:	e005      	b.n	800121c <main+0x37c>
            break;
 8001210:	bf00      	nop
 8001212:	e6a1      	b.n	8000f58 <main+0xb8>
            break;
 8001214:	bf00      	nop
 8001216:	e69f      	b.n	8000f58 <main+0xb8>
            break;
 8001218:	bf00      	nop
 800121a:	e69d      	b.n	8000f58 <main+0xb8>
        switch (state) {
 800121c:	e69c      	b.n	8000f58 <main+0xb8>
 800121e:	bf00      	nop
 8001220:	200000ac 	.word	0x200000ac
 8001224:	50040000 	.word	0x50040000
 8001228:	20000000 	.word	0x20000000

0800122c <TIM2_IRQHandler>:
    return 0;
}



void TIM2_IRQHandler() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_CC1IF) { // print interval
 8001230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d031      	beq.n	80012a2 <TIM2_IRQHandler+0x76>

        if (uart_check_flag()) {
 800123e:	f000 fc61 	bl	8001b04 <uart_check_flag>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d011      	beq.n	800126c <TIM2_IRQHandler+0x40>
            uart_clear_flag();
 8001248:	f000 fc68 	bl	8001b1c <uart_clear_flag>
            switch (get_uart_char()) {
 800124c:	f000 fc72 	bl	8001b34 <get_uart_char>
 8001250:	4603      	mov	r3, r0
 8001252:	2b61      	cmp	r3, #97	@ 0x61
 8001254:	d005      	beq.n	8001262 <TIM2_IRQHandler+0x36>
 8001256:	2b64      	cmp	r3, #100	@ 0x64
 8001258:	d107      	bne.n	800126a <TIM2_IRQHandler+0x3e>
            case 'd':
                AC = 0;
 800125a:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <TIM2_IRQHandler+0xb8>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
                    break;
 8001260:	e004      	b.n	800126c <TIM2_IRQHandler+0x40>
            case 'a':
                AC = 1;
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <TIM2_IRQHandler+0xb8>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
                break;
 8001268:	e000      	b.n	800126c <TIM2_IRQHandler+0x40>
            default: break;
 800126a:	bf00      	nop
            }
        }

        if (AC) { state = FFT_ST; }
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <TIM2_IRQHandler+0xb8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <TIM2_IRQHandler+0x50>
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <TIM2_IRQHandler+0xbc>)
 8001276:	2202      	movs	r2, #2
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e002      	b.n	8001282 <TIM2_IRQHandler+0x56>
        else { state = DC_ST; }
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <TIM2_IRQHandler+0xbc>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]

        TIM2->CCR1 += PRINT_CCR;
 8001282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001288:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <TIM2_IRQHandler+0xc0>)
 800128e:	4413      	add	r3, r2
 8001290:	634b      	str	r3, [r1, #52]	@ 0x34
        TIM2->SR &= ~TIM_SR_CC1IF;
 8001292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800129c:	f023 0302 	bic.w	r3, r3, #2
 80012a0:	6113      	str	r3, [r2, #16]
    }
    if (TIM2->SR & TIM_SR_CC2IF) { // get adc samples for fft
 80012a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d017      	beq.n	80012e0 <TIM2_IRQHandler+0xb4>
        ADC_start_conversion();
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <TIM2_IRQHandler+0xc4>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <TIM2_IRQHandler+0xc4>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6093      	str	r3, [r2, #8]

        TIM2->CCR2 += FFT_CCR;
 80012bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c6:	f503 4318 	add.w	r3, r3, #38912	@ 0x9800
 80012ca:	3396      	adds	r3, #150	@ 0x96
 80012cc:	6393      	str	r3, [r2, #56]	@ 0x38
        TIM2->SR &= ~TIM_SR_CC2IF;
 80012ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d8:	f023 0304 	bic.w	r3, r3, #4
 80012dc:	6113      	str	r3, [r2, #16]
    }

    return;
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
}
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200000ac 	.word	0x200000ac
 80012ec:	0a0379f4 	.word	0x0a0379f4
 80012f0:	50040000 	.word	0x50040000

080012f4 <timer_init>:



void timer_init() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <timer_init+0x70>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	4a19      	ldr	r2, [pc, #100]	@ (8001364 <timer_init+0x70>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6593      	str	r3, [r2, #88]	@ 0x58

    TIM2->ARR = -1;
 8001304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800130c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = PRINT_CCR - 1;
 800130e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001312:	4a15      	ldr	r2, [pc, #84]	@ (8001368 <timer_init+0x74>)
 8001314:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = FFT_CCR - 1;
 8001316:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800131a:	f649 0295 	movw	r2, #39061	@ 0x9895
 800131e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->PSC = 0;
 8001320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER = TIM_DIER_CC1IE | TIM_DIER_CC2IE ;
 8001328:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800132c:	2206      	movs	r2, #6
 800132e:	60da      	str	r2, [r3, #12]
    TIM2->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E ;
 8001330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001334:	2211      	movs	r2, #17
 8001336:	621a      	str	r2, [r3, #32]

    DBGMCU->APB1FZR1 |= 1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <timer_init+0x78>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <timer_init+0x78>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(TIM2_IRQn);
 8001344:	201c      	movs	r0, #28
 8001346:	f7ff fd8d 	bl	8000e64 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800134a:	b662      	cpsie	i
}
 800134c:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 800134e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6013      	str	r3, [r2, #0]

    return;
 800135e:	bf00      	nop
}
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	0a0379f3 	.word	0x0a0379f3
 800136c:	e0042000 	.word	0xe0042000

08001370 <print_stats>:



void print_stats(int AC, struct VoltStats_t v_stats, uint16_t freq) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	4613      	mov	r3, r2
 800137c:	80fb      	strh	r3, [r7, #6]
    static char voltage_buffer[5] = "0.00";
    static char freq_buffer[15] = "1000 Hz    ";
    
    MOVE_CURSOR(MODE_CURSOR);
 800137e:	4825      	ldr	r0, [pc, #148]	@ (8001414 <print_stats+0xa4>)
 8001380:	f000 fb8d 	bl	8001a9e <uart_send_escape>
    if (AC) uart_send_string("AC");
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <print_stats+0x22>
 800138a:	4823      	ldr	r0, [pc, #140]	@ (8001418 <print_stats+0xa8>)
 800138c:	f000 fb72 	bl	8001a74 <uart_send_string>
 8001390:	e002      	b.n	8001398 <print_stats+0x28>
    else uart_send_string("DC");
 8001392:	4822      	ldr	r0, [pc, #136]	@ (800141c <print_stats+0xac>)
 8001394:	f000 fb6e 	bl	8001a74 <uart_send_string>
    
    MOVE_CURSOR(VOLT_CURSOR);
 8001398:	4821      	ldr	r0, [pc, #132]	@ (8001420 <print_stats+0xb0>)
 800139a:	f000 fb80 	bl	8001a9e <uart_send_escape>
    mv_to_str(voltage_buffer, v_stats.voltage);
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4820      	ldr	r0, [pc, #128]	@ (8001424 <print_stats+0xb4>)
 80013a4:	f000 f88e 	bl	80014c4 <mv_to_str>
    uart_send_string(voltage_buffer);
 80013a8:	481e      	ldr	r0, [pc, #120]	@ (8001424 <print_stats+0xb4>)
 80013aa:	f000 fb63 	bl	8001a74 <uart_send_string>


    MOVE_CURSOR(SCALE_CURSOR);
 80013ae:	481e      	ldr	r0, [pc, #120]	@ (8001428 <print_stats+0xb8>)
 80013b0:	f000 fb75 	bl	8001a9e <uart_send_escape>
    uint16_t x = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	82fb      	strh	r3, [r7, #22]
    uart_send_escape("[2K");
 80013b8:	481c      	ldr	r0, [pc, #112]	@ (800142c <print_stats+0xbc>)
 80013ba:	f000 fb70 	bl	8001a9e <uart_send_escape>
    while (x <= v_stats.voltage) {
 80013be:	e005      	b.n	80013cc <print_stats+0x5c>
        uart_send_string("#");
 80013c0:	481b      	ldr	r0, [pc, #108]	@ (8001430 <print_stats+0xc0>)
 80013c2:	f000 fb57 	bl	8001a74 <uart_send_string>
        x += 100;
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	3364      	adds	r3, #100	@ 0x64
 80013ca:	82fb      	strh	r3, [r7, #22]
    while (x <= v_stats.voltage) {
 80013cc:	897b      	ldrh	r3, [r7, #10]
 80013ce:	8afa      	ldrh	r2, [r7, #22]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d9f5      	bls.n	80013c0 <print_stats+0x50>
    }

    MOVE_CURSOR(FREQ_CURSOR);
 80013d4:	4817      	ldr	r0, [pc, #92]	@ (8001434 <print_stats+0xc4>)
 80013d6:	f000 fb62 	bl	8001a9e <uart_send_escape>
    if (!AC) freq = 0;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <print_stats+0x74>
 80013e0:	2300      	movs	r3, #0
 80013e2:	80fb      	strh	r3, [r7, #6]
    snprintf(freq_buffer, 15, "%hu Hz   ", freq);
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <print_stats+0xc8>)
 80013e8:	210f      	movs	r1, #15
 80013ea:	4814      	ldr	r0, [pc, #80]	@ (800143c <print_stats+0xcc>)
 80013ec:	f002 f954 	bl	8003698 <sniprintf>
    uart_send_string(freq_buffer);
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <print_stats+0xcc>)
 80013f2:	f000 fb3f 	bl	8001a74 <uart_send_string>

    MOVE_CURSOR(VPP_CURSOR);
 80013f6:	4812      	ldr	r0, [pc, #72]	@ (8001440 <print_stats+0xd0>)
 80013f8:	f000 fb51 	bl	8001a9e <uart_send_escape>
    mv_to_str(voltage_buffer, v_stats.vpp_mv);
 80013fc:	893b      	ldrh	r3, [r7, #8]
 80013fe:	4619      	mov	r1, r3
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <print_stats+0xb4>)
 8001402:	f000 f85f 	bl	80014c4 <mv_to_str>
    uart_send_string(voltage_buffer);
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <print_stats+0xb4>)
 8001408:	f000 fb34 	bl	8001a74 <uart_send_string>

    return;
 800140c:	bf00      	nop
}
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	08004224 	.word	0x08004224
 8001418:	0800422c 	.word	0x0800422c
 800141c:	08004230 	.word	0x08004230
 8001420:	08004234 	.word	0x08004234
 8001424:	20000004 	.word	0x20000004
 8001428:	0800423c 	.word	0x0800423c
 800142c:	08004244 	.word	0x08004244
 8001430:	08004248 	.word	0x08004248
 8001434:	0800424c 	.word	0x0800424c
 8001438:	08004254 	.word	0x08004254
 800143c:	2000000c 	.word	0x2000000c
 8001440:	08004260 	.word	0x08004260

08001444 <print_start_screen>:


void print_start_screen() {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    uart_send_escape("[1;0H");
 8001448:	4812      	ldr	r0, [pc, #72]	@ (8001494 <print_start_screen+0x50>)
 800144a:	f000 fb28 	bl	8001a9e <uart_send_escape>
    uart_send_string("Mode: ");
 800144e:	4812      	ldr	r0, [pc, #72]	@ (8001498 <print_start_screen+0x54>)
 8001450:	f000 fb10 	bl	8001a74 <uart_send_string>

    uart_send_escape("[3;0H");
 8001454:	4811      	ldr	r0, [pc, #68]	@ (800149c <print_start_screen+0x58>)
 8001456:	f000 fb22 	bl	8001a9e <uart_send_escape>
    uart_send_string("Volt:      V");
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <print_start_screen+0x5c>)
 800145c:	f000 fb0a 	bl	8001a74 <uart_send_string>

    uart_send_escape("[6;0H");
 8001460:	4810      	ldr	r0, [pc, #64]	@ (80014a4 <print_start_screen+0x60>)
 8001462:	f000 fb1c 	bl	8001a9e <uart_send_escape>
    uart_send_string("|----|----|----|----|----|----|");
 8001466:	4810      	ldr	r0, [pc, #64]	@ (80014a8 <print_start_screen+0x64>)
 8001468:	f000 fb04 	bl	8001a74 <uart_send_string>

    uart_send_escape("[7;0H");
 800146c:	480f      	ldr	r0, [pc, #60]	@ (80014ac <print_start_screen+0x68>)
 800146e:	f000 fb16 	bl	8001a9e <uart_send_escape>
    uart_send_string("0.0  0.5  1.0  1.5  2.0  2.5  3.0");
 8001472:	480f      	ldr	r0, [pc, #60]	@ (80014b0 <print_start_screen+0x6c>)
 8001474:	f000 fafe 	bl	8001a74 <uart_send_string>


    uart_send_escape("[9;0H");
 8001478:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <print_start_screen+0x70>)
 800147a:	f000 fb10 	bl	8001a9e <uart_send_escape>
    uart_send_string("Frequency:");
 800147e:	480e      	ldr	r0, [pc, #56]	@ (80014b8 <print_start_screen+0x74>)
 8001480:	f000 faf8 	bl	8001a74 <uart_send_string>

    uart_send_escape("[11;0H");
 8001484:	480d      	ldr	r0, [pc, #52]	@ (80014bc <print_start_screen+0x78>)
 8001486:	f000 fb0a 	bl	8001a9e <uart_send_escape>
    uart_send_string("Vpp:      V");
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <print_start_screen+0x7c>)
 800148c:	f000 faf2 	bl	8001a74 <uart_send_string>
    return;
 8001490:	bf00      	nop
}
 8001492:	bd80      	pop	{r7, pc}
 8001494:	08004268 	.word	0x08004268
 8001498:	08004270 	.word	0x08004270
 800149c:	08004278 	.word	0x08004278
 80014a0:	08004280 	.word	0x08004280
 80014a4:	08004290 	.word	0x08004290
 80014a8:	08004298 	.word	0x08004298
 80014ac:	080042b8 	.word	0x080042b8
 80014b0:	080042c0 	.word	0x080042c0
 80014b4:	080042e4 	.word	0x080042e4
 80014b8:	080042ec 	.word	0x080042ec
 80014bc:	080042f8 	.word	0x080042f8
 80014c0:	08004300 	.word	0x08004300

080014c4 <mv_to_str>:


void mv_to_str(char* buffer, uint16_t volt) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
    // 3000 -> 3.00
    buffer[0] = (volt / 1000) + '0';
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <mv_to_str+0x84>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3330      	adds	r3, #48	@ 0x30
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	701a      	strb	r2, [r3, #0]
    buffer[2] = ((volt % 1000) / 100) + '0';
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <mv_to_str+0x84>)
 80014ea:	fba2 1203 	umull	r1, r2, r2, r3
 80014ee:	0992      	lsrs	r2, r2, #6
 80014f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014f4:	fb01 f202 	mul.w	r2, r1, r2
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4a13      	ldr	r2, [pc, #76]	@ (800154c <mv_to_str+0x88>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2da      	uxtb	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3302      	adds	r3, #2
 800150c:	3230      	adds	r2, #48	@ 0x30
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]
    buffer[3] = ((volt % 100) / 10) + '0';
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <mv_to_str+0x88>)
 8001516:	fba2 1203 	umull	r1, r2, r2, r3
 800151a:	0952      	lsrs	r2, r2, #5
 800151c:	2164      	movs	r1, #100	@ 0x64
 800151e:	fb01 f202 	mul.w	r2, r1, r2
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	b29b      	uxth	r3, r3
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <mv_to_str+0x8c>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3303      	adds	r3, #3
 8001536:	3230      	adds	r2, #48	@ 0x30
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	701a      	strb	r2, [r3, #0]

    return;
 800153c:	bf00      	nop
}
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	10624dd3 	.word	0x10624dd3
 800154c:	51eb851f 	.word	0x51eb851f
 8001550:	cccccccd 	.word	0xcccccccd

08001554 <get_avg_arr>:


uint16_t get_avg_arr(uint16_t *arr, int size) {
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	e00b      	b.n	8001580 <get_avg_arr+0x2c>
        sum += arr[i];
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbef      	blt.n	8001568 <get_avg_arr+0x14>
    }
    return sum / size;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	b29b      	uxth	r3, r3
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <get_min_arr>:


uint16_t get_min_arr(uint16_t *arr, int size) {
 800159e:	b480      	push	{r7}
 80015a0:	b087      	sub	sp, #28
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
    uint16_t min = (uint16_t)arr[0];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	82fb      	strh	r3, [r7, #22]
    uint16_t val;
    for (int i = 1; i < size; i++) {
 80015ae:	2301      	movs	r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e00e      	b.n	80015d2 <get_min_arr+0x34>
        val = *(((uint16_t*)arr) + i);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	81fb      	strh	r3, [r7, #14]
        if (val < min) {
 80015c0:	89fa      	ldrh	r2, [r7, #14]
 80015c2:	8afb      	ldrh	r3, [r7, #22]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d201      	bcs.n	80015cc <get_min_arr+0x2e>
            min = val;
 80015c8:	89fb      	ldrh	r3, [r7, #14]
 80015ca:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < size; i++) {
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	3301      	adds	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbec      	blt.n	80015b4 <get_min_arr+0x16>
        }
    }
    return min;
 80015da:	8afb      	ldrh	r3, [r7, #22]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <get_max_arr>:


uint16_t get_max_arr(uint16_t *arr, int size) {
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    uint16_t max = (uint16_t)arr[0];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	82fb      	strh	r3, [r7, #22]
    uint16_t val;
    for (int i = 1; i < size; i++) {
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	e00e      	b.n	800161c <get_max_arr+0x34>
        val = *(((uint16_t*)arr) + i); // from when it was q15_t
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	81fb      	strh	r3, [r7, #14]
        if (val > max) {
 800160a:	89fa      	ldrh	r2, [r7, #14]
 800160c:	8afb      	ldrh	r3, [r7, #22]
 800160e:	429a      	cmp	r2, r3
 8001610:	d901      	bls.n	8001616 <get_max_arr+0x2e>
            max = val;
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < size; i++) {
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	3301      	adds	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbec      	blt.n	80015fe <get_max_arr+0x16>
        }
    }
    return max;
 8001624:	8afb      	ldrh	r3, [r7, #22]
}
 8001626:	4618      	mov	r0, r3
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <get_ac_rms>:

// pretty sure I can just reuse this for dc average
uint16_t get_ac_rms(uint16_t *arr, int size) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
    double sum = 0;
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double volt;
    // can probably leave in mV but i spent too long on this :')
    for (int i = 0; i < size; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e023      	b.n	8001698 <get_ac_rms+0x64>
        volt = MV_TO_V_FLOAT(arr[i]);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ffaa 	bl	80005b4 <__aeabi_ui2d>
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <get_ac_rms+0xb8>)
 8001666:	f7ff f949 	bl	80008fc <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        sum += volt * volt;
 8001672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800167a:	f7ff f815 	bl	80006a8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001686:	f7fe fe59 	bl	800033c <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < size; i++) {
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbd7      	blt.n	8001650 <get_ac_rms+0x1c>
    }
    sum /= size;
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7fe ff97 	bl	80005d4 <__aeabi_i2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016ae:	f7ff f925 	bl	80008fc <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    sum = sqrt(sum);
 80016ba:	ed97 0b06 	vldr	d0, [r7, #24]
 80016be:	f002 fc9f 	bl	8004000 <sqrt>
 80016c2:	ed87 0b06 	vstr	d0, [r7, #24]

    return (uint16_t)(sum * 1000);
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <get_ac_rms+0xb8>)
 80016cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016d0:	f7fe ffea 	bl	80006a8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa94 	bl	8000c08 <__aeabi_d2uiz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29b      	uxth	r3, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	408f4000 	.word	0x408f4000

080016f0 <get_voltage_stats>:


void get_voltage_stats(struct VoltStats_t *stats, uint16_t *arr, int size, uint16_t freq) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	807b      	strh	r3, [r7, #2]
    uint16_t v_max = get_max_arr(arr, size);
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	68b8      	ldr	r0, [r7, #8]
 8001702:	f7ff ff71 	bl	80015e8 <get_max_arr>
 8001706:	4603      	mov	r3, r0
 8001708:	82fb      	strh	r3, [r7, #22]
    uint16_t v_min = get_min_arr(arr, size);
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f7ff ff46 	bl	800159e <get_min_arr>
 8001712:	4603      	mov	r3, r0
 8001714:	82bb      	strh	r3, [r7, #20]
    stats->vpp_mv = v_max - v_min;
 8001716:	8afa      	ldrh	r2, [r7, #22]
 8001718:	8abb      	ldrh	r3, [r7, #20]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	801a      	strh	r2, [r3, #0]
    stats->voltage = get_ac_rms(arr, size);
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f7ff ff85 	bl	8001634 <get_ac_rms>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	805a      	strh	r2, [r3, #2]

    return;
 8001732:	bf00      	nop
}
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b096      	sub	sp, #88	@ 0x58
 800173e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2244      	movs	r2, #68	@ 0x44
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f001 ffd9 	bl	8003700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174e:	463b      	mov	r3, r7
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800175c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001760:	f000 fb86 	bl	8001e70 <HAL_PWREx_ControlVoltageScaling>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800176a:	f000 f838 	bl	80017de <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800176e:	2310      	movs	r3, #16
 8001770:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001772:	2301      	movs	r3, #1
 8001774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800177a:	2360      	movs	r3, #96	@ 0x60
 800177c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	2302      	movs	r3, #2
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001782:	2301      	movs	r3, #1
 8001784:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800178a:	2328      	movs	r3, #40	@ 0x28
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800178e:	2307      	movs	r3, #7
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001792:	2302      	movs	r3, #2
 8001794:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001796:	2302      	movs	r3, #2
 8001798:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fbbc 	bl	8001f1c <HAL_RCC_OscConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x74>
  {
    Error_Handler();
 80017aa:	f000 f818 	bl	80017de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ae:	230f      	movs	r3, #15
 80017b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b2:	2303      	movs	r3, #3
 80017b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	2104      	movs	r1, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 ff84 	bl	80026d4 <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017d2:	f000 f804 	bl	80017de <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3758      	adds	r7, #88	@ 0x58
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e2:	b672      	cpsid	i
}
 80017e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e6:	bf00      	nop
 80017e8:	e7fd      	b.n	80017e6 <Error_Handler+0x8>
	...

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <HAL_MspInit+0x44>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_MspInit+0x44>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_MspInit+0x44>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <MemManage_Handler+0x4>

0800184c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <UsageFault_Handler+0x4>

0800185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f000 f9dd 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f001 ff24 	bl	8003710 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20018000 	.word	0x20018000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	200000b0 	.word	0x200000b0
 80018fc:	20000208 	.word	0x20000208

08001900 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <SystemInit+0x20>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <SystemInit+0x20>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	@ (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <uart_pin_init+0x8c>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	4a20      	ldr	r2, [pc, #128]	@ (80019ec <uart_pin_init+0x8c>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8001970:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800197a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800197e:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8001980:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800198a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800198e:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001990:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800199a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800199e:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 80019a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019aa:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80019ae:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 80019b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019ba:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80019be:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 80019c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ce:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 80019d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019da:	f023 030c 	bic.w	r3, r3, #12
 80019de:	6053      	str	r3, [r2, #4]
    return;
 80019e0:	bf00      	nop
}
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000

080019f0 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    uart_pin_init();
 80019f4:	f7ff ffb4 	bl	8001960 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <uart_init+0x48>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <uart_init+0x48>)
 80019fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a02:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <uart_init+0x4c>)
 8001a06:	222c      	movs	r2, #44	@ 0x2c
 8001a08:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <uart_init+0x4c>)
 8001a0c:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8001a10:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 8001a12:	2026      	movs	r0, #38	@ 0x26
 8001a14:	f7ff ff86 	bl	8001924 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a18:	b662      	cpsie	i
}
 8001a1a:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <uart_init+0x4c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a06      	ldr	r2, [pc, #24]	@ (8001a3c <uart_init+0x4c>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 8001a28:	f000 f848 	bl	8001abc <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <uart_init+0x50>)
 8001a2e:	f000 f836 	bl	8001a9e <uart_send_escape>
    return;
 8001a32:	bf00      	nop
}
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40004400 	.word	0x40004400
 8001a40:	0800430c 	.word	0x0800430c

08001a44 <uart_send_char>:

void uart_send_char(char c) {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8001a4e:	bf00      	nop
 8001a50:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <uart_send_char+0x2c>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f9      	beq.n	8001a50 <uart_send_char+0xc>
    USART2->TDR = c;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <uart_send_char+0x2c>)
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	b292      	uxth	r2, r2
 8001a62:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8001a64:	bf00      	nop
}
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40004400 	.word	0x40004400

08001a74 <uart_send_string>:

void uart_send_string(const char* str) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8001a7c:	e007      	b.n	8001a8e <uart_send_string+0x1a>
        uart_send_char(*str);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ffde 	bl	8001a44 <uart_send_char>
        str++;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f3      	bne.n	8001a7e <uart_send_string+0xa>
    }

    return;
 8001a96:	bf00      	nop
}
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <uart_send_escape>:

void uart_send_escape(const char* str) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 8001aa6:	201b      	movs	r0, #27
 8001aa8:	f7ff ffcc 	bl	8001a44 <uart_send_char>
    uart_send_string(str);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ffe1 	bl	8001a74 <uart_send_string>

    return;
 8001ab2:	bf00      	nop
}
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <uart_clear_screen>:


void uart_clear_screen(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 8001ac0:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <uart_clear_screen+0x14>)
 8001ac2:	f7ff ffec 	bl	8001a9e <uart_send_escape>
    uart_send_escape("[H");
 8001ac6:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <uart_clear_screen+0x18>)
 8001ac8:	f7ff ffe9 	bl	8001a9e <uart_send_escape>

    return;
 8001acc:	bf00      	nop
}
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	08004314 	.word	0x08004314
 8001ad4:	08004318 	.word	0x08004318

08001ad8 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <USART2_IRQHandler+0x20>)
 8001ade:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <USART2_IRQHandler+0x24>)
 8001ae6:	701a      	strb	r2, [r3, #0]
    flag = 1;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <USART2_IRQHandler+0x28>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    return;
 8001aee:	bf00      	nop
}
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40004400 	.word	0x40004400
 8001afc:	200000b8 	.word	0x200000b8
 8001b00:	200000b4 	.word	0x200000b4

08001b04 <uart_check_flag>:

int uart_check_flag() {
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
    return flag;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <uart_check_flag+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200000b4 	.word	0x200000b4

08001b1c <uart_clear_flag>:

void uart_clear_flag() {
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
    flag = 0;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <uart_clear_flag+0x14>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

    return;
 8001b26:	bf00      	nop
}
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	200000b4 	.word	0x200000b4

08001b34 <get_uart_char>:

char get_uart_char() {
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
    return value;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <get_uart_char+0x14>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	200000b8 	.word	0x200000b8

08001b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b50:	f7ff fed6 	bl	8001900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	@ (8001b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <LoopForever+0xe>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b98 <LoopForever+0x16>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f001 fdcf 	bl	800371c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7e:	f7ff f98f 	bl	8000ea0 <main>

08001b82 <LoopForever>:

LoopForever:
    b LoopForever
 8001b82:	e7fe      	b.n	8001b82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b90:	080161f8 	.word	0x080161f8
  ldr r2, =_sbss
 8001b94:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b98:	20000208 	.word	0x20000208

08001b9c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC3_IRQHandler>

08001b9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f91f 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f80e 	bl	8001bd0 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	e001      	b.n	8001bc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bc0:	f7ff fe14 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <HAL_InitTick+0x6c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d023      	beq.n	8001c2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_InitTick+0x70>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <HAL_InitTick+0x6c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f91d 	bl	8001e3a <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10f      	bne.n	8001c26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d809      	bhi.n	8001c20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c14:	f000 f8f5 	bl	8001e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c18:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <HAL_InitTick+0x74>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e007      	b.n	8001c30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e004      	b.n	8001c30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e001      	b.n	8001c30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000024 	.word	0x20000024
 8001c40:	2000001c 	.word	0x2000001c
 8001c44:	20000020 	.word	0x20000020

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000024 	.word	0x20000024
 8001c6c:	200000bc 	.word	0x200000bc

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200000bc 	.word	0x200000bc

08001c88 <__NVIC_SetPriorityGrouping>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	@ (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	@ (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	@ 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dcc:	f7ff ff8e 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff47 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff5c 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff8e 	bl	8001d40 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5d 	bl	8001cec <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb0 	bl	8001da8 <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e58:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40007000 	.word	0x40007000

08001e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e7e:	d130      	bne.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e80:	4b23      	ldr	r3, [pc, #140]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e8c:	d038      	beq.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2232      	movs	r2, #50	@ 0x32
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9b      	lsrs	r3, r3, #18
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb4:	e002      	b.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f2      	bne.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001edc:	d110      	bne.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e00f      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eee:	d007      	beq.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef8:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40007000 	.word	0x40007000
 8001f14:	2000001c 	.word	0x2000001c
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e3ca      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b97      	ldr	r3, [pc, #604]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	4b94      	ldr	r3, [pc, #592]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80e4 	beq.w	8002118 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_RCC_OscConfig+0x4a>
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	f040 808b 	bne.w	8002074 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f040 8087 	bne.w	8002074 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f66:	4b89      	ldr	r3, [pc, #548]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x62>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e3a2      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1a      	ldr	r2, [r3, #32]
 8001f82:	4b82      	ldr	r3, [pc, #520]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <HAL_RCC_OscConfig+0x7c>
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f96:	e005      	b.n	8001fa4 <HAL_RCC_OscConfig+0x88>
 8001f98:	4b7c      	ldr	r3, [pc, #496]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d223      	bcs.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fd1d 	bl	80029ec <RCC_SetFlashLatencyFromMSIRange>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e383      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fbc:	4b73      	ldr	r3, [pc, #460]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a72      	ldr	r2, [pc, #456]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b70      	ldr	r3, [pc, #448]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	496d      	ldr	r1, [pc, #436]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fda:	4b6c      	ldr	r3, [pc, #432]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	4968      	ldr	r1, [pc, #416]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
 8001fee:	e025      	b.n	800203c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff0:	4b66      	ldr	r3, [pc, #408]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f043 0308 	orr.w	r3, r3, #8
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b63      	ldr	r3, [pc, #396]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4960      	ldr	r1, [pc, #384]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200e:	4b5f      	ldr	r3, [pc, #380]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	495b      	ldr	r1, [pc, #364]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fcdd 	bl	80029ec <RCC_SetFlashLatencyFromMSIRange>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e343      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800203c:	f000 fc4a 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b52      	ldr	r3, [pc, #328]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	4950      	ldr	r1, [pc, #320]	@ (8002190 <HAL_RCC_OscConfig+0x274>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a4e      	ldr	r2, [pc, #312]	@ (8002194 <HAL_RCC_OscConfig+0x278>)
 800205a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800205c:	4b4e      	ldr	r3, [pc, #312]	@ (8002198 <HAL_RCC_OscConfig+0x27c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fdb5 	bl	8001bd0 <HAL_InitTick>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d052      	beq.n	8002116 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	e327      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d032      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800207c:	4b43      	ldr	r3, [pc, #268]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a42      	ldr	r2, [pc, #264]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002088:	f7ff fdf2 	bl	8001c70 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002090:	f7ff fdee 	bl	8001c70 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e310      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a2:	4b3a      	ldr	r3, [pc, #232]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ae:	4b37      	ldr	r3, [pc, #220]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a36      	ldr	r2, [pc, #216]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b34      	ldr	r3, [pc, #208]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4931      	ldr	r1, [pc, #196]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020cc:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	492c      	ldr	r1, [pc, #176]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e01a      	b.n	8002118 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a29      	ldr	r2, [pc, #164]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ee:	f7ff fdbf 	bl	8001c70 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f6:	f7ff fdbb 	bl	8001c70 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e2dd      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002108:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x1da>
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002116:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d074      	beq.n	800220e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x21a>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	d10e      	bne.n	800214e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d064      	beq.n	800220c <HAL_RCC_OscConfig+0x2f0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d160      	bne.n	800220c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e2ba      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x24a>
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e026      	b.n	80021b4 <HAL_RCC_OscConfig+0x298>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800216e:	d115      	bne.n	800219c <HAL_RCC_OscConfig+0x280>
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a05      	ldr	r2, [pc, #20]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002176:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a02      	ldr	r2, [pc, #8]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e014      	b.n	80021b4 <HAL_RCC_OscConfig+0x298>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	0800431c 	.word	0x0800431c
 8002194:	2000001c 	.word	0x2000001c
 8002198:	20000020 	.word	0x20000020
 800219c:	4ba0      	ldr	r3, [pc, #640]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a9c      	ldr	r2, [pc, #624]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff fd58 	bl	8001c70 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff fd54 	bl	8001c70 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	@ 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e276      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d6:	4b92      	ldr	r3, [pc, #584]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2a8>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff fd44 	bl	8001c70 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fd40 	bl	8001c70 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	@ 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e262      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fe:	4b88      	ldr	r3, [pc, #544]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x2d0>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d060      	beq.n	80022dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d005      	beq.n	800222c <HAL_RCC_OscConfig+0x310>
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d119      	bne.n	800225a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d116      	bne.n	800225a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800222c:	4b7c      	ldr	r3, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_OscConfig+0x328>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e23f      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002244:	4b76      	ldr	r3, [pc, #472]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	4973      	ldr	r1, [pc, #460]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002258:	e040      	b.n	80022dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d023      	beq.n	80022aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002262:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6e      	ldr	r2, [pc, #440]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff fcff 	bl	8001c70 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002276:	f7ff fcfb 	bl	8001c70 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e21d      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002288:	4b65      	ldr	r3, [pc, #404]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b62      	ldr	r3, [pc, #392]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	495f      	ldr	r1, [pc, #380]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	e018      	b.n	80022dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80022b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7ff fcdb 	bl	8001c70 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff fcd7 	bl	8001c70 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1f9      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d0:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d03c      	beq.n	8002362 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7ff fcb6 	bl	8001c70 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fcb2 	bl	8001c70 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1d4      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231a:	4b41      	ldr	r3, [pc, #260]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ef      	beq.n	8002308 <HAL_RCC_OscConfig+0x3ec>
 8002328:	e01b      	b.n	8002362 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232a:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 800232c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002330:	4a3b      	ldr	r2, [pc, #236]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7ff fc99 	bl	8001c70 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002342:	f7ff fc95 	bl	8001c70 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1b7      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002354:	4b32      	ldr	r3, [pc, #200]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ef      	bne.n	8002342 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80a6 	beq.w	80024bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002374:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10d      	bne.n	800239c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238a:	6593      	str	r3, [r2, #88]	@ 0x58
 800238c:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002398:	2301      	movs	r3, #1
 800239a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239c:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_RCC_OscConfig+0x508>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d118      	bne.n	80023da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <HAL_RCC_OscConfig+0x508>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002424 <HAL_RCC_OscConfig+0x508>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b4:	f7ff fc5c 	bl	8001c70 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7ff fc58 	bl	8001c70 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e17a      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_RCC_OscConfig+0x508>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4d8>
 80023e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023f2:	e029      	b.n	8002448 <HAL_RCC_OscConfig+0x52c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d115      	bne.n	8002428 <HAL_RCC_OscConfig+0x50c>
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002402:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800240c:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	4a03      	ldr	r2, [pc, #12]	@ (8002420 <HAL_RCC_OscConfig+0x504>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x52c>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
 8002428:	4b9c      	ldr	r3, [pc, #624]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242e:	4a9b      	ldr	r2, [pc, #620]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002438:	4b98      	ldr	r3, [pc, #608]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243e:	4a97      	ldr	r2, [pc, #604]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff fc0e 	bl	8001c70 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7ff fc0a 	bl	8001c70 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e12a      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246e:	4b8b      	ldr	r3, [pc, #556]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ed      	beq.n	8002458 <HAL_RCC_OscConfig+0x53c>
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247e:	f7ff fbf7 	bl	8001c70 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002484:	e00a      	b.n	800249c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7ff fbf3 	bl	8001c70 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e113      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800249c:	4b7f      	ldr	r3, [pc, #508]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ed      	bne.n	8002486 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024aa:	7ffb      	ldrb	r3, [r7, #31]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b0:	4b7a      	ldr	r3, [pc, #488]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	4a79      	ldr	r2, [pc, #484]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80024b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80fe 	beq.w	80026c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	f040 80d0 	bne.w	8002670 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024d0:	4b72      	ldr	r3, [pc, #456]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d130      	bne.n	8002546 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	3b01      	subs	r3, #1
 80024f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d127      	bne.n	8002546 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002500:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d11f      	bne.n	8002546 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002510:	2a07      	cmp	r2, #7
 8002512:	bf14      	ite	ne
 8002514:	2201      	movne	r2, #1
 8002516:	2200      	moveq	r2, #0
 8002518:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800251a:	4293      	cmp	r3, r2
 800251c:	d113      	bne.n	8002546 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	085b      	lsrs	r3, r3, #1
 800252a:	3b01      	subs	r3, #1
 800252c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d109      	bne.n	8002546 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	3b01      	subs	r3, #1
 8002540:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d06e      	beq.n	8002624 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d069      	beq.n	8002620 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800254c:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002558:	4b50      	ldr	r3, [pc, #320]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0ad      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002568:	4b4c      	ldr	r3, [pc, #304]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a4b      	ldr	r2, [pc, #300]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800256e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002572:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002574:	f7ff fb7c 	bl	8001c70 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff fb78 	bl	8001c70 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e09a      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258e:	4b43      	ldr	r3, [pc, #268]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259a:	4b40      	ldr	r3, [pc, #256]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	4b40      	ldr	r3, [pc, #256]	@ (80026a0 <HAL_RCC_OscConfig+0x784>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025aa:	3a01      	subs	r2, #1
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025b4:	0212      	lsls	r2, r2, #8
 80025b6:	4311      	orrs	r1, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025bc:	0852      	lsrs	r2, r2, #1
 80025be:	3a01      	subs	r2, #1
 80025c0:	0552      	lsls	r2, r2, #21
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025c8:	0852      	lsrs	r2, r2, #1
 80025ca:	3a01      	subs	r2, #1
 80025cc:	0652      	lsls	r2, r2, #25
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025d4:	0912      	lsrs	r2, r2, #4
 80025d6:	0452      	lsls	r2, r2, #17
 80025d8:	430a      	orrs	r2, r1
 80025da:	4930      	ldr	r1, [pc, #192]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025e0:	4b2e      	ldr	r3, [pc, #184]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2d      	ldr	r2, [pc, #180]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025ec:	4b2b      	ldr	r3, [pc, #172]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a2a      	ldr	r2, [pc, #168]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f8:	f7ff fb3a 	bl	8001c70 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff fb36 	bl	8001c70 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e058      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800261e:	e050      	b.n	80026c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04f      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002624:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d148      	bne.n	80026c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002630:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a19      	ldr	r2, [pc, #100]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800263a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800263c:	4b17      	ldr	r3, [pc, #92]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a16      	ldr	r2, [pc, #88]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002646:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002648:	f7ff fb12 	bl	8001c70 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff fb0e 	bl	8001c70 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e030      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x734>
 800266e:	e028      	b.n	80026c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d023      	beq.n	80026be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <HAL_RCC_OscConfig+0x780>)
 800267c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7ff faf5 	bl	8001c70 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002688:	e00c      	b.n	80026a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff faf1 	bl	8001c70 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d905      	bls.n	80026a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e013      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
 800269c:	40021000 	.word	0x40021000
 80026a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_OscConfig+0x7b0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ec      	bne.n	800268a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_RCC_OscConfig+0x7b0>)
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	4905      	ldr	r1, [pc, #20]	@ (80026cc <HAL_RCC_OscConfig+0x7b0>)
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_RCC_OscConfig+0x7b4>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
 80026bc:	e001      	b.n	80026c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	feeefffc 	.word	0xfeeefffc

080026d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0e7      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b75      	ldr	r3, [pc, #468]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b72      	ldr	r3, [pc, #456]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 0207 	bic.w	r2, r3, #7
 80026fe:	4970      	ldr	r1, [pc, #448]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b6e      	ldr	r3, [pc, #440]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0cf      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	4b66      	ldr	r3, [pc, #408]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002730:	429a      	cmp	r2, r3
 8002732:	d908      	bls.n	8002746 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b63      	ldr	r3, [pc, #396]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4960      	ldr	r1, [pc, #384]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04c      	beq.n	80027ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	4b5a      	ldr	r3, [pc, #360]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d121      	bne.n	80027aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0a6      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002772:	4b54      	ldr	r3, [pc, #336]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d115      	bne.n	80027aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e09a      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278a:	4b4e      	ldr	r3, [pc, #312]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e08e      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279a:	4b4a      	ldr	r3, [pc, #296]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e086      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	4b46      	ldr	r3, [pc, #280]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4943      	ldr	r1, [pc, #268]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027bc:	f7ff fa58 	bl	8001c70 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	e00a      	b.n	80027da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7ff fa54 	bl	8001c70 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e06e      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 020c 	and.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1eb      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002804:	429a      	cmp	r2, r3
 8002806:	d208      	bcs.n	800281a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	492b      	ldr	r1, [pc, #172]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281a:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d210      	bcs.n	800284a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002828:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 0207 	bic.w	r2, r3, #7
 8002830:	4923      	ldr	r1, [pc, #140]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_RCC_ClockConfig+0x1ec>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e036      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4918      	ldr	r1, [pc, #96]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d009      	beq.n	8002888 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4910      	ldr	r1, [pc, #64]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002888:	f000 f824 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	490b      	ldr	r1, [pc, #44]	@ (80028c8 <HAL_RCC_ClockConfig+0x1f4>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <HAL_RCC_ClockConfig+0x1f8>)
 80028a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_ClockConfig+0x1fc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f98f 	bl	8001bd0 <HAL_InitTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80028b6:	7afb      	ldrb	r3, [r7, #11]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	0800431c 	.word	0x0800431c
 80028cc:	2000001c 	.word	0x2000001c
 80028d0:	20000020 	.word	0x20000020

080028d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e2:	4b3e      	ldr	r3, [pc, #248]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ec:	4b3b      	ldr	r3, [pc, #236]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x34>
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d121      	bne.n	8002946 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d11e      	bne.n	8002946 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002908:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002914:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	e005      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002924:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002944:	e00a      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d102      	bne.n	8002952 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	e004      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d101      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002958:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800295a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d134      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002962:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0xa6>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d003      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0xac>
 8002978:	e005      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800297c:	617b      	str	r3, [r7, #20]
      break;
 800297e:	e005      	b.n	800298c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002980:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002982:	617b      	str	r3, [r7, #20]
      break;
 8002984:	e002      	b.n	800298c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	617b      	str	r3, [r7, #20]
      break;
 800298a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	3301      	adds	r3, #1
 8002998:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	fb03 f202 	mul.w	r2, r3, r2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029b2:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x108>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	0e5b      	lsrs	r3, r3, #25
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	3301      	adds	r3, #1
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029cc:	69bb      	ldr	r3, [r7, #24]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	@ 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	0800432c 	.word	0x0800432c
 80029e4:	00f42400 	.word	0x00f42400
 80029e8:	007a1200 	.word	0x007a1200

080029ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f8:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a04:	f7ff fa26 	bl	8001e54 <HAL_PWREx_GetVoltageRange>
 8002a08:	6178      	str	r0, [r7, #20]
 8002a0a:	e014      	b.n	8002a36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	4a24      	ldr	r2, [pc, #144]	@ (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a18:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a24:	f7ff fa16 	bl	8001e54 <HAL_PWREx_GetVoltageRange>
 8002a28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a3c:	d10b      	bne.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b80      	cmp	r3, #128	@ 0x80
 8002a42:	d919      	bls.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a48:	d902      	bls.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e013      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a50:	2301      	movs	r3, #1
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	e010      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b80      	cmp	r3, #128	@ 0x80
 8002a5a:	d902      	bls.n	8002a62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	e00a      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b80      	cmp	r3, #128	@ 0x80
 8002a66:	d102      	bne.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a68:	2302      	movs	r3, #2
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	e004      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b70      	cmp	r3, #112	@ 0x70
 8002a72:	d101      	bne.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a74:	2301      	movs	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 0207 	bic.w	r2, r3, #7
 8002a80:	4909      	ldr	r1, [pc, #36]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a88:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40022000 	.word	0x40022000

08002aac <arm_max_q15>:
 8002aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	ea5f 0b98 	movs.w	fp, r8, lsr #2
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	f100 0a02 	add.w	sl, r0, #2
 8002ac0:	8807      	ldrh	r7, [r0, #0]
 8002ac2:	d054      	beq.n	8002b6e <arm_max_q15+0xc2>
 8002ac4:	300a      	adds	r0, #10
 8002ac6:	46d9      	mov	r9, fp
 8002ac8:	f04f 0c04 	mov.w	ip, #4
 8002acc:	2300      	movs	r3, #0
 8002ace:	463c      	mov	r4, r7
 8002ad0:	f930 7c08 	ldrsh.w	r7, [r0, #-8]
 8002ad4:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
 8002ad8:	f930 6c02 	ldrsh.w	r6, [r0, #-2]
 8002adc:	b224      	sxth	r4, r4
 8002ade:	f1ac 0503 	sub.w	r5, ip, #3
 8002ae2:	42a7      	cmp	r7, r4
 8002ae4:	bfd8      	it	le
 8002ae6:	461d      	movle	r5, r3
 8002ae8:	42a7      	cmp	r7, r4
 8002aea:	bfb8      	it	lt
 8002aec:	4627      	movlt	r7, r4
 8002aee:	f1ac 0402 	sub.w	r4, ip, #2
 8002af2:	4577      	cmp	r7, lr
 8002af4:	bfa8      	it	ge
 8002af6:	462c      	movge	r4, r5
 8002af8:	f930 3c04 	ldrsh.w	r3, [r0, #-4]
 8002afc:	4577      	cmp	r7, lr
 8002afe:	bfb8      	it	lt
 8002b00:	4677      	movlt	r7, lr
 8002b02:	f10c 35ff 	add.w	r5, ip, #4294967295	@ 0xffffffff
 8002b06:	429f      	cmp	r7, r3
 8002b08:	bfa8      	it	ge
 8002b0a:	4625      	movge	r5, r4
 8002b0c:	429f      	cmp	r7, r3
 8002b0e:	bfb8      	it	lt
 8002b10:	461f      	movlt	r7, r3
 8002b12:	42b7      	cmp	r7, r6
 8002b14:	463c      	mov	r4, r7
 8002b16:	bfb8      	it	lt
 8002b18:	4634      	movlt	r4, r6
 8002b1a:	42b7      	cmp	r7, r6
 8002b1c:	bfac      	ite	ge
 8002b1e:	462b      	movge	r3, r5
 8002b20:	4663      	movlt	r3, ip
 8002b22:	f1b9 0901 	subs.w	r9, r9, #1
 8002b26:	b2a4      	uxth	r4, r4
 8002b28:	f10c 0c04 	add.w	ip, ip, #4
 8002b2c:	f100 0008 	add.w	r0, r0, #8
 8002b30:	d1ce      	bne.n	8002ad0 <arm_max_q15+0x24>
 8002b32:	4627      	mov	r7, r4
 8002b34:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
 8002b38:	f018 0803 	ands.w	r8, r8, #3
 8002b3c:	d019      	beq.n	8002b72 <arm_max_q15+0xc6>
 8002b3e:	ebc8 0801 	rsb	r8, r8, r1
 8002b42:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8002b46:	b23f      	sxth	r7, r7
 8002b48:	42a7      	cmp	r7, r4
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	bfb8      	it	lt
 8002b4e:	4620      	movlt	r0, r4
 8002b50:	42bc      	cmp	r4, r7
 8002b52:	bfc8      	it	gt
 8002b54:	4643      	movgt	r3, r8
 8002b56:	f108 0801 	add.w	r8, r8, #1
 8002b5a:	b280      	uxth	r0, r0
 8002b5c:	4588      	cmp	r8, r1
 8002b5e:	b287      	uxth	r7, r0
 8002b60:	d1ef      	bne.n	8002b42 <arm_max_q15+0x96>
 8002b62:	8010      	strh	r0, [r2, #0]
 8002b64:	9a01      	ldr	r2, [sp, #4]
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	b003      	add	sp, #12
 8002b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6e:	465b      	mov	r3, fp
 8002b70:	e7e2      	b.n	8002b38 <arm_max_q15+0x8c>
 8002b72:	4638      	mov	r0, r7
 8002b74:	e7f5      	b.n	8002b62 <arm_max_q15+0xb6>
 8002b76:	bf00      	nop

08002b78 <arm_split_rfft_q15>:
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	f101 4480 	add.w	r4, r1, #1073741824	@ 0x40000000
 8002b82:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8002b84:	9001      	str	r0, [sp, #4]
 8002b86:	3c01      	subs	r4, #1
 8002b88:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8002b8c:	00a0      	lsls	r0, r4, #2
 8002b8e:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8002b92:	3901      	subs	r1, #1
 8002b94:	9000      	str	r0, [sp, #0]
 8002b96:	4452      	add	r2, sl
 8002b98:	4453      	add	r3, sl
 8002b9a:	d02f      	beq.n	8002bfc <arm_split_rfft_q15+0x84>
 8002b9c:	f100 0904 	add.w	r9, r0, #4
 8002ba0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8002ba2:	9c01      	ldr	r4, [sp, #4]
 8002ba4:	f1ae 0e08 	sub.w	lr, lr, #8
 8002ba8:	4486      	add	lr, r0
 8002baa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8002bac:	44a1      	add	r9, r4
 8002bae:	f100 0808 	add.w	r8, r0, #8
 8002bb2:	46a3      	mov	fp, r4
 8002bb4:	f04f 0c00 	mov.w	ip, #0
 8002bb8:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 8002bbc:	f852 000c 	ldr.w	r0, [r2, ip]
 8002bc0:	fb44 f500 	smusd	r5, r4, r0
 8002bc4:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 8002bc8:	f853 700c 	ldr.w	r7, [r3, ip]
 8002bcc:	fb26 5507 	smlad	r5, r6, r7, r5
 8002bd0:	fb46 f617 	smusdx	r6, r6, r7
 8002bd4:	fb24 6010 	smladx	r0, r4, r0, r6
 8002bd8:	1400      	asrs	r0, r0, #16
 8002bda:	0c2c      	lsrs	r4, r5, #16
 8002bdc:	4246      	negs	r6, r0
 8002bde:	3901      	subs	r1, #1
 8002be0:	f828 0c02 	strh.w	r0, [r8, #-2]
 8002be4:	f828 4c04 	strh.w	r4, [r8, #-4]
 8002be8:	44d4      	add	ip, sl
 8002bea:	f8ae 6006 	strh.w	r6, [lr, #6]
 8002bee:	f8ae 4004 	strh.w	r4, [lr, #4]
 8002bf2:	f108 0804 	add.w	r8, r8, #4
 8002bf6:	f1ae 0e04 	sub.w	lr, lr, #4
 8002bfa:	d1dd      	bne.n	8002bb8 <arm_split_rfft_q15+0x40>
 8002bfc:	9801      	ldr	r0, [sp, #4]
 8002bfe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002c00:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8002c04:	f9b0 3000 	ldrsh.w	r3, [r0]
 8002c08:	9900      	ldr	r1, [sp, #0]
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	4421      	add	r1, r4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	105b      	asrs	r3, r3, #1
 8002c12:	808b      	strh	r3, [r1, #4]
 8002c14:	80ca      	strh	r2, [r1, #6]
 8002c16:	f9b0 1000 	ldrsh.w	r1, [r0]
 8002c1a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8002c1e:	8062      	strh	r2, [r4, #2]
 8002c20:	440b      	add	r3, r1
 8002c22:	105b      	asrs	r3, r3, #1
 8002c24:	8023      	strh	r3, [r4, #0]
 8002c26:	b003      	add	sp, #12
 8002c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002c2c <arm_rfft_q15>:
 8002c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c30:	4617      	mov	r7, r2
 8002c32:	7902      	ldrb	r2, [r0, #4]
 8002c34:	6805      	ldr	r5, [r0, #0]
 8002c36:	6943      	ldr	r3, [r0, #20]
 8002c38:	b085      	sub	sp, #20
 8002c3a:	2a01      	cmp	r2, #1
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	9303      	str	r3, [sp, #12]
 8002c40:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8002c44:	4688      	mov	r8, r1
 8002c46:	d00f      	beq.n	8002c68 <arm_rfft_q15+0x3c>
 8002c48:	4618      	mov	r0, r3
 8002c4a:	7973      	ldrb	r3, [r6, #5]
 8002c4c:	f000 fa6a 	bl	8003124 <arm_cfft_q15>
 8002c50:	68b4      	ldr	r4, [r6, #8]
 8002c52:	68f2      	ldr	r2, [r6, #12]
 8002c54:	6933      	ldr	r3, [r6, #16]
 8002c56:	9700      	str	r7, [sp, #0]
 8002c58:	4640      	mov	r0, r8
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	9401      	str	r4, [sp, #4]
 8002c5e:	f7ff ff8b 	bl	8002b78 <arm_split_rfft_q15>
 8002c62:	b005      	add	sp, #20
 8002c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c68:	f100 0308 	add.w	r3, r0, #8
 8002c6c:	e893 5008 	ldmia.w	r3, {r3, ip, lr}
 8002c70:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8002c74:	b31d      	cbz	r5, 8002cbe <arm_rfft_q15+0x92>
 8002c76:	f109 0904 	add.w	r9, r9, #4
 8002c7a:	4489      	add	r9, r1
 8002c7c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002c80:	46bb      	mov	fp, r7
 8002c82:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 8002c86:	f8de 4000 	ldr.w	r4, [lr]
 8002c8a:	fb41 f304 	smusd	r3, r1, r4
 8002c8e:	f858 0b04 	ldr.w	r0, [r8], #4
 8002c92:	f8dc 2000 	ldr.w	r2, [ip]
 8002c96:	fb20 3302 	smlad	r3, r0, r2, r3
 8002c9a:	fb21 f114 	smuadx	r1, r1, r4
 8002c9e:	4249      	negs	r1, r1
 8002ca0:	fb42 1210 	smlsdx	r2, r2, r0, r1
 8002ca4:	3d01      	subs	r5, #1
 8002ca6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002caa:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002cae:	44d6      	add	lr, sl
 8002cb0:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8002cb4:	44d4      	add	ip, sl
 8002cb6:	f84b 2b04 	str.w	r2, [fp], #4
 8002cba:	d1e2      	bne.n	8002c82 <arm_rfft_q15+0x56>
 8002cbc:	7932      	ldrb	r2, [r6, #4]
 8002cbe:	7973      	ldrb	r3, [r6, #5]
 8002cc0:	9803      	ldr	r0, [sp, #12]
 8002cc2:	4639      	mov	r1, r7
 8002cc4:	f000 fa2e 	bl	8003124 <arm_cfft_q15>
 8002cc8:	6833      	ldr	r3, [r6, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0c9      	beq.n	8002c62 <arm_rfft_q15+0x36>
 8002cce:	3f02      	subs	r7, #2
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	803b      	strh	r3, [r7, #0]
 8002cda:	6833      	ldr	r3, [r6, #0]
 8002cdc:	3201      	adds	r2, #1
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d8f7      	bhi.n	8002cd2 <arm_rfft_q15+0xa6>
 8002ce2:	b005      	add	sp, #20
 8002ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002ce8 <arm_rfft_init_q15>:
 8002ce8:	b289      	uxth	r1, r1
 8002cea:	b430      	push	{r4, r5}
 8002cec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002cf0:	4d36      	ldr	r5, [pc, #216]	@ (8002dcc <arm_rfft_init_q15+0xe4>)
 8002cf2:	4c37      	ldr	r4, [pc, #220]	@ (8002dd0 <arm_rfft_init_q15+0xe8>)
 8002cf4:	7102      	strb	r2, [r0, #4]
 8002cf6:	7143      	strb	r3, [r0, #5]
 8002cf8:	6001      	str	r1, [r0, #0]
 8002cfa:	60c5      	str	r5, [r0, #12]
 8002cfc:	6104      	str	r4, [r0, #16]
 8002cfe:	d050      	beq.n	8002da2 <arm_rfft_init_q15+0xba>
 8002d00:	d911      	bls.n	8002d26 <arm_rfft_init_q15+0x3e>
 8002d02:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8002d06:	d054      	beq.n	8002db2 <arm_rfft_init_q15+0xca>
 8002d08:	d938      	bls.n	8002d7c <arm_rfft_init_q15+0x94>
 8002d0a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002d0e:	d022      	beq.n	8002d56 <arm_rfft_init_q15+0x6e>
 8002d10:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8002d14:	d155      	bne.n	8002dc2 <arm_rfft_init_q15+0xda>
 8002d16:	2201      	movs	r2, #1
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <arm_rfft_init_q15+0xec>)
 8002d1a:	6082      	str	r2, [r0, #8]
 8002d1c:	6143      	str	r3, [r0, #20]
 8002d1e:	2000      	movs	r0, #0
 8002d20:	b240      	sxtb	r0, r0
 8002d22:	bc30      	pop	{r4, r5}
 8002d24:	4770      	bx	lr
 8002d26:	2940      	cmp	r1, #64	@ 0x40
 8002d28:	d033      	beq.n	8002d92 <arm_rfft_init_q15+0xaa>
 8002d2a:	d91c      	bls.n	8002d66 <arm_rfft_init_q15+0x7e>
 8002d2c:	2980      	cmp	r1, #128	@ 0x80
 8002d2e:	d00a      	beq.n	8002d46 <arm_rfft_init_q15+0x5e>
 8002d30:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002d34:	d145      	bne.n	8002dc2 <arm_rfft_init_q15+0xda>
 8002d36:	2220      	movs	r2, #32
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <arm_rfft_init_q15+0xf0>)
 8002d3a:	6082      	str	r2, [r0, #8]
 8002d3c:	6143      	str	r3, [r0, #20]
 8002d3e:	2000      	movs	r0, #0
 8002d40:	b240      	sxtb	r0, r0
 8002d42:	bc30      	pop	{r4, r5}
 8002d44:	4770      	bx	lr
 8002d46:	2240      	movs	r2, #64	@ 0x40
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <arm_rfft_init_q15+0xf4>)
 8002d4a:	6082      	str	r2, [r0, #8]
 8002d4c:	6143      	str	r3, [r0, #20]
 8002d4e:	2000      	movs	r0, #0
 8002d50:	b240      	sxtb	r0, r0
 8002d52:	bc30      	pop	{r4, r5}
 8002d54:	4770      	bx	lr
 8002d56:	2202      	movs	r2, #2
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <arm_rfft_init_q15+0xf8>)
 8002d5a:	6082      	str	r2, [r0, #8]
 8002d5c:	6143      	str	r3, [r0, #20]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	b240      	sxtb	r0, r0
 8002d62:	bc30      	pop	{r4, r5}
 8002d64:	4770      	bx	lr
 8002d66:	2920      	cmp	r1, #32
 8002d68:	d12b      	bne.n	8002dc2 <arm_rfft_init_q15+0xda>
 8002d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <arm_rfft_init_q15+0xfc>)
 8002d70:	6082      	str	r2, [r0, #8]
 8002d72:	6143      	str	r3, [r0, #20]
 8002d74:	2000      	movs	r0, #0
 8002d76:	b240      	sxtb	r0, r0
 8002d78:	bc30      	pop	{r4, r5}
 8002d7a:	4770      	bx	lr
 8002d7c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002d80:	d11f      	bne.n	8002dc2 <arm_rfft_init_q15+0xda>
 8002d82:	2208      	movs	r2, #8
 8002d84:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <arm_rfft_init_q15+0x100>)
 8002d86:	6082      	str	r2, [r0, #8]
 8002d88:	6143      	str	r3, [r0, #20]
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	b240      	sxtb	r0, r0
 8002d8e:	bc30      	pop	{r4, r5}
 8002d90:	4770      	bx	lr
 8002d92:	2280      	movs	r2, #128	@ 0x80
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <arm_rfft_init_q15+0x104>)
 8002d96:	6082      	str	r2, [r0, #8]
 8002d98:	6143      	str	r3, [r0, #20]
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	b240      	sxtb	r0, r0
 8002d9e:	bc30      	pop	{r4, r5}
 8002da0:	4770      	bx	lr
 8002da2:	2210      	movs	r2, #16
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <arm_rfft_init_q15+0x108>)
 8002da6:	6082      	str	r2, [r0, #8]
 8002da8:	6143      	str	r3, [r0, #20]
 8002daa:	2000      	movs	r0, #0
 8002dac:	b240      	sxtb	r0, r0
 8002dae:	bc30      	pop	{r4, r5}
 8002db0:	4770      	bx	lr
 8002db2:	2204      	movs	r2, #4
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <arm_rfft_init_q15+0x10c>)
 8002db6:	6082      	str	r2, [r0, #8]
 8002db8:	6143      	str	r3, [r0, #20]
 8002dba:	2000      	movs	r0, #0
 8002dbc:	b240      	sxtb	r0, r0
 8002dbe:	bc30      	pop	{r4, r5}
 8002dc0:	4770      	bx	lr
 8002dc2:	20ff      	movs	r0, #255	@ 0xff
 8002dc4:	b240      	sxtb	r0, r0
 8002dc6:	bc30      	pop	{r4, r5}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	0800435c 	.word	0x0800435c
 8002dd0:	0800835c 	.word	0x0800835c
 8002dd4:	0800c38c 	.word	0x0800c38c
 8002dd8:	0800c3cc 	.word	0x0800c3cc
 8002ddc:	0800c3ac 	.word	0x0800c3ac
 8002de0:	0800c3dc 	.word	0x0800c3dc
 8002de4:	0800c36c 	.word	0x0800c36c
 8002de8:	0800c39c 	.word	0x0800c39c
 8002dec:	0800c37c 	.word	0x0800c37c
 8002df0:	0800c3bc 	.word	0x0800c3bc
 8002df4:	0800c35c 	.word	0x0800c35c

08002df8 <arm_cmplx_mag_q15>:
 8002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	0893      	lsrs	r3, r2, #2
 8002e00:	9200      	str	r2, [sp, #0]
 8002e02:	4607      	mov	r7, r0
 8002e04:	460e      	mov	r6, r1
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	d034      	beq.n	8002e74 <arm_cmplx_mag_q15+0x7c>
 8002e0a:	f100 0510 	add.w	r5, r0, #16
 8002e0e:	469b      	mov	fp, r3
 8002e10:	460c      	mov	r4, r1
 8002e12:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8002e16:	fb20 f000 	smuad	r0, r0, r0
 8002e1a:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8002e1e:	fb22 f802 	smuad	r8, r2, r2
 8002e22:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8002e26:	fb23 fa03 	smuad	sl, r3, r3
 8002e2a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8002e2e:	fb23 f903 	smuad	r9, r3, r3
 8002e32:	4621      	mov	r1, r4
 8002e34:	1440      	asrs	r0, r0, #17
 8002e36:	f000 f831 	bl	8002e9c <arm_sqrt_q15>
 8002e3a:	1ca1      	adds	r1, r4, #2
 8002e3c:	ea4f 4068 	mov.w	r0, r8, asr #17
 8002e40:	f000 f82c 	bl	8002e9c <arm_sqrt_q15>
 8002e44:	f104 0806 	add.w	r8, r4, #6
 8002e48:	1d21      	adds	r1, r4, #4
 8002e4a:	ea4f 406a 	mov.w	r0, sl, asr #17
 8002e4e:	f000 f825 	bl	8002e9c <arm_sqrt_q15>
 8002e52:	ea4f 4069 	mov.w	r0, r9, asr #17
 8002e56:	4641      	mov	r1, r8
 8002e58:	f000 f820 	bl	8002e9c <arm_sqrt_q15>
 8002e5c:	f1bb 0b01 	subs.w	fp, fp, #1
 8002e60:	f105 0510 	add.w	r5, r5, #16
 8002e64:	f104 0408 	add.w	r4, r4, #8
 8002e68:	d1d3      	bne.n	8002e12 <arm_cmplx_mag_q15+0x1a>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	eb07 1702 	add.w	r7, r7, r2, lsl #4
 8002e70:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 8002e74:	9b00      	ldr	r3, [sp, #0]
 8002e76:	f013 0403 	ands.w	r4, r3, #3
 8002e7a:	d00b      	beq.n	8002e94 <arm_cmplx_mag_q15+0x9c>
 8002e7c:	f857 0b04 	ldr.w	r0, [r7], #4
 8002e80:	fb20 f000 	smuad	r0, r0, r0
 8002e84:	4631      	mov	r1, r6
 8002e86:	1440      	asrs	r0, r0, #17
 8002e88:	f000 f808 	bl	8002e9c <arm_sqrt_q15>
 8002e8c:	3c01      	subs	r4, #1
 8002e8e:	f106 0602 	add.w	r6, r6, #2
 8002e92:	d1f3      	bne.n	8002e7c <arm_cmplx_mag_q15+0x84>
 8002e94:	b003      	add	sp, #12
 8002e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e9a:	bf00      	nop

08002e9c <arm_sqrt_q15>:
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	dd72      	ble.n	8002f86 <arm_sqrt_q15+0xea>
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea2:	fab0 f680 	clz	r6, r0
 8002ea6:	3e11      	subs	r6, #17
 8002ea8:	b2b6      	uxth	r6, r6
 8002eaa:	f016 0701 	ands.w	r7, r6, #1
 8002eae:	bf1a      	itte	ne
 8002eb0:	f106 32ff 	addne.w	r2, r6, #4294967295	@ 0xffffffff
 8002eb4:	fa00 f302 	lslne.w	r3, r0, r2
 8002eb8:	fa00 f306 	lsleq.w	r3, r0, r6
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b21c      	sxth	r4, r3
 8002ec0:	ee07 4a90 	vmov	s15, r4
 8002ec4:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 8002ec8:	4831      	ldr	r0, [pc, #196]	@ (8002f90 <arm_sqrt_q15+0xf4>)
 8002eca:	ee17 5a90 	vmov	r5, s15
 8002ece:	106d      	asrs	r5, r5, #1
 8002ed0:	1b40      	subs	r0, r0, r5
 8002ed2:	ee07 0a90 	vmov	s15, r0
 8002ed6:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8002eda:	b083      	sub	sp, #12
 8002edc:	edcd 7a01 	vstr	s15, [sp, #4]
 8002ee0:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8002ee4:	fb15 f005 	smulbb	r0, r5, r5
 8002ee8:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8002eec:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 8002ef0:	fb10 f004 	smulbb	r0, r0, r4
 8002ef4:	f340 32cf 	sbfx	r2, r0, #15, #16
 8002ef8:	f5c2 5040 	rsb	r0, r2, #12288	@ 0x3000
 8002efc:	b22a      	sxth	r2, r5
 8002efe:	fb00 f202 	mul.w	r2, r0, r2
 8002f02:	f342 32cf 	sbfx	r2, r2, #15, #16
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	fb12 f002 	smulbb	r0, r2, r2
 8002f0e:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 8002f12:	fb14 f000 	smulbb	r0, r4, r0
 8002f16:	f340 3ecf 	sbfx	lr, r0, #15, #16
 8002f1a:	f5ce 5040 	rsb	r0, lr, #12288	@ 0x3000
 8002f1e:	fa0f fe82 	sxth.w	lr, r2
 8002f22:	fb00 fe0e 	mul.w	lr, r0, lr
 8002f26:	f34e 3ecf 	sbfx	lr, lr, #15, #16
 8002f2a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002f2e:	fa1f fe8e 	uxth.w	lr, lr
 8002f32:	fb1e f50e 	smulbb	r5, lr, lr
 8002f36:	f3c5 35cf 	ubfx	r5, r5, #15, #16
 8002f3a:	fb14 f405 	smulbb	r4, r4, r5
 8002f3e:	f344 32cf 	sbfx	r2, r4, #15, #16
 8002f42:	f5c2 5440 	rsb	r4, r2, #12288	@ 0x3000
 8002f46:	fa0f f28e 	sxth.w	r2, lr
 8002f4a:	fb04 f202 	mul.w	r2, r4, r2
 8002f4e:	f342 32cf 	sbfx	r2, r2, #15, #16
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	fb13 f302 	smulbb	r3, r3, r2
 8002f58:	f343 33cf 	sbfx	r3, r3, #15, #16
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b15f      	cbz	r7, 8002f7a <arm_sqrt_q15+0xde>
 8002f62:	3e01      	subs	r6, #1
 8002f64:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8002f68:	1076      	asrs	r6, r6, #1
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	4133      	asrs	r3, r6
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2000      	movs	r0, #0
 8002f72:	b240      	sxtb	r0, r0
 8002f74:	800b      	strh	r3, [r1, #0]
 8002f76:	b003      	add	sp, #12
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	f346 064e 	sbfx	r6, r6, #1, #15
 8002f80:	4133      	asrs	r3, r6
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	e7f4      	b.n	8002f70 <arm_sqrt_q15+0xd4>
 8002f86:	2300      	movs	r3, #0
 8002f88:	20ff      	movs	r0, #255	@ 0xff
 8002f8a:	800b      	strh	r3, [r1, #0]
 8002f8c:	b240      	sxtb	r0, r0
 8002f8e:	4770      	bx	lr
 8002f90:	5f3759df 	.word	0x5f3759df

08002f94 <arm_cfft_radix4by2_q15>:
 8002f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f98:	084d      	lsrs	r5, r1, #1
 8002f9a:	b081      	sub	sp, #4
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8002fa2:	4616      	mov	r6, r2
 8002fa4:	d04c      	beq.n	8003040 <arm_cfft_radix4by2_q15+0xac>
 8002fa6:	46bc      	mov	ip, r7
 8002fa8:	4686      	mov	lr, r0
 8002faa:	4691      	mov	r9, r2
 8002fac:	4629      	mov	r1, r5
 8002fae:	f04f 0800 	mov.w	r8, #0
 8002fb2:	f859 2b04 	ldr.w	r2, [r9], #4
 8002fb6:	f8de 3000 	ldr.w	r3, [lr]
 8002fba:	fa93 fa28 	shadd16	sl, r3, r8
 8002fbe:	f8dc 0000 	ldr.w	r0, [ip]
 8002fc2:	fa90 f028 	shadd16	r0, r0, r8
 8002fc6:	fada fb10 	qsub16	fp, sl, r0
 8002fca:	fa9a f020 	shadd16	r0, sl, r0
 8002fce:	f84e 0b04 	str.w	r0, [lr], #4
 8002fd2:	fb22 f00b 	smuad	r0, r2, fp
 8002fd6:	fb42 f21b 	smusdx	r2, r2, fp
 8002fda:	0c13      	lsrs	r3, r2, #16
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002fe2:	3901      	subs	r1, #1
 8002fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8002fe8:	d1e3      	bne.n	8002fb2 <arm_cfft_radix4by2_q15+0x1e>
 8002fea:	4629      	mov	r1, r5
 8002fec:	4620      	mov	r0, r4
 8002fee:	4632      	mov	r2, r6
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f000 f8f5 	bl	80031e0 <arm_radix4_butterfly_q15>
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	4632      	mov	r2, r6
 8002ffe:	f000 f8ef 	bl	80031e0 <arm_radix4_butterfly_q15>
 8003002:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8003006:	1ca3      	adds	r3, r4, #2
 8003008:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 800300c:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8003010:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8003014:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8003018:	007f      	lsls	r7, r7, #1
 800301a:	0076      	lsls	r6, r6, #1
 800301c:	0040      	lsls	r0, r0, #1
 800301e:	0052      	lsls	r2, r2, #1
 8003020:	f823 7c02 	strh.w	r7, [r3, #-2]
 8003024:	3408      	adds	r4, #8
 8003026:	f824 6c06 	strh.w	r6, [r4, #-6]
 800302a:	f824 0c04 	strh.w	r0, [r4, #-4]
 800302e:	f824 2c02 	strh.w	r2, [r4, #-2]
 8003032:	42ac      	cmp	r4, r5
 8003034:	f103 0308 	add.w	r3, r3, #8
 8003038:	d1e6      	bne.n	8003008 <arm_cfft_radix4by2_q15+0x74>
 800303a:	b001      	add	sp, #4
 800303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003040:	4629      	mov	r1, r5
 8003042:	2302      	movs	r3, #2
 8003044:	f000 f8cc 	bl	80031e0 <arm_radix4_butterfly_q15>
 8003048:	4638      	mov	r0, r7
 800304a:	4629      	mov	r1, r5
 800304c:	4632      	mov	r2, r6
 800304e:	2302      	movs	r3, #2
 8003050:	b001      	add	sp, #4
 8003052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003056:	f000 b8c3 	b.w	80031e0 <arm_radix4_butterfly_q15>
 800305a:	bf00      	nop

0800305c <arm_cfft_radix4by2_inverse_q15>:
 800305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003060:	084d      	lsrs	r5, r1, #1
 8003062:	b081      	sub	sp, #4
 8003064:	4604      	mov	r4, r0
 8003066:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800306a:	4616      	mov	r6, r2
 800306c:	d04c      	beq.n	8003108 <arm_cfft_radix4by2_inverse_q15+0xac>
 800306e:	46bc      	mov	ip, r7
 8003070:	4686      	mov	lr, r0
 8003072:	4691      	mov	r9, r2
 8003074:	4629      	mov	r1, r5
 8003076:	f04f 0800 	mov.w	r8, #0
 800307a:	f859 2b04 	ldr.w	r2, [r9], #4
 800307e:	f8de 3000 	ldr.w	r3, [lr]
 8003082:	fa93 fa28 	shadd16	sl, r3, r8
 8003086:	f8dc 0000 	ldr.w	r0, [ip]
 800308a:	fa90 f028 	shadd16	r0, r0, r8
 800308e:	fada fb10 	qsub16	fp, sl, r0
 8003092:	fa9a f020 	shadd16	r0, sl, r0
 8003096:	f84e 0b04 	str.w	r0, [lr], #4
 800309a:	fb42 f00b 	smusd	r0, r2, fp
 800309e:	fb22 f21b 	smuadx	r2, r2, fp
 80030a2:	0c13      	lsrs	r3, r2, #16
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80030aa:	3901      	subs	r1, #1
 80030ac:	f84c 3b04 	str.w	r3, [ip], #4
 80030b0:	d1e3      	bne.n	800307a <arm_cfft_radix4by2_inverse_q15+0x1e>
 80030b2:	4629      	mov	r1, r5
 80030b4:	4620      	mov	r0, r4
 80030b6:	4632      	mov	r2, r6
 80030b8:	2302      	movs	r3, #2
 80030ba:	f000 f9bf 	bl	800343c <arm_radix4_butterfly_inverse_q15>
 80030be:	4629      	mov	r1, r5
 80030c0:	2302      	movs	r3, #2
 80030c2:	4638      	mov	r0, r7
 80030c4:	4632      	mov	r2, r6
 80030c6:	f000 f9b9 	bl	800343c <arm_radix4_butterfly_inverse_q15>
 80030ca:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80030ce:	1ca3      	adds	r3, r4, #2
 80030d0:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 80030d4:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 80030d8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80030dc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80030e0:	007f      	lsls	r7, r7, #1
 80030e2:	0076      	lsls	r6, r6, #1
 80030e4:	0040      	lsls	r0, r0, #1
 80030e6:	0052      	lsls	r2, r2, #1
 80030e8:	f823 7c02 	strh.w	r7, [r3, #-2]
 80030ec:	3408      	adds	r4, #8
 80030ee:	f824 6c06 	strh.w	r6, [r4, #-6]
 80030f2:	f824 0c04 	strh.w	r0, [r4, #-4]
 80030f6:	f824 2c02 	strh.w	r2, [r4, #-2]
 80030fa:	42ac      	cmp	r4, r5
 80030fc:	f103 0308 	add.w	r3, r3, #8
 8003100:	d1e6      	bne.n	80030d0 <arm_cfft_radix4by2_inverse_q15+0x74>
 8003102:	b001      	add	sp, #4
 8003104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003108:	4629      	mov	r1, r5
 800310a:	2302      	movs	r3, #2
 800310c:	f000 f996 	bl	800343c <arm_radix4_butterfly_inverse_q15>
 8003110:	4638      	mov	r0, r7
 8003112:	4629      	mov	r1, r5
 8003114:	4632      	mov	r2, r6
 8003116:	2302      	movs	r3, #2
 8003118:	b001      	add	sp, #4
 800311a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311e:	f000 b98d 	b.w	800343c <arm_radix4_butterfly_inverse_q15>
 8003122:	bf00      	nop

08003124 <arm_cfft_q15>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	2a01      	cmp	r2, #1
 8003128:	460d      	mov	r5, r1
 800312a:	4604      	mov	r4, r0
 800312c:	461e      	mov	r6, r3
 800312e:	8801      	ldrh	r1, [r0, #0]
 8003130:	d024      	beq.n	800317c <arm_cfft_q15+0x58>
 8003132:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003136:	d013      	beq.n	8003160 <arm_cfft_q15+0x3c>
 8003138:	d808      	bhi.n	800314c <arm_cfft_q15+0x28>
 800313a:	2920      	cmp	r1, #32
 800313c:	d031      	beq.n	80031a2 <arm_cfft_q15+0x7e>
 800313e:	d945      	bls.n	80031cc <arm_cfft_q15+0xa8>
 8003140:	2940      	cmp	r1, #64	@ 0x40
 8003142:	d00d      	beq.n	8003160 <arm_cfft_q15+0x3c>
 8003144:	2980      	cmp	r1, #128	@ 0x80
 8003146:	d02c      	beq.n	80031a2 <arm_cfft_q15+0x7e>
 8003148:	b98e      	cbnz	r6, 800316e <arm_cfft_q15+0x4a>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003150:	d006      	beq.n	8003160 <arm_cfft_q15+0x3c>
 8003152:	d923      	bls.n	800319c <arm_cfft_q15+0x78>
 8003154:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8003158:	d023      	beq.n	80031a2 <arm_cfft_q15+0x7e>
 800315a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800315e:	d1f3      	bne.n	8003148 <arm_cfft_q15+0x24>
 8003160:	4628      	mov	r0, r5
 8003162:	6862      	ldr	r2, [r4, #4]
 8003164:	2301      	movs	r3, #1
 8003166:	f000 f83b 	bl	80031e0 <arm_radix4_butterfly_q15>
 800316a:	2e00      	cmp	r6, #0
 800316c:	d0ed      	beq.n	800314a <arm_cfft_q15+0x26>
 800316e:	4628      	mov	r0, r5
 8003170:	89a1      	ldrh	r1, [r4, #12]
 8003172:	68a2      	ldr	r2, [r4, #8]
 8003174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003178:	f7fd b85f 	b.w	800023a <arm_bitreversal_16>
 800317c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003180:	d01e      	beq.n	80031c0 <arm_cfft_q15+0x9c>
 8003182:	d813      	bhi.n	80031ac <arm_cfft_q15+0x88>
 8003184:	2920      	cmp	r1, #32
 8003186:	d004      	beq.n	8003192 <arm_cfft_q15+0x6e>
 8003188:	d927      	bls.n	80031da <arm_cfft_q15+0xb6>
 800318a:	2940      	cmp	r1, #64	@ 0x40
 800318c:	d018      	beq.n	80031c0 <arm_cfft_q15+0x9c>
 800318e:	2980      	cmp	r1, #128	@ 0x80
 8003190:	d1da      	bne.n	8003148 <arm_cfft_q15+0x24>
 8003192:	4628      	mov	r0, r5
 8003194:	6862      	ldr	r2, [r4, #4]
 8003196:	f7ff ff61 	bl	800305c <arm_cfft_radix4by2_inverse_q15>
 800319a:	e7d5      	b.n	8003148 <arm_cfft_q15+0x24>
 800319c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80031a0:	d1d2      	bne.n	8003148 <arm_cfft_q15+0x24>
 80031a2:	4628      	mov	r0, r5
 80031a4:	6862      	ldr	r2, [r4, #4]
 80031a6:	f7ff fef5 	bl	8002f94 <arm_cfft_radix4by2_q15>
 80031aa:	e7cd      	b.n	8003148 <arm_cfft_q15+0x24>
 80031ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80031b0:	d006      	beq.n	80031c0 <arm_cfft_q15+0x9c>
 80031b2:	d90e      	bls.n	80031d2 <arm_cfft_q15+0xae>
 80031b4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80031b8:	d0eb      	beq.n	8003192 <arm_cfft_q15+0x6e>
 80031ba:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80031be:	d1c3      	bne.n	8003148 <arm_cfft_q15+0x24>
 80031c0:	4628      	mov	r0, r5
 80031c2:	6862      	ldr	r2, [r4, #4]
 80031c4:	2301      	movs	r3, #1
 80031c6:	f000 f939 	bl	800343c <arm_radix4_butterfly_inverse_q15>
 80031ca:	e7bd      	b.n	8003148 <arm_cfft_q15+0x24>
 80031cc:	2910      	cmp	r1, #16
 80031ce:	d1bb      	bne.n	8003148 <arm_cfft_q15+0x24>
 80031d0:	e7c6      	b.n	8003160 <arm_cfft_q15+0x3c>
 80031d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80031d6:	d0dc      	beq.n	8003192 <arm_cfft_q15+0x6e>
 80031d8:	e7b6      	b.n	8003148 <arm_cfft_q15+0x24>
 80031da:	2910      	cmp	r1, #16
 80031dc:	d1b4      	bne.n	8003148 <arm_cfft_q15+0x24>
 80031de:	e7ef      	b.n	80031c0 <arm_cfft_q15+0x9c>

080031e0 <arm_radix4_butterfly_q15>:
 80031e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e4:	b08f      	sub	sp, #60	@ 0x3c
 80031e6:	469b      	mov	fp, r3
 80031e8:	9101      	str	r1, [sp, #4]
 80031ea:	0889      	lsrs	r1, r1, #2
 80031ec:	460e      	mov	r6, r1
 80031ee:	910d      	str	r1, [sp, #52]	@ 0x34
 80031f0:	0089      	lsls	r1, r1, #2
 80031f2:	4607      	mov	r7, r0
 80031f4:	900c      	str	r0, [sp, #48]	@ 0x30
 80031f6:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80031fa:	4408      	add	r0, r1
 80031fc:	2400      	movs	r4, #0
 80031fe:	1845      	adds	r5, r0, r1
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4696      	mov	lr, r2
 8003204:	9209      	str	r2, [sp, #36]	@ 0x24
 8003206:	46b2      	mov	sl, r6
 8003208:	4429      	add	r1, r5
 800320a:	9302      	str	r3, [sp, #8]
 800320c:	4626      	mov	r6, r4
 800320e:	4622      	mov	r2, r4
 8003210:	f8cd b000 	str.w	fp, [sp]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	fa93 fc22 	shadd16	ip, r3, r2
 800321a:	fa9c fc22 	shadd16	ip, ip, r2
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	fa93 f322 	shadd16	r3, r3, r2
 8003224:	fa93 f322 	shadd16	r3, r3, r2
 8003228:	fa9c f813 	qadd16	r8, ip, r3
 800322c:	fadc fc13 	qsub16	ip, ip, r3
 8003230:	6803      	ldr	r3, [r0, #0]
 8003232:	fa93 f322 	shadd16	r3, r3, r2
 8003236:	fa93 f922 	shadd16	r9, r3, r2
 800323a:	680b      	ldr	r3, [r1, #0]
 800323c:	fa93 f322 	shadd16	r3, r3, r2
 8003240:	fa93 f322 	shadd16	r3, r3, r2
 8003244:	fa99 f313 	qadd16	r3, r9, r3
 8003248:	fa98 f923 	shadd16	r9, r8, r3
 800324c:	f847 9b04 	str.w	r9, [r7], #4
 8003250:	fad8 f313 	qsub16	r3, r8, r3
 8003254:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 8003258:	fb29 fb03 	smuad	fp, r9, r3
 800325c:	fb49 f913 	smusdx	r9, r9, r3
 8003260:	6803      	ldr	r3, [r0, #0]
 8003262:	fa93 f322 	shadd16	r3, r3, r2
 8003266:	fa93 f822 	shadd16	r8, r3, r2
 800326a:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800326e:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8003272:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 8003276:	f840 3b04 	str.w	r3, [r0], #4
 800327a:	680b      	ldr	r3, [r1, #0]
 800327c:	fa93 f322 	shadd16	r3, r3, r2
 8003280:	fa93 f322 	shadd16	r3, r3, r2
 8003284:	fad8 f313 	qsub16	r3, r8, r3
 8003288:	faac f913 	qasx	r9, ip, r3
 800328c:	faec fc13 	qsax	ip, ip, r3
 8003290:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8003294:	fb23 f80c 	smuad	r8, r3, ip
 8003298:	fb43 f31c 	smusdx	r3, r3, ip
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80032a4:	f845 3b04 	str.w	r3, [r5], #4
 80032a8:	f85e 3004 	ldr.w	r3, [lr, r4]
 80032ac:	fb23 fc09 	smuad	ip, r3, r9
 80032b0:	fb43 f319 	smusdx	r3, r3, r9
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80032bc:	f841 3b04 	str.w	r3, [r1], #4
 80032c0:	9b00      	ldr	r3, [sp, #0]
 80032c2:	441e      	add	r6, r3
 80032c4:	9b02      	ldr	r3, [sp, #8]
 80032c6:	f1ba 0a01 	subs.w	sl, sl, #1
 80032ca:	441c      	add	r4, r3
 80032cc:	d1a2      	bne.n	8003214 <arm_radix4_butterfly_q15+0x34>
 80032ce:	f8dd b000 	ldr.w	fp, [sp]
 80032d2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80032d6:	9306      	str	r3, [sp, #24]
 80032d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032da:	2b04      	cmp	r3, #4
 80032dc:	f240 8081 	bls.w	80033e2 <arm_radix4_butterfly_q15+0x202>
 80032e0:	f8cd a008 	str.w	sl, [sp, #8]
 80032e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80032e6:	469a      	mov	sl, r3
 80032e8:	ea4f 039a 	mov.w	r3, sl, lsr #2
 80032ec:	2200      	movs	r2, #0
 80032ee:	4611      	mov	r1, r2
 80032f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032f2:	9204      	str	r2, [sp, #16]
 80032f4:	1e5a      	subs	r2, r3, #1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	9308      	str	r3, [sp, #32]
 80032fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80032fc:	9207      	str	r2, [sp, #28]
 80032fe:	9105      	str	r1, [sp, #20]
 8003300:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8003304:	9303      	str	r3, [sp, #12]
 8003306:	9908      	ldr	r1, [sp, #32]
 8003308:	9a03      	ldr	r2, [sp, #12]
 800330a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800330c:	1850      	adds	r0, r2, r1
 800330e:	9a05      	ldr	r2, [sp, #20]
 8003310:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003314:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8003318:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 800331c:	9b06      	ldr	r3, [sp, #24]
 800331e:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8003322:	18d3      	adds	r3, r2, r3
 8003324:	9305      	str	r3, [sp, #20]
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	1845      	adds	r5, r0, r1
 800332c:	4293      	cmp	r3, r2
 800332e:	46b6      	mov	lr, r6
 8003330:	eb05 0401 	add.w	r4, r5, r1
 8003334:	9e03      	ldr	r6, [sp, #12]
 8003336:	d941      	bls.n	80033bc <arm_radix4_butterfly_q15+0x1dc>
 8003338:	eb02 0e0a 	add.w	lr, r2, sl
 800333c:	6833      	ldr	r3, [r6, #0]
 800333e:	682a      	ldr	r2, [r5, #0]
 8003340:	fa93 fb12 	qadd16	fp, r3, r2
 8003344:	fad3 f312 	qsub16	r3, r3, r2
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	6802      	ldr	r2, [r0, #0]
 800334c:	6821      	ldr	r1, [r4, #0]
 800334e:	fa92 f211 	qadd16	r2, r2, r1
 8003352:	fa9b f322 	shadd16	r3, fp, r2
 8003356:	9902      	ldr	r1, [sp, #8]
 8003358:	fa93 f121 	shadd16	r1, r3, r1
 800335c:	6031      	str	r1, [r6, #0]
 800335e:	443e      	add	r6, r7
 8003360:	fadb f222 	shsub16	r2, fp, r2
 8003364:	fb28 f102 	smuad	r1, r8, r2
 8003368:	fb48 f212 	smusdx	r2, r8, r2
 800336c:	0c12      	lsrs	r2, r2, #16
 800336e:	0412      	lsls	r2, r2, #16
 8003370:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8003374:	6801      	ldr	r1, [r0, #0]
 8003376:	6002      	str	r2, [r0, #0]
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	4438      	add	r0, r7
 800337c:	fad1 f212 	qsub16	r2, r1, r2
 8003380:	9b00      	ldr	r3, [sp, #0]
 8003382:	faa3 f122 	shasx	r1, r3, r2
 8003386:	fae3 f322 	shsax	r3, r3, r2
 800338a:	fb2c fb03 	smuad	fp, ip, r3
 800338e:	fb4c f313 	smusdx	r3, ip, r3
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	443d      	add	r5, r7
 800339e:	fb29 f301 	smuad	r3, r9, r1
 80033a2:	fb49 f111 	smusdx	r1, r9, r1
 80033a6:	0c09      	lsrs	r1, r1, #16
 80033a8:	0409      	lsls	r1, r1, #16
 80033aa:	9a01      	ldr	r2, [sp, #4]
 80033ac:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80033b0:	4673      	mov	r3, lr
 80033b2:	429a      	cmp	r2, r3
 80033b4:	6021      	str	r1, [r4, #0]
 80033b6:	44d6      	add	lr, sl
 80033b8:	443c      	add	r4, r7
 80033ba:	d8bf      	bhi.n	800333c <arm_radix4_butterfly_q15+0x15c>
 80033bc:	9a03      	ldr	r2, [sp, #12]
 80033be:	9b04      	ldr	r3, [sp, #16]
 80033c0:	3204      	adds	r2, #4
 80033c2:	9203      	str	r2, [sp, #12]
 80033c4:	9a07      	ldr	r2, [sp, #28]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4293      	cmp	r3, r2
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	d99b      	bls.n	8003306 <arm_radix4_butterfly_q15+0x126>
 80033ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033d0:	9a06      	ldr	r2, [sp, #24]
 80033d2:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	2b04      	cmp	r3, #4
 80033dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80033de:	9206      	str	r2, [sp, #24]
 80033e0:	d882      	bhi.n	80032e8 <arm_radix4_butterfly_q15+0x108>
 80033e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80033e4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80033e6:	3410      	adds	r4, #16
 80033e8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80033ec:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80033f0:	fa93 f117 	qadd16	r1, r3, r7
 80033f4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80033f8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80033fc:	fa92 f510 	qadd16	r5, r2, r0
 8003400:	fa91 f525 	shadd16	r5, r1, r5
 8003404:	f844 5c10 	str.w	r5, [r4, #-16]
 8003408:	fa92 f510 	qadd16	r5, r2, r0
 800340c:	fad1 f125 	shsub16	r1, r1, r5
 8003410:	f844 1c0c 	str.w	r1, [r4, #-12]
 8003414:	fad3 f317 	qsub16	r3, r3, r7
 8003418:	fad2 f210 	qsub16	r2, r2, r0
 800341c:	fae3 f122 	shsax	r1, r3, r2
 8003420:	f844 1c08 	str.w	r1, [r4, #-8]
 8003424:	faa3 f322 	shasx	r3, r3, r2
 8003428:	3e01      	subs	r6, #1
 800342a:	f844 3c04 	str.w	r3, [r4, #-4]
 800342e:	f104 0410 	add.w	r4, r4, #16
 8003432:	d1d9      	bne.n	80033e8 <arm_radix4_butterfly_q15+0x208>
 8003434:	b00f      	add	sp, #60	@ 0x3c
 8003436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343a:	bf00      	nop

0800343c <arm_radix4_butterfly_inverse_q15>:
 800343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003440:	b08f      	sub	sp, #60	@ 0x3c
 8003442:	469b      	mov	fp, r3
 8003444:	9101      	str	r1, [sp, #4]
 8003446:	0889      	lsrs	r1, r1, #2
 8003448:	460e      	mov	r6, r1
 800344a:	910d      	str	r1, [sp, #52]	@ 0x34
 800344c:	0089      	lsls	r1, r1, #2
 800344e:	4607      	mov	r7, r0
 8003450:	900c      	str	r0, [sp, #48]	@ 0x30
 8003452:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8003456:	4408      	add	r0, r1
 8003458:	2400      	movs	r4, #0
 800345a:	1845      	adds	r5, r0, r1
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4696      	mov	lr, r2
 8003460:	9209      	str	r2, [sp, #36]	@ 0x24
 8003462:	46b2      	mov	sl, r6
 8003464:	4429      	add	r1, r5
 8003466:	9302      	str	r3, [sp, #8]
 8003468:	4626      	mov	r6, r4
 800346a:	4622      	mov	r2, r4
 800346c:	f8cd b000 	str.w	fp, [sp]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	fa93 fc22 	shadd16	ip, r3, r2
 8003476:	fa9c fc22 	shadd16	ip, ip, r2
 800347a:	682b      	ldr	r3, [r5, #0]
 800347c:	fa93 f322 	shadd16	r3, r3, r2
 8003480:	fa93 f322 	shadd16	r3, r3, r2
 8003484:	fa9c f813 	qadd16	r8, ip, r3
 8003488:	fadc fc13 	qsub16	ip, ip, r3
 800348c:	6803      	ldr	r3, [r0, #0]
 800348e:	fa93 f322 	shadd16	r3, r3, r2
 8003492:	fa93 f922 	shadd16	r9, r3, r2
 8003496:	680b      	ldr	r3, [r1, #0]
 8003498:	fa93 f322 	shadd16	r3, r3, r2
 800349c:	fa93 f322 	shadd16	r3, r3, r2
 80034a0:	fa99 f313 	qadd16	r3, r9, r3
 80034a4:	fa98 f923 	shadd16	r9, r8, r3
 80034a8:	f847 9b04 	str.w	r9, [r7], #4
 80034ac:	fad8 f313 	qsub16	r3, r8, r3
 80034b0:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 80034b4:	fb49 fb03 	smusd	fp, r9, r3
 80034b8:	fb29 f913 	smuadx	r9, r9, r3
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	fa93 f322 	shadd16	r3, r3, r2
 80034c2:	fa93 f822 	shadd16	r8, r3, r2
 80034c6:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80034ca:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80034ce:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 80034d2:	f840 3b04 	str.w	r3, [r0], #4
 80034d6:	680b      	ldr	r3, [r1, #0]
 80034d8:	fa93 f322 	shadd16	r3, r3, r2
 80034dc:	fa93 f322 	shadd16	r3, r3, r2
 80034e0:	fad8 f313 	qsub16	r3, r8, r3
 80034e4:	faec f913 	qsax	r9, ip, r3
 80034e8:	faac fc13 	qasx	ip, ip, r3
 80034ec:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80034f0:	fb43 f80c 	smusd	r8, r3, ip
 80034f4:	fb23 f31c 	smuadx	r3, r3, ip
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003500:	f845 3b04 	str.w	r3, [r5], #4
 8003504:	f85e 3004 	ldr.w	r3, [lr, r4]
 8003508:	fb43 fc09 	smusd	ip, r3, r9
 800350c:	fb23 f319 	smuadx	r3, r3, r9
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003518:	f841 3b04 	str.w	r3, [r1], #4
 800351c:	9b00      	ldr	r3, [sp, #0]
 800351e:	441e      	add	r6, r3
 8003520:	9b02      	ldr	r3, [sp, #8]
 8003522:	f1ba 0a01 	subs.w	sl, sl, #1
 8003526:	441c      	add	r4, r3
 8003528:	d1a2      	bne.n	8003470 <arm_radix4_butterfly_inverse_q15+0x34>
 800352a:	f8dd b000 	ldr.w	fp, [sp]
 800352e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8003532:	9306      	str	r3, [sp, #24]
 8003534:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003536:	2b04      	cmp	r3, #4
 8003538:	f240 8081 	bls.w	800363e <arm_radix4_butterfly_inverse_q15+0x202>
 800353c:	f8cd a008 	str.w	sl, [sp, #8]
 8003540:	930a      	str	r3, [sp, #40]	@ 0x28
 8003542:	469a      	mov	sl, r3
 8003544:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8003548:	2200      	movs	r2, #0
 800354a:	4611      	mov	r1, r2
 800354c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800354e:	9204      	str	r2, [sp, #16]
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	9308      	str	r3, [sp, #32]
 8003556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003558:	9207      	str	r2, [sp, #28]
 800355a:	9105      	str	r1, [sp, #20]
 800355c:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	9908      	ldr	r1, [sp, #32]
 8003564:	9a03      	ldr	r2, [sp, #12]
 8003566:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8003568:	1850      	adds	r0, r2, r1
 800356a:	9a05      	ldr	r2, [sp, #20]
 800356c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003570:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8003574:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8003578:	9b06      	ldr	r3, [sp, #24]
 800357a:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	9305      	str	r3, [sp, #20]
 8003582:	9a04      	ldr	r2, [sp, #16]
 8003584:	9b01      	ldr	r3, [sp, #4]
 8003586:	1845      	adds	r5, r0, r1
 8003588:	4293      	cmp	r3, r2
 800358a:	46b6      	mov	lr, r6
 800358c:	eb05 0401 	add.w	r4, r5, r1
 8003590:	9e03      	ldr	r6, [sp, #12]
 8003592:	d941      	bls.n	8003618 <arm_radix4_butterfly_inverse_q15+0x1dc>
 8003594:	eb02 0e0a 	add.w	lr, r2, sl
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	682a      	ldr	r2, [r5, #0]
 800359c:	fa93 fb12 	qadd16	fp, r3, r2
 80035a0:	fad3 f312 	qsub16	r3, r3, r2
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6802      	ldr	r2, [r0, #0]
 80035a8:	6821      	ldr	r1, [r4, #0]
 80035aa:	fa92 f211 	qadd16	r2, r2, r1
 80035ae:	fa9b f322 	shadd16	r3, fp, r2
 80035b2:	9902      	ldr	r1, [sp, #8]
 80035b4:	fa93 f121 	shadd16	r1, r3, r1
 80035b8:	6031      	str	r1, [r6, #0]
 80035ba:	443e      	add	r6, r7
 80035bc:	fadb f222 	shsub16	r2, fp, r2
 80035c0:	fb48 f102 	smusd	r1, r8, r2
 80035c4:	fb28 f212 	smuadx	r2, r8, r2
 80035c8:	0c12      	lsrs	r2, r2, #16
 80035ca:	0412      	lsls	r2, r2, #16
 80035cc:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80035d0:	6801      	ldr	r1, [r0, #0]
 80035d2:	6002      	str	r2, [r0, #0]
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	4438      	add	r0, r7
 80035d8:	fad1 f212 	qsub16	r2, r1, r2
 80035dc:	9b00      	ldr	r3, [sp, #0]
 80035de:	fae3 f122 	shsax	r1, r3, r2
 80035e2:	faa3 f322 	shasx	r3, r3, r2
 80035e6:	fb4c fb03 	smusd	fp, ip, r3
 80035ea:	fb2c f313 	smuadx	r3, ip, r3
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80035f6:	602b      	str	r3, [r5, #0]
 80035f8:	443d      	add	r5, r7
 80035fa:	fb49 f301 	smusd	r3, r9, r1
 80035fe:	fb29 f111 	smuadx	r1, r9, r1
 8003602:	0c09      	lsrs	r1, r1, #16
 8003604:	0409      	lsls	r1, r1, #16
 8003606:	9a01      	ldr	r2, [sp, #4]
 8003608:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800360c:	4673      	mov	r3, lr
 800360e:	429a      	cmp	r2, r3
 8003610:	6021      	str	r1, [r4, #0]
 8003612:	44d6      	add	lr, sl
 8003614:	443c      	add	r4, r7
 8003616:	d8bf      	bhi.n	8003598 <arm_radix4_butterfly_inverse_q15+0x15c>
 8003618:	9a03      	ldr	r2, [sp, #12]
 800361a:	9b04      	ldr	r3, [sp, #16]
 800361c:	3204      	adds	r2, #4
 800361e:	9203      	str	r2, [sp, #12]
 8003620:	9a07      	ldr	r2, [sp, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	4293      	cmp	r3, r2
 8003626:	9304      	str	r3, [sp, #16]
 8003628:	d99b      	bls.n	8003562 <arm_radix4_butterfly_inverse_q15+0x126>
 800362a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800362c:	9a06      	ldr	r2, [sp, #24]
 800362e:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	2b04      	cmp	r3, #4
 8003638:	930a      	str	r3, [sp, #40]	@ 0x28
 800363a:	9206      	str	r2, [sp, #24]
 800363c:	d882      	bhi.n	8003544 <arm_radix4_butterfly_inverse_q15+0x108>
 800363e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8003640:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8003642:	3410      	adds	r4, #16
 8003644:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8003648:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800364c:	fa93 f117 	qadd16	r1, r3, r7
 8003650:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8003654:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8003658:	fa92 f510 	qadd16	r5, r2, r0
 800365c:	fa91 f525 	shadd16	r5, r1, r5
 8003660:	f844 5c10 	str.w	r5, [r4, #-16]
 8003664:	fa92 f510 	qadd16	r5, r2, r0
 8003668:	fad1 f125 	shsub16	r1, r1, r5
 800366c:	f844 1c0c 	str.w	r1, [r4, #-12]
 8003670:	fad3 f317 	qsub16	r3, r3, r7
 8003674:	fad2 f210 	qsub16	r2, r2, r0
 8003678:	faa3 f122 	shasx	r1, r3, r2
 800367c:	f844 1c08 	str.w	r1, [r4, #-8]
 8003680:	fae3 f322 	shsax	r3, r3, r2
 8003684:	3e01      	subs	r6, #1
 8003686:	f844 3c04 	str.w	r3, [r4, #-4]
 800368a:	f104 0410 	add.w	r4, r4, #16
 800368e:	d1d9      	bne.n	8003644 <arm_radix4_butterfly_inverse_q15+0x208>
 8003690:	b00f      	add	sp, #60	@ 0x3c
 8003692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003696:	bf00      	nop

08003698 <sniprintf>:
 8003698:	b40c      	push	{r2, r3}
 800369a:	b530      	push	{r4, r5, lr}
 800369c:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <sniprintf+0x64>)
 800369e:	1e0c      	subs	r4, r1, #0
 80036a0:	681d      	ldr	r5, [r3, #0]
 80036a2:	b09d      	sub	sp, #116	@ 0x74
 80036a4:	da08      	bge.n	80036b8 <sniprintf+0x20>
 80036a6:	238b      	movs	r3, #139	@ 0x8b
 80036a8:	602b      	str	r3, [r5, #0]
 80036aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ae:	b01d      	add	sp, #116	@ 0x74
 80036b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036b4:	b002      	add	sp, #8
 80036b6:	4770      	bx	lr
 80036b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80036bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80036c0:	bf14      	ite	ne
 80036c2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80036c6:	4623      	moveq	r3, r4
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	9307      	str	r3, [sp, #28]
 80036cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036d0:	9002      	str	r0, [sp, #8]
 80036d2:	9006      	str	r0, [sp, #24]
 80036d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80036d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80036da:	ab21      	add	r3, sp, #132	@ 0x84
 80036dc:	a902      	add	r1, sp, #8
 80036de:	4628      	mov	r0, r5
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	f000 f995 	bl	8003a10 <_svfiprintf_r>
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	bfbc      	itt	lt
 80036ea:	238b      	movlt	r3, #139	@ 0x8b
 80036ec:	602b      	strlt	r3, [r5, #0]
 80036ee:	2c00      	cmp	r4, #0
 80036f0:	d0dd      	beq.n	80036ae <sniprintf+0x16>
 80036f2:	9b02      	ldr	r3, [sp, #8]
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e7d9      	b.n	80036ae <sniprintf+0x16>
 80036fa:	bf00      	nop
 80036fc:	20000028 	.word	0x20000028

08003700 <memset>:
 8003700:	4402      	add	r2, r0
 8003702:	4603      	mov	r3, r0
 8003704:	4293      	cmp	r3, r2
 8003706:	d100      	bne.n	800370a <memset+0xa>
 8003708:	4770      	bx	lr
 800370a:	f803 1b01 	strb.w	r1, [r3], #1
 800370e:	e7f9      	b.n	8003704 <memset+0x4>

08003710 <__errno>:
 8003710:	4b01      	ldr	r3, [pc, #4]	@ (8003718 <__errno+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000028 	.word	0x20000028

0800371c <__libc_init_array>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	4d0d      	ldr	r5, [pc, #52]	@ (8003754 <__libc_init_array+0x38>)
 8003720:	4c0d      	ldr	r4, [pc, #52]	@ (8003758 <__libc_init_array+0x3c>)
 8003722:	1b64      	subs	r4, r4, r5
 8003724:	10a4      	asrs	r4, r4, #2
 8003726:	2600      	movs	r6, #0
 8003728:	42a6      	cmp	r6, r4
 800372a:	d109      	bne.n	8003740 <__libc_init_array+0x24>
 800372c:	4d0b      	ldr	r5, [pc, #44]	@ (800375c <__libc_init_array+0x40>)
 800372e:	4c0c      	ldr	r4, [pc, #48]	@ (8003760 <__libc_init_array+0x44>)
 8003730:	f000 fd6c 	bl	800420c <_init>
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	2600      	movs	r6, #0
 800373a:	42a6      	cmp	r6, r4
 800373c:	d105      	bne.n	800374a <__libc_init_array+0x2e>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	f855 3b04 	ldr.w	r3, [r5], #4
 8003744:	4798      	blx	r3
 8003746:	3601      	adds	r6, #1
 8003748:	e7ee      	b.n	8003728 <__libc_init_array+0xc>
 800374a:	f855 3b04 	ldr.w	r3, [r5], #4
 800374e:	4798      	blx	r3
 8003750:	3601      	adds	r6, #1
 8003752:	e7f2      	b.n	800373a <__libc_init_array+0x1e>
 8003754:	080161f0 	.word	0x080161f0
 8003758:	080161f0 	.word	0x080161f0
 800375c:	080161f0 	.word	0x080161f0
 8003760:	080161f4 	.word	0x080161f4

08003764 <__retarget_lock_acquire_recursive>:
 8003764:	4770      	bx	lr

08003766 <__retarget_lock_release_recursive>:
 8003766:	4770      	bx	lr

08003768 <_free_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4605      	mov	r5, r0
 800376c:	2900      	cmp	r1, #0
 800376e:	d041      	beq.n	80037f4 <_free_r+0x8c>
 8003770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003774:	1f0c      	subs	r4, r1, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfb8      	it	lt
 800377a:	18e4      	addlt	r4, r4, r3
 800377c:	f000 f8e0 	bl	8003940 <__malloc_lock>
 8003780:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <_free_r+0x90>)
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	b933      	cbnz	r3, 8003794 <_free_r+0x2c>
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	6014      	str	r4, [r2, #0]
 800378a:	4628      	mov	r0, r5
 800378c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003790:	f000 b8dc 	b.w	800394c <__malloc_unlock>
 8003794:	42a3      	cmp	r3, r4
 8003796:	d908      	bls.n	80037aa <_free_r+0x42>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	1821      	adds	r1, r4, r0
 800379c:	428b      	cmp	r3, r1
 800379e:	bf01      	itttt	eq
 80037a0:	6819      	ldreq	r1, [r3, #0]
 80037a2:	685b      	ldreq	r3, [r3, #4]
 80037a4:	1809      	addeq	r1, r1, r0
 80037a6:	6021      	streq	r1, [r4, #0]
 80037a8:	e7ed      	b.n	8003786 <_free_r+0x1e>
 80037aa:	461a      	mov	r2, r3
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b10b      	cbz	r3, 80037b4 <_free_r+0x4c>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d9fa      	bls.n	80037aa <_free_r+0x42>
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	1850      	adds	r0, r2, r1
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d10b      	bne.n	80037d4 <_free_r+0x6c>
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	4401      	add	r1, r0
 80037c0:	1850      	adds	r0, r2, r1
 80037c2:	4283      	cmp	r3, r0
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	d1e0      	bne.n	800378a <_free_r+0x22>
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	6053      	str	r3, [r2, #4]
 80037ce:	4408      	add	r0, r1
 80037d0:	6010      	str	r0, [r2, #0]
 80037d2:	e7da      	b.n	800378a <_free_r+0x22>
 80037d4:	d902      	bls.n	80037dc <_free_r+0x74>
 80037d6:	230c      	movs	r3, #12
 80037d8:	602b      	str	r3, [r5, #0]
 80037da:	e7d6      	b.n	800378a <_free_r+0x22>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	1821      	adds	r1, r4, r0
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf04      	itt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	6063      	str	r3, [r4, #4]
 80037ea:	bf04      	itt	eq
 80037ec:	1809      	addeq	r1, r1, r0
 80037ee:	6021      	streq	r1, [r4, #0]
 80037f0:	6054      	str	r4, [r2, #4]
 80037f2:	e7ca      	b.n	800378a <_free_r+0x22>
 80037f4:	bd38      	pop	{r3, r4, r5, pc}
 80037f6:	bf00      	nop
 80037f8:	20000204 	.word	0x20000204

080037fc <sbrk_aligned>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4e0f      	ldr	r6, [pc, #60]	@ (800383c <sbrk_aligned+0x40>)
 8003800:	460c      	mov	r4, r1
 8003802:	6831      	ldr	r1, [r6, #0]
 8003804:	4605      	mov	r5, r0
 8003806:	b911      	cbnz	r1, 800380e <sbrk_aligned+0x12>
 8003808:	f000 fba6 	bl	8003f58 <_sbrk_r>
 800380c:	6030      	str	r0, [r6, #0]
 800380e:	4621      	mov	r1, r4
 8003810:	4628      	mov	r0, r5
 8003812:	f000 fba1 	bl	8003f58 <_sbrk_r>
 8003816:	1c43      	adds	r3, r0, #1
 8003818:	d103      	bne.n	8003822 <sbrk_aligned+0x26>
 800381a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800381e:	4620      	mov	r0, r4
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	1cc4      	adds	r4, r0, #3
 8003824:	f024 0403 	bic.w	r4, r4, #3
 8003828:	42a0      	cmp	r0, r4
 800382a:	d0f8      	beq.n	800381e <sbrk_aligned+0x22>
 800382c:	1a21      	subs	r1, r4, r0
 800382e:	4628      	mov	r0, r5
 8003830:	f000 fb92 	bl	8003f58 <_sbrk_r>
 8003834:	3001      	adds	r0, #1
 8003836:	d1f2      	bne.n	800381e <sbrk_aligned+0x22>
 8003838:	e7ef      	b.n	800381a <sbrk_aligned+0x1e>
 800383a:	bf00      	nop
 800383c:	20000200 	.word	0x20000200

08003840 <_malloc_r>:
 8003840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003844:	1ccd      	adds	r5, r1, #3
 8003846:	f025 0503 	bic.w	r5, r5, #3
 800384a:	3508      	adds	r5, #8
 800384c:	2d0c      	cmp	r5, #12
 800384e:	bf38      	it	cc
 8003850:	250c      	movcc	r5, #12
 8003852:	2d00      	cmp	r5, #0
 8003854:	4606      	mov	r6, r0
 8003856:	db01      	blt.n	800385c <_malloc_r+0x1c>
 8003858:	42a9      	cmp	r1, r5
 800385a:	d904      	bls.n	8003866 <_malloc_r+0x26>
 800385c:	230c      	movs	r3, #12
 800385e:	6033      	str	r3, [r6, #0]
 8003860:	2000      	movs	r0, #0
 8003862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800393c <_malloc_r+0xfc>
 800386a:	f000 f869 	bl	8003940 <__malloc_lock>
 800386e:	f8d8 3000 	ldr.w	r3, [r8]
 8003872:	461c      	mov	r4, r3
 8003874:	bb44      	cbnz	r4, 80038c8 <_malloc_r+0x88>
 8003876:	4629      	mov	r1, r5
 8003878:	4630      	mov	r0, r6
 800387a:	f7ff ffbf 	bl	80037fc <sbrk_aligned>
 800387e:	1c43      	adds	r3, r0, #1
 8003880:	4604      	mov	r4, r0
 8003882:	d158      	bne.n	8003936 <_malloc_r+0xf6>
 8003884:	f8d8 4000 	ldr.w	r4, [r8]
 8003888:	4627      	mov	r7, r4
 800388a:	2f00      	cmp	r7, #0
 800388c:	d143      	bne.n	8003916 <_malloc_r+0xd6>
 800388e:	2c00      	cmp	r4, #0
 8003890:	d04b      	beq.n	800392a <_malloc_r+0xea>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	4639      	mov	r1, r7
 8003896:	4630      	mov	r0, r6
 8003898:	eb04 0903 	add.w	r9, r4, r3
 800389c:	f000 fb5c 	bl	8003f58 <_sbrk_r>
 80038a0:	4581      	cmp	r9, r0
 80038a2:	d142      	bne.n	800392a <_malloc_r+0xea>
 80038a4:	6821      	ldr	r1, [r4, #0]
 80038a6:	1a6d      	subs	r5, r5, r1
 80038a8:	4629      	mov	r1, r5
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff ffa6 	bl	80037fc <sbrk_aligned>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d03a      	beq.n	800392a <_malloc_r+0xea>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	442b      	add	r3, r5
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	f8d8 3000 	ldr.w	r3, [r8]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	bb62      	cbnz	r2, 800391c <_malloc_r+0xdc>
 80038c2:	f8c8 7000 	str.w	r7, [r8]
 80038c6:	e00f      	b.n	80038e8 <_malloc_r+0xa8>
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	1b52      	subs	r2, r2, r5
 80038cc:	d420      	bmi.n	8003910 <_malloc_r+0xd0>
 80038ce:	2a0b      	cmp	r2, #11
 80038d0:	d917      	bls.n	8003902 <_malloc_r+0xc2>
 80038d2:	1961      	adds	r1, r4, r5
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	6025      	str	r5, [r4, #0]
 80038d8:	bf18      	it	ne
 80038da:	6059      	strne	r1, [r3, #4]
 80038dc:	6863      	ldr	r3, [r4, #4]
 80038de:	bf08      	it	eq
 80038e0:	f8c8 1000 	streq.w	r1, [r8]
 80038e4:	5162      	str	r2, [r4, r5]
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	4630      	mov	r0, r6
 80038ea:	f000 f82f 	bl	800394c <__malloc_unlock>
 80038ee:	f104 000b 	add.w	r0, r4, #11
 80038f2:	1d23      	adds	r3, r4, #4
 80038f4:	f020 0007 	bic.w	r0, r0, #7
 80038f8:	1ac2      	subs	r2, r0, r3
 80038fa:	bf1c      	itt	ne
 80038fc:	1a1b      	subne	r3, r3, r0
 80038fe:	50a3      	strne	r3, [r4, r2]
 8003900:	e7af      	b.n	8003862 <_malloc_r+0x22>
 8003902:	6862      	ldr	r2, [r4, #4]
 8003904:	42a3      	cmp	r3, r4
 8003906:	bf0c      	ite	eq
 8003908:	f8c8 2000 	streq.w	r2, [r8]
 800390c:	605a      	strne	r2, [r3, #4]
 800390e:	e7eb      	b.n	80038e8 <_malloc_r+0xa8>
 8003910:	4623      	mov	r3, r4
 8003912:	6864      	ldr	r4, [r4, #4]
 8003914:	e7ae      	b.n	8003874 <_malloc_r+0x34>
 8003916:	463c      	mov	r4, r7
 8003918:	687f      	ldr	r7, [r7, #4]
 800391a:	e7b6      	b.n	800388a <_malloc_r+0x4a>
 800391c:	461a      	mov	r2, r3
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	42a3      	cmp	r3, r4
 8003922:	d1fb      	bne.n	800391c <_malloc_r+0xdc>
 8003924:	2300      	movs	r3, #0
 8003926:	6053      	str	r3, [r2, #4]
 8003928:	e7de      	b.n	80038e8 <_malloc_r+0xa8>
 800392a:	230c      	movs	r3, #12
 800392c:	6033      	str	r3, [r6, #0]
 800392e:	4630      	mov	r0, r6
 8003930:	f000 f80c 	bl	800394c <__malloc_unlock>
 8003934:	e794      	b.n	8003860 <_malloc_r+0x20>
 8003936:	6005      	str	r5, [r0, #0]
 8003938:	e7d6      	b.n	80038e8 <_malloc_r+0xa8>
 800393a:	bf00      	nop
 800393c:	20000204 	.word	0x20000204

08003940 <__malloc_lock>:
 8003940:	4801      	ldr	r0, [pc, #4]	@ (8003948 <__malloc_lock+0x8>)
 8003942:	f7ff bf0f 	b.w	8003764 <__retarget_lock_acquire_recursive>
 8003946:	bf00      	nop
 8003948:	200001fc 	.word	0x200001fc

0800394c <__malloc_unlock>:
 800394c:	4801      	ldr	r0, [pc, #4]	@ (8003954 <__malloc_unlock+0x8>)
 800394e:	f7ff bf0a 	b.w	8003766 <__retarget_lock_release_recursive>
 8003952:	bf00      	nop
 8003954:	200001fc 	.word	0x200001fc

08003958 <__ssputs_r>:
 8003958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	688e      	ldr	r6, [r1, #8]
 800395e:	461f      	mov	r7, r3
 8003960:	42be      	cmp	r6, r7
 8003962:	680b      	ldr	r3, [r1, #0]
 8003964:	4682      	mov	sl, r0
 8003966:	460c      	mov	r4, r1
 8003968:	4690      	mov	r8, r2
 800396a:	d82d      	bhi.n	80039c8 <__ssputs_r+0x70>
 800396c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003970:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003974:	d026      	beq.n	80039c4 <__ssputs_r+0x6c>
 8003976:	6965      	ldr	r5, [r4, #20]
 8003978:	6909      	ldr	r1, [r1, #16]
 800397a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800397e:	eba3 0901 	sub.w	r9, r3, r1
 8003982:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003986:	1c7b      	adds	r3, r7, #1
 8003988:	444b      	add	r3, r9
 800398a:	106d      	asrs	r5, r5, #1
 800398c:	429d      	cmp	r5, r3
 800398e:	bf38      	it	cc
 8003990:	461d      	movcc	r5, r3
 8003992:	0553      	lsls	r3, r2, #21
 8003994:	d527      	bpl.n	80039e6 <__ssputs_r+0x8e>
 8003996:	4629      	mov	r1, r5
 8003998:	f7ff ff52 	bl	8003840 <_malloc_r>
 800399c:	4606      	mov	r6, r0
 800399e:	b360      	cbz	r0, 80039fa <__ssputs_r+0xa2>
 80039a0:	6921      	ldr	r1, [r4, #16]
 80039a2:	464a      	mov	r2, r9
 80039a4:	f000 fae8 	bl	8003f78 <memcpy>
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b2:	81a3      	strh	r3, [r4, #12]
 80039b4:	6126      	str	r6, [r4, #16]
 80039b6:	6165      	str	r5, [r4, #20]
 80039b8:	444e      	add	r6, r9
 80039ba:	eba5 0509 	sub.w	r5, r5, r9
 80039be:	6026      	str	r6, [r4, #0]
 80039c0:	60a5      	str	r5, [r4, #8]
 80039c2:	463e      	mov	r6, r7
 80039c4:	42be      	cmp	r6, r7
 80039c6:	d900      	bls.n	80039ca <__ssputs_r+0x72>
 80039c8:	463e      	mov	r6, r7
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	4632      	mov	r2, r6
 80039ce:	4641      	mov	r1, r8
 80039d0:	f000 faa8 	bl	8003f24 <memmove>
 80039d4:	68a3      	ldr	r3, [r4, #8]
 80039d6:	1b9b      	subs	r3, r3, r6
 80039d8:	60a3      	str	r3, [r4, #8]
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	4433      	add	r3, r6
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	2000      	movs	r0, #0
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	462a      	mov	r2, r5
 80039e8:	f000 fad4 	bl	8003f94 <_realloc_r>
 80039ec:	4606      	mov	r6, r0
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d1e0      	bne.n	80039b4 <__ssputs_r+0x5c>
 80039f2:	6921      	ldr	r1, [r4, #16]
 80039f4:	4650      	mov	r0, sl
 80039f6:	f7ff feb7 	bl	8003768 <_free_r>
 80039fa:	230c      	movs	r3, #12
 80039fc:	f8ca 3000 	str.w	r3, [sl]
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a0c:	e7e9      	b.n	80039e2 <__ssputs_r+0x8a>
	...

08003a10 <_svfiprintf_r>:
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	4698      	mov	r8, r3
 8003a16:	898b      	ldrh	r3, [r1, #12]
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	b09d      	sub	sp, #116	@ 0x74
 8003a1c:	4607      	mov	r7, r0
 8003a1e:	460d      	mov	r5, r1
 8003a20:	4614      	mov	r4, r2
 8003a22:	d510      	bpl.n	8003a46 <_svfiprintf_r+0x36>
 8003a24:	690b      	ldr	r3, [r1, #16]
 8003a26:	b973      	cbnz	r3, 8003a46 <_svfiprintf_r+0x36>
 8003a28:	2140      	movs	r1, #64	@ 0x40
 8003a2a:	f7ff ff09 	bl	8003840 <_malloc_r>
 8003a2e:	6028      	str	r0, [r5, #0]
 8003a30:	6128      	str	r0, [r5, #16]
 8003a32:	b930      	cbnz	r0, 8003a42 <_svfiprintf_r+0x32>
 8003a34:	230c      	movs	r3, #12
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a3c:	b01d      	add	sp, #116	@ 0x74
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a42:	2340      	movs	r3, #64	@ 0x40
 8003a44:	616b      	str	r3, [r5, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a54:	2330      	movs	r3, #48	@ 0x30
 8003a56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bf4 <_svfiprintf_r+0x1e4>
 8003a5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a5e:	f04f 0901 	mov.w	r9, #1
 8003a62:	4623      	mov	r3, r4
 8003a64:	469a      	mov	sl, r3
 8003a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a6a:	b10a      	cbz	r2, 8003a70 <_svfiprintf_r+0x60>
 8003a6c:	2a25      	cmp	r2, #37	@ 0x25
 8003a6e:	d1f9      	bne.n	8003a64 <_svfiprintf_r+0x54>
 8003a70:	ebba 0b04 	subs.w	fp, sl, r4
 8003a74:	d00b      	beq.n	8003a8e <_svfiprintf_r+0x7e>
 8003a76:	465b      	mov	r3, fp
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	f7ff ff6b 	bl	8003958 <__ssputs_r>
 8003a82:	3001      	adds	r0, #1
 8003a84:	f000 80a7 	beq.w	8003bd6 <_svfiprintf_r+0x1c6>
 8003a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a8a:	445a      	add	r2, fp
 8003a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 809f 	beq.w	8003bd6 <_svfiprintf_r+0x1c6>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa2:	f10a 0a01 	add.w	sl, sl, #1
 8003aa6:	9304      	str	r3, [sp, #16]
 8003aa8:	9307      	str	r3, [sp, #28]
 8003aaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ab0:	4654      	mov	r4, sl
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab8:	484e      	ldr	r0, [pc, #312]	@ (8003bf4 <_svfiprintf_r+0x1e4>)
 8003aba:	f7fc fbe9 	bl	8000290 <memchr>
 8003abe:	9a04      	ldr	r2, [sp, #16]
 8003ac0:	b9d8      	cbnz	r0, 8003afa <_svfiprintf_r+0xea>
 8003ac2:	06d0      	lsls	r0, r2, #27
 8003ac4:	bf44      	itt	mi
 8003ac6:	2320      	movmi	r3, #32
 8003ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003acc:	0711      	lsls	r1, r2, #28
 8003ace:	bf44      	itt	mi
 8003ad0:	232b      	movmi	r3, #43	@ 0x2b
 8003ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8003ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8003adc:	d015      	beq.n	8003b0a <_svfiprintf_r+0xfa>
 8003ade:	9a07      	ldr	r2, [sp, #28]
 8003ae0:	4654      	mov	r4, sl
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f04f 0c0a 	mov.w	ip, #10
 8003ae8:	4621      	mov	r1, r4
 8003aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aee:	3b30      	subs	r3, #48	@ 0x30
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	d94b      	bls.n	8003b8c <_svfiprintf_r+0x17c>
 8003af4:	b1b0      	cbz	r0, 8003b24 <_svfiprintf_r+0x114>
 8003af6:	9207      	str	r2, [sp, #28]
 8003af8:	e014      	b.n	8003b24 <_svfiprintf_r+0x114>
 8003afa:	eba0 0308 	sub.w	r3, r0, r8
 8003afe:	fa09 f303 	lsl.w	r3, r9, r3
 8003b02:	4313      	orrs	r3, r2
 8003b04:	9304      	str	r3, [sp, #16]
 8003b06:	46a2      	mov	sl, r4
 8003b08:	e7d2      	b.n	8003ab0 <_svfiprintf_r+0xa0>
 8003b0a:	9b03      	ldr	r3, [sp, #12]
 8003b0c:	1d19      	adds	r1, r3, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	9103      	str	r1, [sp, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bfbb      	ittet	lt
 8003b16:	425b      	neglt	r3, r3
 8003b18:	f042 0202 	orrlt.w	r2, r2, #2
 8003b1c:	9307      	strge	r3, [sp, #28]
 8003b1e:	9307      	strlt	r3, [sp, #28]
 8003b20:	bfb8      	it	lt
 8003b22:	9204      	strlt	r2, [sp, #16]
 8003b24:	7823      	ldrb	r3, [r4, #0]
 8003b26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b28:	d10a      	bne.n	8003b40 <_svfiprintf_r+0x130>
 8003b2a:	7863      	ldrb	r3, [r4, #1]
 8003b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b2e:	d132      	bne.n	8003b96 <_svfiprintf_r+0x186>
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	1d1a      	adds	r2, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	9203      	str	r2, [sp, #12]
 8003b38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b3c:	3402      	adds	r4, #2
 8003b3e:	9305      	str	r3, [sp, #20]
 8003b40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c04 <_svfiprintf_r+0x1f4>
 8003b44:	7821      	ldrb	r1, [r4, #0]
 8003b46:	2203      	movs	r2, #3
 8003b48:	4650      	mov	r0, sl
 8003b4a:	f7fc fba1 	bl	8000290 <memchr>
 8003b4e:	b138      	cbz	r0, 8003b60 <_svfiprintf_r+0x150>
 8003b50:	9b04      	ldr	r3, [sp, #16]
 8003b52:	eba0 000a 	sub.w	r0, r0, sl
 8003b56:	2240      	movs	r2, #64	@ 0x40
 8003b58:	4082      	lsls	r2, r0
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	3401      	adds	r4, #1
 8003b5e:	9304      	str	r3, [sp, #16]
 8003b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b64:	4824      	ldr	r0, [pc, #144]	@ (8003bf8 <_svfiprintf_r+0x1e8>)
 8003b66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b6a:	2206      	movs	r2, #6
 8003b6c:	f7fc fb90 	bl	8000290 <memchr>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d036      	beq.n	8003be2 <_svfiprintf_r+0x1d2>
 8003b74:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <_svfiprintf_r+0x1ec>)
 8003b76:	bb1b      	cbnz	r3, 8003bc0 <_svfiprintf_r+0x1b0>
 8003b78:	9b03      	ldr	r3, [sp, #12]
 8003b7a:	3307      	adds	r3, #7
 8003b7c:	f023 0307 	bic.w	r3, r3, #7
 8003b80:	3308      	adds	r3, #8
 8003b82:	9303      	str	r3, [sp, #12]
 8003b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b86:	4433      	add	r3, r6
 8003b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b8a:	e76a      	b.n	8003a62 <_svfiprintf_r+0x52>
 8003b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b90:	460c      	mov	r4, r1
 8003b92:	2001      	movs	r0, #1
 8003b94:	e7a8      	b.n	8003ae8 <_svfiprintf_r+0xd8>
 8003b96:	2300      	movs	r3, #0
 8003b98:	3401      	adds	r4, #1
 8003b9a:	9305      	str	r3, [sp, #20]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f04f 0c0a 	mov.w	ip, #10
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ba8:	3a30      	subs	r2, #48	@ 0x30
 8003baa:	2a09      	cmp	r2, #9
 8003bac:	d903      	bls.n	8003bb6 <_svfiprintf_r+0x1a6>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0c6      	beq.n	8003b40 <_svfiprintf_r+0x130>
 8003bb2:	9105      	str	r1, [sp, #20]
 8003bb4:	e7c4      	b.n	8003b40 <_svfiprintf_r+0x130>
 8003bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bba:	4604      	mov	r4, r0
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e7f0      	b.n	8003ba2 <_svfiprintf_r+0x192>
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <_svfiprintf_r+0x1f0>)
 8003bc8:	a904      	add	r1, sp, #16
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	1c42      	adds	r2, r0, #1
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	d1d6      	bne.n	8003b84 <_svfiprintf_r+0x174>
 8003bd6:	89ab      	ldrh	r3, [r5, #12]
 8003bd8:	065b      	lsls	r3, r3, #25
 8003bda:	f53f af2d 	bmi.w	8003a38 <_svfiprintf_r+0x28>
 8003bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003be0:	e72c      	b.n	8003a3c <_svfiprintf_r+0x2c>
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <_svfiprintf_r+0x1f0>)
 8003bea:	a904      	add	r1, sp, #16
 8003bec:	4638      	mov	r0, r7
 8003bee:	f000 f879 	bl	8003ce4 <_printf_i>
 8003bf2:	e7ed      	b.n	8003bd0 <_svfiprintf_r+0x1c0>
 8003bf4:	080161b4 	.word	0x080161b4
 8003bf8:	080161be 	.word	0x080161be
 8003bfc:	00000000 	.word	0x00000000
 8003c00:	08003959 	.word	0x08003959
 8003c04:	080161ba 	.word	0x080161ba

08003c08 <_printf_common>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	4698      	mov	r8, r3
 8003c10:	688a      	ldr	r2, [r1, #8]
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfb8      	it	lt
 8003c1c:	4613      	movlt	r3, r2
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c24:	4607      	mov	r7, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	b10a      	cbz	r2, 8003c2e <_printf_common+0x26>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	0699      	lsls	r1, r3, #26
 8003c32:	bf42      	ittt	mi
 8003c34:	6833      	ldrmi	r3, [r6, #0]
 8003c36:	3302      	addmi	r3, #2
 8003c38:	6033      	strmi	r3, [r6, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	f015 0506 	ands.w	r5, r5, #6
 8003c40:	d106      	bne.n	8003c50 <_printf_common+0x48>
 8003c42:	f104 0a19 	add.w	sl, r4, #25
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	6832      	ldr	r2, [r6, #0]
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc26      	bgt.n	8003c9e <_printf_common+0x96>
 8003c50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	3b00      	subs	r3, #0
 8003c58:	bf18      	it	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d42b      	bmi.n	8003cb8 <_printf_common+0xb0>
 8003c60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c64:	4641      	mov	r1, r8
 8003c66:	4638      	mov	r0, r7
 8003c68:	47c8      	blx	r9
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d01e      	beq.n	8003cac <_printf_common+0xa4>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf02      	ittt	eq
 8003c7a:	68e5      	ldreq	r5, [r4, #12]
 8003c7c:	6833      	ldreq	r3, [r6, #0]
 8003c7e:	1aed      	subeq	r5, r5, r3
 8003c80:	68a3      	ldr	r3, [r4, #8]
 8003c82:	bf0c      	ite	eq
 8003c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c88:	2500      	movne	r5, #0
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	bfc4      	itt	gt
 8003c8e:	1a9b      	subgt	r3, r3, r2
 8003c90:	18ed      	addgt	r5, r5, r3
 8003c92:	2600      	movs	r6, #0
 8003c94:	341a      	adds	r4, #26
 8003c96:	42b5      	cmp	r5, r6
 8003c98:	d11a      	bne.n	8003cd0 <_printf_common+0xc8>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e008      	b.n	8003cb0 <_printf_common+0xa8>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4652      	mov	r2, sl
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	47c8      	blx	r9
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d103      	bne.n	8003cb4 <_printf_common+0xac>
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	e7c6      	b.n	8003c46 <_printf_common+0x3e>
 8003cb8:	18e1      	adds	r1, r4, r3
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	2030      	movs	r0, #48	@ 0x30
 8003cbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cc2:	4422      	add	r2, r4
 8003cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ccc:	3302      	adds	r3, #2
 8003cce:	e7c7      	b.n	8003c60 <_printf_common+0x58>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	47c8      	blx	r9
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d0e6      	beq.n	8003cac <_printf_common+0xa4>
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7d9      	b.n	8003c96 <_printf_common+0x8e>
	...

08003ce4 <_printf_i>:
 8003ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	7e0f      	ldrb	r7, [r1, #24]
 8003cea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cec:	2f78      	cmp	r7, #120	@ 0x78
 8003cee:	4691      	mov	r9, r2
 8003cf0:	4680      	mov	r8, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cfa:	d807      	bhi.n	8003d0c <_printf_i+0x28>
 8003cfc:	2f62      	cmp	r7, #98	@ 0x62
 8003cfe:	d80a      	bhi.n	8003d16 <_printf_i+0x32>
 8003d00:	2f00      	cmp	r7, #0
 8003d02:	f000 80d2 	beq.w	8003eaa <_printf_i+0x1c6>
 8003d06:	2f58      	cmp	r7, #88	@ 0x58
 8003d08:	f000 80b9 	beq.w	8003e7e <_printf_i+0x19a>
 8003d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d14:	e03a      	b.n	8003d8c <_printf_i+0xa8>
 8003d16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d1a:	2b15      	cmp	r3, #21
 8003d1c:	d8f6      	bhi.n	8003d0c <_printf_i+0x28>
 8003d1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d24 <_printf_i+0x40>)
 8003d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d24:	08003d7d 	.word	0x08003d7d
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d0d 	.word	0x08003d0d
 8003d30:	08003d0d 	.word	0x08003d0d
 8003d34:	08003d0d 	.word	0x08003d0d
 8003d38:	08003d0d 	.word	0x08003d0d
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d0d 	.word	0x08003d0d
 8003d44:	08003d0d 	.word	0x08003d0d
 8003d48:	08003d0d 	.word	0x08003d0d
 8003d4c:	08003d0d 	.word	0x08003d0d
 8003d50:	08003e91 	.word	0x08003e91
 8003d54:	08003dbb 	.word	0x08003dbb
 8003d58:	08003e4b 	.word	0x08003e4b
 8003d5c:	08003d0d 	.word	0x08003d0d
 8003d60:	08003d0d 	.word	0x08003d0d
 8003d64:	08003eb3 	.word	0x08003eb3
 8003d68:	08003d0d 	.word	0x08003d0d
 8003d6c:	08003dbb 	.word	0x08003dbb
 8003d70:	08003d0d 	.word	0x08003d0d
 8003d74:	08003d0d 	.word	0x08003d0d
 8003d78:	08003e53 	.word	0x08003e53
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6032      	str	r2, [r6, #0]
 8003d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e09d      	b.n	8003ecc <_printf_i+0x1e8>
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	6820      	ldr	r0, [r4, #0]
 8003d94:	1d19      	adds	r1, r3, #4
 8003d96:	6031      	str	r1, [r6, #0]
 8003d98:	0606      	lsls	r6, r0, #24
 8003d9a:	d501      	bpl.n	8003da0 <_printf_i+0xbc>
 8003d9c:	681d      	ldr	r5, [r3, #0]
 8003d9e:	e003      	b.n	8003da8 <_printf_i+0xc4>
 8003da0:	0645      	lsls	r5, r0, #25
 8003da2:	d5fb      	bpl.n	8003d9c <_printf_i+0xb8>
 8003da4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	da03      	bge.n	8003db4 <_printf_i+0xd0>
 8003dac:	232d      	movs	r3, #45	@ 0x2d
 8003dae:	426d      	negs	r5, r5
 8003db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db4:	4859      	ldr	r0, [pc, #356]	@ (8003f1c <_printf_i+0x238>)
 8003db6:	230a      	movs	r3, #10
 8003db8:	e011      	b.n	8003dde <_printf_i+0xfa>
 8003dba:	6821      	ldr	r1, [r4, #0]
 8003dbc:	6833      	ldr	r3, [r6, #0]
 8003dbe:	0608      	lsls	r0, r1, #24
 8003dc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dc4:	d402      	bmi.n	8003dcc <_printf_i+0xe8>
 8003dc6:	0649      	lsls	r1, r1, #25
 8003dc8:	bf48      	it	mi
 8003dca:	b2ad      	uxthmi	r5, r5
 8003dcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dce:	4853      	ldr	r0, [pc, #332]	@ (8003f1c <_printf_i+0x238>)
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	bf14      	ite	ne
 8003dd4:	230a      	movne	r3, #10
 8003dd6:	2308      	moveq	r3, #8
 8003dd8:	2100      	movs	r1, #0
 8003dda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dde:	6866      	ldr	r6, [r4, #4]
 8003de0:	60a6      	str	r6, [r4, #8]
 8003de2:	2e00      	cmp	r6, #0
 8003de4:	bfa2      	ittt	ge
 8003de6:	6821      	ldrge	r1, [r4, #0]
 8003de8:	f021 0104 	bicge.w	r1, r1, #4
 8003dec:	6021      	strge	r1, [r4, #0]
 8003dee:	b90d      	cbnz	r5, 8003df4 <_printf_i+0x110>
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	d04b      	beq.n	8003e8c <_printf_i+0x1a8>
 8003df4:	4616      	mov	r6, r2
 8003df6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dfa:	fb03 5711 	mls	r7, r3, r1, r5
 8003dfe:	5dc7      	ldrb	r7, [r0, r7]
 8003e00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e04:	462f      	mov	r7, r5
 8003e06:	42bb      	cmp	r3, r7
 8003e08:	460d      	mov	r5, r1
 8003e0a:	d9f4      	bls.n	8003df6 <_printf_i+0x112>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d10b      	bne.n	8003e28 <_printf_i+0x144>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	07df      	lsls	r7, r3, #31
 8003e14:	d508      	bpl.n	8003e28 <_printf_i+0x144>
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	6861      	ldr	r1, [r4, #4]
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	bfde      	ittt	le
 8003e1e:	2330      	movle	r3, #48	@ 0x30
 8003e20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e24:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003e28:	1b92      	subs	r2, r2, r6
 8003e2a:	6122      	str	r2, [r4, #16]
 8003e2c:	f8cd a000 	str.w	sl, [sp]
 8003e30:	464b      	mov	r3, r9
 8003e32:	aa03      	add	r2, sp, #12
 8003e34:	4621      	mov	r1, r4
 8003e36:	4640      	mov	r0, r8
 8003e38:	f7ff fee6 	bl	8003c08 <_printf_common>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d14a      	bne.n	8003ed6 <_printf_i+0x1f2>
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e44:	b004      	add	sp, #16
 8003e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	f043 0320 	orr.w	r3, r3, #32
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	4833      	ldr	r0, [pc, #204]	@ (8003f20 <_printf_i+0x23c>)
 8003e54:	2778      	movs	r7, #120	@ 0x78
 8003e56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	6831      	ldr	r1, [r6, #0]
 8003e5e:	061f      	lsls	r7, r3, #24
 8003e60:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e64:	d402      	bmi.n	8003e6c <_printf_i+0x188>
 8003e66:	065f      	lsls	r7, r3, #25
 8003e68:	bf48      	it	mi
 8003e6a:	b2ad      	uxthmi	r5, r5
 8003e6c:	6031      	str	r1, [r6, #0]
 8003e6e:	07d9      	lsls	r1, r3, #31
 8003e70:	bf44      	itt	mi
 8003e72:	f043 0320 	orrmi.w	r3, r3, #32
 8003e76:	6023      	strmi	r3, [r4, #0]
 8003e78:	b11d      	cbz	r5, 8003e82 <_printf_i+0x19e>
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	e7ac      	b.n	8003dd8 <_printf_i+0xf4>
 8003e7e:	4827      	ldr	r0, [pc, #156]	@ (8003f1c <_printf_i+0x238>)
 8003e80:	e7e9      	b.n	8003e56 <_printf_i+0x172>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	f023 0320 	bic.w	r3, r3, #32
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	e7f6      	b.n	8003e7a <_printf_i+0x196>
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	e7bd      	b.n	8003e0c <_printf_i+0x128>
 8003e90:	6833      	ldr	r3, [r6, #0]
 8003e92:	6825      	ldr	r5, [r4, #0]
 8003e94:	6961      	ldr	r1, [r4, #20]
 8003e96:	1d18      	adds	r0, r3, #4
 8003e98:	6030      	str	r0, [r6, #0]
 8003e9a:	062e      	lsls	r6, r5, #24
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	d501      	bpl.n	8003ea4 <_printf_i+0x1c0>
 8003ea0:	6019      	str	r1, [r3, #0]
 8003ea2:	e002      	b.n	8003eaa <_printf_i+0x1c6>
 8003ea4:	0668      	lsls	r0, r5, #25
 8003ea6:	d5fb      	bpl.n	8003ea0 <_printf_i+0x1bc>
 8003ea8:	8019      	strh	r1, [r3, #0]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	6123      	str	r3, [r4, #16]
 8003eae:	4616      	mov	r6, r2
 8003eb0:	e7bc      	b.n	8003e2c <_printf_i+0x148>
 8003eb2:	6833      	ldr	r3, [r6, #0]
 8003eb4:	1d1a      	adds	r2, r3, #4
 8003eb6:	6032      	str	r2, [r6, #0]
 8003eb8:	681e      	ldr	r6, [r3, #0]
 8003eba:	6862      	ldr	r2, [r4, #4]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f7fc f9e6 	bl	8000290 <memchr>
 8003ec4:	b108      	cbz	r0, 8003eca <_printf_i+0x1e6>
 8003ec6:	1b80      	subs	r0, r0, r6
 8003ec8:	6060      	str	r0, [r4, #4]
 8003eca:	6863      	ldr	r3, [r4, #4]
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed4:	e7aa      	b.n	8003e2c <_printf_i+0x148>
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	4632      	mov	r2, r6
 8003eda:	4649      	mov	r1, r9
 8003edc:	4640      	mov	r0, r8
 8003ede:	47d0      	blx	sl
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d0ad      	beq.n	8003e40 <_printf_i+0x15c>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	079b      	lsls	r3, r3, #30
 8003ee8:	d413      	bmi.n	8003f12 <_printf_i+0x22e>
 8003eea:	68e0      	ldr	r0, [r4, #12]
 8003eec:	9b03      	ldr	r3, [sp, #12]
 8003eee:	4298      	cmp	r0, r3
 8003ef0:	bfb8      	it	lt
 8003ef2:	4618      	movlt	r0, r3
 8003ef4:	e7a6      	b.n	8003e44 <_printf_i+0x160>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4632      	mov	r2, r6
 8003efa:	4649      	mov	r1, r9
 8003efc:	4640      	mov	r0, r8
 8003efe:	47d0      	blx	sl
 8003f00:	3001      	adds	r0, #1
 8003f02:	d09d      	beq.n	8003e40 <_printf_i+0x15c>
 8003f04:	3501      	adds	r5, #1
 8003f06:	68e3      	ldr	r3, [r4, #12]
 8003f08:	9903      	ldr	r1, [sp, #12]
 8003f0a:	1a5b      	subs	r3, r3, r1
 8003f0c:	42ab      	cmp	r3, r5
 8003f0e:	dcf2      	bgt.n	8003ef6 <_printf_i+0x212>
 8003f10:	e7eb      	b.n	8003eea <_printf_i+0x206>
 8003f12:	2500      	movs	r5, #0
 8003f14:	f104 0619 	add.w	r6, r4, #25
 8003f18:	e7f5      	b.n	8003f06 <_printf_i+0x222>
 8003f1a:	bf00      	nop
 8003f1c:	080161c5 	.word	0x080161c5
 8003f20:	080161d6 	.word	0x080161d6

08003f24 <memmove>:
 8003f24:	4288      	cmp	r0, r1
 8003f26:	b510      	push	{r4, lr}
 8003f28:	eb01 0402 	add.w	r4, r1, r2
 8003f2c:	d902      	bls.n	8003f34 <memmove+0x10>
 8003f2e:	4284      	cmp	r4, r0
 8003f30:	4623      	mov	r3, r4
 8003f32:	d807      	bhi.n	8003f44 <memmove+0x20>
 8003f34:	1e43      	subs	r3, r0, #1
 8003f36:	42a1      	cmp	r1, r4
 8003f38:	d008      	beq.n	8003f4c <memmove+0x28>
 8003f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f42:	e7f8      	b.n	8003f36 <memmove+0x12>
 8003f44:	4402      	add	r2, r0
 8003f46:	4601      	mov	r1, r0
 8003f48:	428a      	cmp	r2, r1
 8003f4a:	d100      	bne.n	8003f4e <memmove+0x2a>
 8003f4c:	bd10      	pop	{r4, pc}
 8003f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f56:	e7f7      	b.n	8003f48 <memmove+0x24>

08003f58 <_sbrk_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d06      	ldr	r5, [pc, #24]	@ (8003f74 <_sbrk_r+0x1c>)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	f7fd fc96 	bl	8001894 <_sbrk>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_sbrk_r+0x1a>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_sbrk_r+0x1a>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	200001f8 	.word	0x200001f8

08003f78 <memcpy>:
 8003f78:	440a      	add	r2, r1
 8003f7a:	4291      	cmp	r1, r2
 8003f7c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003f80:	d100      	bne.n	8003f84 <memcpy+0xc>
 8003f82:	4770      	bx	lr
 8003f84:	b510      	push	{r4, lr}
 8003f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f8e:	4291      	cmp	r1, r2
 8003f90:	d1f9      	bne.n	8003f86 <memcpy+0xe>
 8003f92:	bd10      	pop	{r4, pc}

08003f94 <_realloc_r>:
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	4680      	mov	r8, r0
 8003f9a:	4615      	mov	r5, r2
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	b921      	cbnz	r1, 8003faa <_realloc_r+0x16>
 8003fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	f7ff bc4b 	b.w	8003840 <_malloc_r>
 8003faa:	b92a      	cbnz	r2, 8003fb8 <_realloc_r+0x24>
 8003fac:	f7ff fbdc 	bl	8003768 <_free_r>
 8003fb0:	2400      	movs	r4, #0
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb8:	f000 f81a 	bl	8003ff0 <_malloc_usable_size_r>
 8003fbc:	4285      	cmp	r5, r0
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	d802      	bhi.n	8003fc8 <_realloc_r+0x34>
 8003fc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003fc6:	d8f4      	bhi.n	8003fb2 <_realloc_r+0x1e>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f7ff fc38 	bl	8003840 <_malloc_r>
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0ec      	beq.n	8003fb0 <_realloc_r+0x1c>
 8003fd6:	42b5      	cmp	r5, r6
 8003fd8:	462a      	mov	r2, r5
 8003fda:	4621      	mov	r1, r4
 8003fdc:	bf28      	it	cs
 8003fde:	4632      	movcs	r2, r6
 8003fe0:	f7ff ffca 	bl	8003f78 <memcpy>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f7ff fbbe 	bl	8003768 <_free_r>
 8003fec:	463c      	mov	r4, r7
 8003fee:	e7e0      	b.n	8003fb2 <_realloc_r+0x1e>

08003ff0 <_malloc_usable_size_r>:
 8003ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff4:	1f18      	subs	r0, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bfbc      	itt	lt
 8003ffa:	580b      	ldrlt	r3, [r1, r0]
 8003ffc:	18c0      	addlt	r0, r0, r3
 8003ffe:	4770      	bx	lr

08004000 <sqrt>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	ed2d 8b02 	vpush	{d8}
 8004006:	ec55 4b10 	vmov	r4, r5, d0
 800400a:	f000 f825 	bl	8004058 <__ieee754_sqrt>
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	eeb0 8a40 	vmov.f32	s16, s0
 800401a:	eef0 8a60 	vmov.f32	s17, s1
 800401e:	f7fc fddd 	bl	8000bdc <__aeabi_dcmpun>
 8004022:	b990      	cbnz	r0, 800404a <sqrt+0x4a>
 8004024:	2200      	movs	r2, #0
 8004026:	2300      	movs	r3, #0
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc fdae 	bl	8000b8c <__aeabi_dcmplt>
 8004030:	b158      	cbz	r0, 800404a <sqrt+0x4a>
 8004032:	f7ff fb6d 	bl	8003710 <__errno>
 8004036:	2321      	movs	r3, #33	@ 0x21
 8004038:	6003      	str	r3, [r0, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	2300      	movs	r3, #0
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f7fc fc5b 	bl	80008fc <__aeabi_ddiv>
 8004046:	ec41 0b18 	vmov	d8, r0, r1
 800404a:	eeb0 0a48 	vmov.f32	s0, s16
 800404e:	eef0 0a68 	vmov.f32	s1, s17
 8004052:	ecbd 8b02 	vpop	{d8}
 8004056:	bd38      	pop	{r3, r4, r5, pc}

08004058 <__ieee754_sqrt>:
 8004058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	4a68      	ldr	r2, [pc, #416]	@ (8004200 <__ieee754_sqrt+0x1a8>)
 800405e:	ec55 4b10 	vmov	r4, r5, d0
 8004062:	43aa      	bics	r2, r5
 8004064:	462b      	mov	r3, r5
 8004066:	4621      	mov	r1, r4
 8004068:	d110      	bne.n	800408c <__ieee754_sqrt+0x34>
 800406a:	4622      	mov	r2, r4
 800406c:	4620      	mov	r0, r4
 800406e:	4629      	mov	r1, r5
 8004070:	f7fc fb1a 	bl	80006a8 <__aeabi_dmul>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4620      	mov	r0, r4
 800407a:	4629      	mov	r1, r5
 800407c:	f7fc f95e 	bl	800033c <__adddf3>
 8004080:	4604      	mov	r4, r0
 8004082:	460d      	mov	r5, r1
 8004084:	ec45 4b10 	vmov	d0, r4, r5
 8004088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	2d00      	cmp	r5, #0
 800408e:	dc0e      	bgt.n	80040ae <__ieee754_sqrt+0x56>
 8004090:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004094:	4322      	orrs	r2, r4
 8004096:	d0f5      	beq.n	8004084 <__ieee754_sqrt+0x2c>
 8004098:	b19d      	cbz	r5, 80040c2 <__ieee754_sqrt+0x6a>
 800409a:	4622      	mov	r2, r4
 800409c:	4620      	mov	r0, r4
 800409e:	4629      	mov	r1, r5
 80040a0:	f7fc f94a 	bl	8000338 <__aeabi_dsub>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	f7fc fc28 	bl	80008fc <__aeabi_ddiv>
 80040ac:	e7e8      	b.n	8004080 <__ieee754_sqrt+0x28>
 80040ae:	152a      	asrs	r2, r5, #20
 80040b0:	d115      	bne.n	80040de <__ieee754_sqrt+0x86>
 80040b2:	2000      	movs	r0, #0
 80040b4:	e009      	b.n	80040ca <__ieee754_sqrt+0x72>
 80040b6:	0acb      	lsrs	r3, r1, #11
 80040b8:	3a15      	subs	r2, #21
 80040ba:	0549      	lsls	r1, r1, #21
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0fa      	beq.n	80040b6 <__ieee754_sqrt+0x5e>
 80040c0:	e7f7      	b.n	80040b2 <__ieee754_sqrt+0x5a>
 80040c2:	462a      	mov	r2, r5
 80040c4:	e7fa      	b.n	80040bc <__ieee754_sqrt+0x64>
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	3001      	adds	r0, #1
 80040ca:	02dc      	lsls	r4, r3, #11
 80040cc:	d5fb      	bpl.n	80040c6 <__ieee754_sqrt+0x6e>
 80040ce:	1e44      	subs	r4, r0, #1
 80040d0:	1b12      	subs	r2, r2, r4
 80040d2:	f1c0 0420 	rsb	r4, r0, #32
 80040d6:	fa21 f404 	lsr.w	r4, r1, r4
 80040da:	4323      	orrs	r3, r4
 80040dc:	4081      	lsls	r1, r0
 80040de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80040e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ea:	07d2      	lsls	r2, r2, #31
 80040ec:	bf5c      	itt	pl
 80040ee:	005b      	lslpl	r3, r3, #1
 80040f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80040f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80040f8:	bf58      	it	pl
 80040fa:	0049      	lslpl	r1, r1, #1
 80040fc:	2600      	movs	r6, #0
 80040fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004102:	106d      	asrs	r5, r5, #1
 8004104:	0049      	lsls	r1, r1, #1
 8004106:	2016      	movs	r0, #22
 8004108:	4632      	mov	r2, r6
 800410a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800410e:	1917      	adds	r7, r2, r4
 8004110:	429f      	cmp	r7, r3
 8004112:	bfde      	ittt	le
 8004114:	193a      	addle	r2, r7, r4
 8004116:	1bdb      	suble	r3, r3, r7
 8004118:	1936      	addle	r6, r6, r4
 800411a:	0fcf      	lsrs	r7, r1, #31
 800411c:	3801      	subs	r0, #1
 800411e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004122:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004126:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800412a:	d1f0      	bne.n	800410e <__ieee754_sqrt+0xb6>
 800412c:	4604      	mov	r4, r0
 800412e:	2720      	movs	r7, #32
 8004130:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004134:	429a      	cmp	r2, r3
 8004136:	eb00 0e0c 	add.w	lr, r0, ip
 800413a:	db02      	blt.n	8004142 <__ieee754_sqrt+0xea>
 800413c:	d113      	bne.n	8004166 <__ieee754_sqrt+0x10e>
 800413e:	458e      	cmp	lr, r1
 8004140:	d811      	bhi.n	8004166 <__ieee754_sqrt+0x10e>
 8004142:	f1be 0f00 	cmp.w	lr, #0
 8004146:	eb0e 000c 	add.w	r0, lr, ip
 800414a:	da42      	bge.n	80041d2 <__ieee754_sqrt+0x17a>
 800414c:	2800      	cmp	r0, #0
 800414e:	db40      	blt.n	80041d2 <__ieee754_sqrt+0x17a>
 8004150:	f102 0801 	add.w	r8, r2, #1
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	458e      	cmp	lr, r1
 8004158:	bf88      	it	hi
 800415a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800415e:	eba1 010e 	sub.w	r1, r1, lr
 8004162:	4464      	add	r4, ip
 8004164:	4642      	mov	r2, r8
 8004166:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800416a:	3f01      	subs	r7, #1
 800416c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004170:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004174:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004178:	d1dc      	bne.n	8004134 <__ieee754_sqrt+0xdc>
 800417a:	4319      	orrs	r1, r3
 800417c:	d01b      	beq.n	80041b6 <__ieee754_sqrt+0x15e>
 800417e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004204 <__ieee754_sqrt+0x1ac>
 8004182:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004208 <__ieee754_sqrt+0x1b0>
 8004186:	e9da 0100 	ldrd	r0, r1, [sl]
 800418a:	e9db 2300 	ldrd	r2, r3, [fp]
 800418e:	f7fc f8d3 	bl	8000338 <__aeabi_dsub>
 8004192:	e9da 8900 	ldrd	r8, r9, [sl]
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4640      	mov	r0, r8
 800419c:	4649      	mov	r1, r9
 800419e:	f7fc fcff 	bl	8000ba0 <__aeabi_dcmple>
 80041a2:	b140      	cbz	r0, 80041b6 <__ieee754_sqrt+0x15e>
 80041a4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80041a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80041ac:	e9db 2300 	ldrd	r2, r3, [fp]
 80041b0:	d111      	bne.n	80041d6 <__ieee754_sqrt+0x17e>
 80041b2:	3601      	adds	r6, #1
 80041b4:	463c      	mov	r4, r7
 80041b6:	1072      	asrs	r2, r6, #1
 80041b8:	0863      	lsrs	r3, r4, #1
 80041ba:	07f1      	lsls	r1, r6, #31
 80041bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80041c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80041c4:	bf48      	it	mi
 80041c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80041ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80041ce:	4618      	mov	r0, r3
 80041d0:	e756      	b.n	8004080 <__ieee754_sqrt+0x28>
 80041d2:	4690      	mov	r8, r2
 80041d4:	e7be      	b.n	8004154 <__ieee754_sqrt+0xfc>
 80041d6:	f7fc f8b1 	bl	800033c <__adddf3>
 80041da:	e9da 8900 	ldrd	r8, r9, [sl]
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4640      	mov	r0, r8
 80041e4:	4649      	mov	r1, r9
 80041e6:	f7fc fcd1 	bl	8000b8c <__aeabi_dcmplt>
 80041ea:	b120      	cbz	r0, 80041f6 <__ieee754_sqrt+0x19e>
 80041ec:	1ca0      	adds	r0, r4, #2
 80041ee:	bf08      	it	eq
 80041f0:	3601      	addeq	r6, #1
 80041f2:	3402      	adds	r4, #2
 80041f4:	e7df      	b.n	80041b6 <__ieee754_sqrt+0x15e>
 80041f6:	1c63      	adds	r3, r4, #1
 80041f8:	f023 0401 	bic.w	r4, r3, #1
 80041fc:	e7db      	b.n	80041b6 <__ieee754_sqrt+0x15e>
 80041fe:	bf00      	nop
 8004200:	7ff00000 	.word	0x7ff00000
 8004204:	20000080 	.word	0x20000080
 8004208:	20000078 	.word	0x20000078

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
