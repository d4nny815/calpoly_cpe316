
multimeter_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011fa8  08003530  08003530  00004530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154d8  080154d8  00017078  2**0
                  CONTENTS
  4 .ARM          00000008  080154d8  080154d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154e0  080154e0  00017078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154e0  080154e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080154e4  080154e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080154e8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000078  08015560  00017078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08015560  000171f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b215  00000000  00000000  000170a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207b  00000000  00000000  000222bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00024338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a3  00000000  00000000  00024af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256e7  00000000  00000000  00024f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bfb  00000000  00000000  0004a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e43ff  00000000  00000000  0005227d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0013667c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f6c  00000000  00000000  00136730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0013869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000046a3  00000000  00000000  001386fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000130  00000000  00000000  0013cd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003518 	.word	0x08003518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003518 	.word	0x08003518

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 021f 	and.w	r2, r3, #31
 8000348:	4907      	ldr	r1, [pc, #28]	@ (8000368 <__NVIC_EnableIRQ+0x38>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100

0800036c <ADC_pin_init>:
#include "ADC.h"

static volatile uint16_t value;
static volatile int flag;

void ADC_pin_init() {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000370:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <ADC_pin_init+0x3c>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	4a0c      	ldr	r2, [pc, #48]	@ (80003a8 <ADC_pin_init+0x3c>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOA->MODER |= GPIO_MODER_MODE0; // Analog mode
 800037c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000386:	f043 0303 	orr.w	r3, r3, #3
 800038a:	6013      	str	r3, [r2, #0]
    GPIOA->ASCR |= GPIO_ASCR_ASC0;  // Connect analog switch to ADC input
 800038c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000392:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	62d3      	str	r3, [r2, #44]	@ 0x2c

    return;
 800039c:	bf00      	nop
}
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <ADC_init>:


void ADC_init() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
    ADC_pin_init();
 80003b2:	f7ff ffdb 	bl	800036c <ADC_pin_init>

    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80003b6:	4b34      	ldr	r3, [pc, #208]	@ (8000488 <ADC_init+0xdc>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	4a33      	ldr	r2, [pc, #204]	@ (8000488 <ADC_init+0xdc>)
 80003bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 80003c2:	4b32      	ldr	r3, [pc, #200]	@ (800048c <ADC_init+0xe0>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	4a31      	ldr	r2, [pc, #196]	@ (800048c <ADC_init+0xe0>)
 80003c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003cc:	6093      	str	r3, [r2, #8]
    ADC1->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 80003ce:	4b30      	ldr	r3, [pc, #192]	@ (8000490 <ADC_init+0xe4>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000490 <ADC_init+0xe4>)
 80003d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80003d8:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 80003da:	4b2d      	ldr	r3, [pc, #180]	@ (8000490 <ADC_init+0xe4>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a2c      	ldr	r2, [pc, #176]	@ (8000490 <ADC_init+0xe4>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e4:	6093      	str	r3, [r2, #8]
    for (int _=0; _<40; _++); // wait for regulator to start up
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	e002      	b.n	80003f2 <ADC_init+0x46>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3301      	adds	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b27      	cmp	r3, #39	@ 0x27
 80003f6:	ddf9      	ble.n	80003ec <ADC_init+0x40>
    // ! for 4MHz but will work for higher freqs

    ADC1->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 80003f8:	4b25      	ldr	r3, [pc, #148]	@ (8000490 <ADC_init+0xe4>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <ADC_init+0xe4>)
 80003fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000402:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL; // start calibration
 8000404:	4b22      	ldr	r3, [pc, #136]	@ (8000490 <ADC_init+0xe4>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4a21      	ldr	r2, [pc, #132]	@ (8000490 <ADC_init+0xe4>)
 800040a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800040e:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000410:	bf00      	nop
 8000412:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <ADC_init+0xe4>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	2b00      	cmp	r3, #0
 8000418:	dbfb      	blt.n	8000412 <ADC_init+0x66>

    ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 800041a:	4b1d      	ldr	r3, [pc, #116]	@ (8000490 <ADC_init+0xe4>)
 800041c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000420:	4a1b      	ldr	r2, [pc, #108]	@ (8000490 <ADC_init+0xe4>)
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC1->ISR |= ADC_ISR_ADRDY; // clear ready flag
 800042a:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <ADC_init+0xe4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <ADC_init+0xe4>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6013      	str	r3, [r2, #0]
    ADC1->CR |= ADC_CR_ADEN; // enable ADC
 8000436:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <ADC_init+0xe4>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	4a15      	ldr	r2, [pc, #84]	@ (8000490 <ADC_init+0xe4>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000442:	bf00      	nop
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <ADC_init+0xe4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <ADC_init+0x98>

    // ADC1->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
    ADC1->OFR1 = (ADC_OFR1_OFFSET1_EN | 5 << ADC_OFR1_OFFSET1_CH_Pos | (3 << ADC_OFR1_OFFSET1_Pos)); // offset calibration
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <ADC_init+0xe4>)
 8000452:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <ADC_init+0xe8>)
 8000454:	661a      	str	r2, [r3, #96]	@ 0x60
    ADC1->CFGR = (ADC_CFGR_ALIGN); // single conversion, left-aligned data, 12-bit resolution
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <ADC_init+0xe4>)
 8000458:	2220      	movs	r2, #32
 800045a:	60da      	str	r2, [r3, #12]
    ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos); // one conversion in sequence
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <ADC_init+0xe4>)
 800045e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000462:	631a      	str	r2, [r3, #48]	@ 0x30
//    ADC1->SMPR1 = (4 << ADC_SMPR1_SMP5_Pos); // 47.5 clock sample on channel 5
    ADC1->SMPR1 = 0; // 2.5 clock sample on channel 5
 8000464:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <ADC_init+0xe4>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]

    ADC1->IER |= ADC_IER_EOCIE; // enable end-of-conversion interrupt
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <ADC_init+0xe4>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <ADC_init+0xe4>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	6053      	str	r3, [r2, #4]
    NVIC_EnableIRQ(ADC1_IRQn); // enable ADC interrupt
 8000476:	2012      	movs	r0, #18
 8000478:	f7ff ff5a 	bl	8000330 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800047c:	b662      	cpsie	i
}
 800047e:	bf00      	nop
    __enable_irq();

    return;
 8000480:	bf00      	nop
}
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	50040300 	.word	0x50040300
 8000490:	50040000 	.word	0x50040000
 8000494:	94000003 	.word	0x94000003

08000498 <ADC_to_mv>:

uint16_t ADC_to_mv(uint16_t val) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
    return val * VREF / ADC_REF;
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da01      	bge.n	80004b4 <ADC_to_mv+0x1c>
 80004b0:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80004b4:	131b      	asrs	r3, r3, #12
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	3b01      	subs	r3, #1
 80004ba:	b29b      	uxth	r3, r3

    // This from the linear calibration but I noticed better accuracy with the ideal conversion
     int32_t uv = val * MAGIC_CAL_X - MAGIC_CAL_Y;
     return uv > 0 ? uv / UV_TO_MV : 0;
 }
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
    value = ADC1->DR;
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <ADC1_2_IRQHandler+0x20>)
 80004ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <ADC1_2_IRQHandler+0x24>)
 80004d4:	801a      	strh	r2, [r3, #0]
    flag = 1;
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <ADC1_2_IRQHandler+0x28>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	50040000 	.word	0x50040000
 80004ec:	20000094 	.word	0x20000094
 80004f0:	20000098 	.word	0x20000098

080004f4 <get_ADC_val>:

uint16_t get_ADC_val() {
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
    return value;
 80004f8:	4b03      	ldr	r3, [pc, #12]	@ (8000508 <get_ADC_val+0x14>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	b29b      	uxth	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	20000094 	.word	0x20000094

0800050c <ADC_check_flag>:

int ADC_check_flag() {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
    return flag;
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <ADC_check_flag+0x14>)
 8000512:	681b      	ldr	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000098 	.word	0x20000098

08000524 <ADC_clear_flag>:

void ADC_clear_flag() {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
    flag = 0;
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <ADC_clear_flag+0x14>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]

    return;
 800052e:	bf00      	nop
}
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000098 	.word	0x20000098

0800053c <__NVIC_EnableIRQ>:
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db0b      	blt.n	8000566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 021f 	and.w	r2, r3, #31
 8000554:	4907      	ldr	r1, [pc, #28]	@ (8000574 <__NVIC_EnableIRQ+0x38>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	095b      	lsrs	r3, r3, #5
 800055c:	2001      	movs	r0, #1
 800055e:	fa00 f202 	lsl.w	r2, r0, r2
 8000562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000e100 	.word	0xe000e100

08000578 <main>:

// volatile uint32_t rms_ccr;

void SystemClock_Config(void);

int main(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	f5ad 4d90 	sub.w	sp, sp, #18432	@ 0x4800
 800057e:	b08c      	sub	sp, #48	@ 0x30
 8000580:	af00      	add	r7, sp, #0
    HAL_Init();
 8000582:	f000 fd98 	bl	80010b6 <HAL_Init>
    SystemClock_Config();
 8000586:	f000 fb88 	bl	8000c9a <SystemClock_Config>


    // * init  
    // helper led
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800058a:	4bca      	ldr	r3, [pc, #808]	@ (80008b4 <main+0x33c>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	4ac9      	ldr	r2, [pc, #804]	@ (80008b4 <main+0x33c>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2);
 8000596:	4bc8      	ldr	r3, [pc, #800]	@ (80008b8 <main+0x340>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4ac7      	ldr	r2, [pc, #796]	@ (80008b8 <main+0x340>)
 800059c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005a0:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0;
 80005a2:	4bc5      	ldr	r3, [pc, #788]	@ (80008b8 <main+0x340>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4ac4      	ldr	r2, [pc, #784]	@ (80008b8 <main+0x340>)
 80005a8:	f043 0315 	orr.w	r3, r3, #21
 80005ac:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2); ;
 80005ae:	4bc2      	ldr	r3, [pc, #776]	@ (80008b8 <main+0x340>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	4ac1      	ldr	r2, [pc, #772]	@ (80008b8 <main+0x340>)
 80005b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005b8:	60d3      	str	r3, [r2, #12]
    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2);
 80005ba:	4bbf      	ldr	r3, [pc, #764]	@ (80008b8 <main+0x340>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	4abe      	ldr	r2, [pc, #760]	@ (80008b8 <main+0x340>)
 80005c0:	f023 0307 	bic.w	r3, r3, #7
 80005c4:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1 | GPIO_OSPEEDR_OSPEED2;
 80005c6:	4bbc      	ldr	r3, [pc, #752]	@ (80008b8 <main+0x340>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	4abb      	ldr	r2, [pc, #748]	@ (80008b8 <main+0x340>)
 80005cc:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80005d0:	6093      	str	r3, [r2, #8]
    LED1_OFF();
 80005d2:	4bb9      	ldr	r3, [pc, #740]	@ (80008b8 <main+0x340>)
 80005d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005d8:	619a      	str	r2, [r3, #24]
    LED2_OFF();
 80005da:	4bb7      	ldr	r3, [pc, #732]	@ (80008b8 <main+0x340>)
 80005dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80005e0:	619a      	str	r2, [r3, #24]
    LED3_OFF();
 80005e2:	4bb5      	ldr	r3, [pc, #724]	@ (80008b8 <main+0x340>)
 80005e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005e8:	619a      	str	r2, [r3, #24]

    uart_init();
 80005ea:	f000 fcb1 	bl	8000f50 <uart_init>
    print_start_screen();
 80005ee:	f000 fab1 	bl	8000b54 <print_start_screen>

    ADC_init();
 80005f2:	f7ff fedb 	bl	80003ac <ADC_init>
    arm_rfft_instance_q15 rfft_instance;
    arm_status status = arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 80005f6:	f507 4090 	add.w	r0, r7, #18432	@ 0x4800
 80005fa:	f100 0008 	add.w	r0, r0, #8
 80005fe:	2301      	movs	r3, #1
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000606:	f001 fdfb 	bl	8002200 <arm_rfft_init_q15>
 800060a:	4603      	mov	r3, r0
 800060c:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000610:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 8000614:	7013      	strb	r3, [r2, #0]
    while (status != ARM_MATH_SUCCESS) {
 8000616:	e00f      	b.n	8000638 <main+0xc0>
        status = arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 8000618:	f507 4090 	add.w	r0, r7, #18432	@ 0x4800
 800061c:	f100 0008 	add.w	r0, r0, #8
 8000620:	2301      	movs	r3, #1
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000628:	f001 fdea 	bl	8002200 <arm_rfft_init_q15>
 800062c:	4603      	mov	r3, r0
 800062e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000632:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 8000636:	7013      	strb	r3, [r2, #0]
    while (status != ARM_MATH_SUCCESS) {
 8000638:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800063c:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 8000640:	f993 3000 	ldrsb.w	r3, [r3]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1e7      	bne.n	8000618 <main+0xa0>
    }

    timer_init();
 8000648:	f000 f9e6 	bl	8000a18 <timer_init>
    // * real work
    uint16_t voltage;
    uint16_t freq;

    uint16_t dc_adc_vals[DC_VOLT_SIZE];
    size_t dc_ind = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000652:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000656:	6013      	str	r3, [r2, #0]

    q15_t ac_adc_vals[FFT_SIZE];
    size_t ac_ind = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800065e:	f102 0220 	add.w	r2, r2, #32
 8000662:	6013      	str	r3, [r2, #0]
//    size_t rms_ind = 0;
//    uint16_t rms_voltage;


    while (1) {
        switch (state) {
 8000664:	4b95      	ldr	r3, [pc, #596]	@ (80008bc <main+0x344>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b04      	cmp	r3, #4
 800066c:	d8fa      	bhi.n	8000664 <main+0xec>
 800066e:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <main+0xfc>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000665 	.word	0x08000665
 8000678:	08000689 	.word	0x08000689
 800067c:	08000749 	.word	0x08000749
 8000680:	08000833 	.word	0x08000833
 8000684:	080008c5 	.word	0x080008c5
        case IDLE_ST:

            break;
        case DC_ST:
            if (ADC_check_flag()) {
 8000688:	f7ff ff40 	bl	800050c <ADC_check_flag>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	f000 812f 	beq.w	80008f2 <main+0x37a>
                dc_adc_vals[dc_ind] = (get_ADC_val() >> 3) & 0xfff;
 8000694:	f7ff ff2e 	bl	80004f4 <get_ADC_val>
 8000698:	4603      	mov	r3, r0
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	b29b      	uxth	r3, r3
 800069e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006a2:	b299      	uxth	r1, r3
 80006a4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80006a8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80006ac:	f6a3 0328 	subw	r3, r3, #2088	@ 0x828
 80006b0:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80006b4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                dc_ind++;
 80006be:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80006c2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80006ce:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80006d2:	6013      	str	r3, [r2, #0]
                
                if (dc_ind == DC_VOLT_SIZE) { // done getting measurements
 80006d4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80006d8:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006e2:	d128      	bne.n	8000736 <main+0x1be>
                    dc_ind = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80006ea:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80006ee:	6013      	str	r3, [r2, #0]
                    voltage = get_avg_arr(dc_adc_vals, DC_VOLT_SIZE);
 80006f0:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80006f4:	f103 0308 	add.w	r3, r3, #8
 80006f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 faa7 	bl	8000c50 <get_avg_arr>
 8000702:	4603      	mov	r3, r0
 8000704:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000708:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800070c:	8013      	strh	r3, [r2, #0]
                    voltage = ADC_to_mv(voltage);
 800070e:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000712:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff febd 	bl	8000498 <ADC_to_mv>
 800071e:	4603      	mov	r3, r0
 8000720:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000724:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8000728:	8013      	strh	r3, [r2, #0]


                    ADC_clear_flag();
 800072a:	f7ff fefb 	bl	8000524 <ADC_clear_flag>
                    state = PRINT_ST;
 800072e:	4b63      	ldr	r3, [pc, #396]	@ (80008bc <main+0x344>)
 8000730:	2204      	movs	r2, #4
 8000732:	701a      	strb	r2, [r3, #0]
                    break;
 8000734:	e0e3      	b.n	80008fe <main+0x386>
                }

                ADC_clear_flag();
 8000736:	f7ff fef5 	bl	8000524 <ADC_clear_flag>
                ADC_start_conversion();
 800073a:	4b61      	ldr	r3, [pc, #388]	@ (80008c0 <main+0x348>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	4a60      	ldr	r2, [pc, #384]	@ (80008c0 <main+0x348>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6093      	str	r3, [r2, #8]
            }

            break;
 8000746:	e0d4      	b.n	80008f2 <main+0x37a>
        case FFT_ST:
            if (ADC_check_flag()) {
 8000748:	f7ff fee0 	bl	800050c <ADC_check_flag>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 80d1 	beq.w	80008f6 <main+0x37e>
                ac_adc_vals[ac_ind] = get_ADC_val();
 8000754:	f7ff fece 	bl	80004f4 <get_ADC_val>
 8000758:	4603      	mov	r3, r0
 800075a:	b219      	sxth	r1, r3
 800075c:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8000760:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000764:	f6a3 0328 	subw	r3, r3, #2088	@ 0x828
 8000768:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800076c:	f102 0220 	add.w	r2, r2, #32
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                ac_ind++;
 8000776:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800077a:	f103 0320 	add.w	r3, r3, #32
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000786:	f102 0220 	add.w	r2, r2, #32
 800078a:	6013      	str	r3, [r2, #0]
                if (ac_ind == FFT_SIZE) {
 800078c:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000790:	f103 0320 	add.w	r3, r3, #32
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800079a:	d147      	bne.n	800082c <main+0x2b4>
                    ac_ind = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80007a2:	f102 0220 	add.w	r2, r2, #32
 80007a6:	6013      	str	r3, [r2, #0]
                    arm_rfft_q15(&rfft_instance, ac_adc_vals, fft_out);
 80007a8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80007ac:	f102 0210 	add.w	r2, r2, #16
 80007b0:	3a28      	subs	r2, #40	@ 0x28
 80007b2:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80007b6:	f103 0310 	add.w	r3, r3, #16
 80007ba:	3b08      	subs	r3, #8
 80007bc:	f507 4090 	add.w	r0, r7, #18432	@ 0x4800
 80007c0:	f100 0008 	add.w	r0, r0, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	f001 fcbd 	bl	8002144 <arm_rfft_q15>
                    arm_cmplx_mag_q15(fft_out, mag_out, FFT_SIZE);
 80007ca:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80007ce:	3928      	subs	r1, #40	@ 0x28
 80007d0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80007d4:	f103 0310 	add.w	r3, r3, #16
 80007d8:	3b28      	subs	r3, #40	@ 0x28
 80007da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fd96 	bl	8002310 <arm_cmplx_mag_q15>
                    mag_out[0] = 0;
 80007e4:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80007e8:	f6a3 0328 	subw	r3, r3, #2088	@ 0x828
 80007ec:	2200      	movs	r2, #0
 80007ee:	801a      	strh	r2, [r3, #0]
                    arm_max_q15(mag_out, FFT_SIZE_DIV_2, &max, &max_ind);
 80007f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007f4:	3b30      	subs	r3, #48	@ 0x30
 80007f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80007fa:	3a2a      	subs	r2, #42	@ 0x2a
 80007fc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000800:	3828      	subs	r0, #40	@ 0x28
 8000802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000806:	f001 fbdd 	bl	8001fc4 <arm_max_q15>
                    freq = max_ind * SAMPLING_RATE / FFT_SIZE;
 800080a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800080e:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000818:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 800081c:	8013      	strh	r3, [r2, #0]

                    LED2_OFF();
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <main+0x340>)
 8000820:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000824:	619a      	str	r2, [r3, #24]
//                    LED3_ON();
                    state = PRINT_ST;
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <main+0x344>)
 8000828:	2204      	movs	r2, #4
 800082a:	701a      	strb	r2, [r3, #0]
                }
                ADC_clear_flag();
 800082c:	f7ff fe7a 	bl	8000524 <ADC_clear_flag>
            }

            break;
 8000830:	e061      	b.n	80008f6 <main+0x37e>
        case VRMS_ST:
            if (ADC_check_flag()) {
 8000832:	f7ff fe6b 	bl	800050c <ADC_check_flag>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d05e      	beq.n	80008fa <main+0x382>
                ac_adc_vals[ac_ind] = (get_ADC_val() >> 3) & 0xfff;
 800083c:	f7ff fe5a 	bl	80004f4 <get_ADC_val>
 8000840:	4603      	mov	r3, r0
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	b29b      	uxth	r3, r3
 8000846:	b21b      	sxth	r3, r3
 8000848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084c:	b219      	sxth	r1, r3
 800084e:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8000852:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000856:	f6a3 0328 	subw	r3, r3, #2088	@ 0x828
 800085a:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800085e:	f102 0220 	add.w	r2, r2, #32
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                ac_ind++;
 8000868:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800086c:	f103 0320 	add.w	r3, r3, #32
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000878:	f102 0220 	add.w	r2, r2, #32
 800087c:	6013      	str	r3, [r2, #0]
                if (ac_ind == RMS_SIZE) {
 800087e:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000882:	f103 0320 	add.w	r3, r3, #32
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800088c:	d10f      	bne.n	80008ae <main+0x336>
                    ac_ind = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000894:	f102 0220 	add.w	r2, r2, #32
 8000898:	6013      	str	r3, [r2, #0]
                    // voltage = get_rms(ac_adc_vals, RMS_SIZE, freq); // returns in 12b ADC val
                    // rms_voltage = get_avg_arr(rms_vals, RMS_SIZE);
                    // rms_voltage = ADC_to_mv(rms_voltage); 
                    // voltage = rms_voltage;
                    voltage = 1200;
 800089a:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800089e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80008a2:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80008a6:	8013      	strh	r3, [r2, #0]
//                    LED3_OFF();
                    state = PRINT_ST;
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <main+0x344>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	701a      	strb	r2, [r3, #0]
                }
                ADC_clear_flag();
 80008ae:	f7ff fe39 	bl	8000524 <ADC_clear_flag>
            }

            break;
 80008b2:	e022      	b.n	80008fa <main+0x382>
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000800 	.word	0x48000800
 80008bc:	2000009c 	.word	0x2000009c
 80008c0:	50040000 	.word	0x50040000
        case PRINT_ST:
            print_stats(AC, voltage, freq);
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <main+0x388>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80008cc:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 80008d0:	8812      	ldrh	r2, [r2, #0]
 80008d2:	f507 4190 	add.w	r1, r7, #18432	@ 0x4800
 80008d6:	f101 012c 	add.w	r1, r1, #44	@ 0x2c
 80008da:	8809      	ldrh	r1, [r1, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f8df 	bl	8000aa0 <print_stats>
            state = IDLE_ST;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <main+0x38c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
            LED1_OFF();
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <main+0x390>)
 80008ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008ee:	619a      	str	r2, [r3, #24]
            break;
 80008f0:	e005      	b.n	80008fe <main+0x386>
            break;
 80008f2:	bf00      	nop
 80008f4:	e6b6      	b.n	8000664 <main+0xec>
            break;
 80008f6:	bf00      	nop
 80008f8:	e6b4      	b.n	8000664 <main+0xec>
            break;
 80008fa:	bf00      	nop
 80008fc:	e6b2      	b.n	8000664 <main+0xec>
        switch (state) {
 80008fe:	e6b1      	b.n	8000664 <main+0xec>
 8000900:	20000000 	.word	0x20000000
 8000904:	2000009c 	.word	0x2000009c
 8000908:	48000800 	.word	0x48000800

0800090c <TIM2_IRQHandler>:
    return 0;
}



void TIM2_IRQHandler() {
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_CC1IF) { // print interval
 8000910:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d025      	beq.n	800096a <TIM2_IRQHandler+0x5e>
        LED1_ON();
 800091e:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <TIM2_IRQHandler+0xf8>)
 8000920:	2201      	movs	r2, #1
 8000922:	619a      	str	r2, [r3, #24]
        LED2_ON();
 8000924:	4b37      	ldr	r3, [pc, #220]	@ (8000a04 <TIM2_IRQHandler+0xf8>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
        if (AC) {
 800092a:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <TIM2_IRQHandler+0xfc>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <TIM2_IRQHandler+0x2e>
            state = FFT_ST;
 8000932:	4b36      	ldr	r3, [pc, #216]	@ (8000a0c <TIM2_IRQHandler+0x100>)
 8000934:	2202      	movs	r2, #2
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e002      	b.n	8000940 <TIM2_IRQHandler+0x34>
        }
        else {
            state = DC_ST;
 800093a:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <TIM2_IRQHandler+0x100>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
        } 

        TIM2->CCR1 += PRINT_CCR;
 8000940:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000946:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800094a:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <TIM2_IRQHandler+0x104>)
 800094c:	4413      	add	r3, r2
 800094e:	634b      	str	r3, [r1, #52]	@ 0x34
        TIM2->SR &= ~TIM_SR_CC1IF;
 8000950:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800095a:	f023 0302 	bic.w	r3, r3, #2
 800095e:	6113      	str	r3, [r2, #16]
        LED1_OFF();
 8000960:	4b28      	ldr	r3, [pc, #160]	@ (8000a04 <TIM2_IRQHandler+0xf8>)
 8000962:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000966:	619a      	str	r2, [r3, #24]
        TIM2->CCR3 += RMS_CCR;
        TIM2->SR &= ~TIM_SR_CC3IF;
     }


    return;
 8000968:	e047      	b.n	80009fa <TIM2_IRQHandler+0xee>
    else if (TIM2->SR & TIM_SR_CC2IF) { // get adc samples for fft
 800096a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	2b00      	cmp	r3, #0
 8000976:	d01c      	beq.n	80009b2 <TIM2_IRQHandler+0xa6>
        if (state == FFT_ST) {
 8000978:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <TIM2_IRQHandler+0x100>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b02      	cmp	r3, #2
 8000980:	d105      	bne.n	800098e <TIM2_IRQHandler+0x82>
            ADC_start_conversion();
 8000982:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <TIM2_IRQHandler+0x108>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <TIM2_IRQHandler+0x108>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6093      	str	r3, [r2, #8]
        TIM2->CCR2 += FFT_CCR;
 800098e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000994:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000998:	f503 4318 	add.w	r3, r3, #38912	@ 0x9800
 800099c:	3396      	adds	r3, #150	@ 0x96
 800099e:	6393      	str	r3, [r2, #56]	@ 0x38
        TIM2->SR &= ~TIM_SR_CC2IF;
 80009a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009aa:	f023 0304 	bic.w	r3, r3, #4
 80009ae:	6113      	str	r3, [r2, #16]
    return;
 80009b0:	e023      	b.n	80009fa <TIM2_IRQHandler+0xee>
    else if (TIM2->SR & TIM_SR_CC3IF) { // get adc samples for rms
 80009b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d01c      	beq.n	80009fa <TIM2_IRQHandler+0xee>
        if (state == VRMS_ST) {
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <TIM2_IRQHandler+0x100>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d105      	bne.n	80009d6 <TIM2_IRQHandler+0xca>
            ADC_start_conversion();
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <TIM2_IRQHandler+0x108>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4a11      	ldr	r2, [pc, #68]	@ (8000a14 <TIM2_IRQHandler+0x108>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6093      	str	r3, [r2, #8]
        TIM2->CCR3 += RMS_CCR;
 80009d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e0:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80009e4:	3380      	adds	r3, #128	@ 0x80
 80009e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        TIM2->SR &= ~TIM_SR_CC3IF;
 80009e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009f2:	f023 0308 	bic.w	r3, r3, #8
 80009f6:	6113      	str	r3, [r2, #16]
    return;
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
}
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	48000800 	.word	0x48000800
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	2000009c 	.word	0x2000009c
 8000a10:	0bebc1fd 	.word	0x0bebc1fd
 8000a14:	50040000 	.word	0x50040000

08000a18 <timer_init>:



void timer_init() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <timer_init+0x78>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a20:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <timer_init+0x78>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6593      	str	r3, [r2, #88]	@ 0x58

    TIM2->ARR = -1;
 8000a28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a30:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = PRINT_CCR - 1;
 8000a32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <timer_init+0x7c>)
 8000a38:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = FFT_CCR - 1;
 8000a3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a3e:	f649 0295 	movw	r2, #39061	@ 0x9895
 8000a42:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = RMS_CCR - 1;
 8000a44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a48:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <timer_init+0x80>)
 8000a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->PSC = 0;
 8000a4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER = TIM_DIER_CC1IE | TIM_DIER_CC2IE | TIM_DIER_CC3IE;
 8000a54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a58:	220e      	movs	r2, #14
 8000a5a:	60da      	str	r2, [r3, #12]
    TIM2->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E;
 8000a5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a60:	f240 1211 	movw	r2, #273	@ 0x111
 8000a64:	621a      	str	r2, [r3, #32]

    DBGMCU->APB1FZR1 |= 1;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <timer_init+0x84>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <timer_init+0x84>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000a72:	201c      	movs	r0, #28
 8000a74:	f7ff fd62 	bl	800053c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a78:	b662      	cpsie	i
}
 8000a7a:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8000a7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]

    return;
 8000a8c:	bf00      	nop
}
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	0bebc1fc 	.word	0x0bebc1fc
 8000a98:	0001387f 	.word	0x0001387f
 8000a9c:	e0042000 	.word	0xe0042000

08000aa0 <print_stats>:
//
//    return;
//}


void print_stats(int AC, uint16_t voltage, uint16_t freq) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	4613      	mov	r3, r2
 8000aae:	803b      	strh	r3, [r7, #0]
    static char voltage_buffer[5] = "0.00";
    static char freq_buffer[15] = "1000 Hz    ";
    
    MOVE_CURSOR(MODE_CURSOR);
 8000ab0:	481d      	ldr	r0, [pc, #116]	@ (8000b28 <print_stats+0x88>)
 8000ab2:	f000 faa4 	bl	8000ffe <uart_send_escape>
    if (AC) uart_send_string("AC");
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <print_stats+0x24>
 8000abc:	481b      	ldr	r0, [pc, #108]	@ (8000b2c <print_stats+0x8c>)
 8000abe:	f000 fa89 	bl	8000fd4 <uart_send_string>
 8000ac2:	e002      	b.n	8000aca <print_stats+0x2a>
    else uart_send_string("DC");
 8000ac4:	481a      	ldr	r0, [pc, #104]	@ (8000b30 <print_stats+0x90>)
 8000ac6:	f000 fa85 	bl	8000fd4 <uart_send_string>
    
    MOVE_CURSOR(VOLT_CURSOR);
 8000aca:	481a      	ldr	r0, [pc, #104]	@ (8000b34 <print_stats+0x94>)
 8000acc:	f000 fa97 	bl	8000ffe <uart_send_escape>
    mv_to_str(voltage_buffer, voltage);
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4818      	ldr	r0, [pc, #96]	@ (8000b38 <print_stats+0x98>)
 8000ad6:	f000 f873 	bl	8000bc0 <mv_to_str>
    uart_send_string(voltage_buffer);
 8000ada:	4817      	ldr	r0, [pc, #92]	@ (8000b38 <print_stats+0x98>)
 8000adc:	f000 fa7a 	bl	8000fd4 <uart_send_string>


    MOVE_CURSOR(SCALE_CURSOR);
 8000ae0:	4816      	ldr	r0, [pc, #88]	@ (8000b3c <print_stats+0x9c>)
 8000ae2:	f000 fa8c 	bl	8000ffe <uart_send_escape>
    uint16_t x = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	81fb      	strh	r3, [r7, #14]
    uart_send_escape("[2K");
 8000aea:	4815      	ldr	r0, [pc, #84]	@ (8000b40 <print_stats+0xa0>)
 8000aec:	f000 fa87 	bl	8000ffe <uart_send_escape>
    while (x <= voltage) {
 8000af0:	e005      	b.n	8000afe <print_stats+0x5e>
        uart_send_string("#");
 8000af2:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <print_stats+0xa4>)
 8000af4:	f000 fa6e 	bl	8000fd4 <uart_send_string>
        x += 100;
 8000af8:	89fb      	ldrh	r3, [r7, #14]
 8000afa:	3364      	adds	r3, #100	@ 0x64
 8000afc:	81fb      	strh	r3, [r7, #14]
    while (x <= voltage) {
 8000afe:	89fa      	ldrh	r2, [r7, #14]
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d9f5      	bls.n	8000af2 <print_stats+0x52>
    }

    MOVE_CURSOR(FREQ_CURSOR);
 8000b06:	4810      	ldr	r0, [pc, #64]	@ (8000b48 <print_stats+0xa8>)
 8000b08:	f000 fa79 	bl	8000ffe <uart_send_escape>
    snprintf(freq_buffer, 15, "%hu Hz   ", freq);
 8000b0c:	883b      	ldrh	r3, [r7, #0]
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <print_stats+0xac>)
 8000b10:	210f      	movs	r1, #15
 8000b12:	480f      	ldr	r0, [pc, #60]	@ (8000b50 <print_stats+0xb0>)
 8000b14:	f002 f84c 	bl	8002bb0 <sniprintf>
    uart_send_string(freq_buffer);
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <print_stats+0xb0>)
 8000b1a:	f000 fa5b 	bl	8000fd4 <uart_send_string>

    return;
 8000b1e:	bf00      	nop
}
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08003530 	.word	0x08003530
 8000b2c:	08003538 	.word	0x08003538
 8000b30:	0800353c 	.word	0x0800353c
 8000b34:	08003540 	.word	0x08003540
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	08003548 	.word	0x08003548
 8000b40:	08003550 	.word	0x08003550
 8000b44:	08003554 	.word	0x08003554
 8000b48:	08003558 	.word	0x08003558
 8000b4c:	08003560 	.word	0x08003560
 8000b50:	2000000c 	.word	0x2000000c

08000b54 <print_start_screen>:


void print_start_screen() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    uart_send_escape("[1;0H");
 8000b58:	480f      	ldr	r0, [pc, #60]	@ (8000b98 <print_start_screen+0x44>)
 8000b5a:	f000 fa50 	bl	8000ffe <uart_send_escape>
    uart_send_string("Mode: ");
 8000b5e:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <print_start_screen+0x48>)
 8000b60:	f000 fa38 	bl	8000fd4 <uart_send_string>

    uart_send_escape("[3;0H");
 8000b64:	480e      	ldr	r0, [pc, #56]	@ (8000ba0 <print_start_screen+0x4c>)
 8000b66:	f000 fa4a 	bl	8000ffe <uart_send_escape>
    uart_send_string("Volt:      V");
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <print_start_screen+0x50>)
 8000b6c:	f000 fa32 	bl	8000fd4 <uart_send_string>

    uart_send_escape("[6;0H");
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <print_start_screen+0x54>)
 8000b72:	f000 fa44 	bl	8000ffe <uart_send_escape>
    uart_send_string("|----|----|----|----|----|----|");
 8000b76:	480d      	ldr	r0, [pc, #52]	@ (8000bac <print_start_screen+0x58>)
 8000b78:	f000 fa2c 	bl	8000fd4 <uart_send_string>

    uart_send_escape("[7;0H");
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <print_start_screen+0x5c>)
 8000b7e:	f000 fa3e 	bl	8000ffe <uart_send_escape>
    uart_send_string("0.0  0.5  1.0  1.5  2.0  2.5  3.0");
 8000b82:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <print_start_screen+0x60>)
 8000b84:	f000 fa26 	bl	8000fd4 <uart_send_string>


    uart_send_escape("[9;0H");
 8000b88:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <print_start_screen+0x64>)
 8000b8a:	f000 fa38 	bl	8000ffe <uart_send_escape>
    uart_send_string("Frequency:");
 8000b8e:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <print_start_screen+0x68>)
 8000b90:	f000 fa20 	bl	8000fd4 <uart_send_string>
    return;
 8000b94:	bf00      	nop
}
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0800356c 	.word	0x0800356c
 8000b9c:	08003574 	.word	0x08003574
 8000ba0:	0800357c 	.word	0x0800357c
 8000ba4:	08003584 	.word	0x08003584
 8000ba8:	08003594 	.word	0x08003594
 8000bac:	0800359c 	.word	0x0800359c
 8000bb0:	080035bc 	.word	0x080035bc
 8000bb4:	080035c4 	.word	0x080035c4
 8000bb8:	080035e8 	.word	0x080035e8
 8000bbc:	080035f0 	.word	0x080035f0

08000bc0 <mv_to_str>:


void mv_to_str(char* buffer, uint16_t volt) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
    // 3000 -> 3.00
    buffer[0] = (volt / 1000) + '0';
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	4a1d      	ldr	r2, [pc, #116]	@ (8000c44 <mv_to_str+0x84>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	099b      	lsrs	r3, r3, #6
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	3330      	adds	r3, #48	@ 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	701a      	strb	r2, [r3, #0]
    buffer[2] = ((volt % 1000) / 100) + '0';
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <mv_to_str+0x84>)
 8000be6:	fba2 1203 	umull	r1, r2, r2, r3
 8000bea:	0992      	lsrs	r2, r2, #6
 8000bec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bf0:	fb01 f202 	mul.w	r2, r1, r2
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4a13      	ldr	r2, [pc, #76]	@ (8000c48 <mv_to_str+0x88>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3302      	adds	r3, #2
 8000c08:	3230      	adds	r2, #48	@ 0x30
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	701a      	strb	r2, [r3, #0]
    buffer[3] = ((volt % 100) / 10) + '0';
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <mv_to_str+0x88>)
 8000c12:	fba2 1203 	umull	r1, r2, r2, r3
 8000c16:	0952      	lsrs	r2, r2, #5
 8000c18:	2164      	movs	r1, #100	@ 0x64
 8000c1a:	fb01 f202 	mul.w	r2, r1, r2
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <mv_to_str+0x8c>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3303      	adds	r3, #3
 8000c32:	3230      	adds	r2, #48	@ 0x30
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	701a      	strb	r2, [r3, #0]

    return;
 8000c38:	bf00      	nop
}
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	10624dd3 	.word	0x10624dd3
 8000c48:	51eb851f 	.word	0x51eb851f
 8000c4c:	cccccccd 	.word	0xcccccccd

08000c50 <get_avg_arr>:


uint16_t get_avg_arr(uint16_t *arr, int size) {
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	e00b      	b.n	8000c7c <get_avg_arr+0x2c>
        sum += arr[i];
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbef      	blt.n	8000c64 <get_avg_arr+0x14>
    }
    return sum / size;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	b29b      	uxth	r3, r3
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b096      	sub	sp, #88	@ 0x58
 8000c9e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2244      	movs	r2, #68	@ 0x44
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 ffb5 	bl	8002c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cbc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cc0:	f000 fb62 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cca:	f000 f838 	bl	8000d3e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cda:	2360      	movs	r3, #96	@ 0x60
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cea:	2328      	movs	r3, #40	@ 0x28
 8000cec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fb98 	bl	8001434 <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d0a:	f000 f818 	bl	8000d3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2303      	movs	r3, #3
 8000d14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	2104      	movs	r1, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 ff60 	bl	8001bec <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d32:	f000 f804 	bl	8000d3e <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3758      	adds	r7, #88	@ 0x58
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d42:	b672      	cpsid	i
}
 8000d44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d46:	bf00      	nop
 8000d48:	e7fd      	b.n	8000d46 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f9b9 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f001 ff00 	bl	8002c28 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20018000 	.word	0x20018000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200000a0 	.word	0x200000a0
 8000e5c:	200001f8 	.word	0x200001f8

08000e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <uart_pin_init+0x8c>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <uart_pin_init+0x8c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8000ed0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000ede:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8000ee0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eea:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000eee:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000ef0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000efe:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000f00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f0a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000f0e:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000f10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f1a:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000f1e:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000f20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f2e:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000f30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f3a:	f023 030c 	bic.w	r3, r3, #12
 8000f3e:	6053      	str	r3, [r2, #4]
    return;
 8000f40:	bf00      	nop
}
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    uart_pin_init();
 8000f54:	f7ff ffb4 	bl	8000ec0 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <uart_init+0x48>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <uart_init+0x48>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f62:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <uart_init+0x4c>)
 8000f66:	222c      	movs	r2, #44	@ 0x2c
 8000f68:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <uart_init+0x4c>)
 8000f6c:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8000f70:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 8000f72:	2026      	movs	r0, #38	@ 0x26
 8000f74:	f7ff ff86 	bl	8000e84 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f78:	b662      	cpsie	i
}
 8000f7a:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <uart_init+0x4c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <uart_init+0x4c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 8000f88:	f000 f848 	bl	800101c <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <uart_init+0x50>)
 8000f8e:	f000 f836 	bl	8000ffe <uart_send_escape>
    return;
 8000f92:	bf00      	nop
}
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	080035fc 	.word	0x080035fc

08000fa4 <uart_send_char>:

void uart_send_char(char c) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8000fae:	bf00      	nop
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <uart_send_char+0x2c>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f9      	beq.n	8000fb0 <uart_send_char+0xc>
    USART2->TDR = c;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <uart_send_char+0x2c>)
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8000fc4:	bf00      	nop
}
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <uart_send_string>:

void uart_send_string(const char* str) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8000fdc:	e007      	b.n	8000fee <uart_send_string+0x1a>
        uart_send_char(*str);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffde 	bl	8000fa4 <uart_send_char>
        str++;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f3      	bne.n	8000fde <uart_send_string+0xa>
    }

    return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <uart_send_escape>:

void uart_send_escape(const char* str) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 8001006:	201b      	movs	r0, #27
 8001008:	f7ff ffcc 	bl	8000fa4 <uart_send_char>
    uart_send_string(str);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffe1 	bl	8000fd4 <uart_send_string>

    return;
 8001012:	bf00      	nop
}
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <uart_clear_screen>:


void uart_clear_screen(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <uart_clear_screen+0x14>)
 8001022:	f7ff ffec 	bl	8000ffe <uart_send_escape>
    uart_send_escape("[H");
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <uart_clear_screen+0x18>)
 8001028:	f7ff ffe9 	bl	8000ffe <uart_send_escape>

    return;
 800102c:	bf00      	nop
}
 800102e:	bd80      	pop	{r7, pc}
 8001030:	08003604 	.word	0x08003604
 8001034:	08003608 	.word	0x08003608

08001038 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <USART2_IRQHandler+0x20>)
 800103e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001040:	b29b      	uxth	r3, r3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <USART2_IRQHandler+0x24>)
 8001046:	701a      	strb	r2, [r3, #0]
    flag = 1;
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <USART2_IRQHandler+0x28>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
    return;
 800104e:	bf00      	nop
}
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40004400 	.word	0x40004400
 800105c:	200000a8 	.word	0x200000a8
 8001060:	200000a4 	.word	0x200000a4

08001064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800109c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001068:	f7ff fefa 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	@ (80010a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <LoopForever+0xe>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	@ (80010b0 <LoopForever+0x16>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f001 fdcf 	bl	8002c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001096:	f7ff fa6f 	bl	8000578 <main>

0800109a <LoopForever>:

LoopForever:
    b LoopForever
 800109a:	e7fe      	b.n	800109a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800109c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010a8:	080154e8 	.word	0x080154e8
  ldr r2, =_sbss
 80010ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010b0:	200001f8 	.word	0x200001f8

080010b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC3_IRQHandler>

080010b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f91f 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 f80e 	bl	80010e8 <HAL_InitTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	e001      	b.n	80010dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d8:	f7ff fe38 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d023      	beq.n	8001144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_InitTick+0x70>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f91d 	bl	8001352 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10f      	bne.n	800113e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d809      	bhi.n	8001138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800112c:	f000 f8f5 	bl	800131a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_InitTick+0x74>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e007      	b.n	8001148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e004      	b.n	8001148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e001      	b.n	8001148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000024 	.word	0x20000024
 8001158:	2000001c 	.word	0x2000001c
 800115c:	20000020 	.word	0x20000020

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000024 	.word	0x20000024
 8001184:	200000ac 	.word	0x200000ac

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200000ac 	.word	0x200000ac

080011a0 <__NVIC_SetPriorityGrouping>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff47 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff5c 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff8e 	bl	8001258 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffb0 	bl	80012c0 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001396:	d130      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013a4:	d038      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	@ 0x32
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	e002      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f2      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f4:	d110      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e00f      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001406:	d007      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001410:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000
 800142c:	2000001c 	.word	0x2000001c
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e3ca      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4b97      	ldr	r3, [pc, #604]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001450:	4b94      	ldr	r3, [pc, #592]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80e4 	beq.w	8001630 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_RCC_OscConfig+0x4a>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	f040 808b 	bne.w	800158c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b01      	cmp	r3, #1
 800147a:	f040 8087 	bne.w	800158c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800147e:	4b89      	ldr	r3, [pc, #548]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x62>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e3a2      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4b82      	ldr	r3, [pc, #520]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <HAL_RCC_OscConfig+0x7c>
 80014a6:	4b7f      	ldr	r3, [pc, #508]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014ae:	e005      	b.n	80014bc <HAL_RCC_OscConfig+0x88>
 80014b0:	4b7c      	ldr	r3, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014bc:	4293      	cmp	r3, r2
 80014be:	d223      	bcs.n	8001508 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fd1d 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e383      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d4:	4b73      	ldr	r3, [pc, #460]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a72      	ldr	r2, [pc, #456]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b70      	ldr	r3, [pc, #448]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	496d      	ldr	r1, [pc, #436]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f2:	4b6c      	ldr	r3, [pc, #432]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4968      	ldr	r1, [pc, #416]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	e025      	b.n	8001554 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001508:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b63      	ldr	r3, [pc, #396]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4960      	ldr	r1, [pc, #384]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	495b      	ldr	r1, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fcdd 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e343      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001554:	f000 fc4a 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	4950      	ldr	r1, [pc, #320]	@ (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	4a4e      	ldr	r2, [pc, #312]	@ (80016ac <HAL_RCC_OscConfig+0x278>)
 8001572:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001574:	4b4e      	ldr	r3, [pc, #312]	@ (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fdb5 	bl	80010e8 <HAL_InitTick>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d052      	beq.n	800162e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	e327      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d032      	beq.n	80015fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001594:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a42      	ldr	r2, [pc, #264]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fdf2 	bl	8001188 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a8:	f7ff fdee 	bl	8001188 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e310      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ba:	4b3a      	ldr	r3, [pc, #232]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4b37      	ldr	r3, [pc, #220]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a36      	ldr	r2, [pc, #216]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4931      	ldr	r1, [pc, #196]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e4:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	492c      	ldr	r1, [pc, #176]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
 80015f8:	e01a      	b.n	8001630 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fa:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a29      	ldr	r2, [pc, #164]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001606:	f7ff fdbf 	bl	8001188 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160e:	f7ff fdbb 	bl	8001188 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e2dd      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x1da>
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d074      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x21a>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d10e      	bne.n	8001666 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d10b      	bne.n	8001666 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d064      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d160      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e2ba      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x24a>
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e026      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001686:	d115      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a02      	ldr	r2, [pc, #8]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	0800360c 	.word	0x0800360c
 80016ac:	2000001c 	.word	0x2000001c
 80016b0:	20000020 	.word	0x20000020
 80016b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fd58 	bl	8001188 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fd54 	bl	8001188 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	@ 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e276      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fd44 	bl	8001188 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fd40 	bl	8001188 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e262      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e23f      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fcff 	bl	8001188 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fcfb 	bl	8001188 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e21d      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fcdb 	bl	8001188 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fcd7 	bl	8001188 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1f9      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fcb6 	bl	8001188 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fcb2 	bl	8001188 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1d4      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fc99 	bl	8001188 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fc95 	bl	8001188 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1b7      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fc5c 	bl	8001188 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff fc58 	bl	8001188 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e17a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9c      	ldr	r3, [pc, #624]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	4a9b      	ldr	r2, [pc, #620]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001950:	4b98      	ldr	r3, [pc, #608]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001956:	4a97      	ldr	r2, [pc, #604]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fc0e 	bl	8001188 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff fc0a 	bl	8001188 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e12a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff fbf7 	bl	8001188 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fbf3 	bl	8001188 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e113      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	4a79      	ldr	r2, [pc, #484]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80fe 	beq.w	8001bda <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	f040 80d0 	bne.w	8001b88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019e8:	4b72      	ldr	r3, [pc, #456]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d130      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	3b01      	subs	r3, #1
 8001a08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d127      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d11f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a28:	2a07      	cmp	r2, #7
 8001a2a:	bf14      	ite	ne
 8001a2c:	2201      	movne	r2, #1
 8001a2e:	2200      	moveq	r2, #0
 8001a30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d113      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d06e      	beq.n	8001b3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d069      	beq.n	8001b38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a64:	4b53      	ldr	r3, [pc, #332]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a70:	4b50      	ldr	r3, [pc, #320]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0ad      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a80:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8c:	f7ff fb7c 	bl	8001188 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff fb78 	bl	8001188 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e09a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	4b43      	ldr	r3, [pc, #268]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab2:	4b40      	ldr	r3, [pc, #256]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001acc:	0212      	lsls	r2, r2, #8
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ad4:	0852      	lsrs	r2, r2, #1
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	0552      	lsls	r2, r2, #21
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ae0:	0852      	lsrs	r2, r2, #1
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	0652      	lsls	r2, r2, #25
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aec:	0912      	lsrs	r2, r2, #4
 8001aee:	0452      	lsls	r2, r2, #17
 8001af0:	430a      	orrs	r2, r1
 8001af2:	4930      	ldr	r1, [pc, #192]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af8:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b10:	f7ff fb3a 	bl	8001188 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff fb36 	bl	8001188 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	e050      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04f      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d148      	bne.n	8001bda <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b54:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b60:	f7ff fb12 	bl	8001188 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fb0e 	bl	8001188 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e030      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x734>
 8001b86:	e028      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d023      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff faf5 	bl	8001188 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	e00c      	b.n	8001bbc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff faf1 	bl	8001188 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d905      	bls.n	8001bbc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ec      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4905      	ldr	r1, [pc, #20]	@ (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x7b4>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	feeefffc 	.word	0xfeeefffc

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0e7      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b75      	ldr	r3, [pc, #468]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b72      	ldr	r3, [pc, #456]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4970      	ldr	r1, [pc, #448]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cf      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b63      	ldr	r3, [pc, #396]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4960      	ldr	r1, [pc, #384]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04c      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b5a      	ldr	r3, [pc, #360]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d121      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0a6      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4b54      	ldr	r3, [pc, #336]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e09a      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e086      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b46      	ldr	r3, [pc, #280]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4943      	ldr	r1, [pc, #268]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd4:	f7ff fa58 	bl	8001188 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff fa54 	bl	8001188 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e06e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d010      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b31      	ldr	r3, [pc, #196]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d208      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	492b      	ldr	r1, [pc, #172]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d32:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d210      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4923      	ldr	r1, [pc, #140]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e036      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4918      	ldr	r1, [pc, #96]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4910      	ldr	r1, [pc, #64]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da0:	f000 f824 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	490b      	ldr	r1, [pc, #44]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	4a09      	ldr	r2, [pc, #36]	@ (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_RCC_ClockConfig+0x1fc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f98f 	bl	80010e8 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dce:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	0800360c 	.word	0x0800360c
 8001de4:	2000001c 	.word	0x2000001c
 8001de8:	20000020 	.word	0x20000020

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d121      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d11e      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e20:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e004      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d134      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0xac>
 8001e90:	e005      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	e005      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9a:	617b      	str	r3, [r7, #20]
      break;
 8001e9c:	e002      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	617b      	str	r3, [r7, #20]
      break;
 8001ea2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	3301      	adds	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	0e5b      	lsrs	r3, r3, #25
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	0800361c 	.word	0x0800361c
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f10:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f1c:	f7ff fa26 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001f20:	6178      	str	r0, [r7, #20]
 8001f22:	e014      	b.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	4a24      	ldr	r2, [pc, #144]	@ (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f30:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f3c:	f7ff fa16 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f54:	d10b      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	@ 0x80
 8001f5a:	d919      	bls.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f60:	d902      	bls.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e013      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e010      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b80      	cmp	r3, #128	@ 0x80
 8001f72:	d902      	bls.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f74:	2303      	movs	r3, #3
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e00a      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	@ 0x80
 8001f7e:	d102      	bne.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f80:	2302      	movs	r3, #2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e004      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b70      	cmp	r3, #112	@ 0x70
 8001f8a:	d101      	bne.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4909      	ldr	r1, [pc, #36]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <arm_max_q15>:
 8001fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc8:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8001fcc:	b083      	sub	sp, #12
 8001fce:	ea5f 0b98 	movs.w	fp, r8, lsr #2
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	f100 0a02 	add.w	sl, r0, #2
 8001fd8:	8807      	ldrh	r7, [r0, #0]
 8001fda:	d054      	beq.n	8002086 <arm_max_q15+0xc2>
 8001fdc:	300a      	adds	r0, #10
 8001fde:	46d9      	mov	r9, fp
 8001fe0:	f04f 0c04 	mov.w	ip, #4
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	463c      	mov	r4, r7
 8001fe8:	f930 7c08 	ldrsh.w	r7, [r0, #-8]
 8001fec:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
 8001ff0:	f930 6c02 	ldrsh.w	r6, [r0, #-2]
 8001ff4:	b224      	sxth	r4, r4
 8001ff6:	f1ac 0503 	sub.w	r5, ip, #3
 8001ffa:	42a7      	cmp	r7, r4
 8001ffc:	bfd8      	it	le
 8001ffe:	461d      	movle	r5, r3
 8002000:	42a7      	cmp	r7, r4
 8002002:	bfb8      	it	lt
 8002004:	4627      	movlt	r7, r4
 8002006:	f1ac 0402 	sub.w	r4, ip, #2
 800200a:	4577      	cmp	r7, lr
 800200c:	bfa8      	it	ge
 800200e:	462c      	movge	r4, r5
 8002010:	f930 3c04 	ldrsh.w	r3, [r0, #-4]
 8002014:	4577      	cmp	r7, lr
 8002016:	bfb8      	it	lt
 8002018:	4677      	movlt	r7, lr
 800201a:	f10c 35ff 	add.w	r5, ip, #4294967295	@ 0xffffffff
 800201e:	429f      	cmp	r7, r3
 8002020:	bfa8      	it	ge
 8002022:	4625      	movge	r5, r4
 8002024:	429f      	cmp	r7, r3
 8002026:	bfb8      	it	lt
 8002028:	461f      	movlt	r7, r3
 800202a:	42b7      	cmp	r7, r6
 800202c:	463c      	mov	r4, r7
 800202e:	bfb8      	it	lt
 8002030:	4634      	movlt	r4, r6
 8002032:	42b7      	cmp	r7, r6
 8002034:	bfac      	ite	ge
 8002036:	462b      	movge	r3, r5
 8002038:	4663      	movlt	r3, ip
 800203a:	f1b9 0901 	subs.w	r9, r9, #1
 800203e:	b2a4      	uxth	r4, r4
 8002040:	f10c 0c04 	add.w	ip, ip, #4
 8002044:	f100 0008 	add.w	r0, r0, #8
 8002048:	d1ce      	bne.n	8001fe8 <arm_max_q15+0x24>
 800204a:	4627      	mov	r7, r4
 800204c:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
 8002050:	f018 0803 	ands.w	r8, r8, #3
 8002054:	d019      	beq.n	800208a <arm_max_q15+0xc6>
 8002056:	ebc8 0801 	rsb	r8, r8, r1
 800205a:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800205e:	b23f      	sxth	r7, r7
 8002060:	42a7      	cmp	r7, r4
 8002062:	4638      	mov	r0, r7
 8002064:	bfb8      	it	lt
 8002066:	4620      	movlt	r0, r4
 8002068:	42bc      	cmp	r4, r7
 800206a:	bfc8      	it	gt
 800206c:	4643      	movgt	r3, r8
 800206e:	f108 0801 	add.w	r8, r8, #1
 8002072:	b280      	uxth	r0, r0
 8002074:	4588      	cmp	r8, r1
 8002076:	b287      	uxth	r7, r0
 8002078:	d1ef      	bne.n	800205a <arm_max_q15+0x96>
 800207a:	8010      	strh	r0, [r2, #0]
 800207c:	9a01      	ldr	r2, [sp, #4]
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	b003      	add	sp, #12
 8002082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002086:	465b      	mov	r3, fp
 8002088:	e7e2      	b.n	8002050 <arm_max_q15+0x8c>
 800208a:	4638      	mov	r0, r7
 800208c:	e7f5      	b.n	800207a <arm_max_q15+0xb6>
 800208e:	bf00      	nop

08002090 <arm_split_rfft_q15>:
 8002090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002094:	b083      	sub	sp, #12
 8002096:	f101 4480 	add.w	r4, r1, #1073741824	@ 0x40000000
 800209a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800209c:	9001      	str	r0, [sp, #4]
 800209e:	3c01      	subs	r4, #1
 80020a0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 80020a4:	00a0      	lsls	r0, r4, #2
 80020a6:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80020aa:	3901      	subs	r1, #1
 80020ac:	9000      	str	r0, [sp, #0]
 80020ae:	4452      	add	r2, sl
 80020b0:	4453      	add	r3, sl
 80020b2:	d02f      	beq.n	8002114 <arm_split_rfft_q15+0x84>
 80020b4:	f100 0904 	add.w	r9, r0, #4
 80020b8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80020ba:	9c01      	ldr	r4, [sp, #4]
 80020bc:	f1ae 0e08 	sub.w	lr, lr, #8
 80020c0:	4486      	add	lr, r0
 80020c2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80020c4:	44a1      	add	r9, r4
 80020c6:	f100 0808 	add.w	r8, r0, #8
 80020ca:	46a3      	mov	fp, r4
 80020cc:	f04f 0c00 	mov.w	ip, #0
 80020d0:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 80020d4:	f852 000c 	ldr.w	r0, [r2, ip]
 80020d8:	fb44 f500 	smusd	r5, r4, r0
 80020dc:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 80020e0:	f853 700c 	ldr.w	r7, [r3, ip]
 80020e4:	fb26 5507 	smlad	r5, r6, r7, r5
 80020e8:	fb46 f617 	smusdx	r6, r6, r7
 80020ec:	fb24 6010 	smladx	r0, r4, r0, r6
 80020f0:	1400      	asrs	r0, r0, #16
 80020f2:	0c2c      	lsrs	r4, r5, #16
 80020f4:	4246      	negs	r6, r0
 80020f6:	3901      	subs	r1, #1
 80020f8:	f828 0c02 	strh.w	r0, [r8, #-2]
 80020fc:	f828 4c04 	strh.w	r4, [r8, #-4]
 8002100:	44d4      	add	ip, sl
 8002102:	f8ae 6006 	strh.w	r6, [lr, #6]
 8002106:	f8ae 4004 	strh.w	r4, [lr, #4]
 800210a:	f108 0804 	add.w	r8, r8, #4
 800210e:	f1ae 0e04 	sub.w	lr, lr, #4
 8002112:	d1dd      	bne.n	80020d0 <arm_split_rfft_q15+0x40>
 8002114:	9801      	ldr	r0, [sp, #4]
 8002116:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002118:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800211c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8002120:	9900      	ldr	r1, [sp, #0]
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	4421      	add	r1, r4
 8002126:	2200      	movs	r2, #0
 8002128:	105b      	asrs	r3, r3, #1
 800212a:	808b      	strh	r3, [r1, #4]
 800212c:	80ca      	strh	r2, [r1, #6]
 800212e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8002132:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8002136:	8062      	strh	r2, [r4, #2]
 8002138:	440b      	add	r3, r1
 800213a:	105b      	asrs	r3, r3, #1
 800213c:	8023      	strh	r3, [r4, #0]
 800213e:	b003      	add	sp, #12
 8002140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002144 <arm_rfft_q15>:
 8002144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002148:	4617      	mov	r7, r2
 800214a:	7902      	ldrb	r2, [r0, #4]
 800214c:	6805      	ldr	r5, [r0, #0]
 800214e:	6943      	ldr	r3, [r0, #20]
 8002150:	b085      	sub	sp, #20
 8002152:	2a01      	cmp	r2, #1
 8002154:	4606      	mov	r6, r0
 8002156:	9303      	str	r3, [sp, #12]
 8002158:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800215c:	4688      	mov	r8, r1
 800215e:	d00f      	beq.n	8002180 <arm_rfft_q15+0x3c>
 8002160:	4618      	mov	r0, r3
 8002162:	7973      	ldrb	r3, [r6, #5]
 8002164:	f000 fa6a 	bl	800263c <arm_cfft_q15>
 8002168:	68b4      	ldr	r4, [r6, #8]
 800216a:	68f2      	ldr	r2, [r6, #12]
 800216c:	6933      	ldr	r3, [r6, #16]
 800216e:	9700      	str	r7, [sp, #0]
 8002170:	4640      	mov	r0, r8
 8002172:	4629      	mov	r1, r5
 8002174:	9401      	str	r4, [sp, #4]
 8002176:	f7ff ff8b 	bl	8002090 <arm_split_rfft_q15>
 800217a:	b005      	add	sp, #20
 800217c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002180:	f100 0308 	add.w	r3, r0, #8
 8002184:	e893 5008 	ldmia.w	r3, {r3, ip, lr}
 8002188:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800218c:	b31d      	cbz	r5, 80021d6 <arm_rfft_q15+0x92>
 800218e:	f109 0904 	add.w	r9, r9, #4
 8002192:	4489      	add	r9, r1
 8002194:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002198:	46bb      	mov	fp, r7
 800219a:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 800219e:	f8de 4000 	ldr.w	r4, [lr]
 80021a2:	fb41 f304 	smusd	r3, r1, r4
 80021a6:	f858 0b04 	ldr.w	r0, [r8], #4
 80021aa:	f8dc 2000 	ldr.w	r2, [ip]
 80021ae:	fb20 3302 	smlad	r3, r0, r2, r3
 80021b2:	fb21 f114 	smuadx	r1, r1, r4
 80021b6:	4249      	negs	r1, r1
 80021b8:	fb42 1210 	smlsdx	r2, r2, r0, r1
 80021bc:	3d01      	subs	r5, #1
 80021be:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80021c2:	ea4f 4222 	mov.w	r2, r2, asr #16
 80021c6:	44d6      	add	lr, sl
 80021c8:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 80021cc:	44d4      	add	ip, sl
 80021ce:	f84b 2b04 	str.w	r2, [fp], #4
 80021d2:	d1e2      	bne.n	800219a <arm_rfft_q15+0x56>
 80021d4:	7932      	ldrb	r2, [r6, #4]
 80021d6:	7973      	ldrb	r3, [r6, #5]
 80021d8:	9803      	ldr	r0, [sp, #12]
 80021da:	4639      	mov	r1, r7
 80021dc:	f000 fa2e 	bl	800263c <arm_cfft_q15>
 80021e0:	6833      	ldr	r3, [r6, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0c9      	beq.n	800217a <arm_rfft_q15+0x36>
 80021e6:	3f02      	subs	r7, #2
 80021e8:	2200      	movs	r2, #0
 80021ea:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	803b      	strh	r3, [r7, #0]
 80021f2:	6833      	ldr	r3, [r6, #0]
 80021f4:	3201      	adds	r2, #1
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d8f7      	bhi.n	80021ea <arm_rfft_q15+0xa6>
 80021fa:	b005      	add	sp, #20
 80021fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002200 <arm_rfft_init_q15>:
 8002200:	b289      	uxth	r1, r1
 8002202:	b430      	push	{r4, r5}
 8002204:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002208:	4d36      	ldr	r5, [pc, #216]	@ (80022e4 <arm_rfft_init_q15+0xe4>)
 800220a:	4c37      	ldr	r4, [pc, #220]	@ (80022e8 <arm_rfft_init_q15+0xe8>)
 800220c:	7102      	strb	r2, [r0, #4]
 800220e:	7143      	strb	r3, [r0, #5]
 8002210:	6001      	str	r1, [r0, #0]
 8002212:	60c5      	str	r5, [r0, #12]
 8002214:	6104      	str	r4, [r0, #16]
 8002216:	d050      	beq.n	80022ba <arm_rfft_init_q15+0xba>
 8002218:	d911      	bls.n	800223e <arm_rfft_init_q15+0x3e>
 800221a:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800221e:	d054      	beq.n	80022ca <arm_rfft_init_q15+0xca>
 8002220:	d938      	bls.n	8002294 <arm_rfft_init_q15+0x94>
 8002222:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002226:	d022      	beq.n	800226e <arm_rfft_init_q15+0x6e>
 8002228:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800222c:	d155      	bne.n	80022da <arm_rfft_init_q15+0xda>
 800222e:	2201      	movs	r2, #1
 8002230:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <arm_rfft_init_q15+0xec>)
 8002232:	6082      	str	r2, [r0, #8]
 8002234:	6143      	str	r3, [r0, #20]
 8002236:	2000      	movs	r0, #0
 8002238:	b240      	sxtb	r0, r0
 800223a:	bc30      	pop	{r4, r5}
 800223c:	4770      	bx	lr
 800223e:	2940      	cmp	r1, #64	@ 0x40
 8002240:	d033      	beq.n	80022aa <arm_rfft_init_q15+0xaa>
 8002242:	d91c      	bls.n	800227e <arm_rfft_init_q15+0x7e>
 8002244:	2980      	cmp	r1, #128	@ 0x80
 8002246:	d00a      	beq.n	800225e <arm_rfft_init_q15+0x5e>
 8002248:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800224c:	d145      	bne.n	80022da <arm_rfft_init_q15+0xda>
 800224e:	2220      	movs	r2, #32
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <arm_rfft_init_q15+0xf0>)
 8002252:	6082      	str	r2, [r0, #8]
 8002254:	6143      	str	r3, [r0, #20]
 8002256:	2000      	movs	r0, #0
 8002258:	b240      	sxtb	r0, r0
 800225a:	bc30      	pop	{r4, r5}
 800225c:	4770      	bx	lr
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <arm_rfft_init_q15+0xf4>)
 8002262:	6082      	str	r2, [r0, #8]
 8002264:	6143      	str	r3, [r0, #20]
 8002266:	2000      	movs	r0, #0
 8002268:	b240      	sxtb	r0, r0
 800226a:	bc30      	pop	{r4, r5}
 800226c:	4770      	bx	lr
 800226e:	2202      	movs	r2, #2
 8002270:	4b21      	ldr	r3, [pc, #132]	@ (80022f8 <arm_rfft_init_q15+0xf8>)
 8002272:	6082      	str	r2, [r0, #8]
 8002274:	6143      	str	r3, [r0, #20]
 8002276:	2000      	movs	r0, #0
 8002278:	b240      	sxtb	r0, r0
 800227a:	bc30      	pop	{r4, r5}
 800227c:	4770      	bx	lr
 800227e:	2920      	cmp	r1, #32
 8002280:	d12b      	bne.n	80022da <arm_rfft_init_q15+0xda>
 8002282:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002286:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <arm_rfft_init_q15+0xfc>)
 8002288:	6082      	str	r2, [r0, #8]
 800228a:	6143      	str	r3, [r0, #20]
 800228c:	2000      	movs	r0, #0
 800228e:	b240      	sxtb	r0, r0
 8002290:	bc30      	pop	{r4, r5}
 8002292:	4770      	bx	lr
 8002294:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002298:	d11f      	bne.n	80022da <arm_rfft_init_q15+0xda>
 800229a:	2208      	movs	r2, #8
 800229c:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <arm_rfft_init_q15+0x100>)
 800229e:	6082      	str	r2, [r0, #8]
 80022a0:	6143      	str	r3, [r0, #20]
 80022a2:	2000      	movs	r0, #0
 80022a4:	b240      	sxtb	r0, r0
 80022a6:	bc30      	pop	{r4, r5}
 80022a8:	4770      	bx	lr
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <arm_rfft_init_q15+0x104>)
 80022ae:	6082      	str	r2, [r0, #8]
 80022b0:	6143      	str	r3, [r0, #20]
 80022b2:	2000      	movs	r0, #0
 80022b4:	b240      	sxtb	r0, r0
 80022b6:	bc30      	pop	{r4, r5}
 80022b8:	4770      	bx	lr
 80022ba:	2210      	movs	r2, #16
 80022bc:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <arm_rfft_init_q15+0x108>)
 80022be:	6082      	str	r2, [r0, #8]
 80022c0:	6143      	str	r3, [r0, #20]
 80022c2:	2000      	movs	r0, #0
 80022c4:	b240      	sxtb	r0, r0
 80022c6:	bc30      	pop	{r4, r5}
 80022c8:	4770      	bx	lr
 80022ca:	2204      	movs	r2, #4
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <arm_rfft_init_q15+0x10c>)
 80022ce:	6082      	str	r2, [r0, #8]
 80022d0:	6143      	str	r3, [r0, #20]
 80022d2:	2000      	movs	r0, #0
 80022d4:	b240      	sxtb	r0, r0
 80022d6:	bc30      	pop	{r4, r5}
 80022d8:	4770      	bx	lr
 80022da:	20ff      	movs	r0, #255	@ 0xff
 80022dc:	b240      	sxtb	r0, r0
 80022de:	bc30      	pop	{r4, r5}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	0800364c 	.word	0x0800364c
 80022e8:	0800764c 	.word	0x0800764c
 80022ec:	0800b67c 	.word	0x0800b67c
 80022f0:	0800b6bc 	.word	0x0800b6bc
 80022f4:	0800b69c 	.word	0x0800b69c
 80022f8:	0800b6cc 	.word	0x0800b6cc
 80022fc:	0800b65c 	.word	0x0800b65c
 8002300:	0800b68c 	.word	0x0800b68c
 8002304:	0800b66c 	.word	0x0800b66c
 8002308:	0800b6ac 	.word	0x0800b6ac
 800230c:	0800b64c 	.word	0x0800b64c

08002310 <arm_cmplx_mag_q15>:
 8002310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002314:	b083      	sub	sp, #12
 8002316:	0893      	lsrs	r3, r2, #2
 8002318:	9200      	str	r2, [sp, #0]
 800231a:	4607      	mov	r7, r0
 800231c:	460e      	mov	r6, r1
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	d034      	beq.n	800238c <arm_cmplx_mag_q15+0x7c>
 8002322:	f100 0510 	add.w	r5, r0, #16
 8002326:	469b      	mov	fp, r3
 8002328:	460c      	mov	r4, r1
 800232a:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800232e:	fb20 f000 	smuad	r0, r0, r0
 8002332:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8002336:	fb22 f802 	smuad	r8, r2, r2
 800233a:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800233e:	fb23 fa03 	smuad	sl, r3, r3
 8002342:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8002346:	fb23 f903 	smuad	r9, r3, r3
 800234a:	4621      	mov	r1, r4
 800234c:	1440      	asrs	r0, r0, #17
 800234e:	f000 f831 	bl	80023b4 <arm_sqrt_q15>
 8002352:	1ca1      	adds	r1, r4, #2
 8002354:	ea4f 4068 	mov.w	r0, r8, asr #17
 8002358:	f000 f82c 	bl	80023b4 <arm_sqrt_q15>
 800235c:	f104 0806 	add.w	r8, r4, #6
 8002360:	1d21      	adds	r1, r4, #4
 8002362:	ea4f 406a 	mov.w	r0, sl, asr #17
 8002366:	f000 f825 	bl	80023b4 <arm_sqrt_q15>
 800236a:	ea4f 4069 	mov.w	r0, r9, asr #17
 800236e:	4641      	mov	r1, r8
 8002370:	f000 f820 	bl	80023b4 <arm_sqrt_q15>
 8002374:	f1bb 0b01 	subs.w	fp, fp, #1
 8002378:	f105 0510 	add.w	r5, r5, #16
 800237c:	f104 0408 	add.w	r4, r4, #8
 8002380:	d1d3      	bne.n	800232a <arm_cmplx_mag_q15+0x1a>
 8002382:	9a01      	ldr	r2, [sp, #4]
 8002384:	eb07 1702 	add.w	r7, r7, r2, lsl #4
 8002388:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 800238c:	9b00      	ldr	r3, [sp, #0]
 800238e:	f013 0403 	ands.w	r4, r3, #3
 8002392:	d00b      	beq.n	80023ac <arm_cmplx_mag_q15+0x9c>
 8002394:	f857 0b04 	ldr.w	r0, [r7], #4
 8002398:	fb20 f000 	smuad	r0, r0, r0
 800239c:	4631      	mov	r1, r6
 800239e:	1440      	asrs	r0, r0, #17
 80023a0:	f000 f808 	bl	80023b4 <arm_sqrt_q15>
 80023a4:	3c01      	subs	r4, #1
 80023a6:	f106 0602 	add.w	r6, r6, #2
 80023aa:	d1f3      	bne.n	8002394 <arm_cmplx_mag_q15+0x84>
 80023ac:	b003      	add	sp, #12
 80023ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b2:	bf00      	nop

080023b4 <arm_sqrt_q15>:
 80023b4:	2800      	cmp	r0, #0
 80023b6:	dd72      	ble.n	800249e <arm_sqrt_q15+0xea>
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ba:	fab0 f680 	clz	r6, r0
 80023be:	3e11      	subs	r6, #17
 80023c0:	b2b6      	uxth	r6, r6
 80023c2:	f016 0701 	ands.w	r7, r6, #1
 80023c6:	bf1a      	itte	ne
 80023c8:	f106 32ff 	addne.w	r2, r6, #4294967295	@ 0xffffffff
 80023cc:	fa00 f302 	lslne.w	r3, r0, r2
 80023d0:	fa00 f306 	lsleq.w	r3, r0, r6
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b21c      	sxth	r4, r3
 80023d8:	ee07 4a90 	vmov	s15, r4
 80023dc:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 80023e0:	4831      	ldr	r0, [pc, #196]	@ (80024a8 <arm_sqrt_q15+0xf4>)
 80023e2:	ee17 5a90 	vmov	r5, s15
 80023e6:	106d      	asrs	r5, r5, #1
 80023e8:	1b40      	subs	r0, r0, r5
 80023ea:	ee07 0a90 	vmov	s15, r0
 80023ee:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 80023f2:	b083      	sub	sp, #12
 80023f4:	edcd 7a01 	vstr	s15, [sp, #4]
 80023f8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80023fc:	fb15 f005 	smulbb	r0, r5, r5
 8002400:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8002404:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 8002408:	fb10 f004 	smulbb	r0, r0, r4
 800240c:	f340 32cf 	sbfx	r2, r0, #15, #16
 8002410:	f5c2 5040 	rsb	r0, r2, #12288	@ 0x3000
 8002414:	b22a      	sxth	r2, r5
 8002416:	fb00 f202 	mul.w	r2, r0, r2
 800241a:	f342 32cf 	sbfx	r2, r2, #15, #16
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	b292      	uxth	r2, r2
 8002422:	fb12 f002 	smulbb	r0, r2, r2
 8002426:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800242a:	fb14 f000 	smulbb	r0, r4, r0
 800242e:	f340 3ecf 	sbfx	lr, r0, #15, #16
 8002432:	f5ce 5040 	rsb	r0, lr, #12288	@ 0x3000
 8002436:	fa0f fe82 	sxth.w	lr, r2
 800243a:	fb00 fe0e 	mul.w	lr, r0, lr
 800243e:	f34e 3ecf 	sbfx	lr, lr, #15, #16
 8002442:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002446:	fa1f fe8e 	uxth.w	lr, lr
 800244a:	fb1e f50e 	smulbb	r5, lr, lr
 800244e:	f3c5 35cf 	ubfx	r5, r5, #15, #16
 8002452:	fb14 f405 	smulbb	r4, r4, r5
 8002456:	f344 32cf 	sbfx	r2, r4, #15, #16
 800245a:	f5c2 5440 	rsb	r4, r2, #12288	@ 0x3000
 800245e:	fa0f f28e 	sxth.w	r2, lr
 8002462:	fb04 f202 	mul.w	r2, r4, r2
 8002466:	f342 32cf 	sbfx	r2, r2, #15, #16
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	fb13 f302 	smulbb	r3, r3, r2
 8002470:	f343 33cf 	sbfx	r3, r3, #15, #16
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	b29b      	uxth	r3, r3
 8002478:	b15f      	cbz	r7, 8002492 <arm_sqrt_q15+0xde>
 800247a:	3e01      	subs	r6, #1
 800247c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8002480:	1076      	asrs	r6, r6, #1
 8002482:	b21b      	sxth	r3, r3
 8002484:	4133      	asrs	r3, r6
 8002486:	b29b      	uxth	r3, r3
 8002488:	2000      	movs	r0, #0
 800248a:	b240      	sxtb	r0, r0
 800248c:	800b      	strh	r3, [r1, #0]
 800248e:	b003      	add	sp, #12
 8002490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002492:	b21b      	sxth	r3, r3
 8002494:	f346 064e 	sbfx	r6, r6, #1, #15
 8002498:	4133      	asrs	r3, r6
 800249a:	b29b      	uxth	r3, r3
 800249c:	e7f4      	b.n	8002488 <arm_sqrt_q15+0xd4>
 800249e:	2300      	movs	r3, #0
 80024a0:	20ff      	movs	r0, #255	@ 0xff
 80024a2:	800b      	strh	r3, [r1, #0]
 80024a4:	b240      	sxtb	r0, r0
 80024a6:	4770      	bx	lr
 80024a8:	5f3759df 	.word	0x5f3759df

080024ac <arm_cfft_radix4by2_q15>:
 80024ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b0:	084d      	lsrs	r5, r1, #1
 80024b2:	b081      	sub	sp, #4
 80024b4:	4604      	mov	r4, r0
 80024b6:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80024ba:	4616      	mov	r6, r2
 80024bc:	d04c      	beq.n	8002558 <arm_cfft_radix4by2_q15+0xac>
 80024be:	46bc      	mov	ip, r7
 80024c0:	4686      	mov	lr, r0
 80024c2:	4691      	mov	r9, r2
 80024c4:	4629      	mov	r1, r5
 80024c6:	f04f 0800 	mov.w	r8, #0
 80024ca:	f859 2b04 	ldr.w	r2, [r9], #4
 80024ce:	f8de 3000 	ldr.w	r3, [lr]
 80024d2:	fa93 fa28 	shadd16	sl, r3, r8
 80024d6:	f8dc 0000 	ldr.w	r0, [ip]
 80024da:	fa90 f028 	shadd16	r0, r0, r8
 80024de:	fada fb10 	qsub16	fp, sl, r0
 80024e2:	fa9a f020 	shadd16	r0, sl, r0
 80024e6:	f84e 0b04 	str.w	r0, [lr], #4
 80024ea:	fb22 f00b 	smuad	r0, r2, fp
 80024ee:	fb42 f21b 	smusdx	r2, r2, fp
 80024f2:	0c13      	lsrs	r3, r2, #16
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80024fa:	3901      	subs	r1, #1
 80024fc:	f84c 3b04 	str.w	r3, [ip], #4
 8002500:	d1e3      	bne.n	80024ca <arm_cfft_radix4by2_q15+0x1e>
 8002502:	4629      	mov	r1, r5
 8002504:	4620      	mov	r0, r4
 8002506:	4632      	mov	r2, r6
 8002508:	2302      	movs	r3, #2
 800250a:	f000 f8f5 	bl	80026f8 <arm_radix4_butterfly_q15>
 800250e:	4629      	mov	r1, r5
 8002510:	2302      	movs	r3, #2
 8002512:	4638      	mov	r0, r7
 8002514:	4632      	mov	r2, r6
 8002516:	f000 f8ef 	bl	80026f8 <arm_radix4_butterfly_q15>
 800251a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800251e:	1ca3      	adds	r3, r4, #2
 8002520:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 8002524:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8002528:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800252c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8002530:	007f      	lsls	r7, r7, #1
 8002532:	0076      	lsls	r6, r6, #1
 8002534:	0040      	lsls	r0, r0, #1
 8002536:	0052      	lsls	r2, r2, #1
 8002538:	f823 7c02 	strh.w	r7, [r3, #-2]
 800253c:	3408      	adds	r4, #8
 800253e:	f824 6c06 	strh.w	r6, [r4, #-6]
 8002542:	f824 0c04 	strh.w	r0, [r4, #-4]
 8002546:	f824 2c02 	strh.w	r2, [r4, #-2]
 800254a:	42ac      	cmp	r4, r5
 800254c:	f103 0308 	add.w	r3, r3, #8
 8002550:	d1e6      	bne.n	8002520 <arm_cfft_radix4by2_q15+0x74>
 8002552:	b001      	add	sp, #4
 8002554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002558:	4629      	mov	r1, r5
 800255a:	2302      	movs	r3, #2
 800255c:	f000 f8cc 	bl	80026f8 <arm_radix4_butterfly_q15>
 8002560:	4638      	mov	r0, r7
 8002562:	4629      	mov	r1, r5
 8002564:	4632      	mov	r2, r6
 8002566:	2302      	movs	r3, #2
 8002568:	b001      	add	sp, #4
 800256a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256e:	f000 b8c3 	b.w	80026f8 <arm_radix4_butterfly_q15>
 8002572:	bf00      	nop

08002574 <arm_cfft_radix4by2_inverse_q15>:
 8002574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002578:	084d      	lsrs	r5, r1, #1
 800257a:	b081      	sub	sp, #4
 800257c:	4604      	mov	r4, r0
 800257e:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8002582:	4616      	mov	r6, r2
 8002584:	d04c      	beq.n	8002620 <arm_cfft_radix4by2_inverse_q15+0xac>
 8002586:	46bc      	mov	ip, r7
 8002588:	4686      	mov	lr, r0
 800258a:	4691      	mov	r9, r2
 800258c:	4629      	mov	r1, r5
 800258e:	f04f 0800 	mov.w	r8, #0
 8002592:	f859 2b04 	ldr.w	r2, [r9], #4
 8002596:	f8de 3000 	ldr.w	r3, [lr]
 800259a:	fa93 fa28 	shadd16	sl, r3, r8
 800259e:	f8dc 0000 	ldr.w	r0, [ip]
 80025a2:	fa90 f028 	shadd16	r0, r0, r8
 80025a6:	fada fb10 	qsub16	fp, sl, r0
 80025aa:	fa9a f020 	shadd16	r0, sl, r0
 80025ae:	f84e 0b04 	str.w	r0, [lr], #4
 80025b2:	fb42 f00b 	smusd	r0, r2, fp
 80025b6:	fb22 f21b 	smuadx	r2, r2, fp
 80025ba:	0c13      	lsrs	r3, r2, #16
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80025c2:	3901      	subs	r1, #1
 80025c4:	f84c 3b04 	str.w	r3, [ip], #4
 80025c8:	d1e3      	bne.n	8002592 <arm_cfft_radix4by2_inverse_q15+0x1e>
 80025ca:	4629      	mov	r1, r5
 80025cc:	4620      	mov	r0, r4
 80025ce:	4632      	mov	r2, r6
 80025d0:	2302      	movs	r3, #2
 80025d2:	f000 f9bf 	bl	8002954 <arm_radix4_butterfly_inverse_q15>
 80025d6:	4629      	mov	r1, r5
 80025d8:	2302      	movs	r3, #2
 80025da:	4638      	mov	r0, r7
 80025dc:	4632      	mov	r2, r6
 80025de:	f000 f9b9 	bl	8002954 <arm_radix4_butterfly_inverse_q15>
 80025e2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80025e6:	1ca3      	adds	r3, r4, #2
 80025e8:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 80025ec:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 80025f0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80025f4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80025f8:	007f      	lsls	r7, r7, #1
 80025fa:	0076      	lsls	r6, r6, #1
 80025fc:	0040      	lsls	r0, r0, #1
 80025fe:	0052      	lsls	r2, r2, #1
 8002600:	f823 7c02 	strh.w	r7, [r3, #-2]
 8002604:	3408      	adds	r4, #8
 8002606:	f824 6c06 	strh.w	r6, [r4, #-6]
 800260a:	f824 0c04 	strh.w	r0, [r4, #-4]
 800260e:	f824 2c02 	strh.w	r2, [r4, #-2]
 8002612:	42ac      	cmp	r4, r5
 8002614:	f103 0308 	add.w	r3, r3, #8
 8002618:	d1e6      	bne.n	80025e8 <arm_cfft_radix4by2_inverse_q15+0x74>
 800261a:	b001      	add	sp, #4
 800261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	4629      	mov	r1, r5
 8002622:	2302      	movs	r3, #2
 8002624:	f000 f996 	bl	8002954 <arm_radix4_butterfly_inverse_q15>
 8002628:	4638      	mov	r0, r7
 800262a:	4629      	mov	r1, r5
 800262c:	4632      	mov	r2, r6
 800262e:	2302      	movs	r3, #2
 8002630:	b001      	add	sp, #4
 8002632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002636:	f000 b98d 	b.w	8002954 <arm_radix4_butterfly_inverse_q15>
 800263a:	bf00      	nop

0800263c <arm_cfft_q15>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	2a01      	cmp	r2, #1
 8002640:	460d      	mov	r5, r1
 8002642:	4604      	mov	r4, r0
 8002644:	461e      	mov	r6, r3
 8002646:	8801      	ldrh	r1, [r0, #0]
 8002648:	d024      	beq.n	8002694 <arm_cfft_q15+0x58>
 800264a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800264e:	d013      	beq.n	8002678 <arm_cfft_q15+0x3c>
 8002650:	d808      	bhi.n	8002664 <arm_cfft_q15+0x28>
 8002652:	2920      	cmp	r1, #32
 8002654:	d031      	beq.n	80026ba <arm_cfft_q15+0x7e>
 8002656:	d945      	bls.n	80026e4 <arm_cfft_q15+0xa8>
 8002658:	2940      	cmp	r1, #64	@ 0x40
 800265a:	d00d      	beq.n	8002678 <arm_cfft_q15+0x3c>
 800265c:	2980      	cmp	r1, #128	@ 0x80
 800265e:	d02c      	beq.n	80026ba <arm_cfft_q15+0x7e>
 8002660:	b98e      	cbnz	r6, 8002686 <arm_cfft_q15+0x4a>
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002668:	d006      	beq.n	8002678 <arm_cfft_q15+0x3c>
 800266a:	d923      	bls.n	80026b4 <arm_cfft_q15+0x78>
 800266c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8002670:	d023      	beq.n	80026ba <arm_cfft_q15+0x7e>
 8002672:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002676:	d1f3      	bne.n	8002660 <arm_cfft_q15+0x24>
 8002678:	4628      	mov	r0, r5
 800267a:	6862      	ldr	r2, [r4, #4]
 800267c:	2301      	movs	r3, #1
 800267e:	f000 f83b 	bl	80026f8 <arm_radix4_butterfly_q15>
 8002682:	2e00      	cmp	r6, #0
 8002684:	d0ed      	beq.n	8002662 <arm_cfft_q15+0x26>
 8002686:	4628      	mov	r0, r5
 8002688:	89a1      	ldrh	r1, [r4, #12]
 800268a:	68a2      	ldr	r2, [r4, #8]
 800268c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002690:	f7fd bdd3 	b.w	800023a <arm_bitreversal_16>
 8002694:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002698:	d01e      	beq.n	80026d8 <arm_cfft_q15+0x9c>
 800269a:	d813      	bhi.n	80026c4 <arm_cfft_q15+0x88>
 800269c:	2920      	cmp	r1, #32
 800269e:	d004      	beq.n	80026aa <arm_cfft_q15+0x6e>
 80026a0:	d927      	bls.n	80026f2 <arm_cfft_q15+0xb6>
 80026a2:	2940      	cmp	r1, #64	@ 0x40
 80026a4:	d018      	beq.n	80026d8 <arm_cfft_q15+0x9c>
 80026a6:	2980      	cmp	r1, #128	@ 0x80
 80026a8:	d1da      	bne.n	8002660 <arm_cfft_q15+0x24>
 80026aa:	4628      	mov	r0, r5
 80026ac:	6862      	ldr	r2, [r4, #4]
 80026ae:	f7ff ff61 	bl	8002574 <arm_cfft_radix4by2_inverse_q15>
 80026b2:	e7d5      	b.n	8002660 <arm_cfft_q15+0x24>
 80026b4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80026b8:	d1d2      	bne.n	8002660 <arm_cfft_q15+0x24>
 80026ba:	4628      	mov	r0, r5
 80026bc:	6862      	ldr	r2, [r4, #4]
 80026be:	f7ff fef5 	bl	80024ac <arm_cfft_radix4by2_q15>
 80026c2:	e7cd      	b.n	8002660 <arm_cfft_q15+0x24>
 80026c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80026c8:	d006      	beq.n	80026d8 <arm_cfft_q15+0x9c>
 80026ca:	d90e      	bls.n	80026ea <arm_cfft_q15+0xae>
 80026cc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80026d0:	d0eb      	beq.n	80026aa <arm_cfft_q15+0x6e>
 80026d2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80026d6:	d1c3      	bne.n	8002660 <arm_cfft_q15+0x24>
 80026d8:	4628      	mov	r0, r5
 80026da:	6862      	ldr	r2, [r4, #4]
 80026dc:	2301      	movs	r3, #1
 80026de:	f000 f939 	bl	8002954 <arm_radix4_butterfly_inverse_q15>
 80026e2:	e7bd      	b.n	8002660 <arm_cfft_q15+0x24>
 80026e4:	2910      	cmp	r1, #16
 80026e6:	d1bb      	bne.n	8002660 <arm_cfft_q15+0x24>
 80026e8:	e7c6      	b.n	8002678 <arm_cfft_q15+0x3c>
 80026ea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80026ee:	d0dc      	beq.n	80026aa <arm_cfft_q15+0x6e>
 80026f0:	e7b6      	b.n	8002660 <arm_cfft_q15+0x24>
 80026f2:	2910      	cmp	r1, #16
 80026f4:	d1b4      	bne.n	8002660 <arm_cfft_q15+0x24>
 80026f6:	e7ef      	b.n	80026d8 <arm_cfft_q15+0x9c>

080026f8 <arm_radix4_butterfly_q15>:
 80026f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026fc:	b08f      	sub	sp, #60	@ 0x3c
 80026fe:	469b      	mov	fp, r3
 8002700:	9101      	str	r1, [sp, #4]
 8002702:	0889      	lsrs	r1, r1, #2
 8002704:	460e      	mov	r6, r1
 8002706:	910d      	str	r1, [sp, #52]	@ 0x34
 8002708:	0089      	lsls	r1, r1, #2
 800270a:	4607      	mov	r7, r0
 800270c:	900c      	str	r0, [sp, #48]	@ 0x30
 800270e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8002712:	4408      	add	r0, r1
 8002714:	2400      	movs	r4, #0
 8002716:	1845      	adds	r5, r0, r1
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4696      	mov	lr, r2
 800271c:	9209      	str	r2, [sp, #36]	@ 0x24
 800271e:	46b2      	mov	sl, r6
 8002720:	4429      	add	r1, r5
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	4626      	mov	r6, r4
 8002726:	4622      	mov	r2, r4
 8002728:	f8cd b000 	str.w	fp, [sp]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	fa93 fc22 	shadd16	ip, r3, r2
 8002732:	fa9c fc22 	shadd16	ip, ip, r2
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	fa93 f322 	shadd16	r3, r3, r2
 800273c:	fa93 f322 	shadd16	r3, r3, r2
 8002740:	fa9c f813 	qadd16	r8, ip, r3
 8002744:	fadc fc13 	qsub16	ip, ip, r3
 8002748:	6803      	ldr	r3, [r0, #0]
 800274a:	fa93 f322 	shadd16	r3, r3, r2
 800274e:	fa93 f922 	shadd16	r9, r3, r2
 8002752:	680b      	ldr	r3, [r1, #0]
 8002754:	fa93 f322 	shadd16	r3, r3, r2
 8002758:	fa93 f322 	shadd16	r3, r3, r2
 800275c:	fa99 f313 	qadd16	r3, r9, r3
 8002760:	fa98 f923 	shadd16	r9, r8, r3
 8002764:	f847 9b04 	str.w	r9, [r7], #4
 8002768:	fad8 f313 	qsub16	r3, r8, r3
 800276c:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 8002770:	fb29 fb03 	smuad	fp, r9, r3
 8002774:	fb49 f913 	smusdx	r9, r9, r3
 8002778:	6803      	ldr	r3, [r0, #0]
 800277a:	fa93 f322 	shadd16	r3, r3, r2
 800277e:	fa93 f822 	shadd16	r8, r3, r2
 8002782:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8002786:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800278a:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800278e:	f840 3b04 	str.w	r3, [r0], #4
 8002792:	680b      	ldr	r3, [r1, #0]
 8002794:	fa93 f322 	shadd16	r3, r3, r2
 8002798:	fa93 f322 	shadd16	r3, r3, r2
 800279c:	fad8 f313 	qsub16	r3, r8, r3
 80027a0:	faac f913 	qasx	r9, ip, r3
 80027a4:	faec fc13 	qsax	ip, ip, r3
 80027a8:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80027ac:	fb23 f80c 	smuad	r8, r3, ip
 80027b0:	fb43 f31c 	smusdx	r3, r3, ip
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80027bc:	f845 3b04 	str.w	r3, [r5], #4
 80027c0:	f85e 3004 	ldr.w	r3, [lr, r4]
 80027c4:	fb23 fc09 	smuad	ip, r3, r9
 80027c8:	fb43 f319 	smusdx	r3, r3, r9
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80027d4:	f841 3b04 	str.w	r3, [r1], #4
 80027d8:	9b00      	ldr	r3, [sp, #0]
 80027da:	441e      	add	r6, r3
 80027dc:	9b02      	ldr	r3, [sp, #8]
 80027de:	f1ba 0a01 	subs.w	sl, sl, #1
 80027e2:	441c      	add	r4, r3
 80027e4:	d1a2      	bne.n	800272c <arm_radix4_butterfly_q15+0x34>
 80027e6:	f8dd b000 	ldr.w	fp, [sp]
 80027ea:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80027ee:	9306      	str	r3, [sp, #24]
 80027f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	f240 8081 	bls.w	80028fa <arm_radix4_butterfly_q15+0x202>
 80027f8:	f8cd a008 	str.w	sl, [sp, #8]
 80027fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80027fe:	469a      	mov	sl, r3
 8002800:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8002804:	2200      	movs	r2, #0
 8002806:	4611      	mov	r1, r2
 8002808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800280a:	9204      	str	r2, [sp, #16]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	9308      	str	r3, [sp, #32]
 8002812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002814:	9207      	str	r2, [sp, #28]
 8002816:	9105      	str	r1, [sp, #20]
 8002818:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800281c:	9303      	str	r3, [sp, #12]
 800281e:	9908      	ldr	r1, [sp, #32]
 8002820:	9a03      	ldr	r2, [sp, #12]
 8002822:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002824:	1850      	adds	r0, r2, r1
 8002826:	9a05      	ldr	r2, [sp, #20]
 8002828:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800282c:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8002830:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8002834:	9b06      	ldr	r3, [sp, #24]
 8002836:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800283a:	18d3      	adds	r3, r2, r3
 800283c:	9305      	str	r3, [sp, #20]
 800283e:	9a04      	ldr	r2, [sp, #16]
 8002840:	9b01      	ldr	r3, [sp, #4]
 8002842:	1845      	adds	r5, r0, r1
 8002844:	4293      	cmp	r3, r2
 8002846:	46b6      	mov	lr, r6
 8002848:	eb05 0401 	add.w	r4, r5, r1
 800284c:	9e03      	ldr	r6, [sp, #12]
 800284e:	d941      	bls.n	80028d4 <arm_radix4_butterfly_q15+0x1dc>
 8002850:	eb02 0e0a 	add.w	lr, r2, sl
 8002854:	6833      	ldr	r3, [r6, #0]
 8002856:	682a      	ldr	r2, [r5, #0]
 8002858:	fa93 fb12 	qadd16	fp, r3, r2
 800285c:	fad3 f312 	qsub16	r3, r3, r2
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	6802      	ldr	r2, [r0, #0]
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	fa92 f211 	qadd16	r2, r2, r1
 800286a:	fa9b f322 	shadd16	r3, fp, r2
 800286e:	9902      	ldr	r1, [sp, #8]
 8002870:	fa93 f121 	shadd16	r1, r3, r1
 8002874:	6031      	str	r1, [r6, #0]
 8002876:	443e      	add	r6, r7
 8002878:	fadb f222 	shsub16	r2, fp, r2
 800287c:	fb28 f102 	smuad	r1, r8, r2
 8002880:	fb48 f212 	smusdx	r2, r8, r2
 8002884:	0c12      	lsrs	r2, r2, #16
 8002886:	0412      	lsls	r2, r2, #16
 8002888:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800288c:	6801      	ldr	r1, [r0, #0]
 800288e:	6002      	str	r2, [r0, #0]
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	4438      	add	r0, r7
 8002894:	fad1 f212 	qsub16	r2, r1, r2
 8002898:	9b00      	ldr	r3, [sp, #0]
 800289a:	faa3 f122 	shasx	r1, r3, r2
 800289e:	fae3 f322 	shsax	r3, r3, r2
 80028a2:	fb2c fb03 	smuad	fp, ip, r3
 80028a6:	fb4c f313 	smusdx	r3, ip, r3
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80028b2:	602b      	str	r3, [r5, #0]
 80028b4:	443d      	add	r5, r7
 80028b6:	fb29 f301 	smuad	r3, r9, r1
 80028ba:	fb49 f111 	smusdx	r1, r9, r1
 80028be:	0c09      	lsrs	r1, r1, #16
 80028c0:	0409      	lsls	r1, r1, #16
 80028c2:	9a01      	ldr	r2, [sp, #4]
 80028c4:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80028c8:	4673      	mov	r3, lr
 80028ca:	429a      	cmp	r2, r3
 80028cc:	6021      	str	r1, [r4, #0]
 80028ce:	44d6      	add	lr, sl
 80028d0:	443c      	add	r4, r7
 80028d2:	d8bf      	bhi.n	8002854 <arm_radix4_butterfly_q15+0x15c>
 80028d4:	9a03      	ldr	r2, [sp, #12]
 80028d6:	9b04      	ldr	r3, [sp, #16]
 80028d8:	3204      	adds	r2, #4
 80028da:	9203      	str	r2, [sp, #12]
 80028dc:	9a07      	ldr	r2, [sp, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	4293      	cmp	r3, r2
 80028e2:	9304      	str	r3, [sp, #16]
 80028e4:	d99b      	bls.n	800281e <arm_radix4_butterfly_q15+0x126>
 80028e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80028e8:	9a06      	ldr	r2, [sp, #24]
 80028ea:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80028f6:	9206      	str	r2, [sp, #24]
 80028f8:	d882      	bhi.n	8002800 <arm_radix4_butterfly_q15+0x108>
 80028fa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80028fc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80028fe:	3410      	adds	r4, #16
 8002900:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002904:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8002908:	fa93 f117 	qadd16	r1, r3, r7
 800290c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8002910:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002914:	fa92 f510 	qadd16	r5, r2, r0
 8002918:	fa91 f525 	shadd16	r5, r1, r5
 800291c:	f844 5c10 	str.w	r5, [r4, #-16]
 8002920:	fa92 f510 	qadd16	r5, r2, r0
 8002924:	fad1 f125 	shsub16	r1, r1, r5
 8002928:	f844 1c0c 	str.w	r1, [r4, #-12]
 800292c:	fad3 f317 	qsub16	r3, r3, r7
 8002930:	fad2 f210 	qsub16	r2, r2, r0
 8002934:	fae3 f122 	shsax	r1, r3, r2
 8002938:	f844 1c08 	str.w	r1, [r4, #-8]
 800293c:	faa3 f322 	shasx	r3, r3, r2
 8002940:	3e01      	subs	r6, #1
 8002942:	f844 3c04 	str.w	r3, [r4, #-4]
 8002946:	f104 0410 	add.w	r4, r4, #16
 800294a:	d1d9      	bne.n	8002900 <arm_radix4_butterfly_q15+0x208>
 800294c:	b00f      	add	sp, #60	@ 0x3c
 800294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop

08002954 <arm_radix4_butterfly_inverse_q15>:
 8002954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002958:	b08f      	sub	sp, #60	@ 0x3c
 800295a:	469b      	mov	fp, r3
 800295c:	9101      	str	r1, [sp, #4]
 800295e:	0889      	lsrs	r1, r1, #2
 8002960:	460e      	mov	r6, r1
 8002962:	910d      	str	r1, [sp, #52]	@ 0x34
 8002964:	0089      	lsls	r1, r1, #2
 8002966:	4607      	mov	r7, r0
 8002968:	900c      	str	r0, [sp, #48]	@ 0x30
 800296a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800296e:	4408      	add	r0, r1
 8002970:	2400      	movs	r4, #0
 8002972:	1845      	adds	r5, r0, r1
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4696      	mov	lr, r2
 8002978:	9209      	str	r2, [sp, #36]	@ 0x24
 800297a:	46b2      	mov	sl, r6
 800297c:	4429      	add	r1, r5
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	4626      	mov	r6, r4
 8002982:	4622      	mov	r2, r4
 8002984:	f8cd b000 	str.w	fp, [sp]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	fa93 fc22 	shadd16	ip, r3, r2
 800298e:	fa9c fc22 	shadd16	ip, ip, r2
 8002992:	682b      	ldr	r3, [r5, #0]
 8002994:	fa93 f322 	shadd16	r3, r3, r2
 8002998:	fa93 f322 	shadd16	r3, r3, r2
 800299c:	fa9c f813 	qadd16	r8, ip, r3
 80029a0:	fadc fc13 	qsub16	ip, ip, r3
 80029a4:	6803      	ldr	r3, [r0, #0]
 80029a6:	fa93 f322 	shadd16	r3, r3, r2
 80029aa:	fa93 f922 	shadd16	r9, r3, r2
 80029ae:	680b      	ldr	r3, [r1, #0]
 80029b0:	fa93 f322 	shadd16	r3, r3, r2
 80029b4:	fa93 f322 	shadd16	r3, r3, r2
 80029b8:	fa99 f313 	qadd16	r3, r9, r3
 80029bc:	fa98 f923 	shadd16	r9, r8, r3
 80029c0:	f847 9b04 	str.w	r9, [r7], #4
 80029c4:	fad8 f313 	qsub16	r3, r8, r3
 80029c8:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 80029cc:	fb49 fb03 	smusd	fp, r9, r3
 80029d0:	fb29 f913 	smuadx	r9, r9, r3
 80029d4:	6803      	ldr	r3, [r0, #0]
 80029d6:	fa93 f322 	shadd16	r3, r3, r2
 80029da:	fa93 f822 	shadd16	r8, r3, r2
 80029de:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80029e2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80029e6:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 80029ea:	f840 3b04 	str.w	r3, [r0], #4
 80029ee:	680b      	ldr	r3, [r1, #0]
 80029f0:	fa93 f322 	shadd16	r3, r3, r2
 80029f4:	fa93 f322 	shadd16	r3, r3, r2
 80029f8:	fad8 f313 	qsub16	r3, r8, r3
 80029fc:	faec f913 	qsax	r9, ip, r3
 8002a00:	faac fc13 	qasx	ip, ip, r3
 8002a04:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8002a08:	fb43 f80c 	smusd	r8, r3, ip
 8002a0c:	fb23 f31c 	smuadx	r3, r3, ip
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002a18:	f845 3b04 	str.w	r3, [r5], #4
 8002a1c:	f85e 3004 	ldr.w	r3, [lr, r4]
 8002a20:	fb43 fc09 	smusd	ip, r3, r9
 8002a24:	fb23 f319 	smuadx	r3, r3, r9
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002a30:	f841 3b04 	str.w	r3, [r1], #4
 8002a34:	9b00      	ldr	r3, [sp, #0]
 8002a36:	441e      	add	r6, r3
 8002a38:	9b02      	ldr	r3, [sp, #8]
 8002a3a:	f1ba 0a01 	subs.w	sl, sl, #1
 8002a3e:	441c      	add	r4, r3
 8002a40:	d1a2      	bne.n	8002988 <arm_radix4_butterfly_inverse_q15+0x34>
 8002a42:	f8dd b000 	ldr.w	fp, [sp]
 8002a46:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8002a4a:	9306      	str	r3, [sp, #24]
 8002a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	f240 8081 	bls.w	8002b56 <arm_radix4_butterfly_inverse_q15+0x202>
 8002a54:	f8cd a008 	str.w	sl, [sp, #8]
 8002a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8002a5a:	469a      	mov	sl, r3
 8002a5c:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8002a60:	2200      	movs	r2, #0
 8002a62:	4611      	mov	r1, r2
 8002a64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a66:	9204      	str	r2, [sp, #16]
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	9308      	str	r3, [sp, #32]
 8002a6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002a70:	9207      	str	r2, [sp, #28]
 8002a72:	9105      	str	r1, [sp, #20]
 8002a74:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8002a78:	9303      	str	r3, [sp, #12]
 8002a7a:	9908      	ldr	r1, [sp, #32]
 8002a7c:	9a03      	ldr	r2, [sp, #12]
 8002a7e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002a80:	1850      	adds	r0, r2, r1
 8002a82:	9a05      	ldr	r2, [sp, #20]
 8002a84:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002a88:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8002a8c:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8002a90:	9b06      	ldr	r3, [sp, #24]
 8002a92:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8002a96:	18d3      	adds	r3, r2, r3
 8002a98:	9305      	str	r3, [sp, #20]
 8002a9a:	9a04      	ldr	r2, [sp, #16]
 8002a9c:	9b01      	ldr	r3, [sp, #4]
 8002a9e:	1845      	adds	r5, r0, r1
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	46b6      	mov	lr, r6
 8002aa4:	eb05 0401 	add.w	r4, r5, r1
 8002aa8:	9e03      	ldr	r6, [sp, #12]
 8002aaa:	d941      	bls.n	8002b30 <arm_radix4_butterfly_inverse_q15+0x1dc>
 8002aac:	eb02 0e0a 	add.w	lr, r2, sl
 8002ab0:	6833      	ldr	r3, [r6, #0]
 8002ab2:	682a      	ldr	r2, [r5, #0]
 8002ab4:	fa93 fb12 	qadd16	fp, r3, r2
 8002ab8:	fad3 f312 	qsub16	r3, r3, r2
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6802      	ldr	r2, [r0, #0]
 8002ac0:	6821      	ldr	r1, [r4, #0]
 8002ac2:	fa92 f211 	qadd16	r2, r2, r1
 8002ac6:	fa9b f322 	shadd16	r3, fp, r2
 8002aca:	9902      	ldr	r1, [sp, #8]
 8002acc:	fa93 f121 	shadd16	r1, r3, r1
 8002ad0:	6031      	str	r1, [r6, #0]
 8002ad2:	443e      	add	r6, r7
 8002ad4:	fadb f222 	shsub16	r2, fp, r2
 8002ad8:	fb48 f102 	smusd	r1, r8, r2
 8002adc:	fb28 f212 	smuadx	r2, r8, r2
 8002ae0:	0c12      	lsrs	r2, r2, #16
 8002ae2:	0412      	lsls	r2, r2, #16
 8002ae4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8002ae8:	6801      	ldr	r1, [r0, #0]
 8002aea:	6002      	str	r2, [r0, #0]
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	4438      	add	r0, r7
 8002af0:	fad1 f212 	qsub16	r2, r1, r2
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	fae3 f122 	shsax	r1, r3, r2
 8002afa:	faa3 f322 	shasx	r3, r3, r2
 8002afe:	fb4c fb03 	smusd	fp, ip, r3
 8002b02:	fb2c f313 	smuadx	r3, ip, r3
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8002b0e:	602b      	str	r3, [r5, #0]
 8002b10:	443d      	add	r5, r7
 8002b12:	fb49 f301 	smusd	r3, r9, r1
 8002b16:	fb29 f111 	smuadx	r1, r9, r1
 8002b1a:	0c09      	lsrs	r1, r1, #16
 8002b1c:	0409      	lsls	r1, r1, #16
 8002b1e:	9a01      	ldr	r2, [sp, #4]
 8002b20:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8002b24:	4673      	mov	r3, lr
 8002b26:	429a      	cmp	r2, r3
 8002b28:	6021      	str	r1, [r4, #0]
 8002b2a:	44d6      	add	lr, sl
 8002b2c:	443c      	add	r4, r7
 8002b2e:	d8bf      	bhi.n	8002ab0 <arm_radix4_butterfly_inverse_q15+0x15c>
 8002b30:	9a03      	ldr	r2, [sp, #12]
 8002b32:	9b04      	ldr	r3, [sp, #16]
 8002b34:	3204      	adds	r2, #4
 8002b36:	9203      	str	r2, [sp, #12]
 8002b38:	9a07      	ldr	r2, [sp, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	9304      	str	r3, [sp, #16]
 8002b40:	d99b      	bls.n	8002a7a <arm_radix4_butterfly_inverse_q15+0x126>
 8002b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b44:	9a06      	ldr	r2, [sp, #24]
 8002b46:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b52:	9206      	str	r2, [sp, #24]
 8002b54:	d882      	bhi.n	8002a5c <arm_radix4_butterfly_inverse_q15+0x108>
 8002b56:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002b58:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8002b5a:	3410      	adds	r4, #16
 8002b5c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002b60:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8002b64:	fa93 f117 	qadd16	r1, r3, r7
 8002b68:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8002b6c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002b70:	fa92 f510 	qadd16	r5, r2, r0
 8002b74:	fa91 f525 	shadd16	r5, r1, r5
 8002b78:	f844 5c10 	str.w	r5, [r4, #-16]
 8002b7c:	fa92 f510 	qadd16	r5, r2, r0
 8002b80:	fad1 f125 	shsub16	r1, r1, r5
 8002b84:	f844 1c0c 	str.w	r1, [r4, #-12]
 8002b88:	fad3 f317 	qsub16	r3, r3, r7
 8002b8c:	fad2 f210 	qsub16	r2, r2, r0
 8002b90:	faa3 f122 	shasx	r1, r3, r2
 8002b94:	f844 1c08 	str.w	r1, [r4, #-8]
 8002b98:	fae3 f322 	shsax	r3, r3, r2
 8002b9c:	3e01      	subs	r6, #1
 8002b9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8002ba2:	f104 0410 	add.w	r4, r4, #16
 8002ba6:	d1d9      	bne.n	8002b5c <arm_radix4_butterfly_inverse_q15+0x208>
 8002ba8:	b00f      	add	sp, #60	@ 0x3c
 8002baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bae:	bf00      	nop

08002bb0 <sniprintf>:
 8002bb0:	b40c      	push	{r2, r3}
 8002bb2:	b530      	push	{r4, r5, lr}
 8002bb4:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <sniprintf+0x64>)
 8002bb6:	1e0c      	subs	r4, r1, #0
 8002bb8:	681d      	ldr	r5, [r3, #0]
 8002bba:	b09d      	sub	sp, #116	@ 0x74
 8002bbc:	da08      	bge.n	8002bd0 <sniprintf+0x20>
 8002bbe:	238b      	movs	r3, #139	@ 0x8b
 8002bc0:	602b      	str	r3, [r5, #0]
 8002bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bc6:	b01d      	add	sp, #116	@ 0x74
 8002bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bcc:	b002      	add	sp, #8
 8002bce:	4770      	bx	lr
 8002bd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002bd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002bd8:	bf14      	ite	ne
 8002bda:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002bde:	4623      	moveq	r3, r4
 8002be0:	9304      	str	r3, [sp, #16]
 8002be2:	9307      	str	r3, [sp, #28]
 8002be4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002be8:	9002      	str	r0, [sp, #8]
 8002bea:	9006      	str	r0, [sp, #24]
 8002bec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002bf0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002bf2:	ab21      	add	r3, sp, #132	@ 0x84
 8002bf4:	a902      	add	r1, sp, #8
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	f000 f995 	bl	8002f28 <_svfiprintf_r>
 8002bfe:	1c43      	adds	r3, r0, #1
 8002c00:	bfbc      	itt	lt
 8002c02:	238b      	movlt	r3, #139	@ 0x8b
 8002c04:	602b      	strlt	r3, [r5, #0]
 8002c06:	2c00      	cmp	r4, #0
 8002c08:	d0dd      	beq.n	8002bc6 <sniprintf+0x16>
 8002c0a:	9b02      	ldr	r3, [sp, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e7d9      	b.n	8002bc6 <sniprintf+0x16>
 8002c12:	bf00      	nop
 8002c14:	20000028 	.word	0x20000028

08002c18 <memset>:
 8002c18:	4402      	add	r2, r0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <memset+0xa>
 8002c20:	4770      	bx	lr
 8002c22:	f803 1b01 	strb.w	r1, [r3], #1
 8002c26:	e7f9      	b.n	8002c1c <memset+0x4>

08002c28 <__errno>:
 8002c28:	4b01      	ldr	r3, [pc, #4]	@ (8002c30 <__errno+0x8>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000028 	.word	0x20000028

08002c34 <__libc_init_array>:
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	4d0d      	ldr	r5, [pc, #52]	@ (8002c6c <__libc_init_array+0x38>)
 8002c38:	4c0d      	ldr	r4, [pc, #52]	@ (8002c70 <__libc_init_array+0x3c>)
 8002c3a:	1b64      	subs	r4, r4, r5
 8002c3c:	10a4      	asrs	r4, r4, #2
 8002c3e:	2600      	movs	r6, #0
 8002c40:	42a6      	cmp	r6, r4
 8002c42:	d109      	bne.n	8002c58 <__libc_init_array+0x24>
 8002c44:	4d0b      	ldr	r5, [pc, #44]	@ (8002c74 <__libc_init_array+0x40>)
 8002c46:	4c0c      	ldr	r4, [pc, #48]	@ (8002c78 <__libc_init_array+0x44>)
 8002c48:	f000 fc66 	bl	8003518 <_init>
 8002c4c:	1b64      	subs	r4, r4, r5
 8002c4e:	10a4      	asrs	r4, r4, #2
 8002c50:	2600      	movs	r6, #0
 8002c52:	42a6      	cmp	r6, r4
 8002c54:	d105      	bne.n	8002c62 <__libc_init_array+0x2e>
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
 8002c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5c:	4798      	blx	r3
 8002c5e:	3601      	adds	r6, #1
 8002c60:	e7ee      	b.n	8002c40 <__libc_init_array+0xc>
 8002c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c66:	4798      	blx	r3
 8002c68:	3601      	adds	r6, #1
 8002c6a:	e7f2      	b.n	8002c52 <__libc_init_array+0x1e>
 8002c6c:	080154e0 	.word	0x080154e0
 8002c70:	080154e0 	.word	0x080154e0
 8002c74:	080154e0 	.word	0x080154e0
 8002c78:	080154e4 	.word	0x080154e4

08002c7c <__retarget_lock_acquire_recursive>:
 8002c7c:	4770      	bx	lr

08002c7e <__retarget_lock_release_recursive>:
 8002c7e:	4770      	bx	lr

08002c80 <_free_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4605      	mov	r5, r0
 8002c84:	2900      	cmp	r1, #0
 8002c86:	d041      	beq.n	8002d0c <_free_r+0x8c>
 8002c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c8c:	1f0c      	subs	r4, r1, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bfb8      	it	lt
 8002c92:	18e4      	addlt	r4, r4, r3
 8002c94:	f000 f8e0 	bl	8002e58 <__malloc_lock>
 8002c98:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <_free_r+0x90>)
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	b933      	cbnz	r3, 8002cac <_free_r+0x2c>
 8002c9e:	6063      	str	r3, [r4, #4]
 8002ca0:	6014      	str	r4, [r2, #0]
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ca8:	f000 b8dc 	b.w	8002e64 <__malloc_unlock>
 8002cac:	42a3      	cmp	r3, r4
 8002cae:	d908      	bls.n	8002cc2 <_free_r+0x42>
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	1821      	adds	r1, r4, r0
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	bf01      	itttt	eq
 8002cb8:	6819      	ldreq	r1, [r3, #0]
 8002cba:	685b      	ldreq	r3, [r3, #4]
 8002cbc:	1809      	addeq	r1, r1, r0
 8002cbe:	6021      	streq	r1, [r4, #0]
 8002cc0:	e7ed      	b.n	8002c9e <_free_r+0x1e>
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	b10b      	cbz	r3, 8002ccc <_free_r+0x4c>
 8002cc8:	42a3      	cmp	r3, r4
 8002cca:	d9fa      	bls.n	8002cc2 <_free_r+0x42>
 8002ccc:	6811      	ldr	r1, [r2, #0]
 8002cce:	1850      	adds	r0, r2, r1
 8002cd0:	42a0      	cmp	r0, r4
 8002cd2:	d10b      	bne.n	8002cec <_free_r+0x6c>
 8002cd4:	6820      	ldr	r0, [r4, #0]
 8002cd6:	4401      	add	r1, r0
 8002cd8:	1850      	adds	r0, r2, r1
 8002cda:	4283      	cmp	r3, r0
 8002cdc:	6011      	str	r1, [r2, #0]
 8002cde:	d1e0      	bne.n	8002ca2 <_free_r+0x22>
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	6053      	str	r3, [r2, #4]
 8002ce6:	4408      	add	r0, r1
 8002ce8:	6010      	str	r0, [r2, #0]
 8002cea:	e7da      	b.n	8002ca2 <_free_r+0x22>
 8002cec:	d902      	bls.n	8002cf4 <_free_r+0x74>
 8002cee:	230c      	movs	r3, #12
 8002cf0:	602b      	str	r3, [r5, #0]
 8002cf2:	e7d6      	b.n	8002ca2 <_free_r+0x22>
 8002cf4:	6820      	ldr	r0, [r4, #0]
 8002cf6:	1821      	adds	r1, r4, r0
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	bf04      	itt	eq
 8002cfc:	6819      	ldreq	r1, [r3, #0]
 8002cfe:	685b      	ldreq	r3, [r3, #4]
 8002d00:	6063      	str	r3, [r4, #4]
 8002d02:	bf04      	itt	eq
 8002d04:	1809      	addeq	r1, r1, r0
 8002d06:	6021      	streq	r1, [r4, #0]
 8002d08:	6054      	str	r4, [r2, #4]
 8002d0a:	e7ca      	b.n	8002ca2 <_free_r+0x22>
 8002d0c:	bd38      	pop	{r3, r4, r5, pc}
 8002d0e:	bf00      	nop
 8002d10:	200001f4 	.word	0x200001f4

08002d14 <sbrk_aligned>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4e0f      	ldr	r6, [pc, #60]	@ (8002d54 <sbrk_aligned+0x40>)
 8002d18:	460c      	mov	r4, r1
 8002d1a:	6831      	ldr	r1, [r6, #0]
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	b911      	cbnz	r1, 8002d26 <sbrk_aligned+0x12>
 8002d20:	f000 fba6 	bl	8003470 <_sbrk_r>
 8002d24:	6030      	str	r0, [r6, #0]
 8002d26:	4621      	mov	r1, r4
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 fba1 	bl	8003470 <_sbrk_r>
 8002d2e:	1c43      	adds	r3, r0, #1
 8002d30:	d103      	bne.n	8002d3a <sbrk_aligned+0x26>
 8002d32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002d36:	4620      	mov	r0, r4
 8002d38:	bd70      	pop	{r4, r5, r6, pc}
 8002d3a:	1cc4      	adds	r4, r0, #3
 8002d3c:	f024 0403 	bic.w	r4, r4, #3
 8002d40:	42a0      	cmp	r0, r4
 8002d42:	d0f8      	beq.n	8002d36 <sbrk_aligned+0x22>
 8002d44:	1a21      	subs	r1, r4, r0
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 fb92 	bl	8003470 <_sbrk_r>
 8002d4c:	3001      	adds	r0, #1
 8002d4e:	d1f2      	bne.n	8002d36 <sbrk_aligned+0x22>
 8002d50:	e7ef      	b.n	8002d32 <sbrk_aligned+0x1e>
 8002d52:	bf00      	nop
 8002d54:	200001f0 	.word	0x200001f0

08002d58 <_malloc_r>:
 8002d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d5c:	1ccd      	adds	r5, r1, #3
 8002d5e:	f025 0503 	bic.w	r5, r5, #3
 8002d62:	3508      	adds	r5, #8
 8002d64:	2d0c      	cmp	r5, #12
 8002d66:	bf38      	it	cc
 8002d68:	250c      	movcc	r5, #12
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	db01      	blt.n	8002d74 <_malloc_r+0x1c>
 8002d70:	42a9      	cmp	r1, r5
 8002d72:	d904      	bls.n	8002d7e <_malloc_r+0x26>
 8002d74:	230c      	movs	r3, #12
 8002d76:	6033      	str	r3, [r6, #0]
 8002d78:	2000      	movs	r0, #0
 8002d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e54 <_malloc_r+0xfc>
 8002d82:	f000 f869 	bl	8002e58 <__malloc_lock>
 8002d86:	f8d8 3000 	ldr.w	r3, [r8]
 8002d8a:	461c      	mov	r4, r3
 8002d8c:	bb44      	cbnz	r4, 8002de0 <_malloc_r+0x88>
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4630      	mov	r0, r6
 8002d92:	f7ff ffbf 	bl	8002d14 <sbrk_aligned>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	4604      	mov	r4, r0
 8002d9a:	d158      	bne.n	8002e4e <_malloc_r+0xf6>
 8002d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8002da0:	4627      	mov	r7, r4
 8002da2:	2f00      	cmp	r7, #0
 8002da4:	d143      	bne.n	8002e2e <_malloc_r+0xd6>
 8002da6:	2c00      	cmp	r4, #0
 8002da8:	d04b      	beq.n	8002e42 <_malloc_r+0xea>
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	4639      	mov	r1, r7
 8002dae:	4630      	mov	r0, r6
 8002db0:	eb04 0903 	add.w	r9, r4, r3
 8002db4:	f000 fb5c 	bl	8003470 <_sbrk_r>
 8002db8:	4581      	cmp	r9, r0
 8002dba:	d142      	bne.n	8002e42 <_malloc_r+0xea>
 8002dbc:	6821      	ldr	r1, [r4, #0]
 8002dbe:	1a6d      	subs	r5, r5, r1
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f7ff ffa6 	bl	8002d14 <sbrk_aligned>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d03a      	beq.n	8002e42 <_malloc_r+0xea>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	442b      	add	r3, r5
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	bb62      	cbnz	r2, 8002e34 <_malloc_r+0xdc>
 8002dda:	f8c8 7000 	str.w	r7, [r8]
 8002dde:	e00f      	b.n	8002e00 <_malloc_r+0xa8>
 8002de0:	6822      	ldr	r2, [r4, #0]
 8002de2:	1b52      	subs	r2, r2, r5
 8002de4:	d420      	bmi.n	8002e28 <_malloc_r+0xd0>
 8002de6:	2a0b      	cmp	r2, #11
 8002de8:	d917      	bls.n	8002e1a <_malloc_r+0xc2>
 8002dea:	1961      	adds	r1, r4, r5
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	6025      	str	r5, [r4, #0]
 8002df0:	bf18      	it	ne
 8002df2:	6059      	strne	r1, [r3, #4]
 8002df4:	6863      	ldr	r3, [r4, #4]
 8002df6:	bf08      	it	eq
 8002df8:	f8c8 1000 	streq.w	r1, [r8]
 8002dfc:	5162      	str	r2, [r4, r5]
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 f82f 	bl	8002e64 <__malloc_unlock>
 8002e06:	f104 000b 	add.w	r0, r4, #11
 8002e0a:	1d23      	adds	r3, r4, #4
 8002e0c:	f020 0007 	bic.w	r0, r0, #7
 8002e10:	1ac2      	subs	r2, r0, r3
 8002e12:	bf1c      	itt	ne
 8002e14:	1a1b      	subne	r3, r3, r0
 8002e16:	50a3      	strne	r3, [r4, r2]
 8002e18:	e7af      	b.n	8002d7a <_malloc_r+0x22>
 8002e1a:	6862      	ldr	r2, [r4, #4]
 8002e1c:	42a3      	cmp	r3, r4
 8002e1e:	bf0c      	ite	eq
 8002e20:	f8c8 2000 	streq.w	r2, [r8]
 8002e24:	605a      	strne	r2, [r3, #4]
 8002e26:	e7eb      	b.n	8002e00 <_malloc_r+0xa8>
 8002e28:	4623      	mov	r3, r4
 8002e2a:	6864      	ldr	r4, [r4, #4]
 8002e2c:	e7ae      	b.n	8002d8c <_malloc_r+0x34>
 8002e2e:	463c      	mov	r4, r7
 8002e30:	687f      	ldr	r7, [r7, #4]
 8002e32:	e7b6      	b.n	8002da2 <_malloc_r+0x4a>
 8002e34:	461a      	mov	r2, r3
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	d1fb      	bne.n	8002e34 <_malloc_r+0xdc>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6053      	str	r3, [r2, #4]
 8002e40:	e7de      	b.n	8002e00 <_malloc_r+0xa8>
 8002e42:	230c      	movs	r3, #12
 8002e44:	6033      	str	r3, [r6, #0]
 8002e46:	4630      	mov	r0, r6
 8002e48:	f000 f80c 	bl	8002e64 <__malloc_unlock>
 8002e4c:	e794      	b.n	8002d78 <_malloc_r+0x20>
 8002e4e:	6005      	str	r5, [r0, #0]
 8002e50:	e7d6      	b.n	8002e00 <_malloc_r+0xa8>
 8002e52:	bf00      	nop
 8002e54:	200001f4 	.word	0x200001f4

08002e58 <__malloc_lock>:
 8002e58:	4801      	ldr	r0, [pc, #4]	@ (8002e60 <__malloc_lock+0x8>)
 8002e5a:	f7ff bf0f 	b.w	8002c7c <__retarget_lock_acquire_recursive>
 8002e5e:	bf00      	nop
 8002e60:	200001ec 	.word	0x200001ec

08002e64 <__malloc_unlock>:
 8002e64:	4801      	ldr	r0, [pc, #4]	@ (8002e6c <__malloc_unlock+0x8>)
 8002e66:	f7ff bf0a 	b.w	8002c7e <__retarget_lock_release_recursive>
 8002e6a:	bf00      	nop
 8002e6c:	200001ec 	.word	0x200001ec

08002e70 <__ssputs_r>:
 8002e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e74:	688e      	ldr	r6, [r1, #8]
 8002e76:	461f      	mov	r7, r3
 8002e78:	42be      	cmp	r6, r7
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	4682      	mov	sl, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4690      	mov	r8, r2
 8002e82:	d82d      	bhi.n	8002ee0 <__ssputs_r+0x70>
 8002e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e8c:	d026      	beq.n	8002edc <__ssputs_r+0x6c>
 8002e8e:	6965      	ldr	r5, [r4, #20]
 8002e90:	6909      	ldr	r1, [r1, #16]
 8002e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e96:	eba3 0901 	sub.w	r9, r3, r1
 8002e9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e9e:	1c7b      	adds	r3, r7, #1
 8002ea0:	444b      	add	r3, r9
 8002ea2:	106d      	asrs	r5, r5, #1
 8002ea4:	429d      	cmp	r5, r3
 8002ea6:	bf38      	it	cc
 8002ea8:	461d      	movcc	r5, r3
 8002eaa:	0553      	lsls	r3, r2, #21
 8002eac:	d527      	bpl.n	8002efe <__ssputs_r+0x8e>
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7ff ff52 	bl	8002d58 <_malloc_r>
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	b360      	cbz	r0, 8002f12 <__ssputs_r+0xa2>
 8002eb8:	6921      	ldr	r1, [r4, #16]
 8002eba:	464a      	mov	r2, r9
 8002ebc:	f000 fae8 	bl	8003490 <memcpy>
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	6126      	str	r6, [r4, #16]
 8002ece:	6165      	str	r5, [r4, #20]
 8002ed0:	444e      	add	r6, r9
 8002ed2:	eba5 0509 	sub.w	r5, r5, r9
 8002ed6:	6026      	str	r6, [r4, #0]
 8002ed8:	60a5      	str	r5, [r4, #8]
 8002eda:	463e      	mov	r6, r7
 8002edc:	42be      	cmp	r6, r7
 8002ede:	d900      	bls.n	8002ee2 <__ssputs_r+0x72>
 8002ee0:	463e      	mov	r6, r7
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	f000 faa8 	bl	800343c <memmove>
 8002eec:	68a3      	ldr	r3, [r4, #8]
 8002eee:	1b9b      	subs	r3, r3, r6
 8002ef0:	60a3      	str	r3, [r4, #8]
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	4433      	add	r3, r6
 8002ef6:	6023      	str	r3, [r4, #0]
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002efe:	462a      	mov	r2, r5
 8002f00:	f000 fad4 	bl	80034ac <_realloc_r>
 8002f04:	4606      	mov	r6, r0
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d1e0      	bne.n	8002ecc <__ssputs_r+0x5c>
 8002f0a:	6921      	ldr	r1, [r4, #16]
 8002f0c:	4650      	mov	r0, sl
 8002f0e:	f7ff feb7 	bl	8002c80 <_free_r>
 8002f12:	230c      	movs	r3, #12
 8002f14:	f8ca 3000 	str.w	r3, [sl]
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f1e:	81a3      	strh	r3, [r4, #12]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f24:	e7e9      	b.n	8002efa <__ssputs_r+0x8a>
	...

08002f28 <_svfiprintf_r>:
 8002f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2c:	4698      	mov	r8, r3
 8002f2e:	898b      	ldrh	r3, [r1, #12]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	b09d      	sub	sp, #116	@ 0x74
 8002f34:	4607      	mov	r7, r0
 8002f36:	460d      	mov	r5, r1
 8002f38:	4614      	mov	r4, r2
 8002f3a:	d510      	bpl.n	8002f5e <_svfiprintf_r+0x36>
 8002f3c:	690b      	ldr	r3, [r1, #16]
 8002f3e:	b973      	cbnz	r3, 8002f5e <_svfiprintf_r+0x36>
 8002f40:	2140      	movs	r1, #64	@ 0x40
 8002f42:	f7ff ff09 	bl	8002d58 <_malloc_r>
 8002f46:	6028      	str	r0, [r5, #0]
 8002f48:	6128      	str	r0, [r5, #16]
 8002f4a:	b930      	cbnz	r0, 8002f5a <_svfiprintf_r+0x32>
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f54:	b01d      	add	sp, #116	@ 0x74
 8002f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5a:	2340      	movs	r3, #64	@ 0x40
 8002f5c:	616b      	str	r3, [r5, #20]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f62:	2320      	movs	r3, #32
 8002f64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f6c:	2330      	movs	r3, #48	@ 0x30
 8002f6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800310c <_svfiprintf_r+0x1e4>
 8002f72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f76:	f04f 0901 	mov.w	r9, #1
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	469a      	mov	sl, r3
 8002f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f82:	b10a      	cbz	r2, 8002f88 <_svfiprintf_r+0x60>
 8002f84:	2a25      	cmp	r2, #37	@ 0x25
 8002f86:	d1f9      	bne.n	8002f7c <_svfiprintf_r+0x54>
 8002f88:	ebba 0b04 	subs.w	fp, sl, r4
 8002f8c:	d00b      	beq.n	8002fa6 <_svfiprintf_r+0x7e>
 8002f8e:	465b      	mov	r3, fp
 8002f90:	4622      	mov	r2, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7ff ff6b 	bl	8002e70 <__ssputs_r>
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	f000 80a7 	beq.w	80030ee <_svfiprintf_r+0x1c6>
 8002fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002fa2:	445a      	add	r2, fp
 8002fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 809f 	beq.w	80030ee <_svfiprintf_r+0x1c6>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fba:	f10a 0a01 	add.w	sl, sl, #1
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	9307      	str	r3, [sp, #28]
 8002fc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002fc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8002fc8:	4654      	mov	r4, sl
 8002fca:	2205      	movs	r2, #5
 8002fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd0:	484e      	ldr	r0, [pc, #312]	@ (800310c <_svfiprintf_r+0x1e4>)
 8002fd2:	f7fd f95d 	bl	8000290 <memchr>
 8002fd6:	9a04      	ldr	r2, [sp, #16]
 8002fd8:	b9d8      	cbnz	r0, 8003012 <_svfiprintf_r+0xea>
 8002fda:	06d0      	lsls	r0, r2, #27
 8002fdc:	bf44      	itt	mi
 8002fde:	2320      	movmi	r3, #32
 8002fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fe4:	0711      	lsls	r1, r2, #28
 8002fe6:	bf44      	itt	mi
 8002fe8:	232b      	movmi	r3, #43	@ 0x2b
 8002fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fee:	f89a 3000 	ldrb.w	r3, [sl]
 8002ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ff4:	d015      	beq.n	8003022 <_svfiprintf_r+0xfa>
 8002ff6:	9a07      	ldr	r2, [sp, #28]
 8002ff8:	4654      	mov	r4, sl
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f04f 0c0a 	mov.w	ip, #10
 8003000:	4621      	mov	r1, r4
 8003002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003006:	3b30      	subs	r3, #48	@ 0x30
 8003008:	2b09      	cmp	r3, #9
 800300a:	d94b      	bls.n	80030a4 <_svfiprintf_r+0x17c>
 800300c:	b1b0      	cbz	r0, 800303c <_svfiprintf_r+0x114>
 800300e:	9207      	str	r2, [sp, #28]
 8003010:	e014      	b.n	800303c <_svfiprintf_r+0x114>
 8003012:	eba0 0308 	sub.w	r3, r0, r8
 8003016:	fa09 f303 	lsl.w	r3, r9, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	9304      	str	r3, [sp, #16]
 800301e:	46a2      	mov	sl, r4
 8003020:	e7d2      	b.n	8002fc8 <_svfiprintf_r+0xa0>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	9103      	str	r1, [sp, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	bfbb      	ittet	lt
 800302e:	425b      	neglt	r3, r3
 8003030:	f042 0202 	orrlt.w	r2, r2, #2
 8003034:	9307      	strge	r3, [sp, #28]
 8003036:	9307      	strlt	r3, [sp, #28]
 8003038:	bfb8      	it	lt
 800303a:	9204      	strlt	r2, [sp, #16]
 800303c:	7823      	ldrb	r3, [r4, #0]
 800303e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003040:	d10a      	bne.n	8003058 <_svfiprintf_r+0x130>
 8003042:	7863      	ldrb	r3, [r4, #1]
 8003044:	2b2a      	cmp	r3, #42	@ 0x2a
 8003046:	d132      	bne.n	80030ae <_svfiprintf_r+0x186>
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	9203      	str	r2, [sp, #12]
 8003050:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003054:	3402      	adds	r4, #2
 8003056:	9305      	str	r3, [sp, #20]
 8003058:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800311c <_svfiprintf_r+0x1f4>
 800305c:	7821      	ldrb	r1, [r4, #0]
 800305e:	2203      	movs	r2, #3
 8003060:	4650      	mov	r0, sl
 8003062:	f7fd f915 	bl	8000290 <memchr>
 8003066:	b138      	cbz	r0, 8003078 <_svfiprintf_r+0x150>
 8003068:	9b04      	ldr	r3, [sp, #16]
 800306a:	eba0 000a 	sub.w	r0, r0, sl
 800306e:	2240      	movs	r2, #64	@ 0x40
 8003070:	4082      	lsls	r2, r0
 8003072:	4313      	orrs	r3, r2
 8003074:	3401      	adds	r4, #1
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800307c:	4824      	ldr	r0, [pc, #144]	@ (8003110 <_svfiprintf_r+0x1e8>)
 800307e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003082:	2206      	movs	r2, #6
 8003084:	f7fd f904 	bl	8000290 <memchr>
 8003088:	2800      	cmp	r0, #0
 800308a:	d036      	beq.n	80030fa <_svfiprintf_r+0x1d2>
 800308c:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <_svfiprintf_r+0x1ec>)
 800308e:	bb1b      	cbnz	r3, 80030d8 <_svfiprintf_r+0x1b0>
 8003090:	9b03      	ldr	r3, [sp, #12]
 8003092:	3307      	adds	r3, #7
 8003094:	f023 0307 	bic.w	r3, r3, #7
 8003098:	3308      	adds	r3, #8
 800309a:	9303      	str	r3, [sp, #12]
 800309c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800309e:	4433      	add	r3, r6
 80030a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80030a2:	e76a      	b.n	8002f7a <_svfiprintf_r+0x52>
 80030a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80030a8:	460c      	mov	r4, r1
 80030aa:	2001      	movs	r0, #1
 80030ac:	e7a8      	b.n	8003000 <_svfiprintf_r+0xd8>
 80030ae:	2300      	movs	r3, #0
 80030b0:	3401      	adds	r4, #1
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f04f 0c0a 	mov.w	ip, #10
 80030ba:	4620      	mov	r0, r4
 80030bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c0:	3a30      	subs	r2, #48	@ 0x30
 80030c2:	2a09      	cmp	r2, #9
 80030c4:	d903      	bls.n	80030ce <_svfiprintf_r+0x1a6>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0c6      	beq.n	8003058 <_svfiprintf_r+0x130>
 80030ca:	9105      	str	r1, [sp, #20]
 80030cc:	e7c4      	b.n	8003058 <_svfiprintf_r+0x130>
 80030ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80030d2:	4604      	mov	r4, r0
 80030d4:	2301      	movs	r3, #1
 80030d6:	e7f0      	b.n	80030ba <_svfiprintf_r+0x192>
 80030d8:	ab03      	add	r3, sp, #12
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	462a      	mov	r2, r5
 80030de:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <_svfiprintf_r+0x1f0>)
 80030e0:	a904      	add	r1, sp, #16
 80030e2:	4638      	mov	r0, r7
 80030e4:	f3af 8000 	nop.w
 80030e8:	1c42      	adds	r2, r0, #1
 80030ea:	4606      	mov	r6, r0
 80030ec:	d1d6      	bne.n	800309c <_svfiprintf_r+0x174>
 80030ee:	89ab      	ldrh	r3, [r5, #12]
 80030f0:	065b      	lsls	r3, r3, #25
 80030f2:	f53f af2d 	bmi.w	8002f50 <_svfiprintf_r+0x28>
 80030f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030f8:	e72c      	b.n	8002f54 <_svfiprintf_r+0x2c>
 80030fa:	ab03      	add	r3, sp, #12
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	462a      	mov	r2, r5
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <_svfiprintf_r+0x1f0>)
 8003102:	a904      	add	r1, sp, #16
 8003104:	4638      	mov	r0, r7
 8003106:	f000 f879 	bl	80031fc <_printf_i>
 800310a:	e7ed      	b.n	80030e8 <_svfiprintf_r+0x1c0>
 800310c:	080154a4 	.word	0x080154a4
 8003110:	080154ae 	.word	0x080154ae
 8003114:	00000000 	.word	0x00000000
 8003118:	08002e71 	.word	0x08002e71
 800311c:	080154aa 	.word	0x080154aa

08003120 <_printf_common>:
 8003120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003124:	4616      	mov	r6, r2
 8003126:	4698      	mov	r8, r3
 8003128:	688a      	ldr	r2, [r1, #8]
 800312a:	690b      	ldr	r3, [r1, #16]
 800312c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003130:	4293      	cmp	r3, r2
 8003132:	bfb8      	it	lt
 8003134:	4613      	movlt	r3, r2
 8003136:	6033      	str	r3, [r6, #0]
 8003138:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800313c:	4607      	mov	r7, r0
 800313e:	460c      	mov	r4, r1
 8003140:	b10a      	cbz	r2, 8003146 <_printf_common+0x26>
 8003142:	3301      	adds	r3, #1
 8003144:	6033      	str	r3, [r6, #0]
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	0699      	lsls	r1, r3, #26
 800314a:	bf42      	ittt	mi
 800314c:	6833      	ldrmi	r3, [r6, #0]
 800314e:	3302      	addmi	r3, #2
 8003150:	6033      	strmi	r3, [r6, #0]
 8003152:	6825      	ldr	r5, [r4, #0]
 8003154:	f015 0506 	ands.w	r5, r5, #6
 8003158:	d106      	bne.n	8003168 <_printf_common+0x48>
 800315a:	f104 0a19 	add.w	sl, r4, #25
 800315e:	68e3      	ldr	r3, [r4, #12]
 8003160:	6832      	ldr	r2, [r6, #0]
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	42ab      	cmp	r3, r5
 8003166:	dc26      	bgt.n	80031b6 <_printf_common+0x96>
 8003168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	3b00      	subs	r3, #0
 8003170:	bf18      	it	ne
 8003172:	2301      	movne	r3, #1
 8003174:	0692      	lsls	r2, r2, #26
 8003176:	d42b      	bmi.n	80031d0 <_printf_common+0xb0>
 8003178:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800317c:	4641      	mov	r1, r8
 800317e:	4638      	mov	r0, r7
 8003180:	47c8      	blx	r9
 8003182:	3001      	adds	r0, #1
 8003184:	d01e      	beq.n	80031c4 <_printf_common+0xa4>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	6922      	ldr	r2, [r4, #16]
 800318a:	f003 0306 	and.w	r3, r3, #6
 800318e:	2b04      	cmp	r3, #4
 8003190:	bf02      	ittt	eq
 8003192:	68e5      	ldreq	r5, [r4, #12]
 8003194:	6833      	ldreq	r3, [r6, #0]
 8003196:	1aed      	subeq	r5, r5, r3
 8003198:	68a3      	ldr	r3, [r4, #8]
 800319a:	bf0c      	ite	eq
 800319c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031a0:	2500      	movne	r5, #0
 80031a2:	4293      	cmp	r3, r2
 80031a4:	bfc4      	itt	gt
 80031a6:	1a9b      	subgt	r3, r3, r2
 80031a8:	18ed      	addgt	r5, r5, r3
 80031aa:	2600      	movs	r6, #0
 80031ac:	341a      	adds	r4, #26
 80031ae:	42b5      	cmp	r5, r6
 80031b0:	d11a      	bne.n	80031e8 <_printf_common+0xc8>
 80031b2:	2000      	movs	r0, #0
 80031b4:	e008      	b.n	80031c8 <_printf_common+0xa8>
 80031b6:	2301      	movs	r3, #1
 80031b8:	4652      	mov	r2, sl
 80031ba:	4641      	mov	r1, r8
 80031bc:	4638      	mov	r0, r7
 80031be:	47c8      	blx	r9
 80031c0:	3001      	adds	r0, #1
 80031c2:	d103      	bne.n	80031cc <_printf_common+0xac>
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031cc:	3501      	adds	r5, #1
 80031ce:	e7c6      	b.n	800315e <_printf_common+0x3e>
 80031d0:	18e1      	adds	r1, r4, r3
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	2030      	movs	r0, #48	@ 0x30
 80031d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80031da:	4422      	add	r2, r4
 80031dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80031e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80031e4:	3302      	adds	r3, #2
 80031e6:	e7c7      	b.n	8003178 <_printf_common+0x58>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4622      	mov	r2, r4
 80031ec:	4641      	mov	r1, r8
 80031ee:	4638      	mov	r0, r7
 80031f0:	47c8      	blx	r9
 80031f2:	3001      	adds	r0, #1
 80031f4:	d0e6      	beq.n	80031c4 <_printf_common+0xa4>
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7d9      	b.n	80031ae <_printf_common+0x8e>
	...

080031fc <_printf_i>:
 80031fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003200:	7e0f      	ldrb	r7, [r1, #24]
 8003202:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003204:	2f78      	cmp	r7, #120	@ 0x78
 8003206:	4691      	mov	r9, r2
 8003208:	4680      	mov	r8, r0
 800320a:	460c      	mov	r4, r1
 800320c:	469a      	mov	sl, r3
 800320e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003212:	d807      	bhi.n	8003224 <_printf_i+0x28>
 8003214:	2f62      	cmp	r7, #98	@ 0x62
 8003216:	d80a      	bhi.n	800322e <_printf_i+0x32>
 8003218:	2f00      	cmp	r7, #0
 800321a:	f000 80d2 	beq.w	80033c2 <_printf_i+0x1c6>
 800321e:	2f58      	cmp	r7, #88	@ 0x58
 8003220:	f000 80b9 	beq.w	8003396 <_printf_i+0x19a>
 8003224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003228:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800322c:	e03a      	b.n	80032a4 <_printf_i+0xa8>
 800322e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003232:	2b15      	cmp	r3, #21
 8003234:	d8f6      	bhi.n	8003224 <_printf_i+0x28>
 8003236:	a101      	add	r1, pc, #4	@ (adr r1, 800323c <_printf_i+0x40>)
 8003238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800323c:	08003295 	.word	0x08003295
 8003240:	080032a9 	.word	0x080032a9
 8003244:	08003225 	.word	0x08003225
 8003248:	08003225 	.word	0x08003225
 800324c:	08003225 	.word	0x08003225
 8003250:	08003225 	.word	0x08003225
 8003254:	080032a9 	.word	0x080032a9
 8003258:	08003225 	.word	0x08003225
 800325c:	08003225 	.word	0x08003225
 8003260:	08003225 	.word	0x08003225
 8003264:	08003225 	.word	0x08003225
 8003268:	080033a9 	.word	0x080033a9
 800326c:	080032d3 	.word	0x080032d3
 8003270:	08003363 	.word	0x08003363
 8003274:	08003225 	.word	0x08003225
 8003278:	08003225 	.word	0x08003225
 800327c:	080033cb 	.word	0x080033cb
 8003280:	08003225 	.word	0x08003225
 8003284:	080032d3 	.word	0x080032d3
 8003288:	08003225 	.word	0x08003225
 800328c:	08003225 	.word	0x08003225
 8003290:	0800336b 	.word	0x0800336b
 8003294:	6833      	ldr	r3, [r6, #0]
 8003296:	1d1a      	adds	r2, r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6032      	str	r2, [r6, #0]
 800329c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032a4:	2301      	movs	r3, #1
 80032a6:	e09d      	b.n	80033e4 <_printf_i+0x1e8>
 80032a8:	6833      	ldr	r3, [r6, #0]
 80032aa:	6820      	ldr	r0, [r4, #0]
 80032ac:	1d19      	adds	r1, r3, #4
 80032ae:	6031      	str	r1, [r6, #0]
 80032b0:	0606      	lsls	r6, r0, #24
 80032b2:	d501      	bpl.n	80032b8 <_printf_i+0xbc>
 80032b4:	681d      	ldr	r5, [r3, #0]
 80032b6:	e003      	b.n	80032c0 <_printf_i+0xc4>
 80032b8:	0645      	lsls	r5, r0, #25
 80032ba:	d5fb      	bpl.n	80032b4 <_printf_i+0xb8>
 80032bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	da03      	bge.n	80032cc <_printf_i+0xd0>
 80032c4:	232d      	movs	r3, #45	@ 0x2d
 80032c6:	426d      	negs	r5, r5
 80032c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032cc:	4859      	ldr	r0, [pc, #356]	@ (8003434 <_printf_i+0x238>)
 80032ce:	230a      	movs	r3, #10
 80032d0:	e011      	b.n	80032f6 <_printf_i+0xfa>
 80032d2:	6821      	ldr	r1, [r4, #0]
 80032d4:	6833      	ldr	r3, [r6, #0]
 80032d6:	0608      	lsls	r0, r1, #24
 80032d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80032dc:	d402      	bmi.n	80032e4 <_printf_i+0xe8>
 80032de:	0649      	lsls	r1, r1, #25
 80032e0:	bf48      	it	mi
 80032e2:	b2ad      	uxthmi	r5, r5
 80032e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80032e6:	4853      	ldr	r0, [pc, #332]	@ (8003434 <_printf_i+0x238>)
 80032e8:	6033      	str	r3, [r6, #0]
 80032ea:	bf14      	ite	ne
 80032ec:	230a      	movne	r3, #10
 80032ee:	2308      	moveq	r3, #8
 80032f0:	2100      	movs	r1, #0
 80032f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80032f6:	6866      	ldr	r6, [r4, #4]
 80032f8:	60a6      	str	r6, [r4, #8]
 80032fa:	2e00      	cmp	r6, #0
 80032fc:	bfa2      	ittt	ge
 80032fe:	6821      	ldrge	r1, [r4, #0]
 8003300:	f021 0104 	bicge.w	r1, r1, #4
 8003304:	6021      	strge	r1, [r4, #0]
 8003306:	b90d      	cbnz	r5, 800330c <_printf_i+0x110>
 8003308:	2e00      	cmp	r6, #0
 800330a:	d04b      	beq.n	80033a4 <_printf_i+0x1a8>
 800330c:	4616      	mov	r6, r2
 800330e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003312:	fb03 5711 	mls	r7, r3, r1, r5
 8003316:	5dc7      	ldrb	r7, [r0, r7]
 8003318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800331c:	462f      	mov	r7, r5
 800331e:	42bb      	cmp	r3, r7
 8003320:	460d      	mov	r5, r1
 8003322:	d9f4      	bls.n	800330e <_printf_i+0x112>
 8003324:	2b08      	cmp	r3, #8
 8003326:	d10b      	bne.n	8003340 <_printf_i+0x144>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	07df      	lsls	r7, r3, #31
 800332c:	d508      	bpl.n	8003340 <_printf_i+0x144>
 800332e:	6923      	ldr	r3, [r4, #16]
 8003330:	6861      	ldr	r1, [r4, #4]
 8003332:	4299      	cmp	r1, r3
 8003334:	bfde      	ittt	le
 8003336:	2330      	movle	r3, #48	@ 0x30
 8003338:	f806 3c01 	strble.w	r3, [r6, #-1]
 800333c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003340:	1b92      	subs	r2, r2, r6
 8003342:	6122      	str	r2, [r4, #16]
 8003344:	f8cd a000 	str.w	sl, [sp]
 8003348:	464b      	mov	r3, r9
 800334a:	aa03      	add	r2, sp, #12
 800334c:	4621      	mov	r1, r4
 800334e:	4640      	mov	r0, r8
 8003350:	f7ff fee6 	bl	8003120 <_printf_common>
 8003354:	3001      	adds	r0, #1
 8003356:	d14a      	bne.n	80033ee <_printf_i+0x1f2>
 8003358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800335c:	b004      	add	sp, #16
 800335e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	f043 0320 	orr.w	r3, r3, #32
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	4833      	ldr	r0, [pc, #204]	@ (8003438 <_printf_i+0x23c>)
 800336c:	2778      	movs	r7, #120	@ 0x78
 800336e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	6831      	ldr	r1, [r6, #0]
 8003376:	061f      	lsls	r7, r3, #24
 8003378:	f851 5b04 	ldr.w	r5, [r1], #4
 800337c:	d402      	bmi.n	8003384 <_printf_i+0x188>
 800337e:	065f      	lsls	r7, r3, #25
 8003380:	bf48      	it	mi
 8003382:	b2ad      	uxthmi	r5, r5
 8003384:	6031      	str	r1, [r6, #0]
 8003386:	07d9      	lsls	r1, r3, #31
 8003388:	bf44      	itt	mi
 800338a:	f043 0320 	orrmi.w	r3, r3, #32
 800338e:	6023      	strmi	r3, [r4, #0]
 8003390:	b11d      	cbz	r5, 800339a <_printf_i+0x19e>
 8003392:	2310      	movs	r3, #16
 8003394:	e7ac      	b.n	80032f0 <_printf_i+0xf4>
 8003396:	4827      	ldr	r0, [pc, #156]	@ (8003434 <_printf_i+0x238>)
 8003398:	e7e9      	b.n	800336e <_printf_i+0x172>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	f023 0320 	bic.w	r3, r3, #32
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	e7f6      	b.n	8003392 <_printf_i+0x196>
 80033a4:	4616      	mov	r6, r2
 80033a6:	e7bd      	b.n	8003324 <_printf_i+0x128>
 80033a8:	6833      	ldr	r3, [r6, #0]
 80033aa:	6825      	ldr	r5, [r4, #0]
 80033ac:	6961      	ldr	r1, [r4, #20]
 80033ae:	1d18      	adds	r0, r3, #4
 80033b0:	6030      	str	r0, [r6, #0]
 80033b2:	062e      	lsls	r6, r5, #24
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	d501      	bpl.n	80033bc <_printf_i+0x1c0>
 80033b8:	6019      	str	r1, [r3, #0]
 80033ba:	e002      	b.n	80033c2 <_printf_i+0x1c6>
 80033bc:	0668      	lsls	r0, r5, #25
 80033be:	d5fb      	bpl.n	80033b8 <_printf_i+0x1bc>
 80033c0:	8019      	strh	r1, [r3, #0]
 80033c2:	2300      	movs	r3, #0
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	4616      	mov	r6, r2
 80033c8:	e7bc      	b.n	8003344 <_printf_i+0x148>
 80033ca:	6833      	ldr	r3, [r6, #0]
 80033cc:	1d1a      	adds	r2, r3, #4
 80033ce:	6032      	str	r2, [r6, #0]
 80033d0:	681e      	ldr	r6, [r3, #0]
 80033d2:	6862      	ldr	r2, [r4, #4]
 80033d4:	2100      	movs	r1, #0
 80033d6:	4630      	mov	r0, r6
 80033d8:	f7fc ff5a 	bl	8000290 <memchr>
 80033dc:	b108      	cbz	r0, 80033e2 <_printf_i+0x1e6>
 80033de:	1b80      	subs	r0, r0, r6
 80033e0:	6060      	str	r0, [r4, #4]
 80033e2:	6863      	ldr	r3, [r4, #4]
 80033e4:	6123      	str	r3, [r4, #16]
 80033e6:	2300      	movs	r3, #0
 80033e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033ec:	e7aa      	b.n	8003344 <_printf_i+0x148>
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	4632      	mov	r2, r6
 80033f2:	4649      	mov	r1, r9
 80033f4:	4640      	mov	r0, r8
 80033f6:	47d0      	blx	sl
 80033f8:	3001      	adds	r0, #1
 80033fa:	d0ad      	beq.n	8003358 <_printf_i+0x15c>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	079b      	lsls	r3, r3, #30
 8003400:	d413      	bmi.n	800342a <_printf_i+0x22e>
 8003402:	68e0      	ldr	r0, [r4, #12]
 8003404:	9b03      	ldr	r3, [sp, #12]
 8003406:	4298      	cmp	r0, r3
 8003408:	bfb8      	it	lt
 800340a:	4618      	movlt	r0, r3
 800340c:	e7a6      	b.n	800335c <_printf_i+0x160>
 800340e:	2301      	movs	r3, #1
 8003410:	4632      	mov	r2, r6
 8003412:	4649      	mov	r1, r9
 8003414:	4640      	mov	r0, r8
 8003416:	47d0      	blx	sl
 8003418:	3001      	adds	r0, #1
 800341a:	d09d      	beq.n	8003358 <_printf_i+0x15c>
 800341c:	3501      	adds	r5, #1
 800341e:	68e3      	ldr	r3, [r4, #12]
 8003420:	9903      	ldr	r1, [sp, #12]
 8003422:	1a5b      	subs	r3, r3, r1
 8003424:	42ab      	cmp	r3, r5
 8003426:	dcf2      	bgt.n	800340e <_printf_i+0x212>
 8003428:	e7eb      	b.n	8003402 <_printf_i+0x206>
 800342a:	2500      	movs	r5, #0
 800342c:	f104 0619 	add.w	r6, r4, #25
 8003430:	e7f5      	b.n	800341e <_printf_i+0x222>
 8003432:	bf00      	nop
 8003434:	080154b5 	.word	0x080154b5
 8003438:	080154c6 	.word	0x080154c6

0800343c <memmove>:
 800343c:	4288      	cmp	r0, r1
 800343e:	b510      	push	{r4, lr}
 8003440:	eb01 0402 	add.w	r4, r1, r2
 8003444:	d902      	bls.n	800344c <memmove+0x10>
 8003446:	4284      	cmp	r4, r0
 8003448:	4623      	mov	r3, r4
 800344a:	d807      	bhi.n	800345c <memmove+0x20>
 800344c:	1e43      	subs	r3, r0, #1
 800344e:	42a1      	cmp	r1, r4
 8003450:	d008      	beq.n	8003464 <memmove+0x28>
 8003452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800345a:	e7f8      	b.n	800344e <memmove+0x12>
 800345c:	4402      	add	r2, r0
 800345e:	4601      	mov	r1, r0
 8003460:	428a      	cmp	r2, r1
 8003462:	d100      	bne.n	8003466 <memmove+0x2a>
 8003464:	bd10      	pop	{r4, pc}
 8003466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800346a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800346e:	e7f7      	b.n	8003460 <memmove+0x24>

08003470 <_sbrk_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d06      	ldr	r5, [pc, #24]	@ (800348c <_sbrk_r+0x1c>)
 8003474:	2300      	movs	r3, #0
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	f7fd fcba 	bl	8000df4 <_sbrk>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_sbrk_r+0x1a>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_sbrk_r+0x1a>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	200001e8 	.word	0x200001e8

08003490 <memcpy>:
 8003490:	440a      	add	r2, r1
 8003492:	4291      	cmp	r1, r2
 8003494:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003498:	d100      	bne.n	800349c <memcpy+0xc>
 800349a:	4770      	bx	lr
 800349c:	b510      	push	{r4, lr}
 800349e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034a6:	4291      	cmp	r1, r2
 80034a8:	d1f9      	bne.n	800349e <memcpy+0xe>
 80034aa:	bd10      	pop	{r4, pc}

080034ac <_realloc_r>:
 80034ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b0:	4680      	mov	r8, r0
 80034b2:	4615      	mov	r5, r2
 80034b4:	460c      	mov	r4, r1
 80034b6:	b921      	cbnz	r1, 80034c2 <_realloc_r+0x16>
 80034b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034bc:	4611      	mov	r1, r2
 80034be:	f7ff bc4b 	b.w	8002d58 <_malloc_r>
 80034c2:	b92a      	cbnz	r2, 80034d0 <_realloc_r+0x24>
 80034c4:	f7ff fbdc 	bl	8002c80 <_free_r>
 80034c8:	2400      	movs	r4, #0
 80034ca:	4620      	mov	r0, r4
 80034cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d0:	f000 f81a 	bl	8003508 <_malloc_usable_size_r>
 80034d4:	4285      	cmp	r5, r0
 80034d6:	4606      	mov	r6, r0
 80034d8:	d802      	bhi.n	80034e0 <_realloc_r+0x34>
 80034da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80034de:	d8f4      	bhi.n	80034ca <_realloc_r+0x1e>
 80034e0:	4629      	mov	r1, r5
 80034e2:	4640      	mov	r0, r8
 80034e4:	f7ff fc38 	bl	8002d58 <_malloc_r>
 80034e8:	4607      	mov	r7, r0
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d0ec      	beq.n	80034c8 <_realloc_r+0x1c>
 80034ee:	42b5      	cmp	r5, r6
 80034f0:	462a      	mov	r2, r5
 80034f2:	4621      	mov	r1, r4
 80034f4:	bf28      	it	cs
 80034f6:	4632      	movcs	r2, r6
 80034f8:	f7ff ffca 	bl	8003490 <memcpy>
 80034fc:	4621      	mov	r1, r4
 80034fe:	4640      	mov	r0, r8
 8003500:	f7ff fbbe 	bl	8002c80 <_free_r>
 8003504:	463c      	mov	r4, r7
 8003506:	e7e0      	b.n	80034ca <_realloc_r+0x1e>

08003508 <_malloc_usable_size_r>:
 8003508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800350c:	1f18      	subs	r0, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	bfbc      	itt	lt
 8003512:	580b      	ldrlt	r3, [r1, r0]
 8003514:	18c0      	addlt	r0, r0, r3
 8003516:	4770      	bx	lr

08003518 <_init>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr

08003524 <_fini>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr
