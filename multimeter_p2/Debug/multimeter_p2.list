
multimeter_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011fa8  0800355c  0800355c  0000455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015504  08015504  00017078  2**0
                  CONTENTS
  4 .ARM          00000008  08015504  08015504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801550c  0801550c  00017078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801550c  0801550c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015510  08015510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08015514  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000078  0801558c  00017078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0801558c  00017200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1d2  00000000  00000000  000170a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204c  00000000  00000000  0002227a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  000242c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000049b  00000000  00000000  00024a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256c3  00000000  00000000  00024f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bb1  00000000  00000000  0004a5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4324  00000000  00000000  0005218f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  001364b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f44  00000000  00000000  00136568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001384ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000046a3  00000000  00000000  0013850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000130  00000000  00000000  0013cbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003544 	.word	0x08003544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003544 	.word	0x08003544

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 021f 	and.w	r2, r3, #31
 8000348:	4907      	ldr	r1, [pc, #28]	@ (8000368 <__NVIC_EnableIRQ+0x38>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100

0800036c <ADC_pin_init>:
#include "ADC.h"

static volatile uint16_t value;
static volatile int flag;

void ADC_pin_init() {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000370:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <ADC_pin_init+0x3c>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	4a0c      	ldr	r2, [pc, #48]	@ (80003a8 <ADC_pin_init+0x3c>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOA->MODER |= GPIO_MODER_MODE0; // Analog mode
 800037c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000386:	f043 0303 	orr.w	r3, r3, #3
 800038a:	6013      	str	r3, [r2, #0]
    GPIOA->ASCR |= GPIO_ASCR_ASC0;  // Connect analog switch to ADC input
 800038c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000392:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	62d3      	str	r3, [r2, #44]	@ 0x2c

    return;
 800039c:	bf00      	nop
}
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <ADC_init>:


void ADC_init() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
    ADC_pin_init();
 80003b2:	f7ff ffdb 	bl	800036c <ADC_pin_init>

    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80003b6:	4b34      	ldr	r3, [pc, #208]	@ (8000488 <ADC_init+0xdc>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	4a33      	ldr	r2, [pc, #204]	@ (8000488 <ADC_init+0xdc>)
 80003bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // HCLK / 1
 80003c2:	4b32      	ldr	r3, [pc, #200]	@ (800048c <ADC_init+0xe0>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	4a31      	ldr	r2, [pc, #196]	@ (800048c <ADC_init+0xe0>)
 80003c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003cc:	6093      	str	r3, [r2, #8]
    ADC1->CR &= ~ADC_CR_DEEPPWD; // wake up from deep-power-down mode
 80003ce:	4b30      	ldr	r3, [pc, #192]	@ (8000490 <ADC_init+0xe4>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000490 <ADC_init+0xe4>)
 80003d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80003d8:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN; // turn on voltage regulator
 80003da:	4b2d      	ldr	r3, [pc, #180]	@ (8000490 <ADC_init+0xe4>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a2c      	ldr	r2, [pc, #176]	@ (8000490 <ADC_init+0xe4>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e4:	6093      	str	r3, [r2, #8]
    for (int _=0; _<40; _++); // wait for regulator to start up
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	e002      	b.n	80003f2 <ADC_init+0x46>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3301      	adds	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b27      	cmp	r3, #39	@ 0x27
 80003f6:	ddf9      	ble.n	80003ec <ADC_init+0x40>
    // ! for 4MHz but will work for higher freqs

    ADC1->CR &= ~ADC_CR_ADCALDIF; // single-ended calibration
 80003f8:	4b25      	ldr	r3, [pc, #148]	@ (8000490 <ADC_init+0xe4>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <ADC_init+0xe4>)
 80003fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000402:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL; // start calibration
 8000404:	4b22      	ldr	r3, [pc, #136]	@ (8000490 <ADC_init+0xe4>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4a21      	ldr	r2, [pc, #132]	@ (8000490 <ADC_init+0xe4>)
 800040a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800040e:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // wait for calibration to finish
 8000410:	bf00      	nop
 8000412:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <ADC_init+0xe4>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	2b00      	cmp	r3, #0
 8000418:	dbfb      	blt.n	8000412 <ADC_init+0x66>

    ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_0; // single-ended mode
 800041a:	4b1d      	ldr	r3, [pc, #116]	@ (8000490 <ADC_init+0xe4>)
 800041c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000420:	4a1b      	ldr	r2, [pc, #108]	@ (8000490 <ADC_init+0xe4>)
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    ADC1->ISR |= ADC_ISR_ADRDY; // clear ready flag
 800042a:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <ADC_init+0xe4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <ADC_init+0xe4>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6013      	str	r3, [r2, #0]
    ADC1->CR |= ADC_CR_ADEN; // enable ADC
 8000436:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <ADC_init+0xe4>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	4a15      	ldr	r2, [pc, #84]	@ (8000490 <ADC_init+0xe4>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000442:	bf00      	nop
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <ADC_init+0xe4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <ADC_init+0x98>

    // ADC1->CFGR = 0; // single conversion, right-aligned data, 12-bit resolution
    ADC1->OFR1 = (ADC_OFR1_OFFSET1_EN | 5 << ADC_OFR1_OFFSET1_CH_Pos | (3 << ADC_OFR1_OFFSET1_Pos)); // offset calibration
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <ADC_init+0xe4>)
 8000452:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <ADC_init+0xe8>)
 8000454:	661a      	str	r2, [r3, #96]	@ 0x60
    ADC1->CFGR = (ADC_CFGR_ALIGN); // single conversion, left-aligned data, 12-bit resolution
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <ADC_init+0xe4>)
 8000458:	2220      	movs	r2, #32
 800045a:	60da      	str	r2, [r3, #12]
    ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos); // one conversion in sequence
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <ADC_init+0xe4>)
 800045e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000462:	631a      	str	r2, [r3, #48]	@ 0x30
//    ADC1->SMPR1 = (4 << ADC_SMPR1_SMP5_Pos); // 47.5 clock sample on channel 5
    ADC1->SMPR1 = 0; // 2.5 clock sample on channel 5
 8000464:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <ADC_init+0xe4>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]

    ADC1->IER |= ADC_IER_EOCIE; // enable end-of-conversion interrupt
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <ADC_init+0xe4>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <ADC_init+0xe4>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	6053      	str	r3, [r2, #4]
    NVIC_EnableIRQ(ADC1_IRQn); // enable ADC interrupt
 8000476:	2012      	movs	r0, #18
 8000478:	f7ff ff5a 	bl	8000330 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800047c:	b662      	cpsie	i
}
 800047e:	bf00      	nop
    __enable_irq();

    return;
 8000480:	bf00      	nop
}
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	50040300 	.word	0x50040300
 8000490:	50040000 	.word	0x50040000
 8000494:	94000003 	.word	0x94000003

08000498 <ADC_to_mv>:

uint16_t ADC_to_mv(uint16_t val) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
    return val * VREF / ADC_REF;
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da01      	bge.n	80004b4 <ADC_to_mv+0x1c>
 80004b0:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80004b4:	131b      	asrs	r3, r3, #12
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	3b01      	subs	r3, #1
 80004ba:	b29b      	uxth	r3, r3

    // This from the linear calibration but I noticed better accuracy with the ideal conversion
     int32_t uv = val * MAGIC_CAL_X - MAGIC_CAL_Y;
     return uv > 0 ? uv / UV_TO_MV : 0;
 }
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
    value = ADC1->DR;
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <ADC1_2_IRQHandler+0x20>)
 80004ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <ADC1_2_IRQHandler+0x24>)
 80004d4:	801a      	strh	r2, [r3, #0]
    flag = 1;
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <ADC1_2_IRQHandler+0x28>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	50040000 	.word	0x50040000
 80004ec:	20000094 	.word	0x20000094
 80004f0:	20000098 	.word	0x20000098

080004f4 <get_ADC_val>:

uint16_t get_ADC_val() {
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
    return value;
 80004f8:	4b03      	ldr	r3, [pc, #12]	@ (8000508 <get_ADC_val+0x14>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	b29b      	uxth	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	20000094 	.word	0x20000094

0800050c <ADC_check_flag>:

int ADC_check_flag() {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
    return flag;
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <ADC_check_flag+0x14>)
 8000512:	681b      	ldr	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000098 	.word	0x20000098

08000524 <ADC_clear_flag>:

void ADC_clear_flag() {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
    flag = 0;
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <ADC_clear_flag+0x14>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]

    return;
 800052e:	bf00      	nop
}
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000098 	.word	0x20000098

0800053c <__NVIC_EnableIRQ>:
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db0b      	blt.n	8000566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 021f 	and.w	r2, r3, #31
 8000554:	4907      	ldr	r1, [pc, #28]	@ (8000574 <__NVIC_EnableIRQ+0x38>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	095b      	lsrs	r3, r3, #5
 800055c:	2001      	movs	r0, #1
 800055e:	fa00 f202 	lsl.w	r2, r0, r2
 8000562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000e100 	.word	0xe000e100

08000578 <main>:
volatile int start_calcs = 0;
volatile int fft_work = 0;

void SystemClock_Config(void);

int main(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	f5ad 4d90 	sub.w	sp, sp, #18432	@ 0x4800
 800057e:	b08e      	sub	sp, #56	@ 0x38
 8000580:	af00      	add	r7, sp, #0
    HAL_Init();
 8000582:	f000 fdae 	bl	80010e2 <HAL_Init>
    SystemClock_Config();
 8000586:	f000 fb7a 	bl	8000c7e <SystemClock_Config>


    // * init  
    // helper led
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800058a:	4b93      	ldr	r3, [pc, #588]	@ (80007d8 <main+0x260>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	4a92      	ldr	r2, [pc, #584]	@ (80007d8 <main+0x260>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 8000596:	4b91      	ldr	r3, [pc, #580]	@ (80007dc <main+0x264>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a90      	ldr	r2, [pc, #576]	@ (80007dc <main+0x264>)
 800059c:	f023 030f 	bic.w	r3, r3, #15
 80005a0:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0;
 80005a2:	4b8e      	ldr	r3, [pc, #568]	@ (80007dc <main+0x264>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a8d      	ldr	r2, [pc, #564]	@ (80007dc <main+0x264>)
 80005a8:	f043 0305 	orr.w	r3, r3, #5
 80005ac:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1) ;
 80005ae:	4b8b      	ldr	r3, [pc, #556]	@ (80007dc <main+0x264>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	4a8a      	ldr	r2, [pc, #552]	@ (80007dc <main+0x264>)
 80005b4:	f023 030f 	bic.w	r3, r3, #15
 80005b8:	60d3      	str	r3, [r2, #12]
    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 80005ba:	4b88      	ldr	r3, [pc, #544]	@ (80007dc <main+0x264>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	4a87      	ldr	r2, [pc, #540]	@ (80007dc <main+0x264>)
 80005c0:	f023 0303 	bic.w	r3, r3, #3
 80005c4:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1;
 80005c6:	4b85      	ldr	r3, [pc, #532]	@ (80007dc <main+0x264>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	4a84      	ldr	r2, [pc, #528]	@ (80007dc <main+0x264>)
 80005cc:	f043 030f 	orr.w	r3, r3, #15
 80005d0:	6093      	str	r3, [r2, #8]
    LED1_OFF();
 80005d2:	4b82      	ldr	r3, [pc, #520]	@ (80007dc <main+0x264>)
 80005d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005d8:	619a      	str	r2, [r3, #24]
    LED2_OFF();
 80005da:	4b80      	ldr	r3, [pc, #512]	@ (80007dc <main+0x264>)
 80005dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80005e0:	619a      	str	r2, [r3, #24]

    uart_init();
 80005e2:	f000 fca7 	bl	8000f34 <uart_init>
    print_start_screen();
 80005e6:	f000 faa7 	bl	8000b38 <print_start_screen>
    // print_stats(0, 2680, 333);

    ADC_init();
 80005ea:	f7ff fedf 	bl	80003ac <ADC_init>
    arm_rfft_instance_q15 rfft_instance;
    arm_status status = arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 80005ee:	f507 4090 	add.w	r0, r7, #18432	@ 0x4800
 80005f2:	f100 000c 	add.w	r0, r0, #12
 80005f6:	2301      	movs	r3, #1
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005fe:	f001 fe15 	bl	800222c <arm_rfft_init_q15>
 8000602:	4603      	mov	r3, r0
 8000604:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000608:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 800060c:	7013      	strb	r3, [r2, #0]
    while (status != ARM_MATH_SUCCESS) {
 800060e:	e00f      	b.n	8000630 <main+0xb8>
        status = arm_rfft_init_q15(&rfft_instance, FFT_SIZE, 0, 1);
 8000610:	f507 4090 	add.w	r0, r7, #18432	@ 0x4800
 8000614:	f100 000c 	add.w	r0, r0, #12
 8000618:	2301      	movs	r3, #1
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000620:	f001 fe04 	bl	800222c <arm_rfft_init_q15>
 8000624:	4603      	mov	r3, r0
 8000626:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800062a:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 800062e:	7013      	strb	r3, [r2, #0]
    while (status != ARM_MATH_SUCCESS) {
 8000630:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000634:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000638:	f993 3000 	ldrsb.w	r3, [r3]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1e7      	bne.n	8000610 <main+0x98>
    }

    timer_init();
 8000640:	f000 f9e2 	bl	8000a08 <timer_init>

    // * real work
    int new_screen = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800064a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800064e:	6013      	str	r3, [r2, #0]

    uint16_t adc_vals[DC_VOLT_SIZE];
    size_t dc_ind = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000656:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800065a:	6013      	str	r3, [r2, #0]
    uint16_t voltage;

    
    uint16_t freq;
    q15_t ac_adc_vals[FFT_SIZE];
    size_t ac_ind = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000662:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000666:	6013      	str	r3, [r2, #0]
    uint32_t max_ind;


    while (1) {
        // change mode
        if (uart_check_flag()) { 
 8000668:	f000 fcee 	bl	8001048 <uart_check_flag>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d017      	beq.n	80006a2 <main+0x12a>
            switch (get_uart_char()) {
 8000672:	f000 fd01 	bl	8001078 <get_uart_char>
 8000676:	4603      	mov	r3, r0
 8000678:	2b61      	cmp	r3, #97	@ 0x61
 800067a:	d008      	beq.n	800068e <main+0x116>
 800067c:	2b64      	cmp	r3, #100	@ 0x64
 800067e:	d10d      	bne.n	800069c <main+0x124>
            case 'd':
                // print_stats(0, 263, 3133);
                // ADC_start_conversion();
                working = 1;
 8000680:	4b57      	ldr	r3, [pc, #348]	@ (80007e0 <main+0x268>)
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
                state = DC_ST;
 8000686:	4b57      	ldr	r3, [pc, #348]	@ (80007e4 <main+0x26c>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
                break;
 800068c:	e007      	b.n	800069e <main+0x126>
            case 'a':
                // print_stats(1, 1720, 127);
                working = 1;
 800068e:	4b54      	ldr	r3, [pc, #336]	@ (80007e0 <main+0x268>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
                state = AC_ST;
 8000694:	4b53      	ldr	r3, [pc, #332]	@ (80007e4 <main+0x26c>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
                break;
 800069a:	e000      	b.n	800069e <main+0x126>
            default: break;
 800069c:	bf00      	nop
            }
            
            uart_clear_flag();
 800069e:	f000 fcdf 	bl	8001060 <uart_clear_flag>
        } 

        if (!working) continue; // idle
 80006a2:	4b4f      	ldr	r3, [pc, #316]	@ (80007e0 <main+0x268>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 813d 	beq.w	8000926 <main+0x3ae>

        if (start_calcs) {
 80006ac:	4b4e      	ldr	r3, [pc, #312]	@ (80007e8 <main+0x270>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <main+0x154>
            start_calcs = 0;
 80006b4:	4b4c      	ldr	r3, [pc, #304]	@ (80007e8 <main+0x270>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
            fft_work = 1;
 80006ba:	4b4c      	ldr	r3, [pc, #304]	@ (80007ec <main+0x274>)
 80006bc:	2201      	movs	r2, #1
 80006be:	601a      	str	r2, [r3, #0]
            ADC_start_conversion();
 80006c0:	4b4b      	ldr	r3, [pc, #300]	@ (80007f0 <main+0x278>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	4a4a      	ldr	r2, [pc, #296]	@ (80007f0 <main+0x278>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6093      	str	r3, [r2, #8]
        }

        switch (state) {
 80006cc:	4b45      	ldr	r3, [pc, #276]	@ (80007e4 <main+0x26c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <main+0x164>
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	f000 808d 	beq.w	80007f4 <main+0x27c>
 80006da:	e129      	b.n	8000930 <main+0x3b8>
        case DC_ST:
            if (new_screen) {
 80006dc:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80006e0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d012      	beq.n	8000710 <main+0x198>
                print_stats(0, voltage, 0);
 80006ea:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80006ee:	f103 032a 	add.w	r3, r3, #42	@ 0x2a
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	4619      	mov	r1, r3
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 f9c3 	bl	8000a84 <print_stats>
                new_screen = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000704:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000708:	6013      	str	r3, [r2, #0]
                working = 0;
 800070a:	4b35      	ldr	r3, [pc, #212]	@ (80007e0 <main+0x268>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
            }

            if (ADC_check_flag()) {
 8000710:	f7ff fefc 	bl	800050c <ADC_check_flag>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	f000 8107 	beq.w	800092a <main+0x3b2>
                adc_vals[dc_ind] = (get_ADC_val() >> 3) & 0xfff;
 800071c:	f7ff feea 	bl	80004f4 <get_ADC_val>
 8000720:	4603      	mov	r3, r0
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	b29b      	uxth	r3, r3
 8000726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800072a:	b299      	uxth	r1, r3
 800072c:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000730:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000734:	f6a3 032c 	subw	r3, r3, #2092	@ 0x82c
 8000738:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800073c:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                dc_ind++;
 8000746:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800074a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000756:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800075a:	6013      	str	r3, [r2, #0]
                
                if (dc_ind == DC_VOLT_SIZE) { // done getting measurements
 800075c:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000760:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800076a:	d12b      	bne.n	80007c4 <main+0x24c>
                    dc_ind = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000772:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8000776:	6013      	str	r3, [r2, #0]
                    voltage = get_avg_arr(adc_vals, DC_VOLT_SIZE);
 8000778:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800077c:	f103 030c 	add.w	r3, r3, #12
 8000780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fa55 	bl	8000c34 <get_avg_arr>
 800078a:	4603      	mov	r3, r0
 800078c:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000790:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 8000794:	8013      	strh	r3, [r2, #0]
                    voltage = ADC_to_mv(voltage);
 8000796:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800079a:	f103 032a 	add.w	r3, r3, #42	@ 0x2a
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fe79 	bl	8000498 <ADC_to_mv>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80007ac:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 80007b0:	8013      	strh	r3, [r2, #0]
                    new_screen = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 80007b8:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80007bc:	6013      	str	r3, [r2, #0]


                    ADC_clear_flag();
 80007be:	f7ff feb1 	bl	8000524 <ADC_clear_flag>
                    break;
 80007c2:	e0b5      	b.n	8000930 <main+0x3b8>
                }

                ADC_clear_flag();
 80007c4:	f7ff feae 	bl	8000524 <ADC_clear_flag>
                ADC_start_conversion();
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <main+0x278>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <main+0x278>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6093      	str	r3, [r2, #8]
            }

            break;
 80007d4:	e0a9      	b.n	800092a <main+0x3b2>
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800
 80007e0:	2000009c 	.word	0x2000009c
 80007e4:	20000000 	.word	0x20000000
 80007e8:	200000a0 	.word	0x200000a0
 80007ec:	200000a4 	.word	0x200000a4
 80007f0:	50040000 	.word	0x50040000
        case AC_ST:
            if (new_screen) {
 80007f4:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 80007f8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d017      	beq.n	8000832 <main+0x2ba>
                print_stats(1, 1200, freq);
 8000802:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000806:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8000812:	2001      	movs	r0, #1
 8000814:	f000 f936 	bl	8000a84 <print_stats>
                new_screen = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800081e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000822:	6013      	str	r3, [r2, #0]
                working = 0;
 8000824:	4b43      	ldr	r3, [pc, #268]	@ (8000934 <main+0x3bc>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
                LED1_OFF();
 800082a:	4b43      	ldr	r3, [pc, #268]	@ (8000938 <main+0x3c0>)
 800082c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000830:	619a      	str	r2, [r3, #24]
            }

            if (fft_work) {
 8000832:	4b42      	ldr	r3, [pc, #264]	@ (800093c <main+0x3c4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d079      	beq.n	800092e <main+0x3b6>


            if (ADC_check_flag()) {
 800083a:	f7ff fe67 	bl	800050c <ADC_check_flag>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d074      	beq.n	800092e <main+0x3b6>
                ac_adc_vals[ac_ind] = get_ADC_val();
 8000844:	f7ff fe56 	bl	80004f4 <get_ADC_val>
 8000848:	4603      	mov	r3, r0
 800084a:	b219      	sxth	r1, r3
 800084c:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8000850:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000854:	f6a3 032c 	subw	r3, r3, #2092	@ 0x82c
 8000858:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800085c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                ac_ind++;
 8000866:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 800086a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000876:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800087a:	6013      	str	r3, [r2, #0]

                if (ac_ind == FFT_SIZE) {
 800087c:	f507 4390 	add.w	r3, r7, #18432	@ 0x4800
 8000880:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800088a:	d149      	bne.n	8000920 <main+0x3a8>
                    ac_ind = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000892:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000896:	6013      	str	r3, [r2, #0]

                    arm_rfft_q15(&rfft_instance, ac_adc_vals, fft_out);
 8000898:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800089c:	f102 0218 	add.w	r2, r2, #24
 80008a0:	3a2c      	subs	r2, #44	@ 0x2c
 80008a2:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80008a6:	f103 0318 	add.w	r3, r3, #24
 80008aa:	3b0c      	subs	r3, #12
 80008ac:	f507 4090 	add.w	r0, r7, #18432	@ 0x4800
 80008b0:	f100 000c 	add.w	r0, r0, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	f001 fc5b 	bl	8002170 <arm_rfft_q15>
                    arm_cmplx_mag_q15(fft_out, mag_out, FFT_SIZE);
 80008ba:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80008be:	392c      	subs	r1, #44	@ 0x2c
 80008c0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80008c4:	f103 0318 	add.w	r3, r3, #24
 80008c8:	3b2c      	subs	r3, #44	@ 0x2c
 80008ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fd34 	bl	800233c <arm_cmplx_mag_q15>
                    mag_out[0] = 0;
 80008d4:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80008d8:	f6a3 032c 	subw	r3, r3, #2092	@ 0x82c
 80008dc:	2200      	movs	r2, #0
 80008de:	801a      	strh	r2, [r3, #0]
                    arm_max_q15(mag_out, FFT_SIZE_DIV_2, &max, &max_ind);
 80008e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e4:	3b34      	subs	r3, #52	@ 0x34
 80008e6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80008ea:	3a2e      	subs	r2, #46	@ 0x2e
 80008ec:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80008f0:	382c      	subs	r0, #44	@ 0x2c
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	f001 fb7b 	bl	8001ff0 <arm_max_q15>
                    freq = max_ind * SAMPLING_RATE / FFT_SIZE;
 80008fa:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80008fe:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 8000908:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800090c:	8013      	strh	r3, [r2, #0]

                    fft_work = 0;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <main+0x3c4>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
                    new_screen = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	f507 4290 	add.w	r2, r7, #18432	@ 0x4800
 800091a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800091e:	6013      	str	r3, [r2, #0]
                }

                ADC_clear_flag();
 8000920:	f7ff fe00 	bl	8000524 <ADC_clear_flag>
            }
            }

            break;
 8000924:	e003      	b.n	800092e <main+0x3b6>
        if (!working) continue; // idle
 8000926:	bf00      	nop
 8000928:	e69e      	b.n	8000668 <main+0xf0>
            break;
 800092a:	bf00      	nop
 800092c:	e69c      	b.n	8000668 <main+0xf0>
            break;
 800092e:	bf00      	nop
        if (uart_check_flag()) { 
 8000930:	e69a      	b.n	8000668 <main+0xf0>
 8000932:	bf00      	nop
 8000934:	2000009c 	.word	0x2000009c
 8000938:	48000800 	.word	0x48000800
 800093c:	200000a4 	.word	0x200000a4

08000940 <TIM2_IRQHandler>:
    }

    return 0;
}

void TIM2_IRQHandler() {
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_CC1IF) { // print interval
 8000944:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d020      	beq.n	8000994 <TIM2_IRQHandler+0x54>
        LED2_ON();
 8000952:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <TIM2_IRQHandler+0xac>)
 8000954:	2202      	movs	r2, #2
 8000956:	619a      	str	r2, [r3, #24]
        LED1_ON();
 8000958:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <TIM2_IRQHandler+0xac>)
 800095a:	2201      	movs	r2, #1
 800095c:	619a      	str	r2, [r3, #24]
        working = 1;
 800095e:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <TIM2_IRQHandler+0xb0>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
        start_calcs = 1;
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <TIM2_IRQHandler+0xb4>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
        // if (state == DC_ST) ADC_start_conversion();

        TIM2->CCR1 += PRINT_CCR;
 800096a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800096e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000970:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000974:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <TIM2_IRQHandler+0xb8>)
 8000976:	4413      	add	r3, r2
 8000978:	634b      	str	r3, [r1, #52]	@ 0x34
        TIM2->SR &= ~TIM_SR_CC1IF;
 800097a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000984:	f023 0302 	bic.w	r3, r3, #2
 8000988:	6113      	str	r3, [r2, #16]
        LED2_OFF();
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <TIM2_IRQHandler+0xac>)
 800098c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000990:	619a      	str	r2, [r3, #24]
        TIM2->SR &= ~TIM_SR_CC2IF;
//        LED1_OFF();
    }


    return;
 8000992:	e026      	b.n	80009e2 <TIM2_IRQHandler+0xa2>
    else if (TIM2->SR & TIM_SR_CC2IF) { // get adc samples for fft
 8000994:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d01f      	beq.n	80009e2 <TIM2_IRQHandler+0xa2>
        if (state == AC_ST && fft_work) {
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <TIM2_IRQHandler+0xbc>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d109      	bne.n	80009be <TIM2_IRQHandler+0x7e>
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <TIM2_IRQHandler+0xc0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <TIM2_IRQHandler+0x7e>
            ADC_start_conversion();
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <TIM2_IRQHandler+0xc4>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4a13      	ldr	r2, [pc, #76]	@ (8000a04 <TIM2_IRQHandler+0xc4>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6093      	str	r3, [r2, #8]
        TIM2->CCR2 += FFT_CCR;
 80009be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c8:	f503 4318 	add.w	r3, r3, #38912	@ 0x9800
 80009cc:	3396      	adds	r3, #150	@ 0x96
 80009ce:	6393      	str	r3, [r2, #56]	@ 0x38
        TIM2->SR &= ~TIM_SR_CC2IF;
 80009d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009da:	f023 0304 	bic.w	r3, r3, #4
 80009de:	6113      	str	r3, [r2, #16]
    return;
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
}
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	48000800 	.word	0x48000800
 80009f0:	2000009c 	.word	0x2000009c
 80009f4:	200000a0 	.word	0x200000a0
 80009f8:	07270dfc 	.word	0x07270dfc
 80009fc:	20000000 	.word	0x20000000
 8000a00:	200000a4 	.word	0x200000a4
 8000a04:	50040000 	.word	0x50040000

08000a08 <timer_init>:



void timer_init() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <timer_init+0x70>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a10:	4a19      	ldr	r2, [pc, #100]	@ (8000a78 <timer_init+0x70>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6593      	str	r3, [r2, #88]	@ 0x58

    TIM2->ARR = -1;
 8000a18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a20:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = PRINT_CCR - 1;
 8000a22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a26:	4a15      	ldr	r2, [pc, #84]	@ (8000a7c <timer_init+0x74>)
 8000a28:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = FFT_CCR - 1;
 8000a2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a2e:	f649 0295 	movw	r2, #39061	@ 0x9895
 8000a32:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->PSC = 0;
 8000a34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER = TIM_DIER_CC1IE | TIM_DIER_CC2IE;
 8000a3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a40:	2206      	movs	r2, #6
 8000a42:	60da      	str	r2, [r3, #12]
    TIM2->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000a44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a48:	2211      	movs	r2, #17
 8000a4a:	621a      	str	r2, [r3, #32]

    DBGMCU->APB1FZR1 |= 1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <timer_init+0x78>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	@ (8000a80 <timer_init+0x78>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000a58:	201c      	movs	r0, #28
 8000a5a:	f7ff fd6f 	bl	800053c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a5e:	b662      	cpsie	i
}
 8000a60:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8000a62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]

    return;
 8000a72:	bf00      	nop
}
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	07270dfb 	.word	0x07270dfb
 8000a80:	e0042000 	.word	0xe0042000

08000a84 <print_stats>:


void print_stats(int AC, uint16_t voltage, uint16_t freq) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	803b      	strh	r3, [r7, #0]
    static char voltage_buffer[5] = "0.00";
    static char freq_buffer[15] = "1000 Hz    ";
    
    MOVE_CURSOR(MODE_CURSOR);
 8000a94:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <print_stats+0x88>)
 8000a96:	f000 faa4 	bl	8000fe2 <uart_send_escape>
    if (AC) uart_send_string("AC");
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <print_stats+0x24>
 8000aa0:	481b      	ldr	r0, [pc, #108]	@ (8000b10 <print_stats+0x8c>)
 8000aa2:	f000 fa89 	bl	8000fb8 <uart_send_string>
 8000aa6:	e002      	b.n	8000aae <print_stats+0x2a>
    else uart_send_string("DC");
 8000aa8:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <print_stats+0x90>)
 8000aaa:	f000 fa85 	bl	8000fb8 <uart_send_string>
    
    MOVE_CURSOR(VOLT_CURSOR);
 8000aae:	481a      	ldr	r0, [pc, #104]	@ (8000b18 <print_stats+0x94>)
 8000ab0:	f000 fa97 	bl	8000fe2 <uart_send_escape>
    mv_to_str(voltage_buffer, voltage);
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <print_stats+0x98>)
 8000aba:	f000 f873 	bl	8000ba4 <mv_to_str>
    uart_send_string(voltage_buffer);
 8000abe:	4817      	ldr	r0, [pc, #92]	@ (8000b1c <print_stats+0x98>)
 8000ac0:	f000 fa7a 	bl	8000fb8 <uart_send_string>


    MOVE_CURSOR(SCALE_CURSOR);
 8000ac4:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <print_stats+0x9c>)
 8000ac6:	f000 fa8c 	bl	8000fe2 <uart_send_escape>
    uint16_t x = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	81fb      	strh	r3, [r7, #14]
    uart_send_escape("[2K");
 8000ace:	4815      	ldr	r0, [pc, #84]	@ (8000b24 <print_stats+0xa0>)
 8000ad0:	f000 fa87 	bl	8000fe2 <uart_send_escape>
    while (x <= voltage) {
 8000ad4:	e005      	b.n	8000ae2 <print_stats+0x5e>
        uart_send_string("#");
 8000ad6:	4814      	ldr	r0, [pc, #80]	@ (8000b28 <print_stats+0xa4>)
 8000ad8:	f000 fa6e 	bl	8000fb8 <uart_send_string>
        x += 100;
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	3364      	adds	r3, #100	@ 0x64
 8000ae0:	81fb      	strh	r3, [r7, #14]
    while (x <= voltage) {
 8000ae2:	89fa      	ldrh	r2, [r7, #14]
 8000ae4:	887b      	ldrh	r3, [r7, #2]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d9f5      	bls.n	8000ad6 <print_stats+0x52>
    }

    MOVE_CURSOR(FREQ_CURSOR);
 8000aea:	4810      	ldr	r0, [pc, #64]	@ (8000b2c <print_stats+0xa8>)
 8000aec:	f000 fa79 	bl	8000fe2 <uart_send_escape>
    snprintf(freq_buffer, 15, "%hu Hz   ", freq);
 8000af0:	883b      	ldrh	r3, [r7, #0]
 8000af2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <print_stats+0xac>)
 8000af4:	210f      	movs	r1, #15
 8000af6:	480f      	ldr	r0, [pc, #60]	@ (8000b34 <print_stats+0xb0>)
 8000af8:	f002 f870 	bl	8002bdc <sniprintf>
    uart_send_string(freq_buffer);
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <print_stats+0xb0>)
 8000afe:	f000 fa5b 	bl	8000fb8 <uart_send_string>

    return;
 8000b02:	bf00      	nop
}
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	0800355c 	.word	0x0800355c
 8000b10:	08003564 	.word	0x08003564
 8000b14:	08003568 	.word	0x08003568
 8000b18:	0800356c 	.word	0x0800356c
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	08003574 	.word	0x08003574
 8000b24:	0800357c 	.word	0x0800357c
 8000b28:	08003580 	.word	0x08003580
 8000b2c:	08003584 	.word	0x08003584
 8000b30:	0800358c 	.word	0x0800358c
 8000b34:	2000000c 	.word	0x2000000c

08000b38 <print_start_screen>:


void print_start_screen() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    uart_send_escape("[1;0H");
 8000b3c:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <print_start_screen+0x44>)
 8000b3e:	f000 fa50 	bl	8000fe2 <uart_send_escape>
    uart_send_string("Mode: ");
 8000b42:	480f      	ldr	r0, [pc, #60]	@ (8000b80 <print_start_screen+0x48>)
 8000b44:	f000 fa38 	bl	8000fb8 <uart_send_string>

    uart_send_escape("[3;0H");
 8000b48:	480e      	ldr	r0, [pc, #56]	@ (8000b84 <print_start_screen+0x4c>)
 8000b4a:	f000 fa4a 	bl	8000fe2 <uart_send_escape>
    uart_send_string("Volt:      V");
 8000b4e:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <print_start_screen+0x50>)
 8000b50:	f000 fa32 	bl	8000fb8 <uart_send_string>

    uart_send_escape("[6;0H");
 8000b54:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <print_start_screen+0x54>)
 8000b56:	f000 fa44 	bl	8000fe2 <uart_send_escape>
    uart_send_string("|----|----|----|----|----|----|");
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <print_start_screen+0x58>)
 8000b5c:	f000 fa2c 	bl	8000fb8 <uart_send_string>

    uart_send_escape("[7;0H");
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <print_start_screen+0x5c>)
 8000b62:	f000 fa3e 	bl	8000fe2 <uart_send_escape>
    uart_send_string("0.0  0.5  1.0  1.5  2.0  2.5  3.0");
 8000b66:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <print_start_screen+0x60>)
 8000b68:	f000 fa26 	bl	8000fb8 <uart_send_string>


    uart_send_escape("[9;0H");
 8000b6c:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <print_start_screen+0x64>)
 8000b6e:	f000 fa38 	bl	8000fe2 <uart_send_escape>
    uart_send_string("Frequency:");
 8000b72:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <print_start_screen+0x68>)
 8000b74:	f000 fa20 	bl	8000fb8 <uart_send_string>
    return;
 8000b78:	bf00      	nop
}
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08003598 	.word	0x08003598
 8000b80:	080035a0 	.word	0x080035a0
 8000b84:	080035a8 	.word	0x080035a8
 8000b88:	080035b0 	.word	0x080035b0
 8000b8c:	080035c0 	.word	0x080035c0
 8000b90:	080035c8 	.word	0x080035c8
 8000b94:	080035e8 	.word	0x080035e8
 8000b98:	080035f0 	.word	0x080035f0
 8000b9c:	08003614 	.word	0x08003614
 8000ba0:	0800361c 	.word	0x0800361c

08000ba4 <mv_to_str>:


void mv_to_str(char* buffer, uint16_t volt) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
    // 3000 -> 3.00
    buffer[0] = (volt / 1000) + '0';
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <mv_to_str+0x84>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	099b      	lsrs	r3, r3, #6
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3330      	adds	r3, #48	@ 0x30
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	701a      	strb	r2, [r3, #0]
    buffer[2] = ((volt % 1000) / 100) + '0';
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <mv_to_str+0x84>)
 8000bca:	fba2 1203 	umull	r1, r2, r2, r3
 8000bce:	0992      	lsrs	r2, r2, #6
 8000bd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bd4:	fb01 f202 	mul.w	r2, r1, r2
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <mv_to_str+0x88>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3302      	adds	r3, #2
 8000bec:	3230      	adds	r2, #48	@ 0x30
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	701a      	strb	r2, [r3, #0]
    buffer[3] = ((volt % 100) / 10) + '0';
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <mv_to_str+0x88>)
 8000bf6:	fba2 1203 	umull	r1, r2, r2, r3
 8000bfa:	0952      	lsrs	r2, r2, #5
 8000bfc:	2164      	movs	r1, #100	@ 0x64
 8000bfe:	fb01 f202 	mul.w	r2, r1, r2
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <mv_to_str+0x8c>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3303      	adds	r3, #3
 8000c16:	3230      	adds	r2, #48	@ 0x30
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	701a      	strb	r2, [r3, #0]

    return;
 8000c1c:	bf00      	nop
}
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	10624dd3 	.word	0x10624dd3
 8000c2c:	51eb851f 	.word	0x51eb851f
 8000c30:	cccccccd 	.word	0xcccccccd

08000c34 <get_avg_arr>:

uint16_t get_avg_arr(uint16_t *arr, int size) {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	e00b      	b.n	8000c60 <get_avg_arr+0x2c>
        sum += arr[i];
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbef      	blt.n	8000c48 <get_avg_arr+0x14>
    }
    return sum / size;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	b29b      	uxth	r3, r3
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b096      	sub	sp, #88	@ 0x58
 8000c82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2244      	movs	r2, #68	@ 0x44
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 ffd9 	bl	8002c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ca0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ca4:	f000 fb86 	bl	80013b4 <HAL_PWREx_ControlVoltageScaling>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cae:	f000 f838 	bl	8000d22 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cbe:	2360      	movs	r3, #96	@ 0x60
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cce:	2328      	movs	r3, #40	@ 0x28
 8000cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fbbc 	bl	8001460 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000cee:	f000 f818 	bl	8000d22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 ff84 	bl	8001c18 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d16:	f000 f804 	bl	8000d22 <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3758      	adds	r7, #88	@ 0x58
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d26:	b672      	cpsid	i
}
 8000d28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2a:	bf00      	nop
 8000d2c:	e7fd      	b.n	8000d2a <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <NMI_Handler+0x4>

08000d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <MemManage_Handler+0x4>

08000d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <UsageFault_Handler+0x4>

08000da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dce:	f000 f9dd 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f001 ff24 	bl	8002c54 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20018000 	.word	0x20018000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	200000a8 	.word	0x200000a8
 8000e40:	20000200 	.word	0x20000200

08000e44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <uart_pin_init>:

static volatile int flag;
static volatile char value;

// configure the USART pins
void uart_pin_init(void) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <uart_pin_init+0x8c>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	4a20      	ldr	r2, [pc, #128]	@ (8000f30 <uart_pin_init+0x8c>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    USART_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 8000eb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000ec2:	6213      	str	r3, [r2, #32]
    USART_PORT->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8000ec4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ece:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000ed2:	6213      	str	r3, [r2, #32]

    USART_PORT->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000ed4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ee2:	6013      	str	r3, [r2, #0]
    USART_PORT->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000ee4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eee:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000ef2:	6013      	str	r3, [r2, #0]
    USART_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000ef4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000efe:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000f02:	6093      	str	r3, [r2, #8]
    USART_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000f04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f12:	60d3      	str	r3, [r2, #12]
    USART_PORT->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000f14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f1e:	f023 030c 	bic.w	r3, r3, #12
 8000f22:	6053      	str	r3, [r2, #4]
    return;
 8000f24:	bf00      	nop
}
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <uart_init>:

// configure the USART peripheral
void uart_init(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    uart_pin_init();
 8000f38:	f7ff ffb4 	bl	8000ea4 <uart_pin_init>

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <uart_init+0x48>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <uart_init+0x48>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f46:	6593      	str	r3, [r2, #88]	@ 0x58
    // 8-bit data, oversampling by 16, 1 stop bit, no parity bit, rx interrupt enabled
    USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); // might not need rx intr
 8000f48:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <uart_init+0x4c>)
 8000f4a:	222c      	movs	r2, #44	@ 0x2c
 8000f4c:	601a      	str	r2, [r3, #0]
    USART2->BRR = USART_BRR;        // set baud rate
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <uart_init+0x4c>)
 8000f50:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8000f54:	60da      	str	r2, [r3, #12]

    NVIC_EnableIRQ(USART2_IRQn);
 8000f56:	2026      	movs	r0, #38	@ 0x26
 8000f58:	f7ff ff86 	bl	8000e68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f5c:	b662      	cpsie	i
}
 8000f5e:	bf00      	nop
    __enable_irq();

    USART2->CR1 |= USART_CR1_UE;   // enable USART2
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <uart_init+0x4c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a06      	ldr	r2, [pc, #24]	@ (8000f80 <uart_init+0x4c>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]

    uart_clear_screen();
 8000f6c:	f000 f848 	bl	8001000 <uart_clear_screen>
    uart_send_escape("[?25l"); // hide cursor
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <uart_init+0x50>)
 8000f72:	f000 f836 	bl	8000fe2 <uart_send_escape>
    return;
 8000f76:	bf00      	nop
}
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40004400 	.word	0x40004400
 8000f84:	08003628 	.word	0x08003628

08000f88 <uart_send_char>:

void uart_send_char(char c) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE));
 8000f92:	bf00      	nop
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <uart_send_char+0x2c>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f9      	beq.n	8000f94 <uart_send_char+0xc>
    USART2->TDR = c;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <uart_send_char+0x2c>)
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	851a      	strh	r2, [r3, #40]	@ 0x28

    return;
 8000fa8:	bf00      	nop
}
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <uart_send_string>:

void uart_send_string(const char* str) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8000fc0:	e007      	b.n	8000fd2 <uart_send_string+0x1a>
        uart_send_char(*str);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffde 	bl	8000f88 <uart_send_char>
        str++;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f3      	bne.n	8000fc2 <uart_send_string+0xa>
    }

    return;
 8000fda:	bf00      	nop
}
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <uart_send_escape>:

void uart_send_escape(const char* str) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
    uart_send_char(ESC_CHAR);
 8000fea:	201b      	movs	r0, #27
 8000fec:	f7ff ffcc 	bl	8000f88 <uart_send_char>
    uart_send_string(str);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ffe1 	bl	8000fb8 <uart_send_string>

    return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <uart_clear_screen>:


void uart_clear_screen(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    uart_send_escape("[2J");
 8001004:	4803      	ldr	r0, [pc, #12]	@ (8001014 <uart_clear_screen+0x14>)
 8001006:	f7ff ffec 	bl	8000fe2 <uart_send_escape>
    uart_send_escape("[H");
 800100a:	4803      	ldr	r0, [pc, #12]	@ (8001018 <uart_clear_screen+0x18>)
 800100c:	f7ff ffe9 	bl	8000fe2 <uart_send_escape>

    return;
 8001010:	bf00      	nop
}
 8001012:	bd80      	pop	{r7, pc}
 8001014:	08003630 	.word	0x08003630
 8001018:	08003634 	.word	0x08003634

0800101c <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
    value = USART2->RDR;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <USART2_IRQHandler+0x20>)
 8001022:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001024:	b29b      	uxth	r3, r3
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <USART2_IRQHandler+0x24>)
 800102a:	701a      	strb	r2, [r3, #0]
    flag = 1;
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <USART2_IRQHandler+0x28>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
    return;
 8001032:	bf00      	nop
}
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40004400 	.word	0x40004400
 8001040:	200000b0 	.word	0x200000b0
 8001044:	200000ac 	.word	0x200000ac

08001048 <uart_check_flag>:

int uart_check_flag() {
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
    return flag;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <uart_check_flag+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000ac 	.word	0x200000ac

08001060 <uart_clear_flag>:

void uart_clear_flag() {
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
    flag = 0;
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <uart_clear_flag+0x14>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]

    return;
 800106a:	bf00      	nop
}
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	200000ac 	.word	0x200000ac

08001078 <get_uart_char>:

char get_uart_char() {
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
    return value;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <get_uart_char+0x14>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200000b0 	.word	0x200000b0

08001090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff fed6 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	@ (80010d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	@ (80010dc <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f001 fdcf 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c2:	f7ff fa59 	bl	8000578 <main>

080010c6 <LoopForever>:

LoopForever:
    b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010d4:	08015514 	.word	0x08015514
  ldr r2, =_sbss
 80010d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010dc:	20000200 	.word	0x20000200

080010e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC3_IRQHandler>

080010e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f91f 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 f80e 	bl	8001114 <HAL_InitTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	e001      	b.n	8001108 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001104:	f7ff fe14 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <HAL_InitTick+0x6c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d023      	beq.n	8001170 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_InitTick+0x70>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <HAL_InitTick+0x6c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f91d 	bl	800137e <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10f      	bne.n	800116a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d809      	bhi.n	8001164 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001158:	f000 f8f5 	bl	8001346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_InitTick+0x74>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e007      	b.n	8001174 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e004      	b.n	8001174 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000024 	.word	0x20000024
 8001184:	2000001c 	.word	0x2000001c
 8001188:	20000020 	.word	0x20000020

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000024 	.word	0x20000024
 80011b0:	200000b4 	.word	0x200000b4

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200000b4 	.word	0x200000b4

080011cc <__NVIC_SetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff47 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff5c 	bl	8001214 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb0 	bl	80012ec <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40007000 	.word	0x40007000

080013b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013c2:	d130      	bne.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013c4:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d0:	d038      	beq.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013da:	4a1e      	ldr	r2, [pc, #120]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2232      	movs	r2, #50	@ 0x32
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9b      	lsrs	r3, r3, #18
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f8:	e002      	b.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140c:	d102      	bne.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x60>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f2      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001420:	d110      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e00f      	b.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001432:	d007      	beq.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800143c:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001442:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40007000 	.word	0x40007000
 8001458:	2000001c 	.word	0x2000001c
 800145c:	431bde83 	.word	0x431bde83

08001460 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e3ca      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001472:	4b97      	ldr	r3, [pc, #604]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800147c:	4b94      	ldr	r3, [pc, #592]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80e4 	beq.w	800165c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_RCC_OscConfig+0x4a>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b0c      	cmp	r3, #12
 800149e:	f040 808b 	bne.w	80015b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	f040 8087 	bne.w	80015b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014aa:	4b89      	ldr	r3, [pc, #548]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x62>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e3a2      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	4b82      	ldr	r3, [pc, #520]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <HAL_RCC_OscConfig+0x7c>
 80014d2:	4b7f      	ldr	r3, [pc, #508]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014da:	e005      	b.n	80014e8 <HAL_RCC_OscConfig+0x88>
 80014dc:	4b7c      	ldr	r3, [pc, #496]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d223      	bcs.n	8001534 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fd1d 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e383      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001500:	4b73      	ldr	r3, [pc, #460]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a72      	ldr	r2, [pc, #456]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b70      	ldr	r3, [pc, #448]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	496d      	ldr	r1, [pc, #436]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151e:	4b6c      	ldr	r3, [pc, #432]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	4968      	ldr	r1, [pc, #416]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
 8001532:	e025      	b.n	8001580 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001534:	4b66      	ldr	r3, [pc, #408]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a65      	ldr	r2, [pc, #404]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b63      	ldr	r3, [pc, #396]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4960      	ldr	r1, [pc, #384]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001552:	4b5f      	ldr	r3, [pc, #380]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	495b      	ldr	r1, [pc, #364]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fcdd 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e343      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001580:	f000 fc4a 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b52      	ldr	r3, [pc, #328]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	4950      	ldr	r1, [pc, #320]	@ (80016d4 <HAL_RCC_OscConfig+0x274>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	4a4e      	ldr	r2, [pc, #312]	@ (80016d8 <HAL_RCC_OscConfig+0x278>)
 800159e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015a0:	4b4e      	ldr	r3, [pc, #312]	@ (80016dc <HAL_RCC_OscConfig+0x27c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fdb5 	bl	8001114 <HAL_InitTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d052      	beq.n	800165a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	e327      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d032      	beq.n	8001626 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015c0:	4b43      	ldr	r3, [pc, #268]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a42      	ldr	r2, [pc, #264]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fdf2 	bl	80011b4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d4:	f7ff fdee 	bl	80011b4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e310      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e6:	4b3a      	ldr	r3, [pc, #232]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f2:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a36      	ldr	r2, [pc, #216]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b34      	ldr	r3, [pc, #208]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4931      	ldr	r1, [pc, #196]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001610:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	492c      	ldr	r1, [pc, #176]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e01a      	b.n	800165c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a29      	ldr	r2, [pc, #164]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001632:	f7ff fdbf 	bl	80011b4 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163a:	f7ff fdbb 	bl	80011b4 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e2dd      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800164c:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x1da>
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800165a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d074      	beq.n	8001752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x21a>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b0c      	cmp	r3, #12
 8001672:	d10e      	bne.n	8001692 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d10b      	bne.n	8001692 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d064      	beq.n	8001750 <HAL_RCC_OscConfig+0x2f0>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d160      	bne.n	8001750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e2ba      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x24a>
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e026      	b.n	80016f8 <HAL_RCC_OscConfig+0x298>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b2:	d115      	bne.n	80016e0 <HAL_RCC_OscConfig+0x280>
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a02      	ldr	r2, [pc, #8]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e014      	b.n	80016f8 <HAL_RCC_OscConfig+0x298>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08003638 	.word	0x08003638
 80016d8:	2000001c 	.word	0x2000001c
 80016dc:	20000020 	.word	0x20000020
 80016e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a9f      	ldr	r2, [pc, #636]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a9c      	ldr	r2, [pc, #624]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fd58 	bl	80011b4 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fd54 	bl	80011b4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	@ 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e276      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171a:	4b92      	ldr	r3, [pc, #584]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x2a8>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fd44 	bl	80011b4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fd40 	bl	80011b4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	@ 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e262      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001742:	4b88      	ldr	r3, [pc, #544]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x2d0>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d060      	beq.n	8001820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d005      	beq.n	8001770 <HAL_RCC_OscConfig+0x310>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d119      	bne.n	800179e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d116      	bne.n	800179e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	4b7c      	ldr	r3, [pc, #496]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x328>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e23f      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b76      	ldr	r3, [pc, #472]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	4973      	ldr	r1, [pc, #460]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	e040      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d023      	beq.n	80017ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff fcff 	bl	80011b4 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fcfb 	bl	80011b4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e21d      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017cc:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b62      	ldr	r3, [pc, #392]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	495f      	ldr	r1, [pc, #380]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
 80017ec:	e018      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80017f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fcdb 	bl	80011b4 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fcd7 	bl	80011b4 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1f9      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d03c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01c      	beq.n	800186e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001834:	4b4b      	ldr	r3, [pc, #300]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800183a:	4a4a      	ldr	r2, [pc, #296]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fcb6 	bl	80011b4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fcb2 	bl	80011b4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1d4      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185e:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ef      	beq.n	800184c <HAL_RCC_OscConfig+0x3ec>
 800186c:	e01b      	b.n	80018a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186e:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001874:	4a3b      	ldr	r2, [pc, #236]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fc99 	bl	80011b4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff fc95 	bl	80011b4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1b7      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001898:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ef      	bne.n	8001886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80a6 	beq.w	8001a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10d      	bne.n	80018e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d0:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018dc:	2301      	movs	r3, #1
 80018de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_RCC_OscConfig+0x508>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d118      	bne.n	800191e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <HAL_RCC_OscConfig+0x508>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <HAL_RCC_OscConfig+0x508>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fc5c 	bl	80011b4 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001900:	f7ff fc58 	bl	80011b4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e17a      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_RCC_OscConfig+0x508>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_RCC_OscConfig+0x4d8>
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001936:	e029      	b.n	800198c <HAL_RCC_OscConfig+0x52c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b05      	cmp	r3, #5
 800193e:	d115      	bne.n	800196c <HAL_RCC_OscConfig+0x50c>
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001956:	4a03      	ldr	r2, [pc, #12]	@ (8001964 <HAL_RCC_OscConfig+0x504>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x52c>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	4b9c      	ldr	r3, [pc, #624]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001972:	4a9b      	ldr	r2, [pc, #620]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800197c:	4b98      	ldr	r3, [pc, #608]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001982:	4a97      	ldr	r2, [pc, #604]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d016      	beq.n	80019c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fc0e 	bl	80011b4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7ff fc0a 	bl	80011b4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e12a      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	4b8b      	ldr	r3, [pc, #556]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ed      	beq.n	800199c <HAL_RCC_OscConfig+0x53c>
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff fbf7 	bl	80011b4 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff fbf3 	bl	80011b4 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e113      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e0:	4b7f      	ldr	r3, [pc, #508]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ed      	bne.n	80019ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f4:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	4a79      	ldr	r2, [pc, #484]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80fe 	beq.w	8001c06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	f040 80d0 	bne.w	8001bb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a14:	4b72      	ldr	r3, [pc, #456]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d130      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	3b01      	subs	r3, #1
 8001a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d127      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d11f      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a54:	2a07      	cmp	r2, #7
 8001a56:	bf14      	ite	ne
 8001a58:	2201      	movne	r2, #1
 8001a5a:	2200      	moveq	r2, #0
 8001a5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d113      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d06e      	beq.n	8001b68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d069      	beq.n	8001b64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a90:	4b53      	ldr	r3, [pc, #332]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a9c:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0ad      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001aac:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ab6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ab8:	f7ff fb7c 	bl	80011b4 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fb78 	bl	80011b4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e09a      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad2:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ade:	4b40      	ldr	r3, [pc, #256]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b40      	ldr	r3, [pc, #256]	@ (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001aee:	3a01      	subs	r2, #1
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	4311      	orrs	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001af8:	0212      	lsls	r2, r2, #8
 8001afa:	4311      	orrs	r1, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b00:	0852      	lsrs	r2, r2, #1
 8001b02:	3a01      	subs	r2, #1
 8001b04:	0552      	lsls	r2, r2, #21
 8001b06:	4311      	orrs	r1, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b0c:	0852      	lsrs	r2, r2, #1
 8001b0e:	3a01      	subs	r2, #1
 8001b10:	0652      	lsls	r2, r2, #25
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b18:	0912      	lsrs	r2, r2, #4
 8001b1a:	0452      	lsls	r2, r2, #17
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	4930      	ldr	r1, [pc, #192]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b24:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4a2a      	ldr	r2, [pc, #168]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b3c:	f7ff fb3a 	bl	80011b4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fb36 	bl	80011b4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e058      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b62:	e050      	b.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e04f      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d148      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b80:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a16      	ldr	r2, [pc, #88]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b8c:	f7ff fb12 	bl	80011b4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff fb0e 	bl	80011b4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e030      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x734>
 8001bb2:	e028      	b.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d023      	beq.n	8001c02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001bc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff faf5 	bl	80011b4 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	e00c      	b.n	8001be8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff faf1 	bl	80011b4 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d905      	bls.n	8001be8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e013      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_OscConfig+0x7b0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ec      	bne.n	8001bce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_OscConfig+0x7b0>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4905      	ldr	r1, [pc, #20]	@ (8001c10 <HAL_RCC_OscConfig+0x7b0>)
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_RCC_OscConfig+0x7b4>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
 8001c00:	e001      	b.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	feeefffc 	.word	0xfeeefffc

08001c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0e7      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b75      	ldr	r3, [pc, #468]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b72      	ldr	r3, [pc, #456]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4970      	ldr	r1, [pc, #448]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cf      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4b66      	ldr	r3, [pc, #408]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d908      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b63      	ldr	r3, [pc, #396]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4960      	ldr	r1, [pc, #384]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d04c      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0a6      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb6:	4b54      	ldr	r3, [pc, #336]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e09a      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cce:	4b4e      	ldr	r3, [pc, #312]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e08e      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	4b4a      	ldr	r3, [pc, #296]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e086      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b46      	ldr	r3, [pc, #280]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4943      	ldr	r1, [pc, #268]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d00:	f7ff fa58 	bl	80011b4 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff fa54 	bl	80011b4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e06e      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d208      	bcs.n	8001d5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	492b      	ldr	r1, [pc, #172]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5e:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d210      	bcs.n	8001d8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0207 	bic.w	r2, r3, #7
 8001d74:	4923      	ldr	r1, [pc, #140]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e036      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4918      	ldr	r1, [pc, #96]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4910      	ldr	r1, [pc, #64]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dcc:	f000 f824 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	490b      	ldr	r1, [pc, #44]	@ (8001e0c <HAL_RCC_ClockConfig+0x1f4>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f8>)
 8001dea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_ClockConfig+0x1fc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f98f 	bl	8001114 <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08003638 	.word	0x08003638
 8001e10:	2000001c 	.word	0x2000001c
 8001e14:	20000020 	.word	0x20000020

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b3e      	ldr	r3, [pc, #248]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e30:	4b3b      	ldr	r3, [pc, #236]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x34>
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d121      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d11e      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e4c:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e58:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e74:	4a2b      	ldr	r2, [pc, #172]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e90:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	e004      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d134      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0xa6>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d003      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ebc:	e005      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec0:	617b      	str	r3, [r7, #20]
      break;
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ec6:	617b      	str	r3, [r7, #20]
      break;
 8001ec8:	e002      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	617b      	str	r3, [r7, #20]
      break;
 8001ece:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	3301      	adds	r3, #1
 8001edc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	fb03 f202 	mul.w	r2, r3, r2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0e5b      	lsrs	r3, r3, #25
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	3301      	adds	r3, #1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f10:	69bb      	ldr	r3, [r7, #24]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	@ 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08003648 	.word	0x08003648
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f48:	f7ff fa26 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 8001f4c:	6178      	str	r0, [r7, #20]
 8001f4e:	e014      	b.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5c:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f68:	f7ff fa16 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 8001f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f80:	d10b      	bne.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b80      	cmp	r3, #128	@ 0x80
 8001f86:	d919      	bls.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f8c:	d902      	bls.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8e:	2302      	movs	r3, #2
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	e013      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e010      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b80      	cmp	r3, #128	@ 0x80
 8001f9e:	d902      	bls.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e00a      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	@ 0x80
 8001faa:	d102      	bne.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e004      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b70      	cmp	r3, #112	@ 0x70
 8001fb6:	d101      	bne.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 0207 	bic.w	r2, r3, #7
 8001fc4:	4909      	ldr	r1, [pc, #36]	@ (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40022000 	.word	0x40022000

08001ff0 <arm_max_q15>:
 8001ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff4:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	ea5f 0b98 	movs.w	fp, r8, lsr #2
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f100 0a02 	add.w	sl, r0, #2
 8002004:	8807      	ldrh	r7, [r0, #0]
 8002006:	d054      	beq.n	80020b2 <arm_max_q15+0xc2>
 8002008:	300a      	adds	r0, #10
 800200a:	46d9      	mov	r9, fp
 800200c:	f04f 0c04 	mov.w	ip, #4
 8002010:	2300      	movs	r3, #0
 8002012:	463c      	mov	r4, r7
 8002014:	f930 7c08 	ldrsh.w	r7, [r0, #-8]
 8002018:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
 800201c:	f930 6c02 	ldrsh.w	r6, [r0, #-2]
 8002020:	b224      	sxth	r4, r4
 8002022:	f1ac 0503 	sub.w	r5, ip, #3
 8002026:	42a7      	cmp	r7, r4
 8002028:	bfd8      	it	le
 800202a:	461d      	movle	r5, r3
 800202c:	42a7      	cmp	r7, r4
 800202e:	bfb8      	it	lt
 8002030:	4627      	movlt	r7, r4
 8002032:	f1ac 0402 	sub.w	r4, ip, #2
 8002036:	4577      	cmp	r7, lr
 8002038:	bfa8      	it	ge
 800203a:	462c      	movge	r4, r5
 800203c:	f930 3c04 	ldrsh.w	r3, [r0, #-4]
 8002040:	4577      	cmp	r7, lr
 8002042:	bfb8      	it	lt
 8002044:	4677      	movlt	r7, lr
 8002046:	f10c 35ff 	add.w	r5, ip, #4294967295	@ 0xffffffff
 800204a:	429f      	cmp	r7, r3
 800204c:	bfa8      	it	ge
 800204e:	4625      	movge	r5, r4
 8002050:	429f      	cmp	r7, r3
 8002052:	bfb8      	it	lt
 8002054:	461f      	movlt	r7, r3
 8002056:	42b7      	cmp	r7, r6
 8002058:	463c      	mov	r4, r7
 800205a:	bfb8      	it	lt
 800205c:	4634      	movlt	r4, r6
 800205e:	42b7      	cmp	r7, r6
 8002060:	bfac      	ite	ge
 8002062:	462b      	movge	r3, r5
 8002064:	4663      	movlt	r3, ip
 8002066:	f1b9 0901 	subs.w	r9, r9, #1
 800206a:	b2a4      	uxth	r4, r4
 800206c:	f10c 0c04 	add.w	ip, ip, #4
 8002070:	f100 0008 	add.w	r0, r0, #8
 8002074:	d1ce      	bne.n	8002014 <arm_max_q15+0x24>
 8002076:	4627      	mov	r7, r4
 8002078:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
 800207c:	f018 0803 	ands.w	r8, r8, #3
 8002080:	d019      	beq.n	80020b6 <arm_max_q15+0xc6>
 8002082:	ebc8 0801 	rsb	r8, r8, r1
 8002086:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800208a:	b23f      	sxth	r7, r7
 800208c:	42a7      	cmp	r7, r4
 800208e:	4638      	mov	r0, r7
 8002090:	bfb8      	it	lt
 8002092:	4620      	movlt	r0, r4
 8002094:	42bc      	cmp	r4, r7
 8002096:	bfc8      	it	gt
 8002098:	4643      	movgt	r3, r8
 800209a:	f108 0801 	add.w	r8, r8, #1
 800209e:	b280      	uxth	r0, r0
 80020a0:	4588      	cmp	r8, r1
 80020a2:	b287      	uxth	r7, r0
 80020a4:	d1ef      	bne.n	8002086 <arm_max_q15+0x96>
 80020a6:	8010      	strh	r0, [r2, #0]
 80020a8:	9a01      	ldr	r2, [sp, #4]
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	b003      	add	sp, #12
 80020ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b2:	465b      	mov	r3, fp
 80020b4:	e7e2      	b.n	800207c <arm_max_q15+0x8c>
 80020b6:	4638      	mov	r0, r7
 80020b8:	e7f5      	b.n	80020a6 <arm_max_q15+0xb6>
 80020ba:	bf00      	nop

080020bc <arm_split_rfft_q15>:
 80020bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c0:	b083      	sub	sp, #12
 80020c2:	f101 4480 	add.w	r4, r1, #1073741824	@ 0x40000000
 80020c6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80020c8:	9001      	str	r0, [sp, #4]
 80020ca:	3c01      	subs	r4, #1
 80020cc:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 80020d0:	00a0      	lsls	r0, r4, #2
 80020d2:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80020d6:	3901      	subs	r1, #1
 80020d8:	9000      	str	r0, [sp, #0]
 80020da:	4452      	add	r2, sl
 80020dc:	4453      	add	r3, sl
 80020de:	d02f      	beq.n	8002140 <arm_split_rfft_q15+0x84>
 80020e0:	f100 0904 	add.w	r9, r0, #4
 80020e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80020e6:	9c01      	ldr	r4, [sp, #4]
 80020e8:	f1ae 0e08 	sub.w	lr, lr, #8
 80020ec:	4486      	add	lr, r0
 80020ee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80020f0:	44a1      	add	r9, r4
 80020f2:	f100 0808 	add.w	r8, r0, #8
 80020f6:	46a3      	mov	fp, r4
 80020f8:	f04f 0c00 	mov.w	ip, #0
 80020fc:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 8002100:	f852 000c 	ldr.w	r0, [r2, ip]
 8002104:	fb44 f500 	smusd	r5, r4, r0
 8002108:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 800210c:	f853 700c 	ldr.w	r7, [r3, ip]
 8002110:	fb26 5507 	smlad	r5, r6, r7, r5
 8002114:	fb46 f617 	smusdx	r6, r6, r7
 8002118:	fb24 6010 	smladx	r0, r4, r0, r6
 800211c:	1400      	asrs	r0, r0, #16
 800211e:	0c2c      	lsrs	r4, r5, #16
 8002120:	4246      	negs	r6, r0
 8002122:	3901      	subs	r1, #1
 8002124:	f828 0c02 	strh.w	r0, [r8, #-2]
 8002128:	f828 4c04 	strh.w	r4, [r8, #-4]
 800212c:	44d4      	add	ip, sl
 800212e:	f8ae 6006 	strh.w	r6, [lr, #6]
 8002132:	f8ae 4004 	strh.w	r4, [lr, #4]
 8002136:	f108 0804 	add.w	r8, r8, #4
 800213a:	f1ae 0e04 	sub.w	lr, lr, #4
 800213e:	d1dd      	bne.n	80020fc <arm_split_rfft_q15+0x40>
 8002140:	9801      	ldr	r0, [sp, #4]
 8002142:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002144:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8002148:	f9b0 3000 	ldrsh.w	r3, [r0]
 800214c:	9900      	ldr	r1, [sp, #0]
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	4421      	add	r1, r4
 8002152:	2200      	movs	r2, #0
 8002154:	105b      	asrs	r3, r3, #1
 8002156:	808b      	strh	r3, [r1, #4]
 8002158:	80ca      	strh	r2, [r1, #6]
 800215a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800215e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8002162:	8062      	strh	r2, [r4, #2]
 8002164:	440b      	add	r3, r1
 8002166:	105b      	asrs	r3, r3, #1
 8002168:	8023      	strh	r3, [r4, #0]
 800216a:	b003      	add	sp, #12
 800216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002170 <arm_rfft_q15>:
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	4617      	mov	r7, r2
 8002176:	7902      	ldrb	r2, [r0, #4]
 8002178:	6805      	ldr	r5, [r0, #0]
 800217a:	6943      	ldr	r3, [r0, #20]
 800217c:	b085      	sub	sp, #20
 800217e:	2a01      	cmp	r2, #1
 8002180:	4606      	mov	r6, r0
 8002182:	9303      	str	r3, [sp, #12]
 8002184:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8002188:	4688      	mov	r8, r1
 800218a:	d00f      	beq.n	80021ac <arm_rfft_q15+0x3c>
 800218c:	4618      	mov	r0, r3
 800218e:	7973      	ldrb	r3, [r6, #5]
 8002190:	f000 fa6a 	bl	8002668 <arm_cfft_q15>
 8002194:	68b4      	ldr	r4, [r6, #8]
 8002196:	68f2      	ldr	r2, [r6, #12]
 8002198:	6933      	ldr	r3, [r6, #16]
 800219a:	9700      	str	r7, [sp, #0]
 800219c:	4640      	mov	r0, r8
 800219e:	4629      	mov	r1, r5
 80021a0:	9401      	str	r4, [sp, #4]
 80021a2:	f7ff ff8b 	bl	80020bc <arm_split_rfft_q15>
 80021a6:	b005      	add	sp, #20
 80021a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ac:	f100 0308 	add.w	r3, r0, #8
 80021b0:	e893 5008 	ldmia.w	r3, {r3, ip, lr}
 80021b4:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80021b8:	b31d      	cbz	r5, 8002202 <arm_rfft_q15+0x92>
 80021ba:	f109 0904 	add.w	r9, r9, #4
 80021be:	4489      	add	r9, r1
 80021c0:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80021c4:	46bb      	mov	fp, r7
 80021c6:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 80021ca:	f8de 4000 	ldr.w	r4, [lr]
 80021ce:	fb41 f304 	smusd	r3, r1, r4
 80021d2:	f858 0b04 	ldr.w	r0, [r8], #4
 80021d6:	f8dc 2000 	ldr.w	r2, [ip]
 80021da:	fb20 3302 	smlad	r3, r0, r2, r3
 80021de:	fb21 f114 	smuadx	r1, r1, r4
 80021e2:	4249      	negs	r1, r1
 80021e4:	fb42 1210 	smlsdx	r2, r2, r0, r1
 80021e8:	3d01      	subs	r5, #1
 80021ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80021ee:	ea4f 4222 	mov.w	r2, r2, asr #16
 80021f2:	44d6      	add	lr, sl
 80021f4:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 80021f8:	44d4      	add	ip, sl
 80021fa:	f84b 2b04 	str.w	r2, [fp], #4
 80021fe:	d1e2      	bne.n	80021c6 <arm_rfft_q15+0x56>
 8002200:	7932      	ldrb	r2, [r6, #4]
 8002202:	7973      	ldrb	r3, [r6, #5]
 8002204:	9803      	ldr	r0, [sp, #12]
 8002206:	4639      	mov	r1, r7
 8002208:	f000 fa2e 	bl	8002668 <arm_cfft_q15>
 800220c:	6833      	ldr	r3, [r6, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0c9      	beq.n	80021a6 <arm_rfft_q15+0x36>
 8002212:	3f02      	subs	r7, #2
 8002214:	2200      	movs	r2, #0
 8002216:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	803b      	strh	r3, [r7, #0]
 800221e:	6833      	ldr	r3, [r6, #0]
 8002220:	3201      	adds	r2, #1
 8002222:	4293      	cmp	r3, r2
 8002224:	d8f7      	bhi.n	8002216 <arm_rfft_q15+0xa6>
 8002226:	b005      	add	sp, #20
 8002228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800222c <arm_rfft_init_q15>:
 800222c:	b289      	uxth	r1, r1
 800222e:	b430      	push	{r4, r5}
 8002230:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002234:	4d36      	ldr	r5, [pc, #216]	@ (8002310 <arm_rfft_init_q15+0xe4>)
 8002236:	4c37      	ldr	r4, [pc, #220]	@ (8002314 <arm_rfft_init_q15+0xe8>)
 8002238:	7102      	strb	r2, [r0, #4]
 800223a:	7143      	strb	r3, [r0, #5]
 800223c:	6001      	str	r1, [r0, #0]
 800223e:	60c5      	str	r5, [r0, #12]
 8002240:	6104      	str	r4, [r0, #16]
 8002242:	d050      	beq.n	80022e6 <arm_rfft_init_q15+0xba>
 8002244:	d911      	bls.n	800226a <arm_rfft_init_q15+0x3e>
 8002246:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800224a:	d054      	beq.n	80022f6 <arm_rfft_init_q15+0xca>
 800224c:	d938      	bls.n	80022c0 <arm_rfft_init_q15+0x94>
 800224e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002252:	d022      	beq.n	800229a <arm_rfft_init_q15+0x6e>
 8002254:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8002258:	d155      	bne.n	8002306 <arm_rfft_init_q15+0xda>
 800225a:	2201      	movs	r2, #1
 800225c:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <arm_rfft_init_q15+0xec>)
 800225e:	6082      	str	r2, [r0, #8]
 8002260:	6143      	str	r3, [r0, #20]
 8002262:	2000      	movs	r0, #0
 8002264:	b240      	sxtb	r0, r0
 8002266:	bc30      	pop	{r4, r5}
 8002268:	4770      	bx	lr
 800226a:	2940      	cmp	r1, #64	@ 0x40
 800226c:	d033      	beq.n	80022d6 <arm_rfft_init_q15+0xaa>
 800226e:	d91c      	bls.n	80022aa <arm_rfft_init_q15+0x7e>
 8002270:	2980      	cmp	r1, #128	@ 0x80
 8002272:	d00a      	beq.n	800228a <arm_rfft_init_q15+0x5e>
 8002274:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002278:	d145      	bne.n	8002306 <arm_rfft_init_q15+0xda>
 800227a:	2220      	movs	r2, #32
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <arm_rfft_init_q15+0xf0>)
 800227e:	6082      	str	r2, [r0, #8]
 8002280:	6143      	str	r3, [r0, #20]
 8002282:	2000      	movs	r0, #0
 8002284:	b240      	sxtb	r0, r0
 8002286:	bc30      	pop	{r4, r5}
 8002288:	4770      	bx	lr
 800228a:	2240      	movs	r2, #64	@ 0x40
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <arm_rfft_init_q15+0xf4>)
 800228e:	6082      	str	r2, [r0, #8]
 8002290:	6143      	str	r3, [r0, #20]
 8002292:	2000      	movs	r0, #0
 8002294:	b240      	sxtb	r0, r0
 8002296:	bc30      	pop	{r4, r5}
 8002298:	4770      	bx	lr
 800229a:	2202      	movs	r2, #2
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <arm_rfft_init_q15+0xf8>)
 800229e:	6082      	str	r2, [r0, #8]
 80022a0:	6143      	str	r3, [r0, #20]
 80022a2:	2000      	movs	r0, #0
 80022a4:	b240      	sxtb	r0, r0
 80022a6:	bc30      	pop	{r4, r5}
 80022a8:	4770      	bx	lr
 80022aa:	2920      	cmp	r1, #32
 80022ac:	d12b      	bne.n	8002306 <arm_rfft_init_q15+0xda>
 80022ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <arm_rfft_init_q15+0xfc>)
 80022b4:	6082      	str	r2, [r0, #8]
 80022b6:	6143      	str	r3, [r0, #20]
 80022b8:	2000      	movs	r0, #0
 80022ba:	b240      	sxtb	r0, r0
 80022bc:	bc30      	pop	{r4, r5}
 80022be:	4770      	bx	lr
 80022c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80022c4:	d11f      	bne.n	8002306 <arm_rfft_init_q15+0xda>
 80022c6:	2208      	movs	r2, #8
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <arm_rfft_init_q15+0x100>)
 80022ca:	6082      	str	r2, [r0, #8]
 80022cc:	6143      	str	r3, [r0, #20]
 80022ce:	2000      	movs	r0, #0
 80022d0:	b240      	sxtb	r0, r0
 80022d2:	bc30      	pop	{r4, r5}
 80022d4:	4770      	bx	lr
 80022d6:	2280      	movs	r2, #128	@ 0x80
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <arm_rfft_init_q15+0x104>)
 80022da:	6082      	str	r2, [r0, #8]
 80022dc:	6143      	str	r3, [r0, #20]
 80022de:	2000      	movs	r0, #0
 80022e0:	b240      	sxtb	r0, r0
 80022e2:	bc30      	pop	{r4, r5}
 80022e4:	4770      	bx	lr
 80022e6:	2210      	movs	r2, #16
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <arm_rfft_init_q15+0x108>)
 80022ea:	6082      	str	r2, [r0, #8]
 80022ec:	6143      	str	r3, [r0, #20]
 80022ee:	2000      	movs	r0, #0
 80022f0:	b240      	sxtb	r0, r0
 80022f2:	bc30      	pop	{r4, r5}
 80022f4:	4770      	bx	lr
 80022f6:	2204      	movs	r2, #4
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <arm_rfft_init_q15+0x10c>)
 80022fa:	6082      	str	r2, [r0, #8]
 80022fc:	6143      	str	r3, [r0, #20]
 80022fe:	2000      	movs	r0, #0
 8002300:	b240      	sxtb	r0, r0
 8002302:	bc30      	pop	{r4, r5}
 8002304:	4770      	bx	lr
 8002306:	20ff      	movs	r0, #255	@ 0xff
 8002308:	b240      	sxtb	r0, r0
 800230a:	bc30      	pop	{r4, r5}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	08003678 	.word	0x08003678
 8002314:	08007678 	.word	0x08007678
 8002318:	0800b6a8 	.word	0x0800b6a8
 800231c:	0800b6e8 	.word	0x0800b6e8
 8002320:	0800b6c8 	.word	0x0800b6c8
 8002324:	0800b6f8 	.word	0x0800b6f8
 8002328:	0800b688 	.word	0x0800b688
 800232c:	0800b6b8 	.word	0x0800b6b8
 8002330:	0800b698 	.word	0x0800b698
 8002334:	0800b6d8 	.word	0x0800b6d8
 8002338:	0800b678 	.word	0x0800b678

0800233c <arm_cmplx_mag_q15>:
 800233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002340:	b083      	sub	sp, #12
 8002342:	0893      	lsrs	r3, r2, #2
 8002344:	9200      	str	r2, [sp, #0]
 8002346:	4607      	mov	r7, r0
 8002348:	460e      	mov	r6, r1
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	d034      	beq.n	80023b8 <arm_cmplx_mag_q15+0x7c>
 800234e:	f100 0510 	add.w	r5, r0, #16
 8002352:	469b      	mov	fp, r3
 8002354:	460c      	mov	r4, r1
 8002356:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800235a:	fb20 f000 	smuad	r0, r0, r0
 800235e:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8002362:	fb22 f802 	smuad	r8, r2, r2
 8002366:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800236a:	fb23 fa03 	smuad	sl, r3, r3
 800236e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8002372:	fb23 f903 	smuad	r9, r3, r3
 8002376:	4621      	mov	r1, r4
 8002378:	1440      	asrs	r0, r0, #17
 800237a:	f000 f831 	bl	80023e0 <arm_sqrt_q15>
 800237e:	1ca1      	adds	r1, r4, #2
 8002380:	ea4f 4068 	mov.w	r0, r8, asr #17
 8002384:	f000 f82c 	bl	80023e0 <arm_sqrt_q15>
 8002388:	f104 0806 	add.w	r8, r4, #6
 800238c:	1d21      	adds	r1, r4, #4
 800238e:	ea4f 406a 	mov.w	r0, sl, asr #17
 8002392:	f000 f825 	bl	80023e0 <arm_sqrt_q15>
 8002396:	ea4f 4069 	mov.w	r0, r9, asr #17
 800239a:	4641      	mov	r1, r8
 800239c:	f000 f820 	bl	80023e0 <arm_sqrt_q15>
 80023a0:	f1bb 0b01 	subs.w	fp, fp, #1
 80023a4:	f105 0510 	add.w	r5, r5, #16
 80023a8:	f104 0408 	add.w	r4, r4, #8
 80023ac:	d1d3      	bne.n	8002356 <arm_cmplx_mag_q15+0x1a>
 80023ae:	9a01      	ldr	r2, [sp, #4]
 80023b0:	eb07 1702 	add.w	r7, r7, r2, lsl #4
 80023b4:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 80023b8:	9b00      	ldr	r3, [sp, #0]
 80023ba:	f013 0403 	ands.w	r4, r3, #3
 80023be:	d00b      	beq.n	80023d8 <arm_cmplx_mag_q15+0x9c>
 80023c0:	f857 0b04 	ldr.w	r0, [r7], #4
 80023c4:	fb20 f000 	smuad	r0, r0, r0
 80023c8:	4631      	mov	r1, r6
 80023ca:	1440      	asrs	r0, r0, #17
 80023cc:	f000 f808 	bl	80023e0 <arm_sqrt_q15>
 80023d0:	3c01      	subs	r4, #1
 80023d2:	f106 0602 	add.w	r6, r6, #2
 80023d6:	d1f3      	bne.n	80023c0 <arm_cmplx_mag_q15+0x84>
 80023d8:	b003      	add	sp, #12
 80023da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023de:	bf00      	nop

080023e0 <arm_sqrt_q15>:
 80023e0:	2800      	cmp	r0, #0
 80023e2:	dd72      	ble.n	80024ca <arm_sqrt_q15+0xea>
 80023e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e6:	fab0 f680 	clz	r6, r0
 80023ea:	3e11      	subs	r6, #17
 80023ec:	b2b6      	uxth	r6, r6
 80023ee:	f016 0701 	ands.w	r7, r6, #1
 80023f2:	bf1a      	itte	ne
 80023f4:	f106 32ff 	addne.w	r2, r6, #4294967295	@ 0xffffffff
 80023f8:	fa00 f302 	lslne.w	r3, r0, r2
 80023fc:	fa00 f306 	lsleq.w	r3, r0, r6
 8002400:	b29b      	uxth	r3, r3
 8002402:	b21c      	sxth	r4, r3
 8002404:	ee07 4a90 	vmov	s15, r4
 8002408:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 800240c:	4831      	ldr	r0, [pc, #196]	@ (80024d4 <arm_sqrt_q15+0xf4>)
 800240e:	ee17 5a90 	vmov	r5, s15
 8002412:	106d      	asrs	r5, r5, #1
 8002414:	1b40      	subs	r0, r0, r5
 8002416:	ee07 0a90 	vmov	s15, r0
 800241a:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 800241e:	b083      	sub	sp, #12
 8002420:	edcd 7a01 	vstr	s15, [sp, #4]
 8002424:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8002428:	fb15 f005 	smulbb	r0, r5, r5
 800242c:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8002430:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 8002434:	fb10 f004 	smulbb	r0, r0, r4
 8002438:	f340 32cf 	sbfx	r2, r0, #15, #16
 800243c:	f5c2 5040 	rsb	r0, r2, #12288	@ 0x3000
 8002440:	b22a      	sxth	r2, r5
 8002442:	fb00 f202 	mul.w	r2, r0, r2
 8002446:	f342 32cf 	sbfx	r2, r2, #15, #16
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	b292      	uxth	r2, r2
 800244e:	fb12 f002 	smulbb	r0, r2, r2
 8002452:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 8002456:	fb14 f000 	smulbb	r0, r4, r0
 800245a:	f340 3ecf 	sbfx	lr, r0, #15, #16
 800245e:	f5ce 5040 	rsb	r0, lr, #12288	@ 0x3000
 8002462:	fa0f fe82 	sxth.w	lr, r2
 8002466:	fb00 fe0e 	mul.w	lr, r0, lr
 800246a:	f34e 3ecf 	sbfx	lr, lr, #15, #16
 800246e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002472:	fa1f fe8e 	uxth.w	lr, lr
 8002476:	fb1e f50e 	smulbb	r5, lr, lr
 800247a:	f3c5 35cf 	ubfx	r5, r5, #15, #16
 800247e:	fb14 f405 	smulbb	r4, r4, r5
 8002482:	f344 32cf 	sbfx	r2, r4, #15, #16
 8002486:	f5c2 5440 	rsb	r4, r2, #12288	@ 0x3000
 800248a:	fa0f f28e 	sxth.w	r2, lr
 800248e:	fb04 f202 	mul.w	r2, r4, r2
 8002492:	f342 32cf 	sbfx	r2, r2, #15, #16
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	fb13 f302 	smulbb	r3, r3, r2
 800249c:	f343 33cf 	sbfx	r3, r3, #15, #16
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	b15f      	cbz	r7, 80024be <arm_sqrt_q15+0xde>
 80024a6:	3e01      	subs	r6, #1
 80024a8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80024ac:	1076      	asrs	r6, r6, #1
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4133      	asrs	r3, r6
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2000      	movs	r0, #0
 80024b6:	b240      	sxtb	r0, r0
 80024b8:	800b      	strh	r3, [r1, #0]
 80024ba:	b003      	add	sp, #12
 80024bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f346 064e 	sbfx	r6, r6, #1, #15
 80024c4:	4133      	asrs	r3, r6
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	e7f4      	b.n	80024b4 <arm_sqrt_q15+0xd4>
 80024ca:	2300      	movs	r3, #0
 80024cc:	20ff      	movs	r0, #255	@ 0xff
 80024ce:	800b      	strh	r3, [r1, #0]
 80024d0:	b240      	sxtb	r0, r0
 80024d2:	4770      	bx	lr
 80024d4:	5f3759df 	.word	0x5f3759df

080024d8 <arm_cfft_radix4by2_q15>:
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	084d      	lsrs	r5, r1, #1
 80024de:	b081      	sub	sp, #4
 80024e0:	4604      	mov	r4, r0
 80024e2:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80024e6:	4616      	mov	r6, r2
 80024e8:	d04c      	beq.n	8002584 <arm_cfft_radix4by2_q15+0xac>
 80024ea:	46bc      	mov	ip, r7
 80024ec:	4686      	mov	lr, r0
 80024ee:	4691      	mov	r9, r2
 80024f0:	4629      	mov	r1, r5
 80024f2:	f04f 0800 	mov.w	r8, #0
 80024f6:	f859 2b04 	ldr.w	r2, [r9], #4
 80024fa:	f8de 3000 	ldr.w	r3, [lr]
 80024fe:	fa93 fa28 	shadd16	sl, r3, r8
 8002502:	f8dc 0000 	ldr.w	r0, [ip]
 8002506:	fa90 f028 	shadd16	r0, r0, r8
 800250a:	fada fb10 	qsub16	fp, sl, r0
 800250e:	fa9a f020 	shadd16	r0, sl, r0
 8002512:	f84e 0b04 	str.w	r0, [lr], #4
 8002516:	fb22 f00b 	smuad	r0, r2, fp
 800251a:	fb42 f21b 	smusdx	r2, r2, fp
 800251e:	0c13      	lsrs	r3, r2, #16
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002526:	3901      	subs	r1, #1
 8002528:	f84c 3b04 	str.w	r3, [ip], #4
 800252c:	d1e3      	bne.n	80024f6 <arm_cfft_radix4by2_q15+0x1e>
 800252e:	4629      	mov	r1, r5
 8002530:	4620      	mov	r0, r4
 8002532:	4632      	mov	r2, r6
 8002534:	2302      	movs	r3, #2
 8002536:	f000 f8f5 	bl	8002724 <arm_radix4_butterfly_q15>
 800253a:	4629      	mov	r1, r5
 800253c:	2302      	movs	r3, #2
 800253e:	4638      	mov	r0, r7
 8002540:	4632      	mov	r2, r6
 8002542:	f000 f8ef 	bl	8002724 <arm_radix4_butterfly_q15>
 8002546:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800254a:	1ca3      	adds	r3, r4, #2
 800254c:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 8002550:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8002554:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8002558:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800255c:	007f      	lsls	r7, r7, #1
 800255e:	0076      	lsls	r6, r6, #1
 8002560:	0040      	lsls	r0, r0, #1
 8002562:	0052      	lsls	r2, r2, #1
 8002564:	f823 7c02 	strh.w	r7, [r3, #-2]
 8002568:	3408      	adds	r4, #8
 800256a:	f824 6c06 	strh.w	r6, [r4, #-6]
 800256e:	f824 0c04 	strh.w	r0, [r4, #-4]
 8002572:	f824 2c02 	strh.w	r2, [r4, #-2]
 8002576:	42ac      	cmp	r4, r5
 8002578:	f103 0308 	add.w	r3, r3, #8
 800257c:	d1e6      	bne.n	800254c <arm_cfft_radix4by2_q15+0x74>
 800257e:	b001      	add	sp, #4
 8002580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002584:	4629      	mov	r1, r5
 8002586:	2302      	movs	r3, #2
 8002588:	f000 f8cc 	bl	8002724 <arm_radix4_butterfly_q15>
 800258c:	4638      	mov	r0, r7
 800258e:	4629      	mov	r1, r5
 8002590:	4632      	mov	r2, r6
 8002592:	2302      	movs	r3, #2
 8002594:	b001      	add	sp, #4
 8002596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800259a:	f000 b8c3 	b.w	8002724 <arm_radix4_butterfly_q15>
 800259e:	bf00      	nop

080025a0 <arm_cfft_radix4by2_inverse_q15>:
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	084d      	lsrs	r5, r1, #1
 80025a6:	b081      	sub	sp, #4
 80025a8:	4604      	mov	r4, r0
 80025aa:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80025ae:	4616      	mov	r6, r2
 80025b0:	d04c      	beq.n	800264c <arm_cfft_radix4by2_inverse_q15+0xac>
 80025b2:	46bc      	mov	ip, r7
 80025b4:	4686      	mov	lr, r0
 80025b6:	4691      	mov	r9, r2
 80025b8:	4629      	mov	r1, r5
 80025ba:	f04f 0800 	mov.w	r8, #0
 80025be:	f859 2b04 	ldr.w	r2, [r9], #4
 80025c2:	f8de 3000 	ldr.w	r3, [lr]
 80025c6:	fa93 fa28 	shadd16	sl, r3, r8
 80025ca:	f8dc 0000 	ldr.w	r0, [ip]
 80025ce:	fa90 f028 	shadd16	r0, r0, r8
 80025d2:	fada fb10 	qsub16	fp, sl, r0
 80025d6:	fa9a f020 	shadd16	r0, sl, r0
 80025da:	f84e 0b04 	str.w	r0, [lr], #4
 80025de:	fb42 f00b 	smusd	r0, r2, fp
 80025e2:	fb22 f21b 	smuadx	r2, r2, fp
 80025e6:	0c13      	lsrs	r3, r2, #16
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80025ee:	3901      	subs	r1, #1
 80025f0:	f84c 3b04 	str.w	r3, [ip], #4
 80025f4:	d1e3      	bne.n	80025be <arm_cfft_radix4by2_inverse_q15+0x1e>
 80025f6:	4629      	mov	r1, r5
 80025f8:	4620      	mov	r0, r4
 80025fa:	4632      	mov	r2, r6
 80025fc:	2302      	movs	r3, #2
 80025fe:	f000 f9bf 	bl	8002980 <arm_radix4_butterfly_inverse_q15>
 8002602:	4629      	mov	r1, r5
 8002604:	2302      	movs	r3, #2
 8002606:	4638      	mov	r0, r7
 8002608:	4632      	mov	r2, r6
 800260a:	f000 f9b9 	bl	8002980 <arm_radix4_butterfly_inverse_q15>
 800260e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8002612:	1ca3      	adds	r3, r4, #2
 8002614:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 8002618:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800261c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8002620:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8002624:	007f      	lsls	r7, r7, #1
 8002626:	0076      	lsls	r6, r6, #1
 8002628:	0040      	lsls	r0, r0, #1
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	f823 7c02 	strh.w	r7, [r3, #-2]
 8002630:	3408      	adds	r4, #8
 8002632:	f824 6c06 	strh.w	r6, [r4, #-6]
 8002636:	f824 0c04 	strh.w	r0, [r4, #-4]
 800263a:	f824 2c02 	strh.w	r2, [r4, #-2]
 800263e:	42ac      	cmp	r4, r5
 8002640:	f103 0308 	add.w	r3, r3, #8
 8002644:	d1e6      	bne.n	8002614 <arm_cfft_radix4by2_inverse_q15+0x74>
 8002646:	b001      	add	sp, #4
 8002648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800264c:	4629      	mov	r1, r5
 800264e:	2302      	movs	r3, #2
 8002650:	f000 f996 	bl	8002980 <arm_radix4_butterfly_inverse_q15>
 8002654:	4638      	mov	r0, r7
 8002656:	4629      	mov	r1, r5
 8002658:	4632      	mov	r2, r6
 800265a:	2302      	movs	r3, #2
 800265c:	b001      	add	sp, #4
 800265e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002662:	f000 b98d 	b.w	8002980 <arm_radix4_butterfly_inverse_q15>
 8002666:	bf00      	nop

08002668 <arm_cfft_q15>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	2a01      	cmp	r2, #1
 800266c:	460d      	mov	r5, r1
 800266e:	4604      	mov	r4, r0
 8002670:	461e      	mov	r6, r3
 8002672:	8801      	ldrh	r1, [r0, #0]
 8002674:	d024      	beq.n	80026c0 <arm_cfft_q15+0x58>
 8002676:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800267a:	d013      	beq.n	80026a4 <arm_cfft_q15+0x3c>
 800267c:	d808      	bhi.n	8002690 <arm_cfft_q15+0x28>
 800267e:	2920      	cmp	r1, #32
 8002680:	d031      	beq.n	80026e6 <arm_cfft_q15+0x7e>
 8002682:	d945      	bls.n	8002710 <arm_cfft_q15+0xa8>
 8002684:	2940      	cmp	r1, #64	@ 0x40
 8002686:	d00d      	beq.n	80026a4 <arm_cfft_q15+0x3c>
 8002688:	2980      	cmp	r1, #128	@ 0x80
 800268a:	d02c      	beq.n	80026e6 <arm_cfft_q15+0x7e>
 800268c:	b98e      	cbnz	r6, 80026b2 <arm_cfft_q15+0x4a>
 800268e:	bd70      	pop	{r4, r5, r6, pc}
 8002690:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002694:	d006      	beq.n	80026a4 <arm_cfft_q15+0x3c>
 8002696:	d923      	bls.n	80026e0 <arm_cfft_q15+0x78>
 8002698:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800269c:	d023      	beq.n	80026e6 <arm_cfft_q15+0x7e>
 800269e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80026a2:	d1f3      	bne.n	800268c <arm_cfft_q15+0x24>
 80026a4:	4628      	mov	r0, r5
 80026a6:	6862      	ldr	r2, [r4, #4]
 80026a8:	2301      	movs	r3, #1
 80026aa:	f000 f83b 	bl	8002724 <arm_radix4_butterfly_q15>
 80026ae:	2e00      	cmp	r6, #0
 80026b0:	d0ed      	beq.n	800268e <arm_cfft_q15+0x26>
 80026b2:	4628      	mov	r0, r5
 80026b4:	89a1      	ldrh	r1, [r4, #12]
 80026b6:	68a2      	ldr	r2, [r4, #8]
 80026b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80026bc:	f7fd bdbd 	b.w	800023a <arm_bitreversal_16>
 80026c0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80026c4:	d01e      	beq.n	8002704 <arm_cfft_q15+0x9c>
 80026c6:	d813      	bhi.n	80026f0 <arm_cfft_q15+0x88>
 80026c8:	2920      	cmp	r1, #32
 80026ca:	d004      	beq.n	80026d6 <arm_cfft_q15+0x6e>
 80026cc:	d927      	bls.n	800271e <arm_cfft_q15+0xb6>
 80026ce:	2940      	cmp	r1, #64	@ 0x40
 80026d0:	d018      	beq.n	8002704 <arm_cfft_q15+0x9c>
 80026d2:	2980      	cmp	r1, #128	@ 0x80
 80026d4:	d1da      	bne.n	800268c <arm_cfft_q15+0x24>
 80026d6:	4628      	mov	r0, r5
 80026d8:	6862      	ldr	r2, [r4, #4]
 80026da:	f7ff ff61 	bl	80025a0 <arm_cfft_radix4by2_inverse_q15>
 80026de:	e7d5      	b.n	800268c <arm_cfft_q15+0x24>
 80026e0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80026e4:	d1d2      	bne.n	800268c <arm_cfft_q15+0x24>
 80026e6:	4628      	mov	r0, r5
 80026e8:	6862      	ldr	r2, [r4, #4]
 80026ea:	f7ff fef5 	bl	80024d8 <arm_cfft_radix4by2_q15>
 80026ee:	e7cd      	b.n	800268c <arm_cfft_q15+0x24>
 80026f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80026f4:	d006      	beq.n	8002704 <arm_cfft_q15+0x9c>
 80026f6:	d90e      	bls.n	8002716 <arm_cfft_q15+0xae>
 80026f8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80026fc:	d0eb      	beq.n	80026d6 <arm_cfft_q15+0x6e>
 80026fe:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002702:	d1c3      	bne.n	800268c <arm_cfft_q15+0x24>
 8002704:	4628      	mov	r0, r5
 8002706:	6862      	ldr	r2, [r4, #4]
 8002708:	2301      	movs	r3, #1
 800270a:	f000 f939 	bl	8002980 <arm_radix4_butterfly_inverse_q15>
 800270e:	e7bd      	b.n	800268c <arm_cfft_q15+0x24>
 8002710:	2910      	cmp	r1, #16
 8002712:	d1bb      	bne.n	800268c <arm_cfft_q15+0x24>
 8002714:	e7c6      	b.n	80026a4 <arm_cfft_q15+0x3c>
 8002716:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800271a:	d0dc      	beq.n	80026d6 <arm_cfft_q15+0x6e>
 800271c:	e7b6      	b.n	800268c <arm_cfft_q15+0x24>
 800271e:	2910      	cmp	r1, #16
 8002720:	d1b4      	bne.n	800268c <arm_cfft_q15+0x24>
 8002722:	e7ef      	b.n	8002704 <arm_cfft_q15+0x9c>

08002724 <arm_radix4_butterfly_q15>:
 8002724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002728:	b08f      	sub	sp, #60	@ 0x3c
 800272a:	469b      	mov	fp, r3
 800272c:	9101      	str	r1, [sp, #4]
 800272e:	0889      	lsrs	r1, r1, #2
 8002730:	460e      	mov	r6, r1
 8002732:	910d      	str	r1, [sp, #52]	@ 0x34
 8002734:	0089      	lsls	r1, r1, #2
 8002736:	4607      	mov	r7, r0
 8002738:	900c      	str	r0, [sp, #48]	@ 0x30
 800273a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800273e:	4408      	add	r0, r1
 8002740:	2400      	movs	r4, #0
 8002742:	1845      	adds	r5, r0, r1
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4696      	mov	lr, r2
 8002748:	9209      	str	r2, [sp, #36]	@ 0x24
 800274a:	46b2      	mov	sl, r6
 800274c:	4429      	add	r1, r5
 800274e:	9302      	str	r3, [sp, #8]
 8002750:	4626      	mov	r6, r4
 8002752:	4622      	mov	r2, r4
 8002754:	f8cd b000 	str.w	fp, [sp]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	fa93 fc22 	shadd16	ip, r3, r2
 800275e:	fa9c fc22 	shadd16	ip, ip, r2
 8002762:	682b      	ldr	r3, [r5, #0]
 8002764:	fa93 f322 	shadd16	r3, r3, r2
 8002768:	fa93 f322 	shadd16	r3, r3, r2
 800276c:	fa9c f813 	qadd16	r8, ip, r3
 8002770:	fadc fc13 	qsub16	ip, ip, r3
 8002774:	6803      	ldr	r3, [r0, #0]
 8002776:	fa93 f322 	shadd16	r3, r3, r2
 800277a:	fa93 f922 	shadd16	r9, r3, r2
 800277e:	680b      	ldr	r3, [r1, #0]
 8002780:	fa93 f322 	shadd16	r3, r3, r2
 8002784:	fa93 f322 	shadd16	r3, r3, r2
 8002788:	fa99 f313 	qadd16	r3, r9, r3
 800278c:	fa98 f923 	shadd16	r9, r8, r3
 8002790:	f847 9b04 	str.w	r9, [r7], #4
 8002794:	fad8 f313 	qsub16	r3, r8, r3
 8002798:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 800279c:	fb29 fb03 	smuad	fp, r9, r3
 80027a0:	fb49 f913 	smusdx	r9, r9, r3
 80027a4:	6803      	ldr	r3, [r0, #0]
 80027a6:	fa93 f322 	shadd16	r3, r3, r2
 80027aa:	fa93 f822 	shadd16	r8, r3, r2
 80027ae:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80027b2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80027b6:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 80027ba:	f840 3b04 	str.w	r3, [r0], #4
 80027be:	680b      	ldr	r3, [r1, #0]
 80027c0:	fa93 f322 	shadd16	r3, r3, r2
 80027c4:	fa93 f322 	shadd16	r3, r3, r2
 80027c8:	fad8 f313 	qsub16	r3, r8, r3
 80027cc:	faac f913 	qasx	r9, ip, r3
 80027d0:	faec fc13 	qsax	ip, ip, r3
 80027d4:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80027d8:	fb23 f80c 	smuad	r8, r3, ip
 80027dc:	fb43 f31c 	smusdx	r3, r3, ip
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80027e8:	f845 3b04 	str.w	r3, [r5], #4
 80027ec:	f85e 3004 	ldr.w	r3, [lr, r4]
 80027f0:	fb23 fc09 	smuad	ip, r3, r9
 80027f4:	fb43 f319 	smusdx	r3, r3, r9
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002800:	f841 3b04 	str.w	r3, [r1], #4
 8002804:	9b00      	ldr	r3, [sp, #0]
 8002806:	441e      	add	r6, r3
 8002808:	9b02      	ldr	r3, [sp, #8]
 800280a:	f1ba 0a01 	subs.w	sl, sl, #1
 800280e:	441c      	add	r4, r3
 8002810:	d1a2      	bne.n	8002758 <arm_radix4_butterfly_q15+0x34>
 8002812:	f8dd b000 	ldr.w	fp, [sp]
 8002816:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800281a:	9306      	str	r3, [sp, #24]
 800281c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800281e:	2b04      	cmp	r3, #4
 8002820:	f240 8081 	bls.w	8002926 <arm_radix4_butterfly_q15+0x202>
 8002824:	f8cd a008 	str.w	sl, [sp, #8]
 8002828:	930a      	str	r3, [sp, #40]	@ 0x28
 800282a:	469a      	mov	sl, r3
 800282c:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8002830:	2200      	movs	r2, #0
 8002832:	4611      	mov	r1, r2
 8002834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002836:	9204      	str	r2, [sp, #16]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	9308      	str	r3, [sp, #32]
 800283e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002840:	9207      	str	r2, [sp, #28]
 8002842:	9105      	str	r1, [sp, #20]
 8002844:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8002848:	9303      	str	r3, [sp, #12]
 800284a:	9908      	ldr	r1, [sp, #32]
 800284c:	9a03      	ldr	r2, [sp, #12]
 800284e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002850:	1850      	adds	r0, r2, r1
 8002852:	9a05      	ldr	r2, [sp, #20]
 8002854:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002858:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800285c:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8002860:	9b06      	ldr	r3, [sp, #24]
 8002862:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8002866:	18d3      	adds	r3, r2, r3
 8002868:	9305      	str	r3, [sp, #20]
 800286a:	9a04      	ldr	r2, [sp, #16]
 800286c:	9b01      	ldr	r3, [sp, #4]
 800286e:	1845      	adds	r5, r0, r1
 8002870:	4293      	cmp	r3, r2
 8002872:	46b6      	mov	lr, r6
 8002874:	eb05 0401 	add.w	r4, r5, r1
 8002878:	9e03      	ldr	r6, [sp, #12]
 800287a:	d941      	bls.n	8002900 <arm_radix4_butterfly_q15+0x1dc>
 800287c:	eb02 0e0a 	add.w	lr, r2, sl
 8002880:	6833      	ldr	r3, [r6, #0]
 8002882:	682a      	ldr	r2, [r5, #0]
 8002884:	fa93 fb12 	qadd16	fp, r3, r2
 8002888:	fad3 f312 	qsub16	r3, r3, r2
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6802      	ldr	r2, [r0, #0]
 8002890:	6821      	ldr	r1, [r4, #0]
 8002892:	fa92 f211 	qadd16	r2, r2, r1
 8002896:	fa9b f322 	shadd16	r3, fp, r2
 800289a:	9902      	ldr	r1, [sp, #8]
 800289c:	fa93 f121 	shadd16	r1, r3, r1
 80028a0:	6031      	str	r1, [r6, #0]
 80028a2:	443e      	add	r6, r7
 80028a4:	fadb f222 	shsub16	r2, fp, r2
 80028a8:	fb28 f102 	smuad	r1, r8, r2
 80028ac:	fb48 f212 	smusdx	r2, r8, r2
 80028b0:	0c12      	lsrs	r2, r2, #16
 80028b2:	0412      	lsls	r2, r2, #16
 80028b4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80028b8:	6801      	ldr	r1, [r0, #0]
 80028ba:	6002      	str	r2, [r0, #0]
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	4438      	add	r0, r7
 80028c0:	fad1 f212 	qsub16	r2, r1, r2
 80028c4:	9b00      	ldr	r3, [sp, #0]
 80028c6:	faa3 f122 	shasx	r1, r3, r2
 80028ca:	fae3 f322 	shsax	r3, r3, r2
 80028ce:	fb2c fb03 	smuad	fp, ip, r3
 80028d2:	fb4c f313 	smusdx	r3, ip, r3
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	443d      	add	r5, r7
 80028e2:	fb29 f301 	smuad	r3, r9, r1
 80028e6:	fb49 f111 	smusdx	r1, r9, r1
 80028ea:	0c09      	lsrs	r1, r1, #16
 80028ec:	0409      	lsls	r1, r1, #16
 80028ee:	9a01      	ldr	r2, [sp, #4]
 80028f0:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80028f4:	4673      	mov	r3, lr
 80028f6:	429a      	cmp	r2, r3
 80028f8:	6021      	str	r1, [r4, #0]
 80028fa:	44d6      	add	lr, sl
 80028fc:	443c      	add	r4, r7
 80028fe:	d8bf      	bhi.n	8002880 <arm_radix4_butterfly_q15+0x15c>
 8002900:	9a03      	ldr	r2, [sp, #12]
 8002902:	9b04      	ldr	r3, [sp, #16]
 8002904:	3204      	adds	r2, #4
 8002906:	9203      	str	r2, [sp, #12]
 8002908:	9a07      	ldr	r2, [sp, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	4293      	cmp	r3, r2
 800290e:	9304      	str	r3, [sp, #16]
 8002910:	d99b      	bls.n	800284a <arm_radix4_butterfly_q15+0x126>
 8002912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002914:	9a06      	ldr	r2, [sp, #24]
 8002916:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	2b04      	cmp	r3, #4
 8002920:	930a      	str	r3, [sp, #40]	@ 0x28
 8002922:	9206      	str	r2, [sp, #24]
 8002924:	d882      	bhi.n	800282c <arm_radix4_butterfly_q15+0x108>
 8002926:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002928:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800292a:	3410      	adds	r4, #16
 800292c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002930:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8002934:	fa93 f117 	qadd16	r1, r3, r7
 8002938:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800293c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002940:	fa92 f510 	qadd16	r5, r2, r0
 8002944:	fa91 f525 	shadd16	r5, r1, r5
 8002948:	f844 5c10 	str.w	r5, [r4, #-16]
 800294c:	fa92 f510 	qadd16	r5, r2, r0
 8002950:	fad1 f125 	shsub16	r1, r1, r5
 8002954:	f844 1c0c 	str.w	r1, [r4, #-12]
 8002958:	fad3 f317 	qsub16	r3, r3, r7
 800295c:	fad2 f210 	qsub16	r2, r2, r0
 8002960:	fae3 f122 	shsax	r1, r3, r2
 8002964:	f844 1c08 	str.w	r1, [r4, #-8]
 8002968:	faa3 f322 	shasx	r3, r3, r2
 800296c:	3e01      	subs	r6, #1
 800296e:	f844 3c04 	str.w	r3, [r4, #-4]
 8002972:	f104 0410 	add.w	r4, r4, #16
 8002976:	d1d9      	bne.n	800292c <arm_radix4_butterfly_q15+0x208>
 8002978:	b00f      	add	sp, #60	@ 0x3c
 800297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800297e:	bf00      	nop

08002980 <arm_radix4_butterfly_inverse_q15>:
 8002980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002984:	b08f      	sub	sp, #60	@ 0x3c
 8002986:	469b      	mov	fp, r3
 8002988:	9101      	str	r1, [sp, #4]
 800298a:	0889      	lsrs	r1, r1, #2
 800298c:	460e      	mov	r6, r1
 800298e:	910d      	str	r1, [sp, #52]	@ 0x34
 8002990:	0089      	lsls	r1, r1, #2
 8002992:	4607      	mov	r7, r0
 8002994:	900c      	str	r0, [sp, #48]	@ 0x30
 8002996:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800299a:	4408      	add	r0, r1
 800299c:	2400      	movs	r4, #0
 800299e:	1845      	adds	r5, r0, r1
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4696      	mov	lr, r2
 80029a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80029a6:	46b2      	mov	sl, r6
 80029a8:	4429      	add	r1, r5
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	4626      	mov	r6, r4
 80029ae:	4622      	mov	r2, r4
 80029b0:	f8cd b000 	str.w	fp, [sp]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	fa93 fc22 	shadd16	ip, r3, r2
 80029ba:	fa9c fc22 	shadd16	ip, ip, r2
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	fa93 f322 	shadd16	r3, r3, r2
 80029c4:	fa93 f322 	shadd16	r3, r3, r2
 80029c8:	fa9c f813 	qadd16	r8, ip, r3
 80029cc:	fadc fc13 	qsub16	ip, ip, r3
 80029d0:	6803      	ldr	r3, [r0, #0]
 80029d2:	fa93 f322 	shadd16	r3, r3, r2
 80029d6:	fa93 f922 	shadd16	r9, r3, r2
 80029da:	680b      	ldr	r3, [r1, #0]
 80029dc:	fa93 f322 	shadd16	r3, r3, r2
 80029e0:	fa93 f322 	shadd16	r3, r3, r2
 80029e4:	fa99 f313 	qadd16	r3, r9, r3
 80029e8:	fa98 f923 	shadd16	r9, r8, r3
 80029ec:	f847 9b04 	str.w	r9, [r7], #4
 80029f0:	fad8 f313 	qsub16	r3, r8, r3
 80029f4:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 80029f8:	fb49 fb03 	smusd	fp, r9, r3
 80029fc:	fb29 f913 	smuadx	r9, r9, r3
 8002a00:	6803      	ldr	r3, [r0, #0]
 8002a02:	fa93 f322 	shadd16	r3, r3, r2
 8002a06:	fa93 f822 	shadd16	r8, r3, r2
 8002a0a:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8002a0e:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8002a12:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 8002a16:	f840 3b04 	str.w	r3, [r0], #4
 8002a1a:	680b      	ldr	r3, [r1, #0]
 8002a1c:	fa93 f322 	shadd16	r3, r3, r2
 8002a20:	fa93 f322 	shadd16	r3, r3, r2
 8002a24:	fad8 f313 	qsub16	r3, r8, r3
 8002a28:	faec f913 	qsax	r9, ip, r3
 8002a2c:	faac fc13 	qasx	ip, ip, r3
 8002a30:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8002a34:	fb43 f80c 	smusd	r8, r3, ip
 8002a38:	fb23 f31c 	smuadx	r3, r3, ip
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002a44:	f845 3b04 	str.w	r3, [r5], #4
 8002a48:	f85e 3004 	ldr.w	r3, [lr, r4]
 8002a4c:	fb43 fc09 	smusd	ip, r3, r9
 8002a50:	fb23 f319 	smuadx	r3, r3, r9
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002a5c:	f841 3b04 	str.w	r3, [r1], #4
 8002a60:	9b00      	ldr	r3, [sp, #0]
 8002a62:	441e      	add	r6, r3
 8002a64:	9b02      	ldr	r3, [sp, #8]
 8002a66:	f1ba 0a01 	subs.w	sl, sl, #1
 8002a6a:	441c      	add	r4, r3
 8002a6c:	d1a2      	bne.n	80029b4 <arm_radix4_butterfly_inverse_q15+0x34>
 8002a6e:	f8dd b000 	ldr.w	fp, [sp]
 8002a72:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8002a76:	9306      	str	r3, [sp, #24]
 8002a78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	f240 8081 	bls.w	8002b82 <arm_radix4_butterfly_inverse_q15+0x202>
 8002a80:	f8cd a008 	str.w	sl, [sp, #8]
 8002a84:	930a      	str	r3, [sp, #40]	@ 0x28
 8002a86:	469a      	mov	sl, r3
 8002a88:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4611      	mov	r1, r2
 8002a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a92:	9204      	str	r2, [sp, #16]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	9308      	str	r3, [sp, #32]
 8002a9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002a9c:	9207      	str	r2, [sp, #28]
 8002a9e:	9105      	str	r1, [sp, #20]
 8002aa0:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8002aa4:	9303      	str	r3, [sp, #12]
 8002aa6:	9908      	ldr	r1, [sp, #32]
 8002aa8:	9a03      	ldr	r2, [sp, #12]
 8002aaa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002aac:	1850      	adds	r0, r2, r1
 8002aae:	9a05      	ldr	r2, [sp, #20]
 8002ab0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002ab4:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8002ab8:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 8002abc:	9b06      	ldr	r3, [sp, #24]
 8002abe:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	9305      	str	r3, [sp, #20]
 8002ac6:	9a04      	ldr	r2, [sp, #16]
 8002ac8:	9b01      	ldr	r3, [sp, #4]
 8002aca:	1845      	adds	r5, r0, r1
 8002acc:	4293      	cmp	r3, r2
 8002ace:	46b6      	mov	lr, r6
 8002ad0:	eb05 0401 	add.w	r4, r5, r1
 8002ad4:	9e03      	ldr	r6, [sp, #12]
 8002ad6:	d941      	bls.n	8002b5c <arm_radix4_butterfly_inverse_q15+0x1dc>
 8002ad8:	eb02 0e0a 	add.w	lr, r2, sl
 8002adc:	6833      	ldr	r3, [r6, #0]
 8002ade:	682a      	ldr	r2, [r5, #0]
 8002ae0:	fa93 fb12 	qadd16	fp, r3, r2
 8002ae4:	fad3 f312 	qsub16	r3, r3, r2
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	6802      	ldr	r2, [r0, #0]
 8002aec:	6821      	ldr	r1, [r4, #0]
 8002aee:	fa92 f211 	qadd16	r2, r2, r1
 8002af2:	fa9b f322 	shadd16	r3, fp, r2
 8002af6:	9902      	ldr	r1, [sp, #8]
 8002af8:	fa93 f121 	shadd16	r1, r3, r1
 8002afc:	6031      	str	r1, [r6, #0]
 8002afe:	443e      	add	r6, r7
 8002b00:	fadb f222 	shsub16	r2, fp, r2
 8002b04:	fb48 f102 	smusd	r1, r8, r2
 8002b08:	fb28 f212 	smuadx	r2, r8, r2
 8002b0c:	0c12      	lsrs	r2, r2, #16
 8002b0e:	0412      	lsls	r2, r2, #16
 8002b10:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8002b14:	6801      	ldr	r1, [r0, #0]
 8002b16:	6002      	str	r2, [r0, #0]
 8002b18:	6822      	ldr	r2, [r4, #0]
 8002b1a:	4438      	add	r0, r7
 8002b1c:	fad1 f212 	qsub16	r2, r1, r2
 8002b20:	9b00      	ldr	r3, [sp, #0]
 8002b22:	fae3 f122 	shsax	r1, r3, r2
 8002b26:	faa3 f322 	shasx	r3, r3, r2
 8002b2a:	fb4c fb03 	smusd	fp, ip, r3
 8002b2e:	fb2c f313 	smuadx	r3, ip, r3
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	443d      	add	r5, r7
 8002b3e:	fb49 f301 	smusd	r3, r9, r1
 8002b42:	fb29 f111 	smuadx	r1, r9, r1
 8002b46:	0c09      	lsrs	r1, r1, #16
 8002b48:	0409      	lsls	r1, r1, #16
 8002b4a:	9a01      	ldr	r2, [sp, #4]
 8002b4c:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8002b50:	4673      	mov	r3, lr
 8002b52:	429a      	cmp	r2, r3
 8002b54:	6021      	str	r1, [r4, #0]
 8002b56:	44d6      	add	lr, sl
 8002b58:	443c      	add	r4, r7
 8002b5a:	d8bf      	bhi.n	8002adc <arm_radix4_butterfly_inverse_q15+0x15c>
 8002b5c:	9a03      	ldr	r2, [sp, #12]
 8002b5e:	9b04      	ldr	r3, [sp, #16]
 8002b60:	3204      	adds	r2, #4
 8002b62:	9203      	str	r2, [sp, #12]
 8002b64:	9a07      	ldr	r2, [sp, #28]
 8002b66:	3301      	adds	r3, #1
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	9304      	str	r3, [sp, #16]
 8002b6c:	d99b      	bls.n	8002aa6 <arm_radix4_butterfly_inverse_q15+0x126>
 8002b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b70:	9a06      	ldr	r2, [sp, #24]
 8002b72:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b7e:	9206      	str	r2, [sp, #24]
 8002b80:	d882      	bhi.n	8002a88 <arm_radix4_butterfly_inverse_q15+0x108>
 8002b82:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8002b84:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8002b86:	3410      	adds	r4, #16
 8002b88:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002b8c:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8002b90:	fa93 f117 	qadd16	r1, r3, r7
 8002b94:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8002b98:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8002b9c:	fa92 f510 	qadd16	r5, r2, r0
 8002ba0:	fa91 f525 	shadd16	r5, r1, r5
 8002ba4:	f844 5c10 	str.w	r5, [r4, #-16]
 8002ba8:	fa92 f510 	qadd16	r5, r2, r0
 8002bac:	fad1 f125 	shsub16	r1, r1, r5
 8002bb0:	f844 1c0c 	str.w	r1, [r4, #-12]
 8002bb4:	fad3 f317 	qsub16	r3, r3, r7
 8002bb8:	fad2 f210 	qsub16	r2, r2, r0
 8002bbc:	faa3 f122 	shasx	r1, r3, r2
 8002bc0:	f844 1c08 	str.w	r1, [r4, #-8]
 8002bc4:	fae3 f322 	shsax	r3, r3, r2
 8002bc8:	3e01      	subs	r6, #1
 8002bca:	f844 3c04 	str.w	r3, [r4, #-4]
 8002bce:	f104 0410 	add.w	r4, r4, #16
 8002bd2:	d1d9      	bne.n	8002b88 <arm_radix4_butterfly_inverse_q15+0x208>
 8002bd4:	b00f      	add	sp, #60	@ 0x3c
 8002bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bda:	bf00      	nop

08002bdc <sniprintf>:
 8002bdc:	b40c      	push	{r2, r3}
 8002bde:	b530      	push	{r4, r5, lr}
 8002be0:	4b17      	ldr	r3, [pc, #92]	@ (8002c40 <sniprintf+0x64>)
 8002be2:	1e0c      	subs	r4, r1, #0
 8002be4:	681d      	ldr	r5, [r3, #0]
 8002be6:	b09d      	sub	sp, #116	@ 0x74
 8002be8:	da08      	bge.n	8002bfc <sniprintf+0x20>
 8002bea:	238b      	movs	r3, #139	@ 0x8b
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bf2:	b01d      	add	sp, #116	@ 0x74
 8002bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bf8:	b002      	add	sp, #8
 8002bfa:	4770      	bx	lr
 8002bfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002c00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002c04:	bf14      	ite	ne
 8002c06:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002c0a:	4623      	moveq	r3, r4
 8002c0c:	9304      	str	r3, [sp, #16]
 8002c0e:	9307      	str	r3, [sp, #28]
 8002c10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c14:	9002      	str	r0, [sp, #8]
 8002c16:	9006      	str	r0, [sp, #24]
 8002c18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002c1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002c1e:	ab21      	add	r3, sp, #132	@ 0x84
 8002c20:	a902      	add	r1, sp, #8
 8002c22:	4628      	mov	r0, r5
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	f000 f995 	bl	8002f54 <_svfiprintf_r>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	bfbc      	itt	lt
 8002c2e:	238b      	movlt	r3, #139	@ 0x8b
 8002c30:	602b      	strlt	r3, [r5, #0]
 8002c32:	2c00      	cmp	r4, #0
 8002c34:	d0dd      	beq.n	8002bf2 <sniprintf+0x16>
 8002c36:	9b02      	ldr	r3, [sp, #8]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e7d9      	b.n	8002bf2 <sniprintf+0x16>
 8002c3e:	bf00      	nop
 8002c40:	20000028 	.word	0x20000028

08002c44 <memset>:
 8002c44:	4402      	add	r2, r0
 8002c46:	4603      	mov	r3, r0
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d100      	bne.n	8002c4e <memset+0xa>
 8002c4c:	4770      	bx	lr
 8002c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c52:	e7f9      	b.n	8002c48 <memset+0x4>

08002c54 <__errno>:
 8002c54:	4b01      	ldr	r3, [pc, #4]	@ (8002c5c <__errno+0x8>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000028 	.word	0x20000028

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	4d0d      	ldr	r5, [pc, #52]	@ (8002c98 <__libc_init_array+0x38>)
 8002c64:	4c0d      	ldr	r4, [pc, #52]	@ (8002c9c <__libc_init_array+0x3c>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	2600      	movs	r6, #0
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	4d0b      	ldr	r5, [pc, #44]	@ (8002ca0 <__libc_init_array+0x40>)
 8002c72:	4c0c      	ldr	r4, [pc, #48]	@ (8002ca4 <__libc_init_array+0x44>)
 8002c74:	f000 fc66 	bl	8003544 <_init>
 8002c78:	1b64      	subs	r4, r4, r5
 8002c7a:	10a4      	asrs	r4, r4, #2
 8002c7c:	2600      	movs	r6, #0
 8002c7e:	42a6      	cmp	r6, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c88:	4798      	blx	r3
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c92:	4798      	blx	r3
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	0801550c 	.word	0x0801550c
 8002c9c:	0801550c 	.word	0x0801550c
 8002ca0:	0801550c 	.word	0x0801550c
 8002ca4:	08015510 	.word	0x08015510

08002ca8 <__retarget_lock_acquire_recursive>:
 8002ca8:	4770      	bx	lr

08002caa <__retarget_lock_release_recursive>:
 8002caa:	4770      	bx	lr

08002cac <_free_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4605      	mov	r5, r0
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	d041      	beq.n	8002d38 <_free_r+0x8c>
 8002cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cb8:	1f0c      	subs	r4, r1, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bfb8      	it	lt
 8002cbe:	18e4      	addlt	r4, r4, r3
 8002cc0:	f000 f8e0 	bl	8002e84 <__malloc_lock>
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d3c <_free_r+0x90>)
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	b933      	cbnz	r3, 8002cd8 <_free_r+0x2c>
 8002cca:	6063      	str	r3, [r4, #4]
 8002ccc:	6014      	str	r4, [r2, #0]
 8002cce:	4628      	mov	r0, r5
 8002cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cd4:	f000 b8dc 	b.w	8002e90 <__malloc_unlock>
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	d908      	bls.n	8002cee <_free_r+0x42>
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	1821      	adds	r1, r4, r0
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	bf01      	itttt	eq
 8002ce4:	6819      	ldreq	r1, [r3, #0]
 8002ce6:	685b      	ldreq	r3, [r3, #4]
 8002ce8:	1809      	addeq	r1, r1, r0
 8002cea:	6021      	streq	r1, [r4, #0]
 8002cec:	e7ed      	b.n	8002cca <_free_r+0x1e>
 8002cee:	461a      	mov	r2, r3
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	b10b      	cbz	r3, 8002cf8 <_free_r+0x4c>
 8002cf4:	42a3      	cmp	r3, r4
 8002cf6:	d9fa      	bls.n	8002cee <_free_r+0x42>
 8002cf8:	6811      	ldr	r1, [r2, #0]
 8002cfa:	1850      	adds	r0, r2, r1
 8002cfc:	42a0      	cmp	r0, r4
 8002cfe:	d10b      	bne.n	8002d18 <_free_r+0x6c>
 8002d00:	6820      	ldr	r0, [r4, #0]
 8002d02:	4401      	add	r1, r0
 8002d04:	1850      	adds	r0, r2, r1
 8002d06:	4283      	cmp	r3, r0
 8002d08:	6011      	str	r1, [r2, #0]
 8002d0a:	d1e0      	bne.n	8002cce <_free_r+0x22>
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	6053      	str	r3, [r2, #4]
 8002d12:	4408      	add	r0, r1
 8002d14:	6010      	str	r0, [r2, #0]
 8002d16:	e7da      	b.n	8002cce <_free_r+0x22>
 8002d18:	d902      	bls.n	8002d20 <_free_r+0x74>
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	602b      	str	r3, [r5, #0]
 8002d1e:	e7d6      	b.n	8002cce <_free_r+0x22>
 8002d20:	6820      	ldr	r0, [r4, #0]
 8002d22:	1821      	adds	r1, r4, r0
 8002d24:	428b      	cmp	r3, r1
 8002d26:	bf04      	itt	eq
 8002d28:	6819      	ldreq	r1, [r3, #0]
 8002d2a:	685b      	ldreq	r3, [r3, #4]
 8002d2c:	6063      	str	r3, [r4, #4]
 8002d2e:	bf04      	itt	eq
 8002d30:	1809      	addeq	r1, r1, r0
 8002d32:	6021      	streq	r1, [r4, #0]
 8002d34:	6054      	str	r4, [r2, #4]
 8002d36:	e7ca      	b.n	8002cce <_free_r+0x22>
 8002d38:	bd38      	pop	{r3, r4, r5, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200001fc 	.word	0x200001fc

08002d40 <sbrk_aligned>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	4e0f      	ldr	r6, [pc, #60]	@ (8002d80 <sbrk_aligned+0x40>)
 8002d44:	460c      	mov	r4, r1
 8002d46:	6831      	ldr	r1, [r6, #0]
 8002d48:	4605      	mov	r5, r0
 8002d4a:	b911      	cbnz	r1, 8002d52 <sbrk_aligned+0x12>
 8002d4c:	f000 fba6 	bl	800349c <_sbrk_r>
 8002d50:	6030      	str	r0, [r6, #0]
 8002d52:	4621      	mov	r1, r4
 8002d54:	4628      	mov	r0, r5
 8002d56:	f000 fba1 	bl	800349c <_sbrk_r>
 8002d5a:	1c43      	adds	r3, r0, #1
 8002d5c:	d103      	bne.n	8002d66 <sbrk_aligned+0x26>
 8002d5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002d62:	4620      	mov	r0, r4
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
 8002d66:	1cc4      	adds	r4, r0, #3
 8002d68:	f024 0403 	bic.w	r4, r4, #3
 8002d6c:	42a0      	cmp	r0, r4
 8002d6e:	d0f8      	beq.n	8002d62 <sbrk_aligned+0x22>
 8002d70:	1a21      	subs	r1, r4, r0
 8002d72:	4628      	mov	r0, r5
 8002d74:	f000 fb92 	bl	800349c <_sbrk_r>
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d1f2      	bne.n	8002d62 <sbrk_aligned+0x22>
 8002d7c:	e7ef      	b.n	8002d5e <sbrk_aligned+0x1e>
 8002d7e:	bf00      	nop
 8002d80:	200001f8 	.word	0x200001f8

08002d84 <_malloc_r>:
 8002d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d88:	1ccd      	adds	r5, r1, #3
 8002d8a:	f025 0503 	bic.w	r5, r5, #3
 8002d8e:	3508      	adds	r5, #8
 8002d90:	2d0c      	cmp	r5, #12
 8002d92:	bf38      	it	cc
 8002d94:	250c      	movcc	r5, #12
 8002d96:	2d00      	cmp	r5, #0
 8002d98:	4606      	mov	r6, r0
 8002d9a:	db01      	blt.n	8002da0 <_malloc_r+0x1c>
 8002d9c:	42a9      	cmp	r1, r5
 8002d9e:	d904      	bls.n	8002daa <_malloc_r+0x26>
 8002da0:	230c      	movs	r3, #12
 8002da2:	6033      	str	r3, [r6, #0]
 8002da4:	2000      	movs	r0, #0
 8002da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002daa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e80 <_malloc_r+0xfc>
 8002dae:	f000 f869 	bl	8002e84 <__malloc_lock>
 8002db2:	f8d8 3000 	ldr.w	r3, [r8]
 8002db6:	461c      	mov	r4, r3
 8002db8:	bb44      	cbnz	r4, 8002e0c <_malloc_r+0x88>
 8002dba:	4629      	mov	r1, r5
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f7ff ffbf 	bl	8002d40 <sbrk_aligned>
 8002dc2:	1c43      	adds	r3, r0, #1
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	d158      	bne.n	8002e7a <_malloc_r+0xf6>
 8002dc8:	f8d8 4000 	ldr.w	r4, [r8]
 8002dcc:	4627      	mov	r7, r4
 8002dce:	2f00      	cmp	r7, #0
 8002dd0:	d143      	bne.n	8002e5a <_malloc_r+0xd6>
 8002dd2:	2c00      	cmp	r4, #0
 8002dd4:	d04b      	beq.n	8002e6e <_malloc_r+0xea>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	4639      	mov	r1, r7
 8002dda:	4630      	mov	r0, r6
 8002ddc:	eb04 0903 	add.w	r9, r4, r3
 8002de0:	f000 fb5c 	bl	800349c <_sbrk_r>
 8002de4:	4581      	cmp	r9, r0
 8002de6:	d142      	bne.n	8002e6e <_malloc_r+0xea>
 8002de8:	6821      	ldr	r1, [r4, #0]
 8002dea:	1a6d      	subs	r5, r5, r1
 8002dec:	4629      	mov	r1, r5
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7ff ffa6 	bl	8002d40 <sbrk_aligned>
 8002df4:	3001      	adds	r0, #1
 8002df6:	d03a      	beq.n	8002e6e <_malloc_r+0xea>
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	442b      	add	r3, r5
 8002dfc:	6023      	str	r3, [r4, #0]
 8002dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	bb62      	cbnz	r2, 8002e60 <_malloc_r+0xdc>
 8002e06:	f8c8 7000 	str.w	r7, [r8]
 8002e0a:	e00f      	b.n	8002e2c <_malloc_r+0xa8>
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	1b52      	subs	r2, r2, r5
 8002e10:	d420      	bmi.n	8002e54 <_malloc_r+0xd0>
 8002e12:	2a0b      	cmp	r2, #11
 8002e14:	d917      	bls.n	8002e46 <_malloc_r+0xc2>
 8002e16:	1961      	adds	r1, r4, r5
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	6025      	str	r5, [r4, #0]
 8002e1c:	bf18      	it	ne
 8002e1e:	6059      	strne	r1, [r3, #4]
 8002e20:	6863      	ldr	r3, [r4, #4]
 8002e22:	bf08      	it	eq
 8002e24:	f8c8 1000 	streq.w	r1, [r8]
 8002e28:	5162      	str	r2, [r4, r5]
 8002e2a:	604b      	str	r3, [r1, #4]
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	f000 f82f 	bl	8002e90 <__malloc_unlock>
 8002e32:	f104 000b 	add.w	r0, r4, #11
 8002e36:	1d23      	adds	r3, r4, #4
 8002e38:	f020 0007 	bic.w	r0, r0, #7
 8002e3c:	1ac2      	subs	r2, r0, r3
 8002e3e:	bf1c      	itt	ne
 8002e40:	1a1b      	subne	r3, r3, r0
 8002e42:	50a3      	strne	r3, [r4, r2]
 8002e44:	e7af      	b.n	8002da6 <_malloc_r+0x22>
 8002e46:	6862      	ldr	r2, [r4, #4]
 8002e48:	42a3      	cmp	r3, r4
 8002e4a:	bf0c      	ite	eq
 8002e4c:	f8c8 2000 	streq.w	r2, [r8]
 8002e50:	605a      	strne	r2, [r3, #4]
 8002e52:	e7eb      	b.n	8002e2c <_malloc_r+0xa8>
 8002e54:	4623      	mov	r3, r4
 8002e56:	6864      	ldr	r4, [r4, #4]
 8002e58:	e7ae      	b.n	8002db8 <_malloc_r+0x34>
 8002e5a:	463c      	mov	r4, r7
 8002e5c:	687f      	ldr	r7, [r7, #4]
 8002e5e:	e7b6      	b.n	8002dce <_malloc_r+0x4a>
 8002e60:	461a      	mov	r2, r3
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	d1fb      	bne.n	8002e60 <_malloc_r+0xdc>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6053      	str	r3, [r2, #4]
 8002e6c:	e7de      	b.n	8002e2c <_malloc_r+0xa8>
 8002e6e:	230c      	movs	r3, #12
 8002e70:	6033      	str	r3, [r6, #0]
 8002e72:	4630      	mov	r0, r6
 8002e74:	f000 f80c 	bl	8002e90 <__malloc_unlock>
 8002e78:	e794      	b.n	8002da4 <_malloc_r+0x20>
 8002e7a:	6005      	str	r5, [r0, #0]
 8002e7c:	e7d6      	b.n	8002e2c <_malloc_r+0xa8>
 8002e7e:	bf00      	nop
 8002e80:	200001fc 	.word	0x200001fc

08002e84 <__malloc_lock>:
 8002e84:	4801      	ldr	r0, [pc, #4]	@ (8002e8c <__malloc_lock+0x8>)
 8002e86:	f7ff bf0f 	b.w	8002ca8 <__retarget_lock_acquire_recursive>
 8002e8a:	bf00      	nop
 8002e8c:	200001f4 	.word	0x200001f4

08002e90 <__malloc_unlock>:
 8002e90:	4801      	ldr	r0, [pc, #4]	@ (8002e98 <__malloc_unlock+0x8>)
 8002e92:	f7ff bf0a 	b.w	8002caa <__retarget_lock_release_recursive>
 8002e96:	bf00      	nop
 8002e98:	200001f4 	.word	0x200001f4

08002e9c <__ssputs_r>:
 8002e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea0:	688e      	ldr	r6, [r1, #8]
 8002ea2:	461f      	mov	r7, r3
 8002ea4:	42be      	cmp	r6, r7
 8002ea6:	680b      	ldr	r3, [r1, #0]
 8002ea8:	4682      	mov	sl, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4690      	mov	r8, r2
 8002eae:	d82d      	bhi.n	8002f0c <__ssputs_r+0x70>
 8002eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002eb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002eb8:	d026      	beq.n	8002f08 <__ssputs_r+0x6c>
 8002eba:	6965      	ldr	r5, [r4, #20]
 8002ebc:	6909      	ldr	r1, [r1, #16]
 8002ebe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ec2:	eba3 0901 	sub.w	r9, r3, r1
 8002ec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002eca:	1c7b      	adds	r3, r7, #1
 8002ecc:	444b      	add	r3, r9
 8002ece:	106d      	asrs	r5, r5, #1
 8002ed0:	429d      	cmp	r5, r3
 8002ed2:	bf38      	it	cc
 8002ed4:	461d      	movcc	r5, r3
 8002ed6:	0553      	lsls	r3, r2, #21
 8002ed8:	d527      	bpl.n	8002f2a <__ssputs_r+0x8e>
 8002eda:	4629      	mov	r1, r5
 8002edc:	f7ff ff52 	bl	8002d84 <_malloc_r>
 8002ee0:	4606      	mov	r6, r0
 8002ee2:	b360      	cbz	r0, 8002f3e <__ssputs_r+0xa2>
 8002ee4:	6921      	ldr	r1, [r4, #16]
 8002ee6:	464a      	mov	r2, r9
 8002ee8:	f000 fae8 	bl	80034bc <memcpy>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef6:	81a3      	strh	r3, [r4, #12]
 8002ef8:	6126      	str	r6, [r4, #16]
 8002efa:	6165      	str	r5, [r4, #20]
 8002efc:	444e      	add	r6, r9
 8002efe:	eba5 0509 	sub.w	r5, r5, r9
 8002f02:	6026      	str	r6, [r4, #0]
 8002f04:	60a5      	str	r5, [r4, #8]
 8002f06:	463e      	mov	r6, r7
 8002f08:	42be      	cmp	r6, r7
 8002f0a:	d900      	bls.n	8002f0e <__ssputs_r+0x72>
 8002f0c:	463e      	mov	r6, r7
 8002f0e:	6820      	ldr	r0, [r4, #0]
 8002f10:	4632      	mov	r2, r6
 8002f12:	4641      	mov	r1, r8
 8002f14:	f000 faa8 	bl	8003468 <memmove>
 8002f18:	68a3      	ldr	r3, [r4, #8]
 8002f1a:	1b9b      	subs	r3, r3, r6
 8002f1c:	60a3      	str	r3, [r4, #8]
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	4433      	add	r3, r6
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	2000      	movs	r0, #0
 8002f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f2a:	462a      	mov	r2, r5
 8002f2c:	f000 fad4 	bl	80034d8 <_realloc_r>
 8002f30:	4606      	mov	r6, r0
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d1e0      	bne.n	8002ef8 <__ssputs_r+0x5c>
 8002f36:	6921      	ldr	r1, [r4, #16]
 8002f38:	4650      	mov	r0, sl
 8002f3a:	f7ff feb7 	bl	8002cac <_free_r>
 8002f3e:	230c      	movs	r3, #12
 8002f40:	f8ca 3000 	str.w	r3, [sl]
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f50:	e7e9      	b.n	8002f26 <__ssputs_r+0x8a>
	...

08002f54 <_svfiprintf_r>:
 8002f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f58:	4698      	mov	r8, r3
 8002f5a:	898b      	ldrh	r3, [r1, #12]
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	b09d      	sub	sp, #116	@ 0x74
 8002f60:	4607      	mov	r7, r0
 8002f62:	460d      	mov	r5, r1
 8002f64:	4614      	mov	r4, r2
 8002f66:	d510      	bpl.n	8002f8a <_svfiprintf_r+0x36>
 8002f68:	690b      	ldr	r3, [r1, #16]
 8002f6a:	b973      	cbnz	r3, 8002f8a <_svfiprintf_r+0x36>
 8002f6c:	2140      	movs	r1, #64	@ 0x40
 8002f6e:	f7ff ff09 	bl	8002d84 <_malloc_r>
 8002f72:	6028      	str	r0, [r5, #0]
 8002f74:	6128      	str	r0, [r5, #16]
 8002f76:	b930      	cbnz	r0, 8002f86 <_svfiprintf_r+0x32>
 8002f78:	230c      	movs	r3, #12
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f80:	b01d      	add	sp, #116	@ 0x74
 8002f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f86:	2340      	movs	r3, #64	@ 0x40
 8002f88:	616b      	str	r3, [r5, #20]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f8e:	2320      	movs	r3, #32
 8002f90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f98:	2330      	movs	r3, #48	@ 0x30
 8002f9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003138 <_svfiprintf_r+0x1e4>
 8002f9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fa2:	f04f 0901 	mov.w	r9, #1
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	469a      	mov	sl, r3
 8002faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fae:	b10a      	cbz	r2, 8002fb4 <_svfiprintf_r+0x60>
 8002fb0:	2a25      	cmp	r2, #37	@ 0x25
 8002fb2:	d1f9      	bne.n	8002fa8 <_svfiprintf_r+0x54>
 8002fb4:	ebba 0b04 	subs.w	fp, sl, r4
 8002fb8:	d00b      	beq.n	8002fd2 <_svfiprintf_r+0x7e>
 8002fba:	465b      	mov	r3, fp
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	f7ff ff6b 	bl	8002e9c <__ssputs_r>
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	f000 80a7 	beq.w	800311a <_svfiprintf_r+0x1c6>
 8002fcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002fce:	445a      	add	r2, fp
 8002fd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 809f 	beq.w	800311a <_svfiprintf_r+0x1c6>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fe6:	f10a 0a01 	add.w	sl, sl, #1
 8002fea:	9304      	str	r3, [sp, #16]
 8002fec:	9307      	str	r3, [sp, #28]
 8002fee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ff2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ff4:	4654      	mov	r4, sl
 8002ff6:	2205      	movs	r2, #5
 8002ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ffc:	484e      	ldr	r0, [pc, #312]	@ (8003138 <_svfiprintf_r+0x1e4>)
 8002ffe:	f7fd f947 	bl	8000290 <memchr>
 8003002:	9a04      	ldr	r2, [sp, #16]
 8003004:	b9d8      	cbnz	r0, 800303e <_svfiprintf_r+0xea>
 8003006:	06d0      	lsls	r0, r2, #27
 8003008:	bf44      	itt	mi
 800300a:	2320      	movmi	r3, #32
 800300c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003010:	0711      	lsls	r1, r2, #28
 8003012:	bf44      	itt	mi
 8003014:	232b      	movmi	r3, #43	@ 0x2b
 8003016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800301a:	f89a 3000 	ldrb.w	r3, [sl]
 800301e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003020:	d015      	beq.n	800304e <_svfiprintf_r+0xfa>
 8003022:	9a07      	ldr	r2, [sp, #28]
 8003024:	4654      	mov	r4, sl
 8003026:	2000      	movs	r0, #0
 8003028:	f04f 0c0a 	mov.w	ip, #10
 800302c:	4621      	mov	r1, r4
 800302e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003032:	3b30      	subs	r3, #48	@ 0x30
 8003034:	2b09      	cmp	r3, #9
 8003036:	d94b      	bls.n	80030d0 <_svfiprintf_r+0x17c>
 8003038:	b1b0      	cbz	r0, 8003068 <_svfiprintf_r+0x114>
 800303a:	9207      	str	r2, [sp, #28]
 800303c:	e014      	b.n	8003068 <_svfiprintf_r+0x114>
 800303e:	eba0 0308 	sub.w	r3, r0, r8
 8003042:	fa09 f303 	lsl.w	r3, r9, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	9304      	str	r3, [sp, #16]
 800304a:	46a2      	mov	sl, r4
 800304c:	e7d2      	b.n	8002ff4 <_svfiprintf_r+0xa0>
 800304e:	9b03      	ldr	r3, [sp, #12]
 8003050:	1d19      	adds	r1, r3, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	9103      	str	r1, [sp, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	bfbb      	ittet	lt
 800305a:	425b      	neglt	r3, r3
 800305c:	f042 0202 	orrlt.w	r2, r2, #2
 8003060:	9307      	strge	r3, [sp, #28]
 8003062:	9307      	strlt	r3, [sp, #28]
 8003064:	bfb8      	it	lt
 8003066:	9204      	strlt	r2, [sp, #16]
 8003068:	7823      	ldrb	r3, [r4, #0]
 800306a:	2b2e      	cmp	r3, #46	@ 0x2e
 800306c:	d10a      	bne.n	8003084 <_svfiprintf_r+0x130>
 800306e:	7863      	ldrb	r3, [r4, #1]
 8003070:	2b2a      	cmp	r3, #42	@ 0x2a
 8003072:	d132      	bne.n	80030da <_svfiprintf_r+0x186>
 8003074:	9b03      	ldr	r3, [sp, #12]
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	9203      	str	r2, [sp, #12]
 800307c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003080:	3402      	adds	r4, #2
 8003082:	9305      	str	r3, [sp, #20]
 8003084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003148 <_svfiprintf_r+0x1f4>
 8003088:	7821      	ldrb	r1, [r4, #0]
 800308a:	2203      	movs	r2, #3
 800308c:	4650      	mov	r0, sl
 800308e:	f7fd f8ff 	bl	8000290 <memchr>
 8003092:	b138      	cbz	r0, 80030a4 <_svfiprintf_r+0x150>
 8003094:	9b04      	ldr	r3, [sp, #16]
 8003096:	eba0 000a 	sub.w	r0, r0, sl
 800309a:	2240      	movs	r2, #64	@ 0x40
 800309c:	4082      	lsls	r2, r0
 800309e:	4313      	orrs	r3, r2
 80030a0:	3401      	adds	r4, #1
 80030a2:	9304      	str	r3, [sp, #16]
 80030a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a8:	4824      	ldr	r0, [pc, #144]	@ (800313c <_svfiprintf_r+0x1e8>)
 80030aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030ae:	2206      	movs	r2, #6
 80030b0:	f7fd f8ee 	bl	8000290 <memchr>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d036      	beq.n	8003126 <_svfiprintf_r+0x1d2>
 80030b8:	4b21      	ldr	r3, [pc, #132]	@ (8003140 <_svfiprintf_r+0x1ec>)
 80030ba:	bb1b      	cbnz	r3, 8003104 <_svfiprintf_r+0x1b0>
 80030bc:	9b03      	ldr	r3, [sp, #12]
 80030be:	3307      	adds	r3, #7
 80030c0:	f023 0307 	bic.w	r3, r3, #7
 80030c4:	3308      	adds	r3, #8
 80030c6:	9303      	str	r3, [sp, #12]
 80030c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030ca:	4433      	add	r3, r6
 80030cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80030ce:	e76a      	b.n	8002fa6 <_svfiprintf_r+0x52>
 80030d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80030d4:	460c      	mov	r4, r1
 80030d6:	2001      	movs	r0, #1
 80030d8:	e7a8      	b.n	800302c <_svfiprintf_r+0xd8>
 80030da:	2300      	movs	r3, #0
 80030dc:	3401      	adds	r4, #1
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f04f 0c0a 	mov.w	ip, #10
 80030e6:	4620      	mov	r0, r4
 80030e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030ec:	3a30      	subs	r2, #48	@ 0x30
 80030ee:	2a09      	cmp	r2, #9
 80030f0:	d903      	bls.n	80030fa <_svfiprintf_r+0x1a6>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0c6      	beq.n	8003084 <_svfiprintf_r+0x130>
 80030f6:	9105      	str	r1, [sp, #20]
 80030f8:	e7c4      	b.n	8003084 <_svfiprintf_r+0x130>
 80030fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80030fe:	4604      	mov	r4, r0
 8003100:	2301      	movs	r3, #1
 8003102:	e7f0      	b.n	80030e6 <_svfiprintf_r+0x192>
 8003104:	ab03      	add	r3, sp, #12
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	462a      	mov	r2, r5
 800310a:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <_svfiprintf_r+0x1f0>)
 800310c:	a904      	add	r1, sp, #16
 800310e:	4638      	mov	r0, r7
 8003110:	f3af 8000 	nop.w
 8003114:	1c42      	adds	r2, r0, #1
 8003116:	4606      	mov	r6, r0
 8003118:	d1d6      	bne.n	80030c8 <_svfiprintf_r+0x174>
 800311a:	89ab      	ldrh	r3, [r5, #12]
 800311c:	065b      	lsls	r3, r3, #25
 800311e:	f53f af2d 	bmi.w	8002f7c <_svfiprintf_r+0x28>
 8003122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003124:	e72c      	b.n	8002f80 <_svfiprintf_r+0x2c>
 8003126:	ab03      	add	r3, sp, #12
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	462a      	mov	r2, r5
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <_svfiprintf_r+0x1f0>)
 800312e:	a904      	add	r1, sp, #16
 8003130:	4638      	mov	r0, r7
 8003132:	f000 f879 	bl	8003228 <_printf_i>
 8003136:	e7ed      	b.n	8003114 <_svfiprintf_r+0x1c0>
 8003138:	080154d0 	.word	0x080154d0
 800313c:	080154da 	.word	0x080154da
 8003140:	00000000 	.word	0x00000000
 8003144:	08002e9d 	.word	0x08002e9d
 8003148:	080154d6 	.word	0x080154d6

0800314c <_printf_common>:
 800314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003150:	4616      	mov	r6, r2
 8003152:	4698      	mov	r8, r3
 8003154:	688a      	ldr	r2, [r1, #8]
 8003156:	690b      	ldr	r3, [r1, #16]
 8003158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800315c:	4293      	cmp	r3, r2
 800315e:	bfb8      	it	lt
 8003160:	4613      	movlt	r3, r2
 8003162:	6033      	str	r3, [r6, #0]
 8003164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003168:	4607      	mov	r7, r0
 800316a:	460c      	mov	r4, r1
 800316c:	b10a      	cbz	r2, 8003172 <_printf_common+0x26>
 800316e:	3301      	adds	r3, #1
 8003170:	6033      	str	r3, [r6, #0]
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	0699      	lsls	r1, r3, #26
 8003176:	bf42      	ittt	mi
 8003178:	6833      	ldrmi	r3, [r6, #0]
 800317a:	3302      	addmi	r3, #2
 800317c:	6033      	strmi	r3, [r6, #0]
 800317e:	6825      	ldr	r5, [r4, #0]
 8003180:	f015 0506 	ands.w	r5, r5, #6
 8003184:	d106      	bne.n	8003194 <_printf_common+0x48>
 8003186:	f104 0a19 	add.w	sl, r4, #25
 800318a:	68e3      	ldr	r3, [r4, #12]
 800318c:	6832      	ldr	r2, [r6, #0]
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	42ab      	cmp	r3, r5
 8003192:	dc26      	bgt.n	80031e2 <_printf_common+0x96>
 8003194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	3b00      	subs	r3, #0
 800319c:	bf18      	it	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	0692      	lsls	r2, r2, #26
 80031a2:	d42b      	bmi.n	80031fc <_printf_common+0xb0>
 80031a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031a8:	4641      	mov	r1, r8
 80031aa:	4638      	mov	r0, r7
 80031ac:	47c8      	blx	r9
 80031ae:	3001      	adds	r0, #1
 80031b0:	d01e      	beq.n	80031f0 <_printf_common+0xa4>
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	6922      	ldr	r2, [r4, #16]
 80031b6:	f003 0306 	and.w	r3, r3, #6
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	bf02      	ittt	eq
 80031be:	68e5      	ldreq	r5, [r4, #12]
 80031c0:	6833      	ldreq	r3, [r6, #0]
 80031c2:	1aed      	subeq	r5, r5, r3
 80031c4:	68a3      	ldr	r3, [r4, #8]
 80031c6:	bf0c      	ite	eq
 80031c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031cc:	2500      	movne	r5, #0
 80031ce:	4293      	cmp	r3, r2
 80031d0:	bfc4      	itt	gt
 80031d2:	1a9b      	subgt	r3, r3, r2
 80031d4:	18ed      	addgt	r5, r5, r3
 80031d6:	2600      	movs	r6, #0
 80031d8:	341a      	adds	r4, #26
 80031da:	42b5      	cmp	r5, r6
 80031dc:	d11a      	bne.n	8003214 <_printf_common+0xc8>
 80031de:	2000      	movs	r0, #0
 80031e0:	e008      	b.n	80031f4 <_printf_common+0xa8>
 80031e2:	2301      	movs	r3, #1
 80031e4:	4652      	mov	r2, sl
 80031e6:	4641      	mov	r1, r8
 80031e8:	4638      	mov	r0, r7
 80031ea:	47c8      	blx	r9
 80031ec:	3001      	adds	r0, #1
 80031ee:	d103      	bne.n	80031f8 <_printf_common+0xac>
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f8:	3501      	adds	r5, #1
 80031fa:	e7c6      	b.n	800318a <_printf_common+0x3e>
 80031fc:	18e1      	adds	r1, r4, r3
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	2030      	movs	r0, #48	@ 0x30
 8003202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003206:	4422      	add	r2, r4
 8003208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800320c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003210:	3302      	adds	r3, #2
 8003212:	e7c7      	b.n	80031a4 <_printf_common+0x58>
 8003214:	2301      	movs	r3, #1
 8003216:	4622      	mov	r2, r4
 8003218:	4641      	mov	r1, r8
 800321a:	4638      	mov	r0, r7
 800321c:	47c8      	blx	r9
 800321e:	3001      	adds	r0, #1
 8003220:	d0e6      	beq.n	80031f0 <_printf_common+0xa4>
 8003222:	3601      	adds	r6, #1
 8003224:	e7d9      	b.n	80031da <_printf_common+0x8e>
	...

08003228 <_printf_i>:
 8003228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800322c:	7e0f      	ldrb	r7, [r1, #24]
 800322e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003230:	2f78      	cmp	r7, #120	@ 0x78
 8003232:	4691      	mov	r9, r2
 8003234:	4680      	mov	r8, r0
 8003236:	460c      	mov	r4, r1
 8003238:	469a      	mov	sl, r3
 800323a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800323e:	d807      	bhi.n	8003250 <_printf_i+0x28>
 8003240:	2f62      	cmp	r7, #98	@ 0x62
 8003242:	d80a      	bhi.n	800325a <_printf_i+0x32>
 8003244:	2f00      	cmp	r7, #0
 8003246:	f000 80d2 	beq.w	80033ee <_printf_i+0x1c6>
 800324a:	2f58      	cmp	r7, #88	@ 0x58
 800324c:	f000 80b9 	beq.w	80033c2 <_printf_i+0x19a>
 8003250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003258:	e03a      	b.n	80032d0 <_printf_i+0xa8>
 800325a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800325e:	2b15      	cmp	r3, #21
 8003260:	d8f6      	bhi.n	8003250 <_printf_i+0x28>
 8003262:	a101      	add	r1, pc, #4	@ (adr r1, 8003268 <_printf_i+0x40>)
 8003264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003268:	080032c1 	.word	0x080032c1
 800326c:	080032d5 	.word	0x080032d5
 8003270:	08003251 	.word	0x08003251
 8003274:	08003251 	.word	0x08003251
 8003278:	08003251 	.word	0x08003251
 800327c:	08003251 	.word	0x08003251
 8003280:	080032d5 	.word	0x080032d5
 8003284:	08003251 	.word	0x08003251
 8003288:	08003251 	.word	0x08003251
 800328c:	08003251 	.word	0x08003251
 8003290:	08003251 	.word	0x08003251
 8003294:	080033d5 	.word	0x080033d5
 8003298:	080032ff 	.word	0x080032ff
 800329c:	0800338f 	.word	0x0800338f
 80032a0:	08003251 	.word	0x08003251
 80032a4:	08003251 	.word	0x08003251
 80032a8:	080033f7 	.word	0x080033f7
 80032ac:	08003251 	.word	0x08003251
 80032b0:	080032ff 	.word	0x080032ff
 80032b4:	08003251 	.word	0x08003251
 80032b8:	08003251 	.word	0x08003251
 80032bc:	08003397 	.word	0x08003397
 80032c0:	6833      	ldr	r3, [r6, #0]
 80032c2:	1d1a      	adds	r2, r3, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6032      	str	r2, [r6, #0]
 80032c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032d0:	2301      	movs	r3, #1
 80032d2:	e09d      	b.n	8003410 <_printf_i+0x1e8>
 80032d4:	6833      	ldr	r3, [r6, #0]
 80032d6:	6820      	ldr	r0, [r4, #0]
 80032d8:	1d19      	adds	r1, r3, #4
 80032da:	6031      	str	r1, [r6, #0]
 80032dc:	0606      	lsls	r6, r0, #24
 80032de:	d501      	bpl.n	80032e4 <_printf_i+0xbc>
 80032e0:	681d      	ldr	r5, [r3, #0]
 80032e2:	e003      	b.n	80032ec <_printf_i+0xc4>
 80032e4:	0645      	lsls	r5, r0, #25
 80032e6:	d5fb      	bpl.n	80032e0 <_printf_i+0xb8>
 80032e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	da03      	bge.n	80032f8 <_printf_i+0xd0>
 80032f0:	232d      	movs	r3, #45	@ 0x2d
 80032f2:	426d      	negs	r5, r5
 80032f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032f8:	4859      	ldr	r0, [pc, #356]	@ (8003460 <_printf_i+0x238>)
 80032fa:	230a      	movs	r3, #10
 80032fc:	e011      	b.n	8003322 <_printf_i+0xfa>
 80032fe:	6821      	ldr	r1, [r4, #0]
 8003300:	6833      	ldr	r3, [r6, #0]
 8003302:	0608      	lsls	r0, r1, #24
 8003304:	f853 5b04 	ldr.w	r5, [r3], #4
 8003308:	d402      	bmi.n	8003310 <_printf_i+0xe8>
 800330a:	0649      	lsls	r1, r1, #25
 800330c:	bf48      	it	mi
 800330e:	b2ad      	uxthmi	r5, r5
 8003310:	2f6f      	cmp	r7, #111	@ 0x6f
 8003312:	4853      	ldr	r0, [pc, #332]	@ (8003460 <_printf_i+0x238>)
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	bf14      	ite	ne
 8003318:	230a      	movne	r3, #10
 800331a:	2308      	moveq	r3, #8
 800331c:	2100      	movs	r1, #0
 800331e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003322:	6866      	ldr	r6, [r4, #4]
 8003324:	60a6      	str	r6, [r4, #8]
 8003326:	2e00      	cmp	r6, #0
 8003328:	bfa2      	ittt	ge
 800332a:	6821      	ldrge	r1, [r4, #0]
 800332c:	f021 0104 	bicge.w	r1, r1, #4
 8003330:	6021      	strge	r1, [r4, #0]
 8003332:	b90d      	cbnz	r5, 8003338 <_printf_i+0x110>
 8003334:	2e00      	cmp	r6, #0
 8003336:	d04b      	beq.n	80033d0 <_printf_i+0x1a8>
 8003338:	4616      	mov	r6, r2
 800333a:	fbb5 f1f3 	udiv	r1, r5, r3
 800333e:	fb03 5711 	mls	r7, r3, r1, r5
 8003342:	5dc7      	ldrb	r7, [r0, r7]
 8003344:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003348:	462f      	mov	r7, r5
 800334a:	42bb      	cmp	r3, r7
 800334c:	460d      	mov	r5, r1
 800334e:	d9f4      	bls.n	800333a <_printf_i+0x112>
 8003350:	2b08      	cmp	r3, #8
 8003352:	d10b      	bne.n	800336c <_printf_i+0x144>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	07df      	lsls	r7, r3, #31
 8003358:	d508      	bpl.n	800336c <_printf_i+0x144>
 800335a:	6923      	ldr	r3, [r4, #16]
 800335c:	6861      	ldr	r1, [r4, #4]
 800335e:	4299      	cmp	r1, r3
 8003360:	bfde      	ittt	le
 8003362:	2330      	movle	r3, #48	@ 0x30
 8003364:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003368:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800336c:	1b92      	subs	r2, r2, r6
 800336e:	6122      	str	r2, [r4, #16]
 8003370:	f8cd a000 	str.w	sl, [sp]
 8003374:	464b      	mov	r3, r9
 8003376:	aa03      	add	r2, sp, #12
 8003378:	4621      	mov	r1, r4
 800337a:	4640      	mov	r0, r8
 800337c:	f7ff fee6 	bl	800314c <_printf_common>
 8003380:	3001      	adds	r0, #1
 8003382:	d14a      	bne.n	800341a <_printf_i+0x1f2>
 8003384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003388:	b004      	add	sp, #16
 800338a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	f043 0320 	orr.w	r3, r3, #32
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	4833      	ldr	r0, [pc, #204]	@ (8003464 <_printf_i+0x23c>)
 8003398:	2778      	movs	r7, #120	@ 0x78
 800339a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	6831      	ldr	r1, [r6, #0]
 80033a2:	061f      	lsls	r7, r3, #24
 80033a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80033a8:	d402      	bmi.n	80033b0 <_printf_i+0x188>
 80033aa:	065f      	lsls	r7, r3, #25
 80033ac:	bf48      	it	mi
 80033ae:	b2ad      	uxthmi	r5, r5
 80033b0:	6031      	str	r1, [r6, #0]
 80033b2:	07d9      	lsls	r1, r3, #31
 80033b4:	bf44      	itt	mi
 80033b6:	f043 0320 	orrmi.w	r3, r3, #32
 80033ba:	6023      	strmi	r3, [r4, #0]
 80033bc:	b11d      	cbz	r5, 80033c6 <_printf_i+0x19e>
 80033be:	2310      	movs	r3, #16
 80033c0:	e7ac      	b.n	800331c <_printf_i+0xf4>
 80033c2:	4827      	ldr	r0, [pc, #156]	@ (8003460 <_printf_i+0x238>)
 80033c4:	e7e9      	b.n	800339a <_printf_i+0x172>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	f023 0320 	bic.w	r3, r3, #32
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	e7f6      	b.n	80033be <_printf_i+0x196>
 80033d0:	4616      	mov	r6, r2
 80033d2:	e7bd      	b.n	8003350 <_printf_i+0x128>
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	6825      	ldr	r5, [r4, #0]
 80033d8:	6961      	ldr	r1, [r4, #20]
 80033da:	1d18      	adds	r0, r3, #4
 80033dc:	6030      	str	r0, [r6, #0]
 80033de:	062e      	lsls	r6, r5, #24
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	d501      	bpl.n	80033e8 <_printf_i+0x1c0>
 80033e4:	6019      	str	r1, [r3, #0]
 80033e6:	e002      	b.n	80033ee <_printf_i+0x1c6>
 80033e8:	0668      	lsls	r0, r5, #25
 80033ea:	d5fb      	bpl.n	80033e4 <_printf_i+0x1bc>
 80033ec:	8019      	strh	r1, [r3, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	4616      	mov	r6, r2
 80033f4:	e7bc      	b.n	8003370 <_printf_i+0x148>
 80033f6:	6833      	ldr	r3, [r6, #0]
 80033f8:	1d1a      	adds	r2, r3, #4
 80033fa:	6032      	str	r2, [r6, #0]
 80033fc:	681e      	ldr	r6, [r3, #0]
 80033fe:	6862      	ldr	r2, [r4, #4]
 8003400:	2100      	movs	r1, #0
 8003402:	4630      	mov	r0, r6
 8003404:	f7fc ff44 	bl	8000290 <memchr>
 8003408:	b108      	cbz	r0, 800340e <_printf_i+0x1e6>
 800340a:	1b80      	subs	r0, r0, r6
 800340c:	6060      	str	r0, [r4, #4]
 800340e:	6863      	ldr	r3, [r4, #4]
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	2300      	movs	r3, #0
 8003414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003418:	e7aa      	b.n	8003370 <_printf_i+0x148>
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	4632      	mov	r2, r6
 800341e:	4649      	mov	r1, r9
 8003420:	4640      	mov	r0, r8
 8003422:	47d0      	blx	sl
 8003424:	3001      	adds	r0, #1
 8003426:	d0ad      	beq.n	8003384 <_printf_i+0x15c>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	079b      	lsls	r3, r3, #30
 800342c:	d413      	bmi.n	8003456 <_printf_i+0x22e>
 800342e:	68e0      	ldr	r0, [r4, #12]
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	4298      	cmp	r0, r3
 8003434:	bfb8      	it	lt
 8003436:	4618      	movlt	r0, r3
 8003438:	e7a6      	b.n	8003388 <_printf_i+0x160>
 800343a:	2301      	movs	r3, #1
 800343c:	4632      	mov	r2, r6
 800343e:	4649      	mov	r1, r9
 8003440:	4640      	mov	r0, r8
 8003442:	47d0      	blx	sl
 8003444:	3001      	adds	r0, #1
 8003446:	d09d      	beq.n	8003384 <_printf_i+0x15c>
 8003448:	3501      	adds	r5, #1
 800344a:	68e3      	ldr	r3, [r4, #12]
 800344c:	9903      	ldr	r1, [sp, #12]
 800344e:	1a5b      	subs	r3, r3, r1
 8003450:	42ab      	cmp	r3, r5
 8003452:	dcf2      	bgt.n	800343a <_printf_i+0x212>
 8003454:	e7eb      	b.n	800342e <_printf_i+0x206>
 8003456:	2500      	movs	r5, #0
 8003458:	f104 0619 	add.w	r6, r4, #25
 800345c:	e7f5      	b.n	800344a <_printf_i+0x222>
 800345e:	bf00      	nop
 8003460:	080154e1 	.word	0x080154e1
 8003464:	080154f2 	.word	0x080154f2

08003468 <memmove>:
 8003468:	4288      	cmp	r0, r1
 800346a:	b510      	push	{r4, lr}
 800346c:	eb01 0402 	add.w	r4, r1, r2
 8003470:	d902      	bls.n	8003478 <memmove+0x10>
 8003472:	4284      	cmp	r4, r0
 8003474:	4623      	mov	r3, r4
 8003476:	d807      	bhi.n	8003488 <memmove+0x20>
 8003478:	1e43      	subs	r3, r0, #1
 800347a:	42a1      	cmp	r1, r4
 800347c:	d008      	beq.n	8003490 <memmove+0x28>
 800347e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003482:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003486:	e7f8      	b.n	800347a <memmove+0x12>
 8003488:	4402      	add	r2, r0
 800348a:	4601      	mov	r1, r0
 800348c:	428a      	cmp	r2, r1
 800348e:	d100      	bne.n	8003492 <memmove+0x2a>
 8003490:	bd10      	pop	{r4, pc}
 8003492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800349a:	e7f7      	b.n	800348c <memmove+0x24>

0800349c <_sbrk_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4d06      	ldr	r5, [pc, #24]	@ (80034b8 <_sbrk_r+0x1c>)
 80034a0:	2300      	movs	r3, #0
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd fc96 	bl	8000dd8 <_sbrk>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_sbrk_r+0x1a>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_sbrk_r+0x1a>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	200001f0 	.word	0x200001f0

080034bc <memcpy>:
 80034bc:	440a      	add	r2, r1
 80034be:	4291      	cmp	r1, r2
 80034c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80034c4:	d100      	bne.n	80034c8 <memcpy+0xc>
 80034c6:	4770      	bx	lr
 80034c8:	b510      	push	{r4, lr}
 80034ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034d2:	4291      	cmp	r1, r2
 80034d4:	d1f9      	bne.n	80034ca <memcpy+0xe>
 80034d6:	bd10      	pop	{r4, pc}

080034d8 <_realloc_r>:
 80034d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034dc:	4680      	mov	r8, r0
 80034de:	4615      	mov	r5, r2
 80034e0:	460c      	mov	r4, r1
 80034e2:	b921      	cbnz	r1, 80034ee <_realloc_r+0x16>
 80034e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	4611      	mov	r1, r2
 80034ea:	f7ff bc4b 	b.w	8002d84 <_malloc_r>
 80034ee:	b92a      	cbnz	r2, 80034fc <_realloc_r+0x24>
 80034f0:	f7ff fbdc 	bl	8002cac <_free_r>
 80034f4:	2400      	movs	r4, #0
 80034f6:	4620      	mov	r0, r4
 80034f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034fc:	f000 f81a 	bl	8003534 <_malloc_usable_size_r>
 8003500:	4285      	cmp	r5, r0
 8003502:	4606      	mov	r6, r0
 8003504:	d802      	bhi.n	800350c <_realloc_r+0x34>
 8003506:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800350a:	d8f4      	bhi.n	80034f6 <_realloc_r+0x1e>
 800350c:	4629      	mov	r1, r5
 800350e:	4640      	mov	r0, r8
 8003510:	f7ff fc38 	bl	8002d84 <_malloc_r>
 8003514:	4607      	mov	r7, r0
 8003516:	2800      	cmp	r0, #0
 8003518:	d0ec      	beq.n	80034f4 <_realloc_r+0x1c>
 800351a:	42b5      	cmp	r5, r6
 800351c:	462a      	mov	r2, r5
 800351e:	4621      	mov	r1, r4
 8003520:	bf28      	it	cs
 8003522:	4632      	movcs	r2, r6
 8003524:	f7ff ffca 	bl	80034bc <memcpy>
 8003528:	4621      	mov	r1, r4
 800352a:	4640      	mov	r0, r8
 800352c:	f7ff fbbe 	bl	8002cac <_free_r>
 8003530:	463c      	mov	r4, r7
 8003532:	e7e0      	b.n	80034f6 <_realloc_r+0x1e>

08003534 <_malloc_usable_size_r>:
 8003534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003538:	1f18      	subs	r0, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	bfbc      	itt	lt
 800353e:	580b      	ldrlt	r3, [r1, r0]
 8003540:	18c0      	addlt	r0, r0, r3
 8003542:	4770      	bx	lr

08003544 <_init>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr

08003550 <_fini>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	bf00      	nop
 8003554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003556:	bc08      	pop	{r3}
 8003558:	469e      	mov	lr, r3
 800355a:	4770      	bx	lr
