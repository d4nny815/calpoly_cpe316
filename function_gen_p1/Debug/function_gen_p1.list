
function_gen_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001978  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004da8  08001b00  08001b00  00002b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  00008014  2**0
                  CONTENTS
  4 .ARM          00000000  080068a8  080068a8  00008014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a8  080068a8  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068ac  080068ac  000078ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080068b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000014  080068c4  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080068c4  0000803c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ed5  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001326  00000000  00000000  0000cf19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0000e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044e  00000000  00000000  0000e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002441e  00000000  00000000  0000ec7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cdb  00000000  00000000  0003309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de56c  00000000  00000000  00038d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001172e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001538  00000000  00000000  00117328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00118860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ae8 	.word	0x08001ae8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08001ae8 	.word	0x08001ae8

080001c8 <SPI_init>:
 *      Author: danny
 */
#include "DAC.h"

// Configure GPIOs and SPI Regs
void SPI_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    // PA4 - CS
    // PA5 - SCLK
    // PA6 - MISO
    // PA7 - MOSI

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001cc:	4b2b      	ldr	r3, [pc, #172]	@ (800027c <SPI_init+0xb4>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d0:	4a2a      	ldr	r2, [pc, #168]	@ (800027c <SPI_init+0xb4>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    DAC_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001dc:	6a1b      	ldr	r3, [r3, #32]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	6213      	str	r3, [r2, #32]
    DAC_PORT->AFR[0] |= (SPI_AF_MODE << GPIO_AFRL_AFSEL4_Pos |
 80001e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001ea:	6a1b      	ldr	r3, [r3, #32]
 80001ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f0:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80001f4:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80001f8:	6213      	str	r3, [r2, #32]
                        SPI_AF_MODE << GPIO_AFRL_AFSEL5_Pos |
                        SPI_AF_MODE << GPIO_AFRL_AFSEL6_Pos |
                        SPI_AF_MODE << GPIO_AFRL_AFSEL7_Pos);

    DAC_PORT->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80001fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000208:	6013      	str	r3, [r2, #0]
    DAC_PORT->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 800020a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000214:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 8000218:	6013      	str	r3, [r2, #0]
    DAC_PORT->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 800021a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000228:	6053      	str	r3, [r2, #4]
    DAC_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800022a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000238:	60d3      	str	r3, [r2, #12]
    DAC_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 800023a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000244:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000248:	6093      	str	r3, [r2, #8]


    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800024a:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <SPI_init+0xb4>)
 800024c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800024e:	4a0b      	ldr	r2, [pc, #44]	@ (800027c <SPI_init+0xb4>)
 8000250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000254:	6613      	str	r3, [r2, #96]	@ 0x60

    // baudRate = f_clk / 2, 1st edge and idle low, full duplex, msb first, disable crc enable, no sw slave select, master config
    SPI1->CR1 = SPI_CR1_MSTR;  // master config
 8000256:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <SPI_init+0xb8>)
 8000258:	2204      	movs	r2, #4
 800025a:	601a      	str	r2, [r3, #0]

    // 16bit Data frame, SS output is enabled in master mode, NSS pulse
    SPI1->CR2 = (SPI_CR2_SSOE | SPI_CR2_NSSP | DATA_FRAME_16BIT << SPI_CR2_DS_Pos); 
 800025c:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <SPI_init+0xb8>)
 800025e:	f640 720c 	movw	r2, #3852	@ 0xf0c
 8000262:	605a      	str	r2, [r3, #4]

    SPI1->CR1 |= SPI_CR1_SPE;   // enable SPI
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <SPI_init+0xb8>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a05      	ldr	r2, [pc, #20]	@ (8000280 <SPI_init+0xb8>)
 800026a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800026e:	6013      	str	r3, [r2, #0]
    return;
 8000270:	bf00      	nop
}
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000
 8000280:	40013000 	.word	0x40013000

08000284 <DAC_init>:

void DAC_init() {
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
    SPI_init();
 800028a:	f7ff ff9d 	bl	80001c8 <SPI_init>
    uint16_t volt = volt_to_dac_val(2300);
 800028e:	f643 3326 	movw	r3, #15142	@ 0x3b26
 8000292:	80fb      	strh	r3, [r7, #6]
    DAC_write(volt);
 8000294:	88fb      	ldrh	r3, [r7, #6]
 8000296:	4618      	mov	r0, r3
 8000298:	f000 f804 	bl	80002a4 <DAC_write>
    return;
 800029c:	bf00      	nop
}
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <DAC_write>:

void DAC_write(uint16_t voltage) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	80fb      	strh	r3, [r7, #6]
    if (voltage > MAX_DAC_VAL) voltage = MAX_DAC_VAL;
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80002b4:	d302      	bcc.n	80002bc <DAC_write+0x18>
 80002b6:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80002ba:	80fb      	strh	r3, [r7, #6]
    
    while (!(SPI1->SR & SPI_SR_TXE));
 80002bc:	bf00      	nop
 80002be:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <DAC_write+0x38>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <DAC_write+0x1a>
    SPI1->DR = voltage;
 80002ca:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <DAC_write+0x38>)
 80002cc:	88fb      	ldrh	r3, [r7, #6]
 80002ce:	60d3      	str	r3, [r2, #12]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40013000 	.word	0x40013000

080002e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db0b      	blt.n	800030a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	f003 021f 	and.w	r2, r3, #31
 80002f8:	4907      	ldr	r1, [pc, #28]	@ (8000318 <__NVIC_EnableIRQ+0x38>)
 80002fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fe:	095b      	lsrs	r3, r3, #5
 8000300:	2001      	movs	r0, #1
 8000302:	fa00 f202 	lsl.w	r2, r0, r2
 8000306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e100 	.word	0xe000e100

0800031c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	2b00      	cmp	r3, #0
 800032c:	db12      	blt.n	8000354 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 021f 	and.w	r2, r3, #31
 8000334:	490a      	ldr	r1, [pc, #40]	@ (8000360 <__NVIC_DisableIRQ+0x44>)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	095b      	lsrs	r3, r3, #5
 800033c:	2001      	movs	r0, #1
 800033e:	fa00 f202 	lsl.w	r2, r0, r2
 8000342:	3320      	adds	r3, #32
 8000344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000348:	f3bf 8f4f 	dsb	sy
}
 800034c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800034e:	f3bf 8f6f 	isb	sy
}
 8000352:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100

08000364 <square_wave_init>:
 *  Created on: Apr 26, 2024
 *      Author: danny
 */
#include "FuncGen.h"

void square_wave_init(uint16_t freq, uint8_t duty_cycle) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	80fb      	strh	r3, [r7, #6]
 8000370:	4613      	mov	r3, r2
 8000372:	717b      	strb	r3, [r7, #5]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000374:	4b33      	ldr	r3, [pc, #204]	@ (8000444 <square_wave_init+0xe0>)
 8000376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000378:	4a32      	ldr	r2, [pc, #200]	@ (8000444 <square_wave_init+0xe0>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 8000380:	201c      	movs	r0, #28
 8000382:	f7ff ffcb 	bl	800031c <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 8000386:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 8000396:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~(ARR_BIT | CCR1_BIT);  
 800039e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a8:	f023 0303 	bic.w	r3, r3, #3
 80003ac:	6113      	str	r3, [r2, #16]
    
    
    uint32_t max_arr = CPU_FREQ / freq;
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	4a25      	ldr	r2, [pc, #148]	@ (8000448 <square_wave_init+0xe4>)
 80003b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80003b6:	60fb      	str	r3, [r7, #12]
    TIM2->ARR = max_arr + 300;
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80003c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c8:	2200      	movs	r2, #0
 80003ca:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->CCR1 = (uint32_t)(max_arr * ((float)duty_cycle / 100) + 150);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	ee07 3a90 	vmov	s15, r3
 80003d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003d6:	797b      	ldrb	r3, [r7, #5]
 80003d8:	ee07 3a90 	vmov	s15, r3
 80003dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80003e0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800044c <square_wave_init+0xe8>
 80003e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80003e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80003ec:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000450 <square_wave_init+0xec>
 80003f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003fc:	ee17 2a90 	vmov	r2, s15
 8000400:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCER |= TIM_CCER_CC1E;
 8000402:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6213      	str	r3, [r2, #32]
    TIM2->DIER |= (TIM_DIER_UIE | TIM_DIER_CC1IE);
 8000412:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041c:	f043 0303 	orr.w	r3, r3, #3
 8000420:	60d3      	str	r3, [r2, #12]

//    DBGMCU->APB1FZR1 |= 1;

    NVIC_EnableIRQ(TIM2_IRQn);
 8000422:	201c      	movs	r0, #28
 8000424:	f7ff ff5c 	bl	80002e0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000428:	b662      	cpsie	i
}
 800042a:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 800042c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6013      	str	r3, [r2, #0]
    return;
 800043c:	bf00      	nop
}
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000
 8000448:	02625a00 	.word	0x02625a00
 800044c:	42c80000 	.word	0x42c80000
 8000450:	43160000 	.word	0x43160000

08000454 <continous_mode_init>:

void continous_mode_init(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000458:	4b21      	ldr	r3, [pc, #132]	@ (80004e0 <continous_mode_init+0x8c>)
 800045a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800045c:	4a20      	ldr	r2, [pc, #128]	@ (80004e0 <continous_mode_init+0x8c>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 8000464:	201c      	movs	r0, #28
 8000466:	f7ff ff59 	bl	800031c <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 800046a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000474:	f023 0301 	bic.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 800047a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~(ARR_BIT | CCR1_BIT);  
 8000482:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800048c:	f023 0303 	bic.w	r3, r3, #3
 8000490:	6113      	str	r3, [r2, #16]
    
    
    TIM2->ARR = ARR_VAL;
 8000492:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000496:	2279      	movs	r2, #121	@ 0x79
 8000498:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->PSC = 0;
 800049a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->DIER &= ~(TIM_DIER_UIE | TIM_DIER_CC1IE);
 80004a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ac:	f023 0303 	bic.w	r3, r3, #3
 80004b0:	60d3      	str	r3, [r2, #12]
    TIM2->DIER |= TIM_DIER_UIE;
 80004b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	60d3      	str	r3, [r2, #12]

//    DBGMCU->APB1FZR1 |= 1;

    NVIC_EnableIRQ(TIM2_IRQn);
 80004c2:	201c      	movs	r0, #28
 80004c4:	f7ff ff0c 	bl	80002e0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80004c8:	b662      	cpsie	i
}
 80004ca:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 80004cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]
    return;
 80004dc:	bf00      	nop

}
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <keypad_init>:
 *      Author: danny
 */
#include "keypad.h"


void keypad_init() {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <keypad_init+0x78>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ec:	4a1b      	ldr	r2, [pc, #108]	@ (800055c <keypad_init+0x78>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    // set rows as outputs
    // PC5-8
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 |GPIO_MODER_MODE8);
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <keypad_init+0x7c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a19      	ldr	r2, [pc, #100]	@ (8000560 <keypad_init+0x7c>)
 80004fa:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 80004fe:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);  // gp output mode
 8000500:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <keypad_init+0x7c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a16      	ldr	r2, [pc, #88]	@ (8000560 <keypad_init+0x7c>)
 8000506:	f443 33aa 	orr.w	r3, r3, #87040	@ 0x15400
 800050a:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->OTYPER &= ~(GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);  // push-pull
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <keypad_init+0x7c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a13      	ldr	r2, [pc, #76]	@ (8000560 <keypad_init+0x7c>)
 8000512:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8000516:	6053      	str	r3, [r2, #4]
    KEYPAD_PORT->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);  // low speed
 8000518:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <keypad_init+0x7c>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <keypad_init+0x7c>)
 800051e:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 8000522:	6093      	str	r3, [r2, #8]
    KEYPAD_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);   // no resistor
 8000524:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <keypad_init+0x7c>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4a0d      	ldr	r2, [pc, #52]	@ (8000560 <keypad_init+0x7c>)
 800052a:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 800052e:	60d3      	str	r3, [r2, #12]

    // set cols as inputs
    // PC9-12
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 | GPIO_MODER_MODE12);    // input mode
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <keypad_init+0x7c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <keypad_init+0x7c>)
 8000536:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800053a:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->PUPDR  &= ~(GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11 | GPIO_PUPDR_PUPD12);
 800053c:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <keypad_init+0x7c>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a07      	ldr	r2, [pc, #28]	@ (8000560 <keypad_init+0x7c>)
 8000542:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8000546:	60d3      	str	r3, [r2, #12]
    KEYPAD_PORT->PUPDR  |= (GPIO_PUPDR_PUPD9_1 | GPIO_PUPDR_PUPD10_1 | GPIO_PUPDR_PUPD11_1 | GPIO_PUPDR_PUPD12_1); // pull down resistor
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <keypad_init+0x7c>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <keypad_init+0x7c>)
 800054e:	f043 732a 	orr.w	r3, r3, #44564480	@ 0x2a80000
 8000552:	60d3      	str	r3, [r2, #12]

    // set all cols high
    keypad_setAllCols();
 8000554:	f000 f806 	bl	8000564 <keypad_setAllCols>

    return;
 8000558:	bf00      	nop
}
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	48000800 	.word	0x48000800

08000564 <keypad_setAllCols>:

void keypad_setAllCols() {
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
    KEYPAD_PORT->ODR |= ROW_MASK;
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <keypad_setAllCols+0x1c>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <keypad_setAllCols+0x1c>)
 800056e:	f443 73f0 	orr.w	r3, r3, #480	@ 0x1e0
 8000572:	6153      	str	r3, [r2, #20]
    return;
 8000574:	bf00      	nop
}
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	48000800 	.word	0x48000800

08000584 <delay>:

void delay(uint32_t n) {
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    for (uint32_t delay_cnt=0; delay_cnt<n; delay_cnt++);
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e002      	b.n	8000598 <delay+0x14>
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3301      	adds	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3f8      	bcc.n	8000592 <delay+0xe>
    return;
 80005a0:	bf00      	nop
}
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <keypad_read>:

int8_t keypad_read() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    if (!(GPIOC->IDR & COL_MASK)) {
 80005b2:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <keypad_read+0x9c>)
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d102      	bne.n	80005c4 <keypad_read+0x18>
        return KEYPAD_NO_PRESS;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c2:	e03c      	b.n	800063e <keypad_read+0x92>
    }
    static const uint8_t btns[NUM_ROWS][NUM_COLS] = {{1, 2, 3, KEYPAD_A}, {4, 5, 6, KEYPAD_B}, {7, 8, 9, KEYPAD_C}, {KEYPAD_STAR, 0, KEYPAD_POUND, KEYPAD_D}};
    uint8_t col, row;
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	e032      	b.n	8000630 <keypad_read+0x84>
        GPIOC->ODR = (GPIOC->ODR & ~ROW_MASK) | (1 << (i + ROW_PIN_START));
 80005ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <keypad_read+0x9c>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	3205      	adds	r2, #5
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a1a      	ldr	r2, [pc, #104]	@ (8000648 <keypad_read+0x9c>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6153      	str	r3, [r2, #20]
        delay(5);
 80005e4:	2005      	movs	r0, #5
 80005e6:	f7ff ffcd 	bl	8000584 <delay>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <keypad_read+0x9c>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d018      	beq.n	8000628 <keypad_read+0x7c>
        row = i;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	70fb      	strb	r3, [r7, #3]
        col = col_pins_to_int(COL_PINS);
 80005fa:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <keypad_read+0x9c>)
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	0a5b      	lsrs	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f821 	bl	8000650 <col_pins_to_int>
 800060e:	4603      	mov	r3, r0
 8000610:	70bb      	strb	r3, [r7, #2]
        keypad_setAllCols();
 8000612:	f7ff ffa7 	bl	8000564 <keypad_setAllCols>
        return btns[row][col];
 8000616:	78fa      	ldrb	r2, [r7, #3]
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	490c      	ldr	r1, [pc, #48]	@ (800064c <keypad_read+0xa0>)
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	440a      	add	r2, r1
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b25b      	sxtb	r3, r3
 8000626:	e00a      	b.n	800063e <keypad_read+0x92>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 8000628:	bf00      	nop
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3301      	adds	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d9c9      	bls.n	80005ca <keypad_read+0x1e>
    }
    keypad_setAllCols();
 8000636:	f7ff ff95 	bl	8000564 <keypad_setAllCols>
    return KEYPAD_NO_PRESS;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	48000800 	.word	0x48000800
 800064c:	08001b00 	.word	0x08001b00

08000650 <col_pins_to_int>:

uint8_t col_pins_to_int(uint8_t pins) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
    switch (pins) {
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	3b01      	subs	r3, #1
 800065e:	2b07      	cmp	r3, #7
 8000660:	d81a      	bhi.n	8000698 <col_pins_to_int+0x48>
 8000662:	a201      	add	r2, pc, #4	@ (adr r2, 8000668 <col_pins_to_int+0x18>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	08000689 	.word	0x08000689
 800066c:	0800068d 	.word	0x0800068d
 8000670:	08000699 	.word	0x08000699
 8000674:	08000691 	.word	0x08000691
 8000678:	08000699 	.word	0x08000699
 800067c:	08000699 	.word	0x08000699
 8000680:	08000699 	.word	0x08000699
 8000684:	08000695 	.word	0x08000695
        case COL1: return 0;
 8000688:	2300      	movs	r3, #0
 800068a:	e006      	b.n	800069a <col_pins_to_int+0x4a>
        case COL2: return 1;
 800068c:	2301      	movs	r3, #1
 800068e:	e004      	b.n	800069a <col_pins_to_int+0x4a>
        case COL3: return 2;
 8000690:	2302      	movs	r3, #2
 8000692:	e002      	b.n	800069a <col_pins_to_int+0x4a>
        case COL4: return 3;
 8000694:	2303      	movs	r3, #3
 8000696:	e000      	b.n	800069a <col_pins_to_int+0x4a>
    }
    return 0;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <keypad_read_oneshot>:

int8_t keypad_read_oneshot() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
    int8_t key;
    int8_t prev_key = KEYPAD_NO_PRESS;
 80006ae:	23ff      	movs	r3, #255	@ 0xff
 80006b0:	71fb      	strb	r3, [r7, #7]
    while (1) {
        key = keypad_read();
 80006b2:	f7ff ff7b 	bl	80005ac <keypad_read>
 80006b6:	4603      	mov	r3, r0
 80006b8:	71bb      	strb	r3, [r7, #6]
        delay(300); // terrible way to debounce
 80006ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006be:	f7ff ff61 	bl	8000584 <delay>
        
        // one shot key press 
        if (prev_key != KEYPAD_NO_PRESS && key == KEYPAD_NO_PRESS) {
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006ca:	d007      	beq.n	80006dc <keypad_read_oneshot+0x34>
 80006cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006d4:	d102      	bne.n	80006dc <keypad_read_oneshot+0x34>
            return prev_key;
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	e009      	b.n	80006f0 <keypad_read_oneshot+0x48>
        }
        if (key == KEYPAD_NO_PRESS) continue;
 80006dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006e4:	d002      	beq.n	80006ec <keypad_read_oneshot+0x44>
        prev_key = key;
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	e7e2      	b.n	80006b2 <keypad_read_oneshot+0xa>
        if (key == KEYPAD_NO_PRESS) continue;
 80006ec:	bf00      	nop
        key = keypad_read();
 80006ee:	e7e0      	b.n	80006b2 <keypad_read_oneshot+0xa>
    }
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
    HAL_Init();
 80006fe:	f000 fa40 	bl	8000b82 <HAL_Init>
    SystemClock_Config();
 8000702:	f000 f957 	bl	80009b4 <SystemClock_Config>

    DAC_init();
 8000706:	f7ff fdbd 	bl	8000284 <DAC_init>
    keypad_init();
 800070a:	f7ff feeb 	bl	80004e4 <keypad_init>
    square_wave_init(freq, duty_cycle);
 800070e:	4b5e      	ldr	r3, [pc, #376]	@ (8000888 <main+0x190>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4a5e      	ldr	r2, [pc, #376]	@ (800088c <main+0x194>)
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fe23 	bl	8000364 <square_wave_init>
    
    int8_t key = KEYPAD_NO_PRESS;
 800071e:	23ff      	movs	r3, #255	@ 0xff
 8000720:	71fb      	strb	r3, [r7, #7]
    while (1) {
        key = keypad_read_oneshot();
 8000722:	f7ff ffc1 	bl	80006a8 <keypad_read_oneshot>
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
        if (isFreqChangePin(key)) {
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d02c      	beq.n	800078c <main+0x94>
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b05      	cmp	r3, #5
 8000736:	d829      	bhi.n	800078c <main+0x94>
            freq = key * FREQ_MIN;
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	b29b      	uxth	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	0092      	lsls	r2, r2, #2
 8000742:	4413      	add	r3, r2
 8000744:	461a      	mov	r2, r3
 8000746:	0091      	lsls	r1, r2, #2
 8000748:	461a      	mov	r2, r3
 800074a:	460b      	mov	r3, r1
 800074c:	4413      	add	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b4d      	ldr	r3, [pc, #308]	@ (8000888 <main+0x190>)
 8000754:	801a      	strh	r2, [r3, #0]
            wave_scalar = freq / FREQ_MIN;
 8000756:	4b4c      	ldr	r3, [pc, #304]	@ (8000888 <main+0x190>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	4a4d      	ldr	r2, [pc, #308]	@ (8000890 <main+0x198>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	095b      	lsrs	r3, r3, #5
 8000762:	b29b      	uxth	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	4b4b      	ldr	r3, [pc, #300]	@ (8000894 <main+0x19c>)
 8000768:	601a      	str	r2, [r3, #0]
            wave_lut_ind = 0;
 800076a:	4b4b      	ldr	r3, [pc, #300]	@ (8000898 <main+0x1a0>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
            if (state == SQUARE) square_wave_init(freq, duty_cycle);
 8000770:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <main+0x1a4>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	f040 8086 	bne.w	8000886 <main+0x18e>
 800077a:	4b43      	ldr	r3, [pc, #268]	@ (8000888 <main+0x190>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	4a43      	ldr	r2, [pc, #268]	@ (800088c <main+0x194>)
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fded 	bl	8000364 <square_wave_init>
 800078a:	e07c      	b.n	8000886 <main+0x18e>
        }
        else if (isDutyChangePin(key) && state == SQUARE) {
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d007      	beq.n	80007a4 <main+0xac>
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b0a      	cmp	r3, #10
 800079a:	d003      	beq.n	80007a4 <main+0xac>
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	2b0b      	cmp	r3, #11
 80007a2:	d123      	bne.n	80007ec <main+0xf4>
 80007a4:	4b3d      	ldr	r3, [pc, #244]	@ (800089c <main+0x1a4>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d11f      	bne.n	80007ec <main+0xf4>
            switch (key) {
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	2b0b      	cmp	r3, #11
 80007b2:	d00e      	beq.n	80007d2 <main+0xda>
 80007b4:	2b0b      	cmp	r3, #11
 80007b6:	dc10      	bgt.n	80007da <main+0xe2>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <main+0xca>
 80007bc:	2b0a      	cmp	r3, #10
 80007be:	d004      	beq.n	80007ca <main+0xd2>
 80007c0:	e00b      	b.n	80007da <main+0xe2>
                case 0:
                    duty_cycle = 50;
 80007c2:	4b32      	ldr	r3, [pc, #200]	@ (800088c <main+0x194>)
 80007c4:	2232      	movs	r2, #50	@ 0x32
 80007c6:	701a      	strb	r2, [r3, #0]
                    break;
 80007c8:	e007      	b.n	80007da <main+0xe2>
                case KEYPAD_STAR:
                    duty_cycle = 10;
 80007ca:	4b30      	ldr	r3, [pc, #192]	@ (800088c <main+0x194>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	701a      	strb	r2, [r3, #0]
                    break;
 80007d0:	e003      	b.n	80007da <main+0xe2>
                case KEYPAD_POUND:
                    duty_cycle = 90;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <main+0x194>)
 80007d4:	225a      	movs	r2, #90	@ 0x5a
 80007d6:	701a      	strb	r2, [r3, #0]
                    break;
 80007d8:	bf00      	nop
            }
            square_wave_init(freq, duty_cycle);
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <main+0x190>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	4a2b      	ldr	r2, [pc, #172]	@ (800088c <main+0x194>)
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fdbd 	bl	8000364 <square_wave_init>
 80007ea:	e04c      	b.n	8000886 <main+0x18e>
        }
        else if (isWaveChangePin(key)) {
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d997      	bls.n	8000722 <main+0x2a>
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b09      	cmp	r3, #9
 80007f6:	d894      	bhi.n	8000722 <main+0x2a>
            switch (key) {
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	3b06      	subs	r3, #6
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d834      	bhi.n	800086c <main+0x174>
 8000802:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <main+0x110>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000819 	.word	0x08000819
 800080c:	08000841 	.word	0x08000841
 8000810:	0800082d 	.word	0x0800082d
 8000814:	08000855 	.word	0x08000855
                case SINE_KEY:
                    if (state == SQUARE) continous_mode_init();
 8000818:	4b20      	ldr	r3, [pc, #128]	@ (800089c <main+0x1a4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d101      	bne.n	8000824 <main+0x12c>
 8000820:	f7ff fe18 	bl	8000454 <continous_mode_init>
                    state = SINE;
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <main+0x1a4>)
 8000826:	2202      	movs	r2, #2
 8000828:	701a      	strb	r2, [r3, #0]
                    break;
 800082a:	e01f      	b.n	800086c <main+0x174>
                case TRIANGLE_KEY:
                    if (state == SQUARE) continous_mode_init();
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <main+0x1a4>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <main+0x140>
 8000834:	f7ff fe0e 	bl	8000454 <continous_mode_init>
                    state = TRIANGLE;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <main+0x1a4>)
 800083a:	2203      	movs	r2, #3
 800083c:	701a      	strb	r2, [r3, #0]
                    break;
 800083e:	e015      	b.n	800086c <main+0x174>
                case SAWTOOTH_KEY:
                    if (state == SQUARE) continous_mode_init();
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <main+0x1a4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <main+0x154>
 8000848:	f7ff fe04 	bl	8000454 <continous_mode_init>
                    state = SAWTOOTH;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <main+0x1a4>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
                    break;
 8000852:	e00b      	b.n	800086c <main+0x174>
                case SQUARE_KEY:
                    square_wave_init(freq, duty_cycle);
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <main+0x190>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	4a0c      	ldr	r2, [pc, #48]	@ (800088c <main+0x194>)
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fd80 	bl	8000364 <square_wave_init>
                    state = SQUARE;
 8000864:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <main+0x1a4>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
                    break;
 800086a:	bf00      	nop
            }
            wave_scalar = freq / FREQ_MIN;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <main+0x190>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <main+0x198>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	095b      	lsrs	r3, r3, #5
 8000878:	b29b      	uxth	r3, r3
 800087a:	461a      	mov	r2, r3
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <main+0x19c>)
 800087e:	601a      	str	r2, [r3, #0]
            wave_lut_ind = 0;
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <main+0x1a0>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
        key = keypad_read_oneshot();
 8000886:	e74c      	b.n	8000722 <main+0x2a>
 8000888:	20000000 	.word	0x20000000
 800088c:	20000002 	.word	0x20000002
 8000890:	51eb851f 	.word	0x51eb851f
 8000894:	20000004 	.word	0x20000004
 8000898:	20000034 	.word	0x20000034
 800089c:	20000030 	.word	0x20000030

080008a0 <TIM2_IRQHandler>:

    return 0;
}


void TIM2_IRQHandler(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    switch (state) {
 80008a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000998 <TIM2_IRQHandler+0xf8>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d86a      	bhi.n	8000982 <TIM2_IRQHandler+0xe2>
 80008ac:	a201      	add	r2, pc, #4	@ (adr r2, 80008b4 <TIM2_IRQHandler+0x14>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008c5 	.word	0x080008c5
 80008b8:	080008e7 	.word	0x080008e7
 80008bc:	0800091b 	.word	0x0800091b
 80008c0:	0800094f 	.word	0x0800094f
    case SQUARE:
        if (TIM2->SR & CCR1_BIT) {
 80008c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <TIM2_IRQHandler+0x3c>
            DAC_write(volt_to_dac_val(MIN_FUNC_VOLTAGE));
 80008d2:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 80008d6:	f7ff fce5 	bl	80002a4 <DAC_write>
        } else {
            DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
        }
        break;
 80008da:	e053      	b.n	8000984 <TIM2_IRQHandler+0xe4>
            DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
 80008dc:	f643 608a 	movw	r0, #16010	@ 0x3e8a
 80008e0:	f7ff fce0 	bl	80002a4 <DAC_write>
        break;
 80008e4:	e04e      	b.n	8000984 <TIM2_IRQHandler+0xe4>
    case SAWTOOTH:
        wave_lut_ind = (wave_lut_ind + wave_scalar) % WAVE_LUT_SIZE;
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <TIM2_IRQHandler+0xfc>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <TIM2_IRQHandler+0x100>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	441a      	add	r2, r3
 80008f0:	0893      	lsrs	r3, r2, #2
 80008f2:	492c      	ldr	r1, [pc, #176]	@ (80009a4 <TIM2_IRQHandler+0x104>)
 80008f4:	fba1 1303 	umull	r1, r3, r1, r3
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	f640 41e4 	movw	r1, #3300	@ 0xce4
 80008fe:	fb01 f303 	mul.w	r3, r1, r3
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4a25      	ldr	r2, [pc, #148]	@ (800099c <TIM2_IRQHandler+0xfc>)
 8000906:	6013      	str	r3, [r2, #0]
        DAC_write(SAWTOOTH_LUT[wave_lut_ind]);
 8000908:	4b24      	ldr	r3, [pc, #144]	@ (800099c <TIM2_IRQHandler+0xfc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a26      	ldr	r2, [pc, #152]	@ (80009a8 <TIM2_IRQHandler+0x108>)
 800090e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fcc6 	bl	80002a4 <DAC_write>
        break;
 8000918:	e034      	b.n	8000984 <TIM2_IRQHandler+0xe4>
    case SINE:
        wave_lut_ind = (wave_lut_ind + wave_scalar) % WAVE_LUT_SIZE;
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <TIM2_IRQHandler+0xfc>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <TIM2_IRQHandler+0x100>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	441a      	add	r2, r3
 8000924:	0893      	lsrs	r3, r2, #2
 8000926:	491f      	ldr	r1, [pc, #124]	@ (80009a4 <TIM2_IRQHandler+0x104>)
 8000928:	fba1 1303 	umull	r1, r3, r1, r3
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8000932:	fb01 f303 	mul.w	r3, r1, r3
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	4a18      	ldr	r2, [pc, #96]	@ (800099c <TIM2_IRQHandler+0xfc>)
 800093a:	6013      	str	r3, [r2, #0]
        DAC_write(SINE_LUT[wave_lut_ind]);
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <TIM2_IRQHandler+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1a      	ldr	r2, [pc, #104]	@ (80009ac <TIM2_IRQHandler+0x10c>)
 8000942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fcac 	bl	80002a4 <DAC_write>
        break;
 800094c:	e01a      	b.n	8000984 <TIM2_IRQHandler+0xe4>
    case TRIANGLE:
        wave_lut_ind = (wave_lut_ind + wave_scalar) % WAVE_LUT_SIZE;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <TIM2_IRQHandler+0xfc>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <TIM2_IRQHandler+0x100>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	441a      	add	r2, r3
 8000958:	0893      	lsrs	r3, r2, #2
 800095a:	4912      	ldr	r1, [pc, #72]	@ (80009a4 <TIM2_IRQHandler+0x104>)
 800095c:	fba1 1303 	umull	r1, r3, r1, r3
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8000966:	fb01 f303 	mul.w	r3, r1, r3
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <TIM2_IRQHandler+0xfc>)
 800096e:	6013      	str	r3, [r2, #0]
        DAC_write(TRIANGLE_LUT[wave_lut_ind]);
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <TIM2_IRQHandler+0xfc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <TIM2_IRQHandler+0x110>)
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fc92 	bl	80002a4 <DAC_write>
        break;
 8000980:	e000      	b.n	8000984 <TIM2_IRQHandler+0xe4>
    default: break;
 8000982:	bf00      	nop
    }
    TIM2->SR &= ~(TIM_INTR_FLAGS);
 8000984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098e:	f023 0303 	bic.w	r3, r3, #3
 8000992:	6113      	str	r3, [r2, #16]
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000030 	.word	0x20000030
 800099c:	20000034 	.word	0x20000034
 80009a0:	20000004 	.word	0x20000004
 80009a4:	09ee009f 	.word	0x09ee009f
 80009a8:	08004ea0 	.word	0x08004ea0
 80009ac:	080034d8 	.word	0x080034d8
 80009b0:	08001b10 	.word	0x08001b10

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	@ 0x58
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2244      	movs	r2, #68	@ 0x44
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f864 	bl	8001a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009da:	f000 fa3b 	bl	8000e54 <HAL_PWREx_ControlVoltageScaling>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e4:	f000 f838 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009e8:	2310      	movs	r3, #16
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009f4:	2360      	movs	r3, #96	@ 0x60
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009fc:	2301      	movs	r3, #1
 80009fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000a04:	2314      	movs	r3, #20
 8000a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fa71 	bl	8000f00 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a24:	f000 f818 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fe39 	bl	80016b8 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a4c:	f000 f804 	bl	8000a58 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3758      	adds	r7, #88	@ 0x58
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b02:	f000 f893 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b34:	f7ff ffea 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	@ (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	@ (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f000 ff9f 	bl	8001aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fdc9 	bl	80006f8 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b74:	080068b0 	.word	0x080068b0
  ldr r2, =_sbss
 8000b78:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b7c:	2000003c 	.word	0x2000003c

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>

08000b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f91f 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	200f      	movs	r0, #15
 8000b94:	f000 f80e 	bl	8000bb4 <HAL_InitTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	e001      	b.n	8000ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba4:	f7ff ff5e 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_InitTick+0x6c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d023      	beq.n	8000c10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_InitTick+0x70>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f91d 	bl	8000e1e <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10f      	bne.n	8000c0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d809      	bhi.n	8000c04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf8:	f000 f8f5 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_InitTick+0x74>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e007      	b.n	8000c14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e004      	b.n	8000c14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e001      	b.n	8000c14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000010 	.word	0x20000010
 8000c24:	20000008 	.word	0x20000008
 8000c28:	2000000c 	.word	0x2000000c

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000010 	.word	0x20000010
 8000c50:	20000038 	.word	0x20000038

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000038 	.word	0x20000038

08000c6c <__NVIC_SetPriorityGrouping>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff47 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5c 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40007000 	.word	0x40007000

08000e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e62:	d130      	bne.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e64:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e70:	d038      	beq.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e72:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2232      	movs	r2, #50	@ 0x32
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	0c9b      	lsrs	r3, r3, #18
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e98:	e002      	b.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea0:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eac:	d102      	bne.n	8000eb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f2      	bne.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec0:	d110      	bne.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e00f      	b.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ed2:	d007      	beq.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000edc:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40007000 	.word	0x40007000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	431bde83 	.word	0x431bde83

08000f00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e3ca      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f12:	4b97      	ldr	r3, [pc, #604]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f1c:	4b94      	ldr	r3, [pc, #592]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 80e4 	beq.w	80010fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <HAL_RCC_OscConfig+0x4a>
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b0c      	cmp	r3, #12
 8000f3e:	f040 808b 	bne.w	8001058 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	f040 8087 	bne.w	8001058 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f4a:	4b89      	ldr	r3, [pc, #548]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <HAL_RCC_OscConfig+0x62>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e3a2      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a1a      	ldr	r2, [r3, #32]
 8000f66:	4b82      	ldr	r3, [pc, #520]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <HAL_RCC_OscConfig+0x7c>
 8000f72:	4b7f      	ldr	r3, [pc, #508]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f7a:	e005      	b.n	8000f88 <HAL_RCC_OscConfig+0x88>
 8000f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d223      	bcs.n	8000fd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fd1d 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e383      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa0:	4b73      	ldr	r3, [pc, #460]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a72      	ldr	r2, [pc, #456]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b70      	ldr	r3, [pc, #448]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	496d      	ldr	r1, [pc, #436]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	4968      	ldr	r1, [pc, #416]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	604b      	str	r3, [r1, #4]
 8000fd2:	e025      	b.n	8001020 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd4:	4b66      	ldr	r3, [pc, #408]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a65      	ldr	r2, [pc, #404]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b63      	ldr	r3, [pc, #396]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4960      	ldr	r1, [pc, #384]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	495b      	ldr	r1, [pc, #364]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001002:	4313      	orrs	r3, r2
 8001004:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fcdd 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e343      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001020:	f000 fc4a 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001024:	4602      	mov	r2, r0
 8001026:	4b52      	ldr	r3, [pc, #328]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	4950      	ldr	r1, [pc, #320]	@ (8001174 <HAL_RCC_OscConfig+0x274>)
 8001032:	5ccb      	ldrb	r3, [r1, r3]
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	4a4e      	ldr	r2, [pc, #312]	@ (8001178 <HAL_RCC_OscConfig+0x278>)
 800103e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001040:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <HAL_RCC_OscConfig+0x27c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fdb5 	bl	8000bb4 <HAL_InitTick>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d052      	beq.n	80010fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	e327      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d032      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001060:	4b43      	ldr	r3, [pc, #268]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a42      	ldr	r2, [pc, #264]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800106c:	f7ff fdf2 	bl	8000c54 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001074:	f7ff fdee 	bl	8000c54 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e310      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001086:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001092:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a36      	ldr	r2, [pc, #216]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4931      	ldr	r1, [pc, #196]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	492c      	ldr	r1, [pc, #176]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
 80010c4:	e01a      	b.n	80010fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a29      	ldr	r2, [pc, #164]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fdbf 	bl	8000c54 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010da:	f7ff fdbb 	bl	8000c54 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e2dd      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010ec:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x1da>
 80010f8:	e000      	b.n	80010fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d074      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b08      	cmp	r3, #8
 800110c:	d005      	beq.n	800111a <HAL_RCC_OscConfig+0x21a>
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d10e      	bne.n	8001132 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d10b      	bne.n	8001132 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d064      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2f0>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d160      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e2ba      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x24a>
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e026      	b.n	8001198 <HAL_RCC_OscConfig+0x298>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001152:	d115      	bne.n	8001180 <HAL_RCC_OscConfig+0x280>
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 800115a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a02      	ldr	r2, [pc, #8]	@ (8001170 <HAL_RCC_OscConfig+0x270>)
 8001166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e014      	b.n	8001198 <HAL_RCC_OscConfig+0x298>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	08006868 	.word	0x08006868
 8001178:	20000008 	.word	0x20000008
 800117c:	2000000c 	.word	0x2000000c
 8001180:	4ba0      	ldr	r3, [pc, #640]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a9f      	ldr	r2, [pc, #636]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b9d      	ldr	r3, [pc, #628]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a9c      	ldr	r2, [pc, #624]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fd58 	bl	8000c54 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fd54 	bl	8000c54 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e276      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ba:	4b92      	ldr	r3, [pc, #584]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x2a8>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fd44 	bl	8000c54 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fd40 	bl	8000c54 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	@ 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e262      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e2:	4b88      	ldr	r3, [pc, #544]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x2d0>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d060      	beq.n	80012c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x310>
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d119      	bne.n	800123e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d116      	bne.n	800123e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001210:	4b7c      	ldr	r3, [pc, #496]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_OscConfig+0x328>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e23f      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b76      	ldr	r3, [pc, #472]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	061b      	lsls	r3, r3, #24
 8001236:	4973      	ldr	r1, [pc, #460]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123c:	e040      	b.n	80012c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d023      	beq.n	800128e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001246:	4b6f      	ldr	r3, [pc, #444]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6e      	ldr	r2, [pc, #440]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001252:	f7ff fcff 	bl	8000c54 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125a:	f7ff fcfb 	bl	8000c54 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e21d      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800126c:	4b65      	ldr	r3, [pc, #404]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4b62      	ldr	r3, [pc, #392]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	061b      	lsls	r3, r3, #24
 8001286:	495f      	ldr	r1, [pc, #380]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	e018      	b.n	80012c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128e:	4b5d      	ldr	r3, [pc, #372]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a5c      	ldr	r2, [pc, #368]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fcdb 	bl	8000c54 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fcd7 	bl	8000c54 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1f9      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b4:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d03c      	beq.n	8001346 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01c      	beq.n	800130e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80012d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012da:	4a4a      	ldr	r2, [pc, #296]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fcb6 	bl	8000c54 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fcb2 	bl	8000c54 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1d4      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fe:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ef      	beq.n	80012ec <HAL_RCC_OscConfig+0x3ec>
 800130c:	e01b      	b.n	8001346 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130e:	4b3d      	ldr	r3, [pc, #244]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001314:	4a3b      	ldr	r2, [pc, #236]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131e:	f7ff fc99 	bl	8000c54 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001326:	f7ff fc95 	bl	8000c54 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1b7      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800133a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ef      	bne.n	8001326 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80a6 	beq.w	80014a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001358:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10d      	bne.n	8001380 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001368:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 800136a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001370:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137c:	2301      	movs	r3, #1
 800137e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001380:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_RCC_OscConfig+0x508>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d118      	bne.n	80013be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <HAL_RCC_OscConfig+0x508>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_RCC_OscConfig+0x508>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001396:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001398:	f7ff fc5c 	bl	8000c54 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a0:	f7ff fc58 	bl	8000c54 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e17a      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_RCC_OscConfig+0x508>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d108      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4d8>
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80013c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013d6:	e029      	b.n	800142c <HAL_RCC_OscConfig+0x52c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d115      	bne.n	800140c <HAL_RCC_OscConfig+0x50c>
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013e6:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f6:	4a03      	ldr	r2, [pc, #12]	@ (8001404 <HAL_RCC_OscConfig+0x504>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x52c>
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	40007000 	.word	0x40007000
 800140c:	4b9c      	ldr	r3, [pc, #624]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001412:	4a9b      	ldr	r2, [pc, #620]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800141c:	4b98      	ldr	r3, [pc, #608]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001422:	4a97      	ldr	r2, [pc, #604]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d016      	beq.n	8001462 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fc0e 	bl	8000c54 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff fc0a 	bl	8000c54 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e12a      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001452:	4b8b      	ldr	r3, [pc, #556]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0ed      	beq.n	800143c <HAL_RCC_OscConfig+0x53c>
 8001460:	e015      	b.n	800148e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001462:	f7ff fbf7 	bl	8000c54 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fbf3 	bl	8000c54 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e113      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001480:	4b7f      	ldr	r3, [pc, #508]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ed      	bne.n	800146a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001494:	4b7a      	ldr	r3, [pc, #488]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	4a79      	ldr	r2, [pc, #484]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800149a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800149e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80fe 	beq.w	80016a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	f040 80d0 	bne.w	8001654 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014b4:	4b72      	ldr	r3, [pc, #456]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d130      	bne.n	800152a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	3b01      	subs	r3, #1
 80014d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d127      	bne.n	800152a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d11f      	bne.n	800152a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80014f4:	2a07      	cmp	r2, #7
 80014f6:	bf14      	ite	ne
 80014f8:	2201      	movne	r2, #1
 80014fa:	2200      	moveq	r2, #0
 80014fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fe:	4293      	cmp	r3, r2
 8001500:	d113      	bne.n	800152a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d109      	bne.n	800152a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	3b01      	subs	r3, #1
 8001524:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d06e      	beq.n	8001608 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d069      	beq.n	8001604 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800153c:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0ad      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800154c:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a4b      	ldr	r2, [pc, #300]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001556:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001558:	f7ff fb7c 	bl	8000c54 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fb78 	bl	8000c54 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e09a      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001572:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157e:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	4b40      	ldr	r3, [pc, #256]	@ (8001684 <HAL_RCC_OscConfig+0x784>)
 8001584:	4013      	ands	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800158e:	3a01      	subs	r2, #1
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	4311      	orrs	r1, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001598:	0212      	lsls	r2, r2, #8
 800159a:	4311      	orrs	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015a0:	0852      	lsrs	r2, r2, #1
 80015a2:	3a01      	subs	r2, #1
 80015a4:	0552      	lsls	r2, r2, #21
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ac:	0852      	lsrs	r2, r2, #1
 80015ae:	3a01      	subs	r2, #1
 80015b0:	0652      	lsls	r2, r2, #25
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015b8:	0912      	lsrs	r2, r2, #4
 80015ba:	0452      	lsls	r2, r2, #17
 80015bc:	430a      	orrs	r2, r1
 80015be:	4930      	ldr	r1, [pc, #192]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 80015ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 80015d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015dc:	f7ff fb3a 	bl	8000c54 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fb36 	bl	8000c54 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e058      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001602:	e050      	b.n	80016a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e04f      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d148      	bne.n	80016a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800161a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800161e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a16      	ldr	r2, [pc, #88]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800162a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800162c:	f7ff fb12 	bl	8000c54 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb0e 	bl	8000c54 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e030      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x734>
 8001652:	e028      	b.n	80016a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d023      	beq.n	80016a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_RCC_OscConfig+0x780>)
 8001660:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff faf5 	bl	8000c54 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166c:	e00c      	b.n	8001688 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff faf1 	bl	8000c54 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d905      	bls.n	8001688 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e013      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
 8001680:	40021000 	.word	0x40021000
 8001684:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <HAL_RCC_OscConfig+0x7b0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ec      	bne.n	800166e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_RCC_OscConfig+0x7b0>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4905      	ldr	r1, [pc, #20]	@ (80016b0 <HAL_RCC_OscConfig+0x7b0>)
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_OscConfig+0x7b4>)
 800169c:	4013      	ands	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
 80016a0:	e001      	b.n	80016a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	feeefffc 	.word	0xfeeefffc

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0e7      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b75      	ldr	r3, [pc, #468]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d910      	bls.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b72      	ldr	r3, [pc, #456]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4970      	ldr	r1, [pc, #448]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b6e      	ldr	r3, [pc, #440]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0cf      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d010      	beq.n	800172a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4b66      	ldr	r3, [pc, #408]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001714:	429a      	cmp	r2, r3
 8001716:	d908      	bls.n	800172a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001718:	4b63      	ldr	r3, [pc, #396]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4960      	ldr	r1, [pc, #384]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d04c      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	4b5a      	ldr	r3, [pc, #360]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d121      	bne.n	800178e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0a6      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	4b54      	ldr	r3, [pc, #336]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d115      	bne.n	800178e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e09a      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800176e:	4b4e      	ldr	r3, [pc, #312]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e08e      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800177e:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e086      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800178e:	4b46      	ldr	r3, [pc, #280]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 0203 	bic.w	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4943      	ldr	r1, [pc, #268]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017a0:	f7ff fa58 	bl	8000c54 <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	e00a      	b.n	80017be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff fa54 	bl	8000c54 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e06e      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	4b3a      	ldr	r3, [pc, #232]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 020c 	and.w	r2, r3, #12
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d1eb      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d010      	beq.n	80017fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d208      	bcs.n	80017fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b2e      	ldr	r3, [pc, #184]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	492b      	ldr	r1, [pc, #172]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017fe:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d210      	bcs.n	800182e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180c:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 0207 	bic.w	r2, r3, #7
 8001814:	4923      	ldr	r1, [pc, #140]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181c:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <HAL_RCC_ClockConfig+0x1ec>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e036      	b.n	800189c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	4918      	ldr	r1, [pc, #96]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4910      	ldr	r1, [pc, #64]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800186c:	f000 f824 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	490b      	ldr	r1, [pc, #44]	@ (80018ac <HAL_RCC_ClockConfig+0x1f4>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	4a09      	ldr	r2, [pc, #36]	@ (80018b0 <HAL_RCC_ClockConfig+0x1f8>)
 800188a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_RCC_ClockConfig+0x1fc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f98f 	bl	8000bb4 <HAL_InitTick>
 8001896:	4603      	mov	r3, r0
 8001898:	72fb      	strb	r3, [r7, #11]

  return status;
 800189a:	7afb      	ldrb	r3, [r7, #11]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40022000 	.word	0x40022000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08006868 	.word	0x08006868
 80018b0:	20000008 	.word	0x20000008
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c6:	4b3e      	ldr	r3, [pc, #248]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d0:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x34>
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d121      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11e      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018ec:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e005      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001908:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001914:	4a2b      	ldr	r2, [pc, #172]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b04      	cmp	r3, #4
 800192e:	d102      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001930:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	e004      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d101      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x114>)
 800193e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d134      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0xa6>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d003      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0xac>
 800195c:	e005      	b.n	800196a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800195e:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001960:	617b      	str	r3, [r7, #20]
      break;
 8001962:	e005      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x114>)
 8001966:	617b      	str	r3, [r7, #20]
      break;
 8001968:	e002      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	617b      	str	r3, [r7, #20]
      break;
 800196e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	3301      	adds	r3, #1
 800197c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	fb03 f202 	mul.w	r2, r3, r2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	0e5b      	lsrs	r3, r3, #25
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	3301      	adds	r3, #1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019b0:	69bb      	ldr	r3, [r7, #24]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	@ 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08006878 	.word	0x08006878
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	007a1200 	.word	0x007a1200

080019d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019e8:	f7ff fa26 	bl	8000e38 <HAL_PWREx_GetVoltageRange>
 80019ec:	6178      	str	r0, [r7, #20]
 80019ee:	e014      	b.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	4a24      	ldr	r2, [pc, #144]	@ (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a08:	f7ff fa16 	bl	8000e38 <HAL_PWREx_GetVoltageRange>
 8001a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a20:	d10b      	bne.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b80      	cmp	r3, #128	@ 0x80
 8001a26:	d919      	bls.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a2c:	d902      	bls.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a2e:	2302      	movs	r3, #2
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e013      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e010      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b80      	cmp	r3, #128	@ 0x80
 8001a3e:	d902      	bls.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a40:	2303      	movs	r3, #3
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e00a      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	@ 0x80
 8001a4a:	d102      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	e004      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b70      	cmp	r3, #112	@ 0x70
 8001a56:	d101      	bne.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	4909      	ldr	r1, [pc, #36]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a6c:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022000 	.word	0x40022000

08001a90 <memset>:
 8001a90:	4402      	add	r2, r0
 8001a92:	4603      	mov	r3, r0
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d100      	bne.n	8001a9a <memset+0xa>
 8001a98:	4770      	bx	lr
 8001a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a9e:	e7f9      	b.n	8001a94 <memset+0x4>

08001aa0 <__libc_init_array>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8001ad8 <__libc_init_array+0x38>)
 8001aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8001adc <__libc_init_array+0x3c>)
 8001aa6:	1b64      	subs	r4, r4, r5
 8001aa8:	10a4      	asrs	r4, r4, #2
 8001aaa:	2600      	movs	r6, #0
 8001aac:	42a6      	cmp	r6, r4
 8001aae:	d109      	bne.n	8001ac4 <__libc_init_array+0x24>
 8001ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8001ae0 <__libc_init_array+0x40>)
 8001ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8001ae4 <__libc_init_array+0x44>)
 8001ab4:	f000 f818 	bl	8001ae8 <_init>
 8001ab8:	1b64      	subs	r4, r4, r5
 8001aba:	10a4      	asrs	r4, r4, #2
 8001abc:	2600      	movs	r6, #0
 8001abe:	42a6      	cmp	r6, r4
 8001ac0:	d105      	bne.n	8001ace <__libc_init_array+0x2e>
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}
 8001ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac8:	4798      	blx	r3
 8001aca:	3601      	adds	r6, #1
 8001acc:	e7ee      	b.n	8001aac <__libc_init_array+0xc>
 8001ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad2:	4798      	blx	r3
 8001ad4:	3601      	adds	r6, #1
 8001ad6:	e7f2      	b.n	8001abe <__libc_init_array+0x1e>
 8001ad8:	080068a8 	.word	0x080068a8
 8001adc:	080068a8 	.word	0x080068a8
 8001ae0:	080068a8 	.word	0x080068a8
 8001ae4:	080068ac 	.word	0x080068ac

08001ae8 <_init>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	bf00      	nop
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr

08001af4 <_fini>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	bf00      	nop
 8001af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001afa:	bc08      	pop	{r3}
 8001afc:	469e      	mov	lr, r3
 8001afe:	4770      	bx	lr
