
function_gen_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08001b48  08001b48  00002b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002198  08002198  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002198  08002198  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002198  08002198  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002198  08002198  00003198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800219c  0800219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080021a0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000010  080021b0  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080021b0  00004034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ed3  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001326  00000000  00000000  00008f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0000a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044e  00000000  00000000  0000a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002440c  00000000  00000000  0000ac7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d00  00000000  00000000  0002f08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de521  00000000  00000000  00034d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001132ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001538  00000000  00000000  001132f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00114828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b30 	.word	0x08001b30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001b30 	.word	0x08001b30

080001c8 <SPI_init>:
 *      Author: danny
 */
#include "DAC.h"

// Configure GPIOs and SPI Regs
void SPI_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    // PA4 - CS
    // PA5 - SCLK
    // PA6 - MISO
    // PA7 - MOSI

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001cc:	4b45      	ldr	r3, [pc, #276]	@ (80002e4 <SPI_init+0x11c>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d0:	4a44      	ldr	r2, [pc, #272]	@ (80002e4 <SPI_init+0x11c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    DAC_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001dc:	6a1b      	ldr	r3, [r3, #32]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	6213      	str	r3, [r2, #32]
    DAC_PORT->AFR[0] |= (5 << GPIO_AFRL_AFSEL4_Pos |
 80001e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001ea:	6a1b      	ldr	r3, [r3, #32]
 80001ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f0:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80001f4:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80001f8:	6213      	str	r3, [r2, #32]
                        5 << GPIO_AFRL_AFSEL5_Pos |
                        5 << GPIO_AFRL_AFSEL6_Pos |
                        5 << GPIO_AFRL_AFSEL7_Pos);

    DAC_PORT->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80001fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000208:	6013      	str	r3, [r2, #0]
    DAC_PORT->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 800020a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000214:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 8000218:	6013      	str	r3, [r2, #0]
    DAC_PORT->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 800021a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000228:	6053      	str	r3, [r2, #4]
    DAC_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800022a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000238:	60d3      	str	r3, [r2, #12]
    DAC_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 800023a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000244:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000248:	6093      	str	r3, [r2, #8]

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800024a:	4b26      	ldr	r3, [pc, #152]	@ (80002e4 <SPI_init+0x11c>)
 800024c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800024e:	4a25      	ldr	r2, [pc, #148]	@ (80002e4 <SPI_init+0x11c>)
 8000250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000254:	6613      	str	r3, [r2, #96]	@ 0x60

    SPI1->CR1 &= ~SPI_CR1_BR;  // baudRate = f_clk / 2
 8000256:	4b24      	ldr	r3, [pc, #144]	@ (80002e8 <SPI_init+0x120>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a23      	ldr	r2, [pc, #140]	@ (80002e8 <SPI_init+0x120>)
 800025c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000260:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_CPHA | SPI_CR1_CPOL);  // 1st edge and idle low
 8000262:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <SPI_init+0x120>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a20      	ldr	r2, [pc, #128]	@ (80002e8 <SPI_init+0x120>)
 8000268:	f023 0303 	bic.w	r3, r3, #3
 800026c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIOE | SPI_CR1_BIDIMODE);  // full duplex
 800026e:	4b1e      	ldr	r3, [pc, #120]	@ (80002e8 <SPI_init+0x120>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a1d      	ldr	r2, [pc, #116]	@ (80002e8 <SPI_init+0x120>)
 8000274:	f423 4344 	bic.w	r3, r3, #50176	@ 0xc400
 8000278:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_LSBFIRST;  // msb first
 800027a:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <SPI_init+0x120>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a1a      	ldr	r2, [pc, #104]	@ (80002e8 <SPI_init+0x120>)
 8000280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000284:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CRCEN;  // disable crc enable
 8000286:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <SPI_init+0x120>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <SPI_init+0x120>)
 800028c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000290:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_SSM;  // no sw slave select
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <SPI_init+0x120>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <SPI_init+0x120>)
 8000298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800029c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;  // master config
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <SPI_init+0x120>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <SPI_init+0x120>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	6013      	str	r3, [r2, #0]

    SPI1->CR2 |= DATA_FRAME_16BIT << SPI_CR2_DS_Pos; // 16bit Data frame
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <SPI_init+0x120>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <SPI_init+0x120>)
 80002b0:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80002b4:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_SSOE; // SS output is enabled in master mode
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <SPI_init+0x120>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <SPI_init+0x120>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_NSSP; // NSS pulse
 80002c2:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <SPI_init+0x120>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <SPI_init+0x120>)
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	6053      	str	r3, [r2, #4]

    SPI1->CR1 |= SPI_CR1_SPE;   // enable SPI
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <SPI_init+0x120>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <SPI_init+0x120>)
 80002d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002d8:	6013      	str	r3, [r2, #0]
    return;
 80002da:	bf00      	nop
}
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40013000 	.word	0x40013000

080002ec <DAC_init>:

void DAC_init() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
    SPI_init();
 80002f2:	f7ff ff69 	bl	80001c8 <SPI_init>
    uint16_t volt = volt_to_dac_val(2300);
 80002f6:	f643 3326 	movw	r3, #15142	@ 0x3b26
 80002fa:	80fb      	strh	r3, [r7, #6]
    DAC_write(volt);
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f804 	bl	800030c <DAC_write>
    return;
 8000304:	bf00      	nop
}
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <DAC_write>:

void DAC_write(uint16_t voltage) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
    while (!(SPI1->SR & SPI_SR_TXE));
 8000316:	bf00      	nop
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <DAC_write+0x2c>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <DAC_write+0xc>
    SPI1->DR = voltage;
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <DAC_write+0x2c>)
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	60d3      	str	r3, [r2, #12]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40013000 	.word	0x40013000

0800033c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	2b00      	cmp	r3, #0
 800034c:	db0b      	blt.n	8000366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 021f 	and.w	r2, r3, #31
 8000354:	4907      	ldr	r1, [pc, #28]	@ (8000374 <__NVIC_EnableIRQ+0x38>)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	095b      	lsrs	r3, r3, #5
 800035c:	2001      	movs	r0, #1
 800035e:	fa00 f202 	lsl.w	r2, r0, r2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000e100 	.word	0xe000e100

08000378 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	2b00      	cmp	r3, #0
 8000388:	db12      	blt.n	80003b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f003 021f 	and.w	r2, r3, #31
 8000390:	490a      	ldr	r1, [pc, #40]	@ (80003bc <__NVIC_DisableIRQ+0x44>)
 8000392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000396:	095b      	lsrs	r3, r3, #5
 8000398:	2001      	movs	r0, #1
 800039a:	fa00 f202 	lsl.w	r2, r0, r2
 800039e:	3320      	adds	r3, #32
 80003a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a4:	f3bf 8f4f 	dsb	sy
}
 80003a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003aa:	f3bf 8f6f 	isb	sy
}
 80003ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <square_wave_init>:
 *  Created on: Apr 26, 2024
 *      Author: danny
 */
#include "FuncGen.h"

void square_wave_init(uint16_t freq, uint8_t duty_cycle) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	80fb      	strh	r3, [r7, #6]
 80003cc:	4613      	mov	r3, r2
 80003ce:	717b      	strb	r3, [r7, #5]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80003d0:	4b33      	ldr	r3, [pc, #204]	@ (80004a0 <square_wave_init+0xe0>)
 80003d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003d4:	4a32      	ldr	r2, [pc, #200]	@ (80004a0 <square_wave_init+0xe0>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 80003dc:	201c      	movs	r0, #28
 80003de:	f7ff ffcb 	bl	8000378 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80003e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 80003f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~(ARR_BIT | CCR1_BIT);  
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000404:	f023 0303 	bic.w	r3, r3, #3
 8000408:	6113      	str	r3, [r2, #16]
    
    
    uint32_t max_arr = CPU_FREQ / freq ;
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	4a25      	ldr	r2, [pc, #148]	@ (80004a4 <square_wave_init+0xe4>)
 800040e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000412:	60fb      	str	r3, [r7, #12]
    TIM2->ARR = max_arr - 1;
 8000414:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3b01      	subs	r3, #1
 800041c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 800041e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->CCR1 = (uint32_t)(max_arr * ((float)duty_cycle / 100) - 1);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	ee07 3a90 	vmov	s15, r3
 800042c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	ee07 3a90 	vmov	s15, r3
 8000436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800043a:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 80004a8 <square_wave_init+0xe8>
 800043e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800044a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800044e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000456:	ee17 2a90 	vmov	r2, s15
 800045a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCER |= TIM_CCER_CC1E;
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6213      	str	r3, [r2, #32]
    TIM2->DIER |= (TIM_DIER_UIE | TIM_DIER_CC1IE);
 800046c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000476:	f043 0303 	orr.w	r3, r3, #3
 800047a:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(TIM2_IRQn);
 800047c:	201c      	movs	r0, #28
 800047e:	f7ff ff5d 	bl	800033c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000482:	b662      	cpsie	i
}
 8000484:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8000486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6013      	str	r3, [r2, #0]
    return;
 8000496:	bf00      	nop
}
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	003d0900 	.word	0x003d0900
 80004a8:	42c80000 	.word	0x42c80000

080004ac <continous_mode_init>:

void continous_mode_init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80004b0:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <continous_mode_init+0xac>)
 80004b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b4:	4a28      	ldr	r2, [pc, #160]	@ (8000558 <continous_mode_init+0xac>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 80004bc:	201c      	movs	r0, #28
 80004be:	f7ff ff5b 	bl	8000378 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80004c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004cc:	f023 0301 	bic.w	r3, r3, #1
 80004d0:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~(ARR_BIT | CCR1_BIT);  
 80004da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004de:	691b      	ldr	r3, [r3, #16]
 80004e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e4:	f023 0303 	bic.w	r3, r3, #3
 80004e8:	6113      	str	r3, [r2, #16]
    
    
    TIM2->ARR = -1;
 80004ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80004f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->PSC = 0;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004f8:	2200      	movs	r2, #0
 80004fa:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->CCR1 += NEXT_PERIOD - 1;
 80004fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000502:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000506:	339b      	adds	r3, #155	@ 0x9b
 8000508:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM2->DIER &= ~(TIM_DIER_UIE | TIM_DIER_CC1IE);
 800050a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000514:	f023 0303 	bic.w	r3, r3, #3
 8000518:	60d3      	str	r3, [r2, #12]
    TIM2->CCER |= TIM_CCER_CC1E;
 800051a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6213      	str	r3, [r2, #32]
    TIM2->DIER |= TIM_DIER_CC1IE;
 800052a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	60d3      	str	r3, [r2, #12]


    NVIC_EnableIRQ(TIM2_IRQn);
 800053a:	201c      	movs	r0, #28
 800053c:	f7ff fefe 	bl	800033c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000540:	b662      	cpsie	i
}
 8000542:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8000544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
    return;
 8000554:	bf00      	nop

}
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000

0800055c <keypad_init>:
 *      Author: danny
 */
#include "keypad.h"


void keypad_init() {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <keypad_init+0x78>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000564:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <keypad_init+0x78>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    // set rows as outputs
    // PC5-8
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 |GPIO_MODER_MODE8);
 800056c:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <keypad_init+0x7c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a19      	ldr	r2, [pc, #100]	@ (80005d8 <keypad_init+0x7c>)
 8000572:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 8000576:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);  // gp output mode
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <keypad_init+0x7c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a16      	ldr	r2, [pc, #88]	@ (80005d8 <keypad_init+0x7c>)
 800057e:	f443 33aa 	orr.w	r3, r3, #87040	@ 0x15400
 8000582:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->OTYPER &= ~(GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);  // push-pull
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <keypad_init+0x7c>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <keypad_init+0x7c>)
 800058a:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800058e:	6053      	str	r3, [r2, #4]
    KEYPAD_PORT->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);  // low speed
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <keypad_init+0x7c>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a10      	ldr	r2, [pc, #64]	@ (80005d8 <keypad_init+0x7c>)
 8000596:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 800059a:	6093      	str	r3, [r2, #8]
    KEYPAD_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);   // no resistor
 800059c:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <keypad_init+0x7c>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <keypad_init+0x7c>)
 80005a2:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 80005a6:	60d3      	str	r3, [r2, #12]

    // set cols as inputs
    // PC9-12
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 | GPIO_MODER_MODE12);    // input mode
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <keypad_init+0x7c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <keypad_init+0x7c>)
 80005ae:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80005b2:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->PUPDR  &= ~(GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11 | GPIO_PUPDR_PUPD12);
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <keypad_init+0x7c>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <keypad_init+0x7c>)
 80005ba:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80005be:	60d3      	str	r3, [r2, #12]
    KEYPAD_PORT->PUPDR  |= (GPIO_PUPDR_PUPD9_1 | GPIO_PUPDR_PUPD10_1 | GPIO_PUPDR_PUPD11_1 | GPIO_PUPDR_PUPD12_1); // pull down resistor
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <keypad_init+0x7c>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <keypad_init+0x7c>)
 80005c6:	f043 732a 	orr.w	r3, r3, #44564480	@ 0x2a80000
 80005ca:	60d3      	str	r3, [r2, #12]

    // set all cols high
    keypad_setAllCols();
 80005cc:	f000 f806 	bl	80005dc <keypad_setAllCols>

    return;
 80005d0:	bf00      	nop
}
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000800 	.word	0x48000800

080005dc <keypad_setAllCols>:

void keypad_setAllCols() {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
    KEYPAD_PORT->ODR |= ROW_MASK;
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <keypad_setAllCols+0x1c>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <keypad_setAllCols+0x1c>)
 80005e6:	f443 73f0 	orr.w	r3, r3, #480	@ 0x1e0
 80005ea:	6153      	str	r3, [r2, #20]
    return;
 80005ec:	bf00      	nop
}
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	48000800 	.word	0x48000800

080005fc <delay>:

void delay(uint32_t n) {
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    for (uint32_t delay_cnt=0; delay_cnt<n; delay_cnt++);
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e002      	b.n	8000610 <delay+0x14>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f8      	bcc.n	800060a <delay+0xe>
    return;
 8000618:	bf00      	nop
}
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <keypad_read>:

int8_t keypad_read() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
    if (!(GPIOC->IDR & COL_MASK)) {
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <keypad_read+0x9c>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 8000632:	2b00      	cmp	r3, #0
 8000634:	d102      	bne.n	800063c <keypad_read+0x18>
        return KEYPAD_NO_PRESS;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800063a:	e03c      	b.n	80006b6 <keypad_read+0x92>
    }
    static const uint8_t btns[NUM_ROWS][NUM_COLS] = {{1, 2, 3, KEYPAD_A}, {4, 5, 6, KEYPAD_B}, {7, 8, 9, KEYPAD_C}, {KEYPAD_STAR, 0, KEYPAD_POUND, KEYPAD_D}};
    uint8_t col, row;
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	e032      	b.n	80006a8 <keypad_read+0x84>
        GPIOC->ODR = (GPIOC->ODR & ~ROW_MASK) | (1 << (i + ROW_PIN_START));
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <keypad_read+0x9c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	3205      	adds	r2, #5
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	4611      	mov	r1, r2
 8000656:	4a1a      	ldr	r2, [pc, #104]	@ (80006c0 <keypad_read+0x9c>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6153      	str	r3, [r2, #20]
        delay(5);
 800065c:	2005      	movs	r0, #5
 800065e:	f7ff ffcd 	bl	80005fc <delay>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <keypad_read+0x9c>)
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 800066a:	2b00      	cmp	r3, #0
 800066c:	d018      	beq.n	80006a0 <keypad_read+0x7c>
        row = i;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	70fb      	strb	r3, [r7, #3]
        col = col_pins_to_int(COL_PINS);
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <keypad_read+0x9c>)
 8000674:	691b      	ldr	r3, [r3, #16]
 8000676:	0a5b      	lsrs	r3, r3, #9
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f821 	bl	80006c8 <col_pins_to_int>
 8000686:	4603      	mov	r3, r0
 8000688:	70bb      	strb	r3, [r7, #2]
        keypad_setAllCols();
 800068a:	f7ff ffa7 	bl	80005dc <keypad_setAllCols>
        return btns[row][col];
 800068e:	78fa      	ldrb	r2, [r7, #3]
 8000690:	78bb      	ldrb	r3, [r7, #2]
 8000692:	490c      	ldr	r1, [pc, #48]	@ (80006c4 <keypad_read+0xa0>)
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	440a      	add	r2, r1
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	e00a      	b.n	80006b6 <keypad_read+0x92>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 80006a0:	bf00      	nop
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d9c9      	bls.n	8000642 <keypad_read+0x1e>
    }
    keypad_setAllCols();
 80006ae:	f7ff ff95 	bl	80005dc <keypad_setAllCols>
    return KEYPAD_NO_PRESS;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	48000800 	.word	0x48000800
 80006c4:	08001b48 	.word	0x08001b48

080006c8 <col_pins_to_int>:

uint8_t col_pins_to_int(uint8_t pins) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
    switch (pins) {
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	d81a      	bhi.n	8000710 <col_pins_to_int+0x48>
 80006da:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <col_pins_to_int+0x18>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	08000701 	.word	0x08000701
 80006e4:	08000705 	.word	0x08000705
 80006e8:	08000711 	.word	0x08000711
 80006ec:	08000709 	.word	0x08000709
 80006f0:	08000711 	.word	0x08000711
 80006f4:	08000711 	.word	0x08000711
 80006f8:	08000711 	.word	0x08000711
 80006fc:	0800070d 	.word	0x0800070d
        case COL1: return 0;
 8000700:	2300      	movs	r3, #0
 8000702:	e006      	b.n	8000712 <col_pins_to_int+0x4a>
        case COL2: return 1;
 8000704:	2301      	movs	r3, #1
 8000706:	e004      	b.n	8000712 <col_pins_to_int+0x4a>
        case COL3: return 2;
 8000708:	2302      	movs	r3, #2
 800070a:	e002      	b.n	8000712 <col_pins_to_int+0x4a>
        case COL4: return 3;
 800070c:	2303      	movs	r3, #3
 800070e:	e000      	b.n	8000712 <col_pins_to_int+0x4a>
    }
    return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <keypad_read_oneshot>:

int8_t keypad_read_oneshot() {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    int8_t key;
    int8_t prev_key = KEYPAD_NO_PRESS;
 8000726:	23ff      	movs	r3, #255	@ 0xff
 8000728:	71fb      	strb	r3, [r7, #7]
    while (1) {
        key = keypad_read();
 800072a:	f7ff ff7b 	bl	8000624 <keypad_read>
 800072e:	4603      	mov	r3, r0
 8000730:	71bb      	strb	r3, [r7, #6]
        delay(300); // terrible way to debounce
 8000732:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000736:	f7ff ff61 	bl	80005fc <delay>
        
        // one shot key press 
        if (prev_key != KEYPAD_NO_PRESS && key == KEYPAD_NO_PRESS) {
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000742:	d007      	beq.n	8000754 <keypad_read_oneshot+0x34>
 8000744:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800074c:	d102      	bne.n	8000754 <keypad_read_oneshot+0x34>
            return prev_key;
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	e009      	b.n	8000768 <keypad_read_oneshot+0x48>
        }
        if (key == KEYPAD_NO_PRESS) continue;
 8000754:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800075c:	d002      	beq.n	8000764 <keypad_read_oneshot+0x44>
        prev_key = key;
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	e7e2      	b.n	800072a <keypad_read_oneshot+0xa>
        if (key == KEYPAD_NO_PRESS) continue;
 8000764:	bf00      	nop
        key = keypad_read();
 8000766:	e7e0      	b.n	800072a <keypad_read_oneshot+0xa>
    }
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <main>:
uint16_t wave_lut_ind;
uint16_t freq = 500;
uint8_t duty_cycle = 50;


int main(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
    HAL_Init();
 8000776:	f000 fa28 	bl	8000bca <HAL_Init>
    SystemClock_Config();
 800077a:	f000 f94b 	bl	8000a14 <SystemClock_Config>

    DAC_init();
 800077e:	f7ff fdb5 	bl	80002ec <DAC_init>
    keypad_init();
 8000782:	f7ff feeb 	bl	800055c <keypad_init>
    square_wave_init(freq, duty_cycle);
 8000786:	4b51      	ldr	r3, [pc, #324]	@ (80008cc <main+0x15c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	4a51      	ldr	r2, [pc, #324]	@ (80008d0 <main+0x160>)
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe15 	bl	80003c0 <square_wave_init>
    
    int8_t key;
    while (1) {
        key = keypad_read_oneshot();
 8000796:	f7ff ffc3 	bl	8000720 <keypad_read_oneshot>
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
        if (isFreqChangePin(key)) {
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d01e      	beq.n	80007e4 <main+0x74>
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	d81b      	bhi.n	80007e4 <main+0x74>
            freq = key * FREQ_MIN;
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	461a      	mov	r2, r3
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	0091      	lsls	r1, r2, #2
 80007bc:	461a      	mov	r2, r3
 80007be:	460b      	mov	r3, r1
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b41      	ldr	r3, [pc, #260]	@ (80008cc <main+0x15c>)
 80007c8:	801a      	strh	r2, [r3, #0]
            if (state == SQUARE) square_wave_init(freq, duty_cycle);
 80007ca:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <main+0x164>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d17b      	bne.n	80008ca <main+0x15a>
 80007d2:	4b3e      	ldr	r3, [pc, #248]	@ (80008cc <main+0x15c>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	4a3e      	ldr	r2, [pc, #248]	@ (80008d0 <main+0x160>)
 80007d8:	7812      	ldrb	r2, [r2, #0]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fdef 	bl	80003c0 <square_wave_init>
 80007e2:	e072      	b.n	80008ca <main+0x15a>
        }
        else if (isDutyChangePin(key) && state == SQUARE) {
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d007      	beq.n	80007fc <main+0x8c>
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b0a      	cmp	r3, #10
 80007f2:	d003      	beq.n	80007fc <main+0x8c>
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b0b      	cmp	r3, #11
 80007fa:	d123      	bne.n	8000844 <main+0xd4>
 80007fc:	4b35      	ldr	r3, [pc, #212]	@ (80008d4 <main+0x164>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11f      	bne.n	8000844 <main+0xd4>
            switch (key) {
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b0b      	cmp	r3, #11
 800080a:	d00e      	beq.n	800082a <main+0xba>
 800080c:	2b0b      	cmp	r3, #11
 800080e:	dc10      	bgt.n	8000832 <main+0xc2>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <main+0xaa>
 8000814:	2b0a      	cmp	r3, #10
 8000816:	d004      	beq.n	8000822 <main+0xb2>
 8000818:	e00b      	b.n	8000832 <main+0xc2>
                case 0:
                    duty_cycle = 50;
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <main+0x160>)
 800081c:	2232      	movs	r2, #50	@ 0x32
 800081e:	701a      	strb	r2, [r3, #0]
                    break;
 8000820:	e007      	b.n	8000832 <main+0xc2>
                case KEYPAD_STAR:
                    duty_cycle = 10;
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <main+0x160>)
 8000824:	220a      	movs	r2, #10
 8000826:	701a      	strb	r2, [r3, #0]
                    break;
 8000828:	e003      	b.n	8000832 <main+0xc2>
                case KEYPAD_POUND:
                    duty_cycle = 90;
 800082a:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <main+0x160>)
 800082c:	225a      	movs	r2, #90	@ 0x5a
 800082e:	701a      	strb	r2, [r3, #0]
                    break;
 8000830:	bf00      	nop
            }
            square_wave_init(freq, duty_cycle);
 8000832:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <main+0x15c>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	4a26      	ldr	r2, [pc, #152]	@ (80008d0 <main+0x160>)
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fdbf 	bl	80003c0 <square_wave_init>
 8000842:	e042      	b.n	80008ca <main+0x15a>
        }
        else if (isWaveChangePin(key)) {
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b05      	cmp	r3, #5
 8000848:	d9a5      	bls.n	8000796 <main+0x26>
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b09      	cmp	r3, #9
 800084e:	d8a2      	bhi.n	8000796 <main+0x26>
            switch (key) {
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	3b06      	subs	r3, #6
 8000856:	2b03      	cmp	r3, #3
 8000858:	d834      	bhi.n	80008c4 <main+0x154>
 800085a:	a201      	add	r2, pc, #4	@ (adr r2, 8000860 <main+0xf0>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	08000871 	.word	0x08000871
 8000864:	08000899 	.word	0x08000899
 8000868:	08000885 	.word	0x08000885
 800086c:	080008ad 	.word	0x080008ad
                case SINE_KEY:
                    if (state == SQUARE) continous_mode_init();
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <main+0x164>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <main+0x10c>
 8000878:	f7ff fe18 	bl	80004ac <continous_mode_init>
                    state = SINE;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <main+0x164>)
 800087e:	2202      	movs	r2, #2
 8000880:	701a      	strb	r2, [r3, #0]
                    break;
 8000882:	e01f      	b.n	80008c4 <main+0x154>
                case TRIANGLE_KEY:
                    if (state == SQUARE) continous_mode_init();
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <main+0x164>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <main+0x120>
 800088c:	f7ff fe0e 	bl	80004ac <continous_mode_init>
                    state = TRIANGLE;
 8000890:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <main+0x164>)
 8000892:	2203      	movs	r2, #3
 8000894:	701a      	strb	r2, [r3, #0]
                    break;
 8000896:	e015      	b.n	80008c4 <main+0x154>
                case SAWTOOTH_KEY:
                    if (state == SQUARE) continous_mode_init();
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <main+0x164>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d101      	bne.n	80008a4 <main+0x134>
 80008a0:	f7ff fe04 	bl	80004ac <continous_mode_init>
                    state = SAWTOOTH;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <main+0x164>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
                    break;
 80008aa:	e00b      	b.n	80008c4 <main+0x154>
                case SQUARE_KEY:
                    square_wave_init(freq, duty_cycle);
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <main+0x15c>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <main+0x160>)
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fd82 	bl	80003c0 <square_wave_init>
                    state = SQUARE;
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <main+0x164>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
                    break;
 80008c2:	bf00      	nop
            }
            wave_lut_ind = 0;
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <main+0x168>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
        key = keypad_read_oneshot();
 80008ca:	e764      	b.n	8000796 <main+0x26>
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000002 	.word	0x20000002
 80008d4:	2000002c 	.word	0x2000002c
 80008d8:	2000002e 	.word	0x2000002e

080008dc <TIM2_IRQHandler>:
    return 0;
}



void TIM2_IRQHandler(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    switch (state) {
 80008e0:	4b45      	ldr	r3, [pc, #276]	@ (80009f8 <TIM2_IRQHandler+0x11c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d87c      	bhi.n	80009e2 <TIM2_IRQHandler+0x106>
 80008e8:	a201      	add	r2, pc, #4	@ (adr r2, 80008f0 <TIM2_IRQHandler+0x14>)
 80008ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	bf00      	nop
 80008f0:	08000901 	.word	0x08000901
 80008f4:	08000923 	.word	0x08000923
 80008f8:	08000963 	.word	0x08000963
 80008fc:	080009a3 	.word	0x080009a3
        case SQUARE:
            if (TIM2->SR & CCR1_BIT) {
 8000900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d004      	beq.n	8000918 <TIM2_IRQHandler+0x3c>
                DAC_write(volt_to_dac_val(MIN_FUNC_VOLTAGE));
 800090e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8000912:	f7ff fcfb 	bl	800030c <DAC_write>
            } else {
                DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
            }
            break;
 8000916:	e065      	b.n	80009e4 <TIM2_IRQHandler+0x108>
                DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
 8000918:	f643 608a 	movw	r0, #16010	@ 0x3e8a
 800091c:	f7ff fcf6 	bl	800030c <DAC_write>
            break;
 8000920:	e060      	b.n	80009e4 <TIM2_IRQHandler+0x108>
        case SAWTOOTH:
            wave_lut_ind = (wave_lut_ind + freq / FREQ_MIN) & WAVE_LUT_MASK;
 8000922:	4b36      	ldr	r3, [pc, #216]	@ (80009fc <TIM2_IRQHandler+0x120>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	4a36      	ldr	r2, [pc, #216]	@ (8000a00 <TIM2_IRQHandler+0x124>)
 8000928:	fba2 2303 	umull	r2, r3, r2, r3
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	4413      	add	r3, r2
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 800093e:	801a      	strh	r2, [r3, #0]
            DAC_write(SAWTOOTH_LUT[wave_lut_ind]);
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <TIM2_IRQHandler+0x12c>)
 8000948:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fcdd 	bl	800030c <DAC_write>
            TIM2->CCR1 += NEXT_PERIOD;
 8000952:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000958:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800095c:	339c      	adds	r3, #156	@ 0x9c
 800095e:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 8000960:	e040      	b.n	80009e4 <TIM2_IRQHandler+0x108>
        case SINE:
            wave_lut_ind = (wave_lut_ind + freq / FREQ_MIN) & WAVE_LUT_MASK;
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <TIM2_IRQHandler+0x120>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	4a26      	ldr	r2, [pc, #152]	@ (8000a00 <TIM2_IRQHandler+0x124>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	095b      	lsrs	r3, r3, #5
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 800097e:	801a      	strh	r2, [r3, #0]
            DAC_write(SINE_LUT[wave_lut_ind]);
 8000980:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <TIM2_IRQHandler+0x130>)
 8000988:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fcbd 	bl	800030c <DAC_write>
            TIM2->CCR1 += NEXT_PERIOD;
 8000992:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000998:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800099c:	339c      	adds	r3, #156	@ 0x9c
 800099e:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 80009a0:	e020      	b.n	80009e4 <TIM2_IRQHandler+0x108>
        case TRIANGLE:
            wave_lut_ind = (wave_lut_ind + freq / FREQ_MIN) & WAVE_LUT_MASK;
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <TIM2_IRQHandler+0x120>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	4a16      	ldr	r2, [pc, #88]	@ (8000a00 <TIM2_IRQHandler+0x124>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	095b      	lsrs	r3, r3, #5
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 80009be:	801a      	strh	r2, [r3, #0]
            DAC_write(TRIANGLE_LUT[wave_lut_ind]);
 80009c0:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <TIM2_IRQHandler+0x128>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <TIM2_IRQHandler+0x134>)
 80009c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fc9d 	bl	800030c <DAC_write>
            TIM2->CCR1 += NEXT_PERIOD;
 80009d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009dc:	339c      	adds	r3, #156	@ 0x9c
 80009de:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 80009e0:	e000      	b.n	80009e4 <TIM2_IRQHandler+0x108>
        default: break;
 80009e2:	bf00      	nop
    }    

    TIM2->SR &= ~(CCR1_BIT | ARR_BIT);
 80009e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ee:	f023 0303 	bic.w	r3, r3, #3
 80009f2:	6113      	str	r3, [r2, #16]
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	20000000 	.word	0x20000000
 8000a00:	51eb851f 	.word	0x51eb851f
 8000a04:	2000002e 	.word	0x2000002e
 8000a08:	08001f58 	.word	0x08001f58
 8000a0c:	08001d58 	.word	0x08001d58
 8000a10:	08001b58 	.word	0x08001b58

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	@ 0x58
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2244      	movs	r2, #68	@ 0x44
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f858 	bl	8001ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a3a:	f000 fa2f 	bl	8000e9c <HAL_PWREx_ControlVoltageScaling>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a44:	f000 f82c 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a54:	2360      	movs	r3, #96	@ 0x60
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fa71 	bl	8000f48 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 f818 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fe39 	bl	8001700 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a94:	f000 f804 	bl	8000aa0 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3758      	adds	r7, #88	@ 0x58
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <NMI_Handler+0x4>

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 f893 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f000 ff9f 	bl	8001ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000baa:	f7ff fde1 	bl	8000770 <main>

08000bae <LoopForever>:

LoopForever:
    b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bbc:	080021a0 	.word	0x080021a0
  ldr r2, =_sbss
 8000bc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bc4:	20000034 	.word	0x20000034

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>

08000bca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f91f 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f000 f80e 	bl	8000bfc <HAL_InitTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	e001      	b.n	8000bf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bec:	f7ff ff5e 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_InitTick+0x6c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d023      	beq.n	8000c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <HAL_InitTick+0x70>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f91d 	bl	8000e66 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10f      	bne.n	8000c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d809      	bhi.n	8000c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 f8f5 	bl	8000e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_InitTick+0x74>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e001      	b.n	8000c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	20000030 	.word	0x20000030

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000030 	.word	0x20000030

08000cb4 <__NVIC_SetPriorityGrouping>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	@ (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	@ (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	@ 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	@ 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff47 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff5c 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff8e 	bl	8000d6c <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffb0 	bl	8000dd4 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40007000 	.word	0x40007000

08000e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eaa:	d130      	bne.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eac:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eb8:	d038      	beq.n	8000f2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2232      	movs	r2, #50	@ 0x32
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	3301      	adds	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee0:	e002      	b.n	8000ee8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ef4:	d102      	bne.n	8000efc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f2      	bne.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f08:	d110      	bne.n	8000f2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e00f      	b.n	8000f2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f1a:	d007      	beq.n	8000f2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f24:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	20000004 	.word	0x20000004
 8000f44:	431bde83 	.word	0x431bde83

08000f48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e3ca      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5a:	4b97      	ldr	r3, [pc, #604]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f64:	4b94      	ldr	r3, [pc, #592]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80e4 	beq.w	8001144 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <HAL_RCC_OscConfig+0x4a>
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	f040 808b 	bne.w	80010a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8087 	bne.w	80010a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f92:	4b89      	ldr	r3, [pc, #548]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x62>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e3a2      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a1a      	ldr	r2, [r3, #32]
 8000fae:	4b82      	ldr	r3, [pc, #520]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x7c>
 8000fba:	4b7f      	ldr	r3, [pc, #508]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fc2:	e005      	b.n	8000fd0 <HAL_RCC_OscConfig+0x88>
 8000fc4:	4b7c      	ldr	r3, [pc, #496]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d223      	bcs.n	800101c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fd1d 	bl	8001a18 <RCC_SetFlashLatencyFromMSIRange>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e383      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe8:	4b73      	ldr	r3, [pc, #460]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a72      	ldr	r2, [pc, #456]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b70      	ldr	r3, [pc, #448]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	496d      	ldr	r1, [pc, #436]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001006:	4b6c      	ldr	r3, [pc, #432]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	4968      	ldr	r1, [pc, #416]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001016:	4313      	orrs	r3, r2
 8001018:	604b      	str	r3, [r1, #4]
 800101a:	e025      	b.n	8001068 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101c:	4b66      	ldr	r3, [pc, #408]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a65      	ldr	r2, [pc, #404]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b63      	ldr	r3, [pc, #396]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4960      	ldr	r1, [pc, #384]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800103a:	4b5f      	ldr	r3, [pc, #380]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	495b      	ldr	r1, [pc, #364]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fcdd 	bl	8001a18 <RCC_SetFlashLatencyFromMSIRange>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e343      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001068:	f000 fc4a 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 800106c:	4602      	mov	r2, r0
 800106e:	4b52      	ldr	r3, [pc, #328]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	4950      	ldr	r1, [pc, #320]	@ (80011bc <HAL_RCC_OscConfig+0x274>)
 800107a:	5ccb      	ldrb	r3, [r1, r3]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	4a4e      	ldr	r2, [pc, #312]	@ (80011c0 <HAL_RCC_OscConfig+0x278>)
 8001086:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001088:	4b4e      	ldr	r3, [pc, #312]	@ (80011c4 <HAL_RCC_OscConfig+0x27c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fdb5 	bl	8000bfc <HAL_InitTick>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d052      	beq.n	8001142 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	e327      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d032      	beq.n	800110e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010a8:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a42      	ldr	r2, [pc, #264]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fdf2 	bl	8000c9c <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010bc:	f7ff fdee 	bl	8000c9c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e310      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010ce:	4b3a      	ldr	r3, [pc, #232]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010da:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a36      	ldr	r2, [pc, #216]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b34      	ldr	r3, [pc, #208]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4931      	ldr	r1, [pc, #196]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f8:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	492c      	ldr	r1, [pc, #176]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e01a      	b.n	8001144 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800111a:	f7ff fdbf 	bl	8000c9c <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001122:	f7ff fdbb 	bl	8000c9c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e2dd      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x1da>
 8001140:	e000      	b.n	8001144 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001142:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d074      	beq.n	800123a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d005      	beq.n	8001162 <HAL_RCC_OscConfig+0x21a>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b0c      	cmp	r3, #12
 800115a:	d10e      	bne.n	800117a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d10b      	bne.n	800117a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d064      	beq.n	8001238 <HAL_RCC_OscConfig+0x2f0>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d160      	bne.n	8001238 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e2ba      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x24a>
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 800118a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e026      	b.n	80011e0 <HAL_RCC_OscConfig+0x298>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800119a:	d115      	bne.n	80011c8 <HAL_RCC_OscConfig+0x280>
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80011a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a02      	ldr	r2, [pc, #8]	@ (80011b8 <HAL_RCC_OscConfig+0x270>)
 80011ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e014      	b.n	80011e0 <HAL_RCC_OscConfig+0x298>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	08002158 	.word	0x08002158
 80011c0:	20000004 	.word	0x20000004
 80011c4:	20000008 	.word	0x20000008
 80011c8:	4ba0      	ldr	r3, [pc, #640]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a9f      	ldr	r2, [pc, #636]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b9d      	ldr	r3, [pc, #628]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a9c      	ldr	r2, [pc, #624]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fd58 	bl	8000c9c <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fd54 	bl	8000c9c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	@ 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e276      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001202:	4b92      	ldr	r3, [pc, #584]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2a8>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fd44 	bl	8000c9c <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fd40 	bl	8000c9c <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e262      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122a:	4b88      	ldr	r3, [pc, #544]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x2d0>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d060      	beq.n	8001308 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x310>
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b0c      	cmp	r3, #12
 8001250:	d119      	bne.n	8001286 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d116      	bne.n	8001286 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001258:	4b7c      	ldr	r3, [pc, #496]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_OscConfig+0x328>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e23f      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b76      	ldr	r3, [pc, #472]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	4973      	ldr	r1, [pc, #460]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001284:	e040      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d023      	beq.n	80012d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128e:	4b6f      	ldr	r3, [pc, #444]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6e      	ldr	r2, [pc, #440]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fcff 	bl	8000c9c <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fcfb 	bl	8000c9c <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e21d      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b4:	4b65      	ldr	r3, [pc, #404]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b62      	ldr	r3, [pc, #392]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	061b      	lsls	r3, r3, #24
 80012ce:	495f      	ldr	r1, [pc, #380]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e018      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b5d      	ldr	r3, [pc, #372]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5c      	ldr	r2, [pc, #368]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80012dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff fcdb 	bl	8000c9c <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fcd7 	bl	8000c9c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1f9      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012fc:	4b53      	ldr	r3, [pc, #332]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03c      	beq.n	800138e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01c      	beq.n	8001356 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131c:	4b4b      	ldr	r3, [pc, #300]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001322:	4a4a      	ldr	r2, [pc, #296]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fcb6 	bl	8000c9c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fcb2 	bl	8000c9c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1d4      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001346:	4b41      	ldr	r3, [pc, #260]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ef      	beq.n	8001334 <HAL_RCC_OscConfig+0x3ec>
 8001354:	e01b      	b.n	800138e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135c:	4a3b      	ldr	r2, [pc, #236]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fc99 	bl	8000c9c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fc95 	bl	8000c9c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1b7      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001380:	4b32      	ldr	r3, [pc, #200]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ef      	bne.n	800136e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80a6 	beq.w	80014e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013a0:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10d      	bne.n	80013c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	4b27      	ldr	r3, [pc, #156]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	4a26      	ldr	r2, [pc, #152]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_RCC_OscConfig+0x508>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d118      	bne.n	8001406 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_RCC_OscConfig+0x508>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_RCC_OscConfig+0x508>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e0:	f7ff fc5c 	bl	8000c9c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff fc58 	bl	8000c9c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e17a      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_RCC_OscConfig+0x508>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_RCC_OscConfig+0x4d8>
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001414:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800141e:	e029      	b.n	8001474 <HAL_RCC_OscConfig+0x52c>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d115      	bne.n	8001454 <HAL_RCC_OscConfig+0x50c>
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800142e:	4a07      	ldr	r2, [pc, #28]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 800143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143e:	4a03      	ldr	r2, [pc, #12]	@ (800144c <HAL_RCC_OscConfig+0x504>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001448:	e014      	b.n	8001474 <HAL_RCC_OscConfig+0x52c>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40007000 	.word	0x40007000
 8001454:	4b9c      	ldr	r3, [pc, #624]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800145a:	4a9b      	ldr	r2, [pc, #620]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001464:	4b98      	ldr	r3, [pc, #608]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800146a:	4a97      	ldr	r2, [pc, #604]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800146c:	f023 0304 	bic.w	r3, r3, #4
 8001470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d016      	beq.n	80014aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fc0e 	bl	8000c9c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fc0a 	bl	8000c9c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e12a      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149a:	4b8b      	ldr	r3, [pc, #556]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0ed      	beq.n	8001484 <HAL_RCC_OscConfig+0x53c>
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014aa:	f7ff fbf7 	bl	8000c9c <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fbf3 	bl	8000c9c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e113      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c8:	4b7f      	ldr	r3, [pc, #508]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ed      	bne.n	80014b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	4b7a      	ldr	r3, [pc, #488]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	4a79      	ldr	r2, [pc, #484]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80014e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80fe 	beq.w	80016ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	f040 80d0 	bne.w	800169c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014fc:	4b72      	ldr	r3, [pc, #456]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0203 	and.w	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150c:	429a      	cmp	r2, r3
 800150e:	d130      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	3b01      	subs	r3, #1
 800151c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d127      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800152c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d11f      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800153c:	2a07      	cmp	r2, #7
 800153e:	bf14      	ite	ne
 8001540:	2201      	movne	r2, #1
 8001542:	2200      	moveq	r2, #0
 8001544:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001546:	4293      	cmp	r3, r2
 8001548:	d113      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	3b01      	subs	r3, #1
 8001558:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d109      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	3b01      	subs	r3, #1
 800156c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d06e      	beq.n	8001650 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d069      	beq.n	800164c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001578:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001584:	4b50      	ldr	r3, [pc, #320]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0ad      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001594:	4b4c      	ldr	r3, [pc, #304]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a4b      	ldr	r2, [pc, #300]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800159a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800159e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015a0:	f7ff fb7c 	bl	8000c9c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff fb78 	bl	8000c9c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e09a      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ba:	4b43      	ldr	r3, [pc, #268]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	4b40      	ldr	r3, [pc, #256]	@ (80016cc <HAL_RCC_OscConfig+0x784>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015d6:	3a01      	subs	r2, #1
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	4311      	orrs	r1, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015e0:	0212      	lsls	r2, r2, #8
 80015e2:	4311      	orrs	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015e8:	0852      	lsrs	r2, r2, #1
 80015ea:	3a01      	subs	r2, #1
 80015ec:	0552      	lsls	r2, r2, #21
 80015ee:	4311      	orrs	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015f4:	0852      	lsrs	r2, r2, #1
 80015f6:	3a01      	subs	r2, #1
 80015f8:	0652      	lsls	r2, r2, #25
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001600:	0912      	lsrs	r2, r2, #4
 8001602:	0452      	lsls	r2, r2, #17
 8001604:	430a      	orrs	r2, r1
 8001606:	4930      	ldr	r1, [pc, #192]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001608:	4313      	orrs	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800160c:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a2d      	ldr	r2, [pc, #180]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001618:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a2a      	ldr	r2, [pc, #168]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800161e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001624:	f7ff fb3a 	bl	8000c9c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fb36 	bl	8000c9c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e058      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800164a:	e050      	b.n	80016ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e04f      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d148      	bne.n	80016ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001674:	f7ff fb12 	bl	8000c9c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb0e 	bl	8000c9c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e030      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x734>
 800169a:	e028      	b.n	80016ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d023      	beq.n	80016ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_RCC_OscConfig+0x780>)
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff faf5 	bl	8000c9c <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	e00c      	b.n	80016d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff faf1 	bl	8000c9c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d905      	bls.n	80016d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e013      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_RCC_OscConfig+0x7b0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ec      	bne.n	80016b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_RCC_OscConfig+0x7b0>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4905      	ldr	r1, [pc, #20]	@ (80016f8 <HAL_RCC_OscConfig+0x7b0>)
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_RCC_OscConfig+0x7b4>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
 80016e8:	e001      	b.n	80016ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3720      	adds	r7, #32
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	feeefffc 	.word	0xfeeefffc

08001700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0e7      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b75      	ldr	r3, [pc, #468]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d910      	bls.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b72      	ldr	r3, [pc, #456]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0207 	bic.w	r2, r3, #7
 800172a:	4970      	ldr	r1, [pc, #448]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b6e      	ldr	r3, [pc, #440]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cf      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d010      	beq.n	8001772 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4b66      	ldr	r3, [pc, #408]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800175c:	429a      	cmp	r2, r3
 800175e:	d908      	bls.n	8001772 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b63      	ldr	r3, [pc, #396]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4960      	ldr	r1, [pc, #384]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d04c      	beq.n	8001818 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001786:	4b5a      	ldr	r3, [pc, #360]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d121      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0a6      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179e:	4b54      	ldr	r3, [pc, #336]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d115      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e09a      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b6:	4b4e      	ldr	r3, [pc, #312]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e08e      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c6:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e086      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4943      	ldr	r1, [pc, #268]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e8:	f7ff fa58 	bl	8000c9c <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff fa54 	bl	8000c9c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e06e      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d010      	beq.n	8001846 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001830:	429a      	cmp	r2, r3
 8001832:	d208      	bcs.n	8001846 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	492b      	ldr	r1, [pc, #172]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001846:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d210      	bcs.n	8001876 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 0207 	bic.w	r2, r3, #7
 800185c:	4923      	ldr	r1, [pc, #140]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_RCC_ClockConfig+0x1ec>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e036      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	4918      	ldr	r1, [pc, #96]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4910      	ldr	r1, [pc, #64]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b4:	f000 f824 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	490b      	ldr	r1, [pc, #44]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f4>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1f8>)
 80018d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1fc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f98f 	bl	8000bfc <HAL_InitTick>
 80018de:	4603      	mov	r3, r0
 80018e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80018e2:	7afb      	ldrb	r3, [r7, #11]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08002158 	.word	0x08002158
 80018f8:	20000004 	.word	0x20000004
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001918:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d121      	bne.n	8001972 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d11e      	bne.n	8001972 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001934:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e005      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001950:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800195c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10d      	bne.n	8001988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d102      	bne.n	800197e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001978:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x110>)
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e004      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d101      	bne.n	8001988 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001984:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001986:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d134      	bne.n	80019f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d003      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0xac>
 80019a4:	e005      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80019a8:	617b      	str	r3, [r7, #20]
      break;
 80019aa:	e005      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x114>)
 80019ae:	617b      	str	r3, [r7, #20]
      break;
 80019b0:	e002      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	617b      	str	r3, [r7, #20]
      break;
 80019b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	3301      	adds	r3, #1
 80019c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	fb03 f202 	mul.w	r2, r3, r2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	0e5b      	lsrs	r3, r3, #25
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	3301      	adds	r3, #1
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019f8:	69bb      	ldr	r3, [r7, #24]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08002168 	.word	0x08002168
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a30:	f7ff fa26 	bl	8000e80 <HAL_PWREx_GetVoltageRange>
 8001a34:	6178      	str	r0, [r7, #20]
 8001a36:	e014      	b.n	8001a62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3c:	4a24      	ldr	r2, [pc, #144]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a44:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a50:	f7ff fa16 	bl	8000e80 <HAL_PWREx_GetVoltageRange>
 8001a54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a68:	d10b      	bne.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b80      	cmp	r3, #128	@ 0x80
 8001a6e:	d919      	bls.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a74:	d902      	bls.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a76:	2302      	movs	r3, #2
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e013      	b.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	e010      	b.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b80      	cmp	r3, #128	@ 0x80
 8001a86:	d902      	bls.n	8001a8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a88:	2303      	movs	r3, #3
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e00a      	b.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b80      	cmp	r3, #128	@ 0x80
 8001a92:	d102      	bne.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a94:	2302      	movs	r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e004      	b.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b70      	cmp	r3, #112	@ 0x70
 8001a9e:	d101      	bne.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 0207 	bic.w	r2, r3, #7
 8001aac:	4909      	ldr	r1, [pc, #36]	@ (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d001      	beq.n	8001ac6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <memset>:
 8001ad8:	4402      	add	r2, r0
 8001ada:	4603      	mov	r3, r0
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <memset+0xa>
 8001ae0:	4770      	bx	lr
 8001ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ae6:	e7f9      	b.n	8001adc <memset+0x4>

08001ae8 <__libc_init_array>:
 8001ae8:	b570      	push	{r4, r5, r6, lr}
 8001aea:	4d0d      	ldr	r5, [pc, #52]	@ (8001b20 <__libc_init_array+0x38>)
 8001aec:	4c0d      	ldr	r4, [pc, #52]	@ (8001b24 <__libc_init_array+0x3c>)
 8001aee:	1b64      	subs	r4, r4, r5
 8001af0:	10a4      	asrs	r4, r4, #2
 8001af2:	2600      	movs	r6, #0
 8001af4:	42a6      	cmp	r6, r4
 8001af6:	d109      	bne.n	8001b0c <__libc_init_array+0x24>
 8001af8:	4d0b      	ldr	r5, [pc, #44]	@ (8001b28 <__libc_init_array+0x40>)
 8001afa:	4c0c      	ldr	r4, [pc, #48]	@ (8001b2c <__libc_init_array+0x44>)
 8001afc:	f000 f818 	bl	8001b30 <_init>
 8001b00:	1b64      	subs	r4, r4, r5
 8001b02:	10a4      	asrs	r4, r4, #2
 8001b04:	2600      	movs	r6, #0
 8001b06:	42a6      	cmp	r6, r4
 8001b08:	d105      	bne.n	8001b16 <__libc_init_array+0x2e>
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
 8001b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b10:	4798      	blx	r3
 8001b12:	3601      	adds	r6, #1
 8001b14:	e7ee      	b.n	8001af4 <__libc_init_array+0xc>
 8001b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b1a:	4798      	blx	r3
 8001b1c:	3601      	adds	r6, #1
 8001b1e:	e7f2      	b.n	8001b06 <__libc_init_array+0x1e>
 8001b20:	08002198 	.word	0x08002198
 8001b24:	08002198 	.word	0x08002198
 8001b28:	08002198 	.word	0x08002198
 8001b2c:	0800219c 	.word	0x0800219c

08001b30 <_init>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	bf00      	nop
 8001b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b36:	bc08      	pop	{r3}
 8001b38:	469e      	mov	lr, r3
 8001b3a:	4770      	bx	lr

08001b3c <_fini>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	bf00      	nop
 8001b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b42:	bc08      	pop	{r3}
 8001b44:	469e      	mov	lr, r3
 8001b46:	4770      	bx	lr
