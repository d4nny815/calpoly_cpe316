
function_gen_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000198c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08001b14  08001b14  00002b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022e4  080022e4  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  080022e4  080022e4  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022e4  080022e4  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022e4  080022e4  000032e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022e8  080022e8  000032e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080022ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000014  08002300  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08002300  00004038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ed5  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001326  00000000  00000000  00008f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0000a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044e  00000000  00000000  0000a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024412  00000000  00000000  0000ac7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d06  00000000  00000000  0002f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de528  00000000  00000000  00034d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001132be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001538  00000000  00000000  00113304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011483c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001afc 	.word	0x08001afc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08001afc 	.word	0x08001afc

080001c8 <SPI_init>:
 *      Author: danny
 */
#include "DAC.h"

// Configure GPIOs and SPI Regs
void SPI_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    // PA4 - CS
    // PA5 - SCLK
    // PA6 - MISO
    // PA7 - MOSI

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001cc:	4b45      	ldr	r3, [pc, #276]	@ (80002e4 <SPI_init+0x11c>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d0:	4a44      	ldr	r2, [pc, #272]	@ (80002e4 <SPI_init+0x11c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    DAC_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001dc:	6a1b      	ldr	r3, [r3, #32]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	6213      	str	r3, [r2, #32]
    DAC_PORT->AFR[0] |= (5 << GPIO_AFRL_AFSEL4_Pos |
 80001e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001ea:	6a1b      	ldr	r3, [r3, #32]
 80001ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f0:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80001f4:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80001f8:	6213      	str	r3, [r2, #32]
                        5 << GPIO_AFRL_AFSEL5_Pos |
                        5 << GPIO_AFRL_AFSEL6_Pos |
                        5 << GPIO_AFRL_AFSEL7_Pos);

    DAC_PORT->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80001fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000208:	6013      	str	r3, [r2, #0]
    DAC_PORT->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 800020a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000214:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 8000218:	6013      	str	r3, [r2, #0]
    DAC_PORT->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 800021a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000228:	6053      	str	r3, [r2, #4]
    DAC_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800022a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000238:	60d3      	str	r3, [r2, #12]
    DAC_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 800023a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000244:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000248:	6093      	str	r3, [r2, #8]

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800024a:	4b26      	ldr	r3, [pc, #152]	@ (80002e4 <SPI_init+0x11c>)
 800024c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800024e:	4a25      	ldr	r2, [pc, #148]	@ (80002e4 <SPI_init+0x11c>)
 8000250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000254:	6613      	str	r3, [r2, #96]	@ 0x60

    SPI1->CR1 &= ~SPI_CR1_BR;  // baudRate = f_clk / 2
 8000256:	4b24      	ldr	r3, [pc, #144]	@ (80002e8 <SPI_init+0x120>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a23      	ldr	r2, [pc, #140]	@ (80002e8 <SPI_init+0x120>)
 800025c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000260:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_CPHA | SPI_CR1_CPOL);  // 1st edge and idle low
 8000262:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <SPI_init+0x120>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a20      	ldr	r2, [pc, #128]	@ (80002e8 <SPI_init+0x120>)
 8000268:	f023 0303 	bic.w	r3, r3, #3
 800026c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIOE | SPI_CR1_BIDIMODE);  // full duplex
 800026e:	4b1e      	ldr	r3, [pc, #120]	@ (80002e8 <SPI_init+0x120>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a1d      	ldr	r2, [pc, #116]	@ (80002e8 <SPI_init+0x120>)
 8000274:	f423 4344 	bic.w	r3, r3, #50176	@ 0xc400
 8000278:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_LSBFIRST;  // msb first
 800027a:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <SPI_init+0x120>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a1a      	ldr	r2, [pc, #104]	@ (80002e8 <SPI_init+0x120>)
 8000280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000284:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CRCEN;  // disable crc enable
 8000286:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <SPI_init+0x120>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <SPI_init+0x120>)
 800028c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000290:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_SSM;  // no sw slave select
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <SPI_init+0x120>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <SPI_init+0x120>)
 8000298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800029c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;  // master config
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <SPI_init+0x120>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <SPI_init+0x120>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	6013      	str	r3, [r2, #0]

    SPI1->CR2 |= DATA_FRAME_16BIT << SPI_CR2_DS_Pos; // 16bit Data frame
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <SPI_init+0x120>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <SPI_init+0x120>)
 80002b0:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80002b4:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_SSOE; // SS output is enabled in master mode
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <SPI_init+0x120>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <SPI_init+0x120>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_NSSP; // NSS pulse
 80002c2:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <SPI_init+0x120>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <SPI_init+0x120>)
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	6053      	str	r3, [r2, #4]

    SPI1->CR1 |= SPI_CR1_SPE;   // enable SPI
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <SPI_init+0x120>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <SPI_init+0x120>)
 80002d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002d8:	6013      	str	r3, [r2, #0]
    return;
 80002da:	bf00      	nop
}
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40013000 	.word	0x40013000

080002ec <DAC_init>:

void DAC_init() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
    SPI_init();
 80002f2:	f7ff ff69 	bl	80001c8 <SPI_init>
    uint16_t volt = volt_to_dac_val(2300);
 80002f6:	f643 3326 	movw	r3, #15142	@ 0x3b26
 80002fa:	80fb      	strh	r3, [r7, #6]
    DAC_write(volt);
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f804 	bl	800030c <DAC_write>
    return;
 8000304:	bf00      	nop
}
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <DAC_write>:

void DAC_write(uint16_t voltage) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
    while (!(SPI1->SR & SPI_SR_TXE));
 8000316:	bf00      	nop
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <DAC_write+0x2c>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <DAC_write+0xc>
    SPI1->DR = voltage;
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <DAC_write+0x2c>)
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	60d3      	str	r3, [r2, #12]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40013000 	.word	0x40013000

0800033c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	2b00      	cmp	r3, #0
 800034c:	db0b      	blt.n	8000366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 021f 	and.w	r2, r3, #31
 8000354:	4907      	ldr	r1, [pc, #28]	@ (8000374 <__NVIC_EnableIRQ+0x38>)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	095b      	lsrs	r3, r3, #5
 800035c:	2001      	movs	r0, #1
 800035e:	fa00 f202 	lsl.w	r2, r0, r2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000e100 	.word	0xe000e100

08000378 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	2b00      	cmp	r3, #0
 8000388:	db12      	blt.n	80003b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f003 021f 	and.w	r2, r3, #31
 8000390:	490a      	ldr	r1, [pc, #40]	@ (80003bc <__NVIC_DisableIRQ+0x44>)
 8000392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000396:	095b      	lsrs	r3, r3, #5
 8000398:	2001      	movs	r0, #1
 800039a:	fa00 f202 	lsl.w	r2, r0, r2
 800039e:	3320      	adds	r3, #32
 80003a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a4:	f3bf 8f4f 	dsb	sy
}
 80003a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003aa:	f3bf 8f6f 	isb	sy
}
 80003ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <square_wave_init>:
 *  Created on: Apr 26, 2024
 *      Author: danny
 */
#include "FuncGen.h"

void square_wave_init(uint16_t freq, uint8_t duty_cycle) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	80fb      	strh	r3, [r7, #6]
 80003cc:	4613      	mov	r3, r2
 80003ce:	717b      	strb	r3, [r7, #5]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80003d0:	4b33      	ldr	r3, [pc, #204]	@ (80004a0 <square_wave_init+0xe0>)
 80003d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003d4:	4a32      	ldr	r2, [pc, #200]	@ (80004a0 <square_wave_init+0xe0>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 80003dc:	201c      	movs	r0, #28
 80003de:	f7ff ffcb 	bl	8000378 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80003e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 80003f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~(ARR_BIT | CCR1_BIT);  
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000404:	f023 0303 	bic.w	r3, r3, #3
 8000408:	6113      	str	r3, [r2, #16]
    
    
    uint32_t max_arr = CPU_FREQ / freq ;
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	4a25      	ldr	r2, [pc, #148]	@ (80004a4 <square_wave_init+0xe4>)
 800040e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000412:	60fb      	str	r3, [r7, #12]
    TIM2->ARR = max_arr - 1;
 8000414:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3b01      	subs	r3, #1
 800041c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 800041e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->CCR1 = (uint32_t)(max_arr * ((float)duty_cycle / 100) - 1);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	ee07 3a90 	vmov	s15, r3
 800042c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	ee07 3a90 	vmov	s15, r3
 8000436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800043a:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 80004a8 <square_wave_init+0xe8>
 800043e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800044a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800044e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000456:	ee17 2a90 	vmov	r2, s15
 800045a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCER |= TIM_CCER_CC1E;
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6213      	str	r3, [r2, #32]
    TIM2->DIER |= (TIM_DIER_UIE | TIM_DIER_CC1IE);
 800046c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000476:	f043 0303 	orr.w	r3, r3, #3
 800047a:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(TIM2_IRQn);
 800047c:	201c      	movs	r0, #28
 800047e:	f7ff ff5d 	bl	800033c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000482:	b662      	cpsie	i
}
 8000484:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8000486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6013      	str	r3, [r2, #0]
    return;
 8000496:	bf00      	nop
}
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	003d0900 	.word	0x003d0900
 80004a8:	42c80000 	.word	0x42c80000

080004ac <continous_mode_init>:

void continous_mode_init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80004b0:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <continous_mode_init+0xac>)
 80004b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b4:	4a28      	ldr	r2, [pc, #160]	@ (8000558 <continous_mode_init+0xac>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 80004bc:	201c      	movs	r0, #28
 80004be:	f7ff ff5b 	bl	8000378 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80004c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004cc:	f023 0301 	bic.w	r3, r3, #1
 80004d0:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~(ARR_BIT | CCR1_BIT);  
 80004da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004de:	691b      	ldr	r3, [r3, #16]
 80004e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e4:	f023 0303 	bic.w	r3, r3, #3
 80004e8:	6113      	str	r3, [r2, #16]
    
    
    TIM2->ARR = -1;
 80004ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80004f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->PSC = 0;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004f8:	2200      	movs	r2, #0
 80004fa:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->CCR1 += NEXT_PERIOD - 1;
 80004fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000502:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000506:	339b      	adds	r3, #155	@ 0x9b
 8000508:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM2->DIER &= ~(TIM_DIER_UIE | TIM_DIER_CC1IE);
 800050a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000514:	f023 0303 	bic.w	r3, r3, #3
 8000518:	60d3      	str	r3, [r2, #12]
    TIM2->CCER |= TIM_CCER_CC1E;
 800051a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6213      	str	r3, [r2, #32]
    TIM2->DIER |= TIM_DIER_CC1IE;
 800052a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	60d3      	str	r3, [r2, #12]


    NVIC_EnableIRQ(TIM2_IRQn);
 800053a:	201c      	movs	r0, #28
 800053c:	f7ff fefe 	bl	800033c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000540:	b662      	cpsie	i
}
 8000542:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8000544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
    return;
 8000554:	bf00      	nop

}
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000

0800055c <keypad_init>:
 *      Author: danny
 */
#include "keypad.h"


void keypad_init() {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <keypad_init+0x78>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000564:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <keypad_init+0x78>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    // set rows as outputs
    // PC5-8
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 |GPIO_MODER_MODE8);
 800056c:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <keypad_init+0x7c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a19      	ldr	r2, [pc, #100]	@ (80005d8 <keypad_init+0x7c>)
 8000572:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 8000576:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);  // gp output mode
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <keypad_init+0x7c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a16      	ldr	r2, [pc, #88]	@ (80005d8 <keypad_init+0x7c>)
 800057e:	f443 33aa 	orr.w	r3, r3, #87040	@ 0x15400
 8000582:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->OTYPER &= ~(GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);  // push-pull
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <keypad_init+0x7c>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <keypad_init+0x7c>)
 800058a:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800058e:	6053      	str	r3, [r2, #4]
    KEYPAD_PORT->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);  // low speed
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <keypad_init+0x7c>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a10      	ldr	r2, [pc, #64]	@ (80005d8 <keypad_init+0x7c>)
 8000596:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 800059a:	6093      	str	r3, [r2, #8]
    KEYPAD_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);   // no resistor
 800059c:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <keypad_init+0x7c>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <keypad_init+0x7c>)
 80005a2:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 80005a6:	60d3      	str	r3, [r2, #12]

    // set cols as inputs
    // PC9-12
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 | GPIO_MODER_MODE12);    // input mode
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <keypad_init+0x7c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <keypad_init+0x7c>)
 80005ae:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80005b2:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->PUPDR  &= ~(GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11 | GPIO_PUPDR_PUPD12);
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <keypad_init+0x7c>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <keypad_init+0x7c>)
 80005ba:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80005be:	60d3      	str	r3, [r2, #12]
    KEYPAD_PORT->PUPDR  |= (GPIO_PUPDR_PUPD9_1 | GPIO_PUPDR_PUPD10_1 | GPIO_PUPDR_PUPD11_1 | GPIO_PUPDR_PUPD12_1); // pull down resistor
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <keypad_init+0x7c>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <keypad_init+0x7c>)
 80005c6:	f043 732a 	orr.w	r3, r3, #44564480	@ 0x2a80000
 80005ca:	60d3      	str	r3, [r2, #12]

    // set all cols high
    keypad_setAllCols();
 80005cc:	f000 f806 	bl	80005dc <keypad_setAllCols>

    return;
 80005d0:	bf00      	nop
}
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000800 	.word	0x48000800

080005dc <keypad_setAllCols>:

void keypad_setAllCols() {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
    KEYPAD_PORT->ODR |= ROW_MASK;
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <keypad_setAllCols+0x1c>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <keypad_setAllCols+0x1c>)
 80005e6:	f443 73f0 	orr.w	r3, r3, #480	@ 0x1e0
 80005ea:	6153      	str	r3, [r2, #20]
    return;
 80005ec:	bf00      	nop
}
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	48000800 	.word	0x48000800

080005fc <delay>:

void delay(uint32_t n) {
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    for (uint32_t delay_cnt=0; delay_cnt<n; delay_cnt++);
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e002      	b.n	8000610 <delay+0x14>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f8      	bcc.n	800060a <delay+0xe>
    return;
 8000618:	bf00      	nop
}
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <keypad_read>:

int8_t keypad_read() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
    if (!(GPIOC->IDR & COL_MASK)) {
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <keypad_read+0x9c>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 8000632:	2b00      	cmp	r3, #0
 8000634:	d102      	bne.n	800063c <keypad_read+0x18>
        return KEYPAD_NO_PRESS;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800063a:	e03c      	b.n	80006b6 <keypad_read+0x92>
    }
    static const uint8_t btns[NUM_ROWS][NUM_COLS] = {{1, 2, 3, KEYPAD_A}, {4, 5, 6, KEYPAD_B}, {7, 8, 9, KEYPAD_C}, {KEYPAD_STAR, 0, KEYPAD_POUND, KEYPAD_D}};
    uint8_t col, row;
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	e032      	b.n	80006a8 <keypad_read+0x84>
        GPIOC->ODR = (GPIOC->ODR & ~ROW_MASK) | (1 << (i + ROW_PIN_START));
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <keypad_read+0x9c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	3205      	adds	r2, #5
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	4611      	mov	r1, r2
 8000656:	4a1a      	ldr	r2, [pc, #104]	@ (80006c0 <keypad_read+0x9c>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6153      	str	r3, [r2, #20]
        delay(5);
 800065c:	2005      	movs	r0, #5
 800065e:	f7ff ffcd 	bl	80005fc <delay>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <keypad_read+0x9c>)
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 800066a:	2b00      	cmp	r3, #0
 800066c:	d018      	beq.n	80006a0 <keypad_read+0x7c>
        row = i;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	70fb      	strb	r3, [r7, #3]
        col = col_pins_to_int(COL_PINS);
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <keypad_read+0x9c>)
 8000674:	691b      	ldr	r3, [r3, #16]
 8000676:	0a5b      	lsrs	r3, r3, #9
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f821 	bl	80006c8 <col_pins_to_int>
 8000686:	4603      	mov	r3, r0
 8000688:	70bb      	strb	r3, [r7, #2]
        keypad_setAllCols();
 800068a:	f7ff ffa7 	bl	80005dc <keypad_setAllCols>
        return btns[row][col];
 800068e:	78fa      	ldrb	r2, [r7, #3]
 8000690:	78bb      	ldrb	r3, [r7, #2]
 8000692:	490c      	ldr	r1, [pc, #48]	@ (80006c4 <keypad_read+0xa0>)
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	440a      	add	r2, r1
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	e00a      	b.n	80006b6 <keypad_read+0x92>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 80006a0:	bf00      	nop
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d9c9      	bls.n	8000642 <keypad_read+0x1e>
    }
    keypad_setAllCols();
 80006ae:	f7ff ff95 	bl	80005dc <keypad_setAllCols>
    return KEYPAD_NO_PRESS;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	48000800 	.word	0x48000800
 80006c4:	08001b14 	.word	0x08001b14

080006c8 <col_pins_to_int>:

uint8_t col_pins_to_int(uint8_t pins) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
    switch (pins) {
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	d81a      	bhi.n	8000710 <col_pins_to_int+0x48>
 80006da:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <col_pins_to_int+0x18>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	08000701 	.word	0x08000701
 80006e4:	08000705 	.word	0x08000705
 80006e8:	08000711 	.word	0x08000711
 80006ec:	08000709 	.word	0x08000709
 80006f0:	08000711 	.word	0x08000711
 80006f4:	08000711 	.word	0x08000711
 80006f8:	08000711 	.word	0x08000711
 80006fc:	0800070d 	.word	0x0800070d
        case COL1: return 0;
 8000700:	2300      	movs	r3, #0
 8000702:	e006      	b.n	8000712 <col_pins_to_int+0x4a>
        case COL2: return 1;
 8000704:	2301      	movs	r3, #1
 8000706:	e004      	b.n	8000712 <col_pins_to_int+0x4a>
        case COL3: return 2;
 8000708:	2302      	movs	r3, #2
 800070a:	e002      	b.n	8000712 <col_pins_to_int+0x4a>
        case COL4: return 3;
 800070c:	2303      	movs	r3, #3
 800070e:	e000      	b.n	8000712 <col_pins_to_int+0x4a>
    }
    return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <main>:
uint32_t wave_scalar = 500 / FREQ_MIN;
uint16_t freq = 500;
uint8_t duty_cycle = 50;


int main(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    HAL_Init();
 8000726:	f000 fa36 	bl	8000b96 <HAL_Init>
    SystemClock_Config();
 800072a:	f000 f959 	bl	80009e0 <SystemClock_Config>

    DAC_init();
 800072e:	f7ff fddd 	bl	80002ec <DAC_init>
    keypad_init();
 8000732:	f7ff ff13 	bl	800055c <keypad_init>
    square_wave_init(freq, duty_cycle);
 8000736:	4b53      	ldr	r3, [pc, #332]	@ (8000884 <main+0x164>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	4a53      	ldr	r2, [pc, #332]	@ (8000888 <main+0x168>)
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe3d 	bl	80003c0 <square_wave_init>
    
    int8_t key;
    while (1) {
        key = keypad_read();
 8000746:	f7ff ff6d 	bl	8000624 <keypad_read>
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
        if (isFreqChangePin(key)) {
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	dd1f      	ble.n	8000796 <main+0x76>
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b05      	cmp	r3, #5
 800075c:	dc1b      	bgt.n	8000796 <main+0x76>
            freq = key * FREQ_MIN;
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	b29b      	uxth	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	4413      	add	r3, r2
 800076a:	461a      	mov	r2, r3
 800076c:	0091      	lsls	r1, r2, #2
 800076e:	461a      	mov	r2, r3
 8000770:	460b      	mov	r3, r1
 8000772:	4413      	add	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b42      	ldr	r3, [pc, #264]	@ (8000884 <main+0x164>)
 800077a:	801a      	strh	r2, [r3, #0]
            if (state == SQUARE) square_wave_init(freq, duty_cycle);
 800077c:	4b43      	ldr	r3, [pc, #268]	@ (800088c <main+0x16c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d17e      	bne.n	8000882 <main+0x162>
 8000784:	4b3f      	ldr	r3, [pc, #252]	@ (8000884 <main+0x164>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	4a3f      	ldr	r2, [pc, #252]	@ (8000888 <main+0x168>)
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe16 	bl	80003c0 <square_wave_init>
 8000794:	e075      	b.n	8000882 <main+0x162>
        }
        else if (isDutyChangePin(key) && state == SQUARE) {
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d007      	beq.n	80007ae <main+0x8e>
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d003      	beq.n	80007ae <main+0x8e>
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b0b      	cmp	r3, #11
 80007ac:	d123      	bne.n	80007f6 <main+0xd6>
 80007ae:	4b37      	ldr	r3, [pc, #220]	@ (800088c <main+0x16c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d11f      	bne.n	80007f6 <main+0xd6>
            switch (key) {
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	2b0b      	cmp	r3, #11
 80007bc:	d00e      	beq.n	80007dc <main+0xbc>
 80007be:	2b0b      	cmp	r3, #11
 80007c0:	dc10      	bgt.n	80007e4 <main+0xc4>
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <main+0xac>
 80007c6:	2b0a      	cmp	r3, #10
 80007c8:	d004      	beq.n	80007d4 <main+0xb4>
 80007ca:	e00b      	b.n	80007e4 <main+0xc4>
                case 0:
                    duty_cycle = 50;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <main+0x168>)
 80007ce:	2232      	movs	r2, #50	@ 0x32
 80007d0:	701a      	strb	r2, [r3, #0]
                    break;
 80007d2:	e007      	b.n	80007e4 <main+0xc4>
                case KEYPAD_STAR:
                    duty_cycle = 10;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <main+0x168>)
 80007d6:	220a      	movs	r2, #10
 80007d8:	701a      	strb	r2, [r3, #0]
                    break;
 80007da:	e003      	b.n	80007e4 <main+0xc4>
                case KEYPAD_POUND:
                    duty_cycle = 90;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <main+0x168>)
 80007de:	225a      	movs	r2, #90	@ 0x5a
 80007e0:	701a      	strb	r2, [r3, #0]
                    break;
 80007e2:	bf00      	nop
            }
            square_wave_init(freq, duty_cycle);
 80007e4:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <main+0x164>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	4a27      	ldr	r2, [pc, #156]	@ (8000888 <main+0x168>)
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fde6 	bl	80003c0 <square_wave_init>
 80007f4:	e045      	b.n	8000882 <main+0x162>
        }
        else if (isWaveChangePin(key)) {
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	dda3      	ble.n	8000746 <main+0x26>
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b09      	cmp	r3, #9
 8000804:	dc9f      	bgt.n	8000746 <main+0x26>
            switch (key) {
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	3b06      	subs	r3, #6
 800080c:	2b03      	cmp	r3, #3
 800080e:	d835      	bhi.n	800087c <main+0x15c>
 8000810:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <main+0xf8>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000829 	.word	0x08000829
 800081c:	08000851 	.word	0x08000851
 8000820:	0800083d 	.word	0x0800083d
 8000824:	08000865 	.word	0x08000865
                case SINE_KEY:
                    if (state == SQUARE) continous_mode_init();
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <main+0x16c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <main+0x114>
 8000830:	f7ff fe3c 	bl	80004ac <continous_mode_init>
                    state = SINE;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <main+0x16c>)
 8000836:	2202      	movs	r2, #2
 8000838:	701a      	strb	r2, [r3, #0]
                    break;
 800083a:	e01f      	b.n	800087c <main+0x15c>
                case TRIANGLE_KEY:
                    if (state == SQUARE) continous_mode_init();
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <main+0x16c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <main+0x128>
 8000844:	f7ff fe32 	bl	80004ac <continous_mode_init>
                    state = TRIANGLE;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <main+0x16c>)
 800084a:	2203      	movs	r2, #3
 800084c:	701a      	strb	r2, [r3, #0]
                    break;
 800084e:	e015      	b.n	800087c <main+0x15c>
                case SAWTOOTH_KEY:
                    if (state == SQUARE) continous_mode_init();
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <main+0x16c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <main+0x13c>
 8000858:	f7ff fe28 	bl	80004ac <continous_mode_init>
                    state = SAWTOOTH;
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <main+0x16c>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
                    break;
 8000862:	e00b      	b.n	800087c <main+0x15c>
                case SQUARE_KEY:
                    square_wave_init(freq, duty_cycle);
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <main+0x164>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <main+0x168>)
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fda6 	bl	80003c0 <square_wave_init>
                    state = SQUARE;
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <main+0x16c>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
                    break;
 800087a:	bf00      	nop
            }
            wave_lut_ind = 0;
 800087c:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <main+0x170>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
        key = keypad_read();
 8000882:	e760      	b.n	8000746 <main+0x26>
 8000884:	20000004 	.word	0x20000004
 8000888:	20000006 	.word	0x20000006
 800088c:	20000030 	.word	0x20000030
 8000890:	20000032 	.word	0x20000032

08000894 <TIM2_IRQHandler>:
    return 0;
}



void TIM2_IRQHandler(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    switch (state) {
 8000898:	4b4a      	ldr	r3, [pc, #296]	@ (80009c4 <TIM2_IRQHandler+0x130>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b03      	cmp	r3, #3
 800089e:	f200 8085 	bhi.w	80009ac <TIM2_IRQHandler+0x118>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <TIM2_IRQHandler+0x14>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008db 	.word	0x080008db
 80008b0:	08000921 	.word	0x08000921
 80008b4:	08000967 	.word	0x08000967
        case SQUARE:
            if (TIM2->SR & CCR1_BIT) {
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d004      	beq.n	80008d0 <TIM2_IRQHandler+0x3c>
                DAC_write(volt_to_dac_val(MIN_FUNC_VOLTAGE));
 80008c6:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 80008ca:	f7ff fd1f 	bl	800030c <DAC_write>
            } else {
                DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
            }
            break;
 80008ce:	e06e      	b.n	80009ae <TIM2_IRQHandler+0x11a>
                DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
 80008d0:	f643 608a 	movw	r0, #16010	@ 0x3e8a
 80008d4:	f7ff fd1a 	bl	800030c <DAC_write>
            break;
 80008d8:	e069      	b.n	80009ae <TIM2_IRQHandler+0x11a>
        case SAWTOOTH:
            wave_lut_ind = (wave_lut_ind + wave_scalar) % WAVE_LUT_SIZE;
 80008da:	4b3b      	ldr	r3, [pc, #236]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	4b3a      	ldr	r3, [pc, #232]	@ (80009cc <TIM2_IRQHandler+0x138>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	18d1      	adds	r1, r2, r3
 80008e6:	4b3a      	ldr	r3, [pc, #232]	@ (80009d0 <TIM2_IRQHandler+0x13c>)
 80008e8:	fba3 2301 	umull	r2, r3, r3, r1
 80008ec:	0a1a      	lsrs	r2, r3, #8
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	019b      	lsls	r3, r3, #6
 80008f6:	1aca      	subs	r2, r1, r3
 80008f8:	b292      	uxth	r2, r2
 80008fa:	4b33      	ldr	r3, [pc, #204]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 80008fc:	801a      	strh	r2, [r3, #0]
            DAC_write(SAWTOOTH_LUT[wave_lut_ind]);
 80008fe:	4b32      	ldr	r3, [pc, #200]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <TIM2_IRQHandler+0x140>)
 8000906:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fcfe 	bl	800030c <DAC_write>
            TIM2->CCR1 += NEXT_CCR;
 8000910:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000916:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800091a:	337d      	adds	r3, #125	@ 0x7d
 800091c:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 800091e:	e046      	b.n	80009ae <TIM2_IRQHandler+0x11a>
        case SINE:
           wave_lut_ind = (wave_lut_ind + wave_scalar) % WAVE_LUT_SIZE;
 8000920:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <TIM2_IRQHandler+0x138>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	18d1      	adds	r1, r2, r3
 800092c:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <TIM2_IRQHandler+0x13c>)
 800092e:	fba3 2301 	umull	r2, r3, r3, r1
 8000932:	0a1a      	lsrs	r2, r3, #8
 8000934:	4613      	mov	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	019b      	lsls	r3, r3, #6
 800093c:	1aca      	subs	r2, r1, r3
 800093e:	b292      	uxth	r2, r2
 8000940:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 8000942:	801a      	strh	r2, [r3, #0]
            DAC_write(SINE_LUT[wave_lut_ind]);
 8000944:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <TIM2_IRQHandler+0x144>)
 800094c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fcdb 	bl	800030c <DAC_write>
            TIM2->CCR1 += NEXT_CCR;
 8000956:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800095a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000960:	337d      	adds	r3, #125	@ 0x7d
 8000962:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 8000964:	e023      	b.n	80009ae <TIM2_IRQHandler+0x11a>
        case TRIANGLE:
           wave_lut_ind = (wave_lut_ind + wave_scalar) % WAVE_LUT_SIZE;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <TIM2_IRQHandler+0x138>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	18d1      	adds	r1, r2, r3
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <TIM2_IRQHandler+0x13c>)
 8000974:	fba3 2301 	umull	r2, r3, r3, r1
 8000978:	0a1a      	lsrs	r2, r3, #8
 800097a:	4613      	mov	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	1aca      	subs	r2, r1, r3
 8000984:	b292      	uxth	r2, r2
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 8000988:	801a      	strh	r2, [r3, #0]
            DAC_write(TRIANGLE_LUT[wave_lut_ind]);
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <TIM2_IRQHandler+0x134>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <TIM2_IRQHandler+0x148>)
 8000992:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fcb8 	bl	800030c <DAC_write>
            TIM2->CCR1 += NEXT_CCR;
 800099c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a6:	337d      	adds	r3, #125	@ 0x7d
 80009a8:	6353      	str	r3, [r2, #52]	@ 0x34
            break;
 80009aa:	e000      	b.n	80009ae <TIM2_IRQHandler+0x11a>
        default: break;
 80009ac:	bf00      	nop
    }    

    TIM2->SR &= ~(CCR1_BIT | ARR_BIT);
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b8:	f023 0303 	bic.w	r3, r3, #3
 80009bc:	6113      	str	r3, [r2, #16]
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000030 	.word	0x20000030
 80009c8:	20000032 	.word	0x20000032
 80009cc:	20000000 	.word	0x20000000
 80009d0:	cccccccd 	.word	0xcccccccd
 80009d4:	08002024 	.word	0x08002024
 80009d8:	08001da4 	.word	0x08001da4
 80009dc:	08001b24 	.word	0x08001b24

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b096      	sub	sp, #88	@ 0x58
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2244      	movs	r2, #68	@ 0x44
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f858 	bl	8001aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a06:	f000 fa2f 	bl	8000e68 <HAL_PWREx_ControlVoltageScaling>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a10:	f000 f82c 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a14:	2310      	movs	r3, #16
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a20:	2360      	movs	r3, #96	@ 0x60
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fa71 	bl	8000f14 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a38:	f000 f818 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fe39 	bl	80016cc <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a60:	f000 f804 	bl	8000a6c <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3758      	adds	r7, #88	@ 0x58
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <Error_Handler+0x8>

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 f893 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff ffea 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	@ (8000b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	@ (8000b90 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f000 ff9f 	bl	8001ab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b76:	f7ff fdd3 	bl	8000720 <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b88:	080022ec 	.word	0x080022ec
  ldr r2, =_sbss
 8000b8c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b90:	20000038 	.word	0x20000038

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>

08000b96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f91f 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f000 f80e 	bl	8000bc8 <HAL_InitTick>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	e001      	b.n	8000bbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb8:	f7ff ff5e 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_InitTick+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d023      	beq.n	8000c24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <HAL_InitTick+0x70>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_InitTick+0x6c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f91d 	bl	8000e32 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10f      	bne.n	8000c1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d809      	bhi.n	8000c18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 f8f5 	bl	8000dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_InitTick+0x74>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e004      	b.n	8000c28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e001      	b.n	8000c28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000010 	.word	0x20000010
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	2000000c 	.word	0x2000000c

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000010 	.word	0x20000010
 8000c64:	20000034 	.word	0x20000034

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000034 	.word	0x20000034

08000c80 <__NVIC_SetPriorityGrouping>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	@ (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff47 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff5c 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb0 	bl	8000da0 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40007000 	.word	0x40007000

08000e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e76:	d130      	bne.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e78:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e84:	d038      	beq.n	8000ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2232      	movs	r2, #50	@ 0x32
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eac:	e002      	b.n	8000eb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec0:	d102      	bne.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f2      	bne.n	8000eae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ed4:	d110      	bne.n	8000ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e00f      	b.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ee6:	d007      	beq.n	8000ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ef0:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	431bde83 	.word	0x431bde83

08000f14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e3ca      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f26:	4b97      	ldr	r3, [pc, #604]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f30:	4b94      	ldr	r3, [pc, #592]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 80e4 	beq.w	8001110 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_RCC_OscConfig+0x4a>
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	f040 808b 	bne.w	800106c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f040 8087 	bne.w	800106c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5e:	4b89      	ldr	r3, [pc, #548]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <HAL_RCC_OscConfig+0x62>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e3a2      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1a      	ldr	r2, [r3, #32]
 8000f7a:	4b82      	ldr	r3, [pc, #520]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d004      	beq.n	8000f90 <HAL_RCC_OscConfig+0x7c>
 8000f86:	4b7f      	ldr	r3, [pc, #508]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f8e:	e005      	b.n	8000f9c <HAL_RCC_OscConfig+0x88>
 8000f90:	4b7c      	ldr	r3, [pc, #496]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d223      	bcs.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fd1d 	bl	80019e4 <RCC_SetFlashLatencyFromMSIRange>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e383      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb4:	4b73      	ldr	r3, [pc, #460]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a72      	ldr	r2, [pc, #456]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b70      	ldr	r3, [pc, #448]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	496d      	ldr	r1, [pc, #436]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	4968      	ldr	r1, [pc, #416]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	604b      	str	r3, [r1, #4]
 8000fe6:	e025      	b.n	8001034 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe8:	4b66      	ldr	r3, [pc, #408]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a65      	ldr	r2, [pc, #404]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4960      	ldr	r1, [pc, #384]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001006:	4b5f      	ldr	r3, [pc, #380]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	495b      	ldr	r1, [pc, #364]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001016:	4313      	orrs	r3, r2
 8001018:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fcdd 	bl	80019e4 <RCC_SetFlashLatencyFromMSIRange>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e343      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001034:	f000 fc4a 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8001038:	4602      	mov	r2, r0
 800103a:	4b52      	ldr	r3, [pc, #328]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4950      	ldr	r1, [pc, #320]	@ (8001188 <HAL_RCC_OscConfig+0x274>)
 8001046:	5ccb      	ldrb	r3, [r1, r3]
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	4a4e      	ldr	r2, [pc, #312]	@ (800118c <HAL_RCC_OscConfig+0x278>)
 8001052:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001054:	4b4e      	ldr	r3, [pc, #312]	@ (8001190 <HAL_RCC_OscConfig+0x27c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fdb5 	bl	8000bc8 <HAL_InitTick>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d052      	beq.n	800110e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	e327      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d032      	beq.n	80010da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001074:	4b43      	ldr	r3, [pc, #268]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a42      	ldr	r2, [pc, #264]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001080:	f7ff fdf2 	bl	8000c68 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001088:	f7ff fdee 	bl	8000c68 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e310      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800109a:	4b3a      	ldr	r3, [pc, #232]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a6:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a36      	ldr	r2, [pc, #216]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4931      	ldr	r1, [pc, #196]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	492c      	ldr	r1, [pc, #176]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
 80010d8:	e01a      	b.n	8001110 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010da:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a29      	ldr	r2, [pc, #164]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fdbf 	bl	8000c68 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010ee:	f7ff fdbb 	bl	8000c68 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e2dd      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001100:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x1da>
 800110c:	e000      	b.n	8001110 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d074      	beq.n	8001206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d005      	beq.n	800112e <HAL_RCC_OscConfig+0x21a>
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d10e      	bne.n	8001146 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d10b      	bne.n	8001146 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d064      	beq.n	8001204 <HAL_RCC_OscConfig+0x2f0>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d160      	bne.n	8001204 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e2ba      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x24a>
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	e026      	b.n	80011ac <HAL_RCC_OscConfig+0x298>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001166:	d115      	bne.n	8001194 <HAL_RCC_OscConfig+0x280>
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 800116e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a02      	ldr	r2, [pc, #8]	@ (8001184 <HAL_RCC_OscConfig+0x270>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e014      	b.n	80011ac <HAL_RCC_OscConfig+0x298>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	080022a4 	.word	0x080022a4
 800118c:	20000008 	.word	0x20000008
 8001190:	2000000c 	.word	0x2000000c
 8001194:	4ba0      	ldr	r3, [pc, #640]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a9f      	ldr	r2, [pc, #636]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a9c      	ldr	r2, [pc, #624]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff fd58 	bl	8000c68 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fd54 	bl	8000c68 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	@ 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e276      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ce:	4b92      	ldr	r3, [pc, #584]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x2a8>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fd44 	bl	8000c68 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fd40 	bl	8000c68 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e262      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f6:	4b88      	ldr	r3, [pc, #544]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x2d0>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d060      	beq.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d005      	beq.n	8001224 <HAL_RCC_OscConfig+0x310>
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d119      	bne.n	8001252 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d116      	bne.n	8001252 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001224:	4b7c      	ldr	r3, [pc, #496]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_OscConfig+0x328>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e23f      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b76      	ldr	r3, [pc, #472]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	061b      	lsls	r3, r3, #24
 800124a:	4973      	ldr	r1, [pc, #460]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001250:	e040      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d023      	beq.n	80012a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125a:	4b6f      	ldr	r3, [pc, #444]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6e      	ldr	r2, [pc, #440]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fcff 	bl	8000c68 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fcfb 	bl	8000c68 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e21d      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001280:	4b65      	ldr	r3, [pc, #404]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b62      	ldr	r3, [pc, #392]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	061b      	lsls	r3, r3, #24
 800129a:	495f      	ldr	r1, [pc, #380]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
 80012a0:	e018      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80012a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ae:	f7ff fcdb 	bl	8000c68 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff fcd7 	bl	8000c68 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1f9      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03c      	beq.n	800135a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01c      	beq.n	8001322 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80012ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fcb6 	bl	8000c68 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fcb2 	bl	8000c68 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1d4      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001312:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0ef      	beq.n	8001300 <HAL_RCC_OscConfig+0x3ec>
 8001320:	e01b      	b.n	800135a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001322:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001328:	4a3b      	ldr	r2, [pc, #236]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001332:	f7ff fc99 	bl	8000c68 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133a:	f7ff fc95 	bl	8000c68 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e1b7      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800134c:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800134e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1ef      	bne.n	800133a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80a6 	beq.w	80014b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10d      	bne.n	8001394 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001382:	6593      	str	r3, [r2, #88]	@ 0x58
 8001384:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001390:	2301      	movs	r3, #1
 8001392:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <HAL_RCC_OscConfig+0x508>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d118      	bne.n	80013d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <HAL_RCC_OscConfig+0x508>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_RCC_OscConfig+0x508>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fc5c 	bl	8000c68 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b4:	f7ff fc58 	bl	8000c68 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e17a      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_RCC_OscConfig+0x508>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d108      	bne.n	80013ec <HAL_RCC_OscConfig+0x4d8>
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80013dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013ea:	e029      	b.n	8001440 <HAL_RCC_OscConfig+0x52c>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d115      	bne.n	8001420 <HAL_RCC_OscConfig+0x50c>
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80013f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013fa:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800140a:	4a03      	ldr	r2, [pc, #12]	@ (8001418 <HAL_RCC_OscConfig+0x504>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001414:	e014      	b.n	8001440 <HAL_RCC_OscConfig+0x52c>
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	40007000 	.word	0x40007000
 8001420:	4b9c      	ldr	r3, [pc, #624]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001426:	4a9b      	ldr	r2, [pc, #620]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001430:	4b98      	ldr	r3, [pc, #608]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001436:	4a97      	ldr	r2, [pc, #604]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d016      	beq.n	8001476 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fc0e 	bl	8000c68 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fc0a 	bl	8000c68 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e12a      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001466:	4b8b      	ldr	r3, [pc, #556]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0ed      	beq.n	8001450 <HAL_RCC_OscConfig+0x53c>
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001476:	f7ff fbf7 	bl	8000c68 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800147c:	e00a      	b.n	8001494 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff fbf3 	bl	8000c68 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e113      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001494:	4b7f      	ldr	r3, [pc, #508]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ed      	bne.n	800147e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	4a79      	ldr	r2, [pc, #484]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80014ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80fe 	beq.w	80016ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	f040 80d0 	bne.w	8001668 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014c8:	4b72      	ldr	r3, [pc, #456]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d8:	429a      	cmp	r2, r3
 80014da:	d130      	bne.n	800153e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	3b01      	subs	r3, #1
 80014e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d127      	bne.n	800153e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d11f      	bne.n	800153e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001508:	2a07      	cmp	r2, #7
 800150a:	bf14      	ite	ne
 800150c:	2201      	movne	r2, #1
 800150e:	2200      	moveq	r2, #0
 8001510:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001512:	4293      	cmp	r3, r2
 8001514:	d113      	bne.n	800153e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	3b01      	subs	r3, #1
 8001524:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d109      	bne.n	800153e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	085b      	lsrs	r3, r3, #1
 8001536:	3b01      	subs	r3, #1
 8001538:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d06e      	beq.n	800161c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d069      	beq.n	8001618 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001544:	4b53      	ldr	r3, [pc, #332]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001550:	4b50      	ldr	r3, [pc, #320]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0ad      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001560:	4b4c      	ldr	r3, [pc, #304]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a4b      	ldr	r2, [pc, #300]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800156a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800156c:	f7ff fb7c 	bl	8000c68 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fb78 	bl	8000c68 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e09a      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001586:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001592:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	4b40      	ldr	r3, [pc, #256]	@ (8001698 <HAL_RCC_OscConfig+0x784>)
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015a2:	3a01      	subs	r2, #1
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015ac:	0212      	lsls	r2, r2, #8
 80015ae:	4311      	orrs	r1, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015b4:	0852      	lsrs	r2, r2, #1
 80015b6:	3a01      	subs	r2, #1
 80015b8:	0552      	lsls	r2, r2, #21
 80015ba:	4311      	orrs	r1, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015c0:	0852      	lsrs	r2, r2, #1
 80015c2:	3a01      	subs	r2, #1
 80015c4:	0652      	lsls	r2, r2, #25
 80015c6:	4311      	orrs	r1, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015cc:	0912      	lsrs	r2, r2, #4
 80015ce:	0452      	lsls	r2, r2, #17
 80015d0:	430a      	orrs	r2, r1
 80015d2:	4930      	ldr	r1, [pc, #192]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80015de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015f0:	f7ff fb3a 	bl	8000c68 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb36 	bl	8000c68 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e058      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001616:	e050      	b.n	80016ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e04f      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d148      	bne.n	80016ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a16      	ldr	r2, [pc, #88]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800163e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001640:	f7ff fb12 	bl	8000c68 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb0e 	bl	8000c68 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e030      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x734>
 8001666:	e028      	b.n	80016ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d023      	beq.n	80016b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_RCC_OscConfig+0x780>)
 8001674:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff faf5 	bl	8000c68 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001680:	e00c      	b.n	800169c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff faf1 	bl	8000c68 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d905      	bls.n	800169c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e013      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
 8001694:	40021000 	.word	0x40021000
 8001698:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_RCC_OscConfig+0x7b0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ec      	bne.n	8001682 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_RCC_OscConfig+0x7b0>)
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4905      	ldr	r1, [pc, #20]	@ (80016c4 <HAL_RCC_OscConfig+0x7b0>)
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_RCC_OscConfig+0x7b4>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	60cb      	str	r3, [r1, #12]
 80016b4:	e001      	b.n	80016ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	feeefffc 	.word	0xfeeefffc

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0e7      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b75      	ldr	r3, [pc, #468]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d910      	bls.n	8001710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b72      	ldr	r3, [pc, #456]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 0207 	bic.w	r2, r3, #7
 80016f6:	4970      	ldr	r1, [pc, #448]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b6e      	ldr	r3, [pc, #440]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0cf      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d010      	beq.n	800173e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	4b66      	ldr	r3, [pc, #408]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001728:	429a      	cmp	r2, r3
 800172a:	d908      	bls.n	800173e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b63      	ldr	r3, [pc, #396]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4960      	ldr	r1, [pc, #384]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d04c      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001752:	4b5a      	ldr	r3, [pc, #360]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d121      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0a6      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d115      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e09a      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001782:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e08e      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001792:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e086      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b46      	ldr	r3, [pc, #280]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4943      	ldr	r1, [pc, #268]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017b4:	f7ff fa58 	bl	8000c68 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff fa54 	bl	8000c68 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e06e      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d010      	beq.n	8001812 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d208      	bcs.n	8001812 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001800:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	492b      	ldr	r1, [pc, #172]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001812:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d210      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001820:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 0207 	bic.w	r2, r3, #7
 8001828:	4923      	ldr	r1, [pc, #140]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e036      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4918      	ldr	r1, [pc, #96]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4910      	ldr	r1, [pc, #64]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001880:	f000 f824 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	490b      	ldr	r1, [pc, #44]	@ (80018c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	4a09      	ldr	r2, [pc, #36]	@ (80018c4 <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_RCC_ClockConfig+0x1fc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f98f 	bl	8000bc8 <HAL_InitTick>
 80018aa:	4603      	mov	r3, r0
 80018ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80018ae:	7afb      	ldrb	r3, [r7, #11]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	080022a4 	.word	0x080022a4
 80018c4:	20000008 	.word	0x20000008
 80018c8:	2000000c 	.word	0x2000000c

080018cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	@ 0x24
 80018d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4b3e      	ldr	r3, [pc, #248]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e4:	4b3b      	ldr	r3, [pc, #236]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x34>
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d121      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d11e      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001900:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800190c:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e005      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001928:	4a2b      	ldr	r2, [pc, #172]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d102      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001944:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	e004      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d101      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001950:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d134      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800195a:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0xa6>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d003      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0xac>
 8001970:	e005      	b.n	800197e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001974:	617b      	str	r3, [r7, #20]
      break;
 8001976:	e005      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800197a:	617b      	str	r3, [r7, #20]
      break;
 800197c:	e002      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	617b      	str	r3, [r7, #20]
      break;
 8001982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	3301      	adds	r3, #1
 8001990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	fb03 f202 	mul.w	r2, r3, r2
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	0e5b      	lsrs	r3, r3, #25
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	3301      	adds	r3, #1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019c4:	69bb      	ldr	r3, [r7, #24]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	@ 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	080022b4 	.word	0x080022b4
 80019dc:	00f42400 	.word	0x00f42400
 80019e0:	007a1200 	.word	0x007a1200

080019e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019fc:	f7ff fa26 	bl	8000e4c <HAL_PWREx_GetVoltageRange>
 8001a00:	6178      	str	r0, [r7, #20]
 8001a02:	e014      	b.n	8001a2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a24      	ldr	r2, [pc, #144]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a1c:	f7ff fa16 	bl	8000e4c <HAL_PWREx_GetVoltageRange>
 8001a20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	4a1d      	ldr	r2, [pc, #116]	@ (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a34:	d10b      	bne.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b80      	cmp	r3, #128	@ 0x80
 8001a3a:	d919      	bls.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a40:	d902      	bls.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a42:	2302      	movs	r3, #2
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	e013      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a48:	2301      	movs	r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e010      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b80      	cmp	r3, #128	@ 0x80
 8001a52:	d902      	bls.n	8001a5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a54:	2303      	movs	r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e00a      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b80      	cmp	r3, #128	@ 0x80
 8001a5e:	d102      	bne.n	8001a66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a60:	2302      	movs	r3, #2
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	e004      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b70      	cmp	r3, #112	@ 0x70
 8001a6a:	d101      	bne.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 0207 	bic.w	r2, r3, #7
 8001a78:	4909      	ldr	r1, [pc, #36]	@ (8001aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a80:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <memset>:
 8001aa4:	4402      	add	r2, r0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d100      	bne.n	8001aae <memset+0xa>
 8001aac:	4770      	bx	lr
 8001aae:	f803 1b01 	strb.w	r1, [r3], #1
 8001ab2:	e7f9      	b.n	8001aa8 <memset+0x4>

08001ab4 <__libc_init_array>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8001aec <__libc_init_array+0x38>)
 8001ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8001af0 <__libc_init_array+0x3c>)
 8001aba:	1b64      	subs	r4, r4, r5
 8001abc:	10a4      	asrs	r4, r4, #2
 8001abe:	2600      	movs	r6, #0
 8001ac0:	42a6      	cmp	r6, r4
 8001ac2:	d109      	bne.n	8001ad8 <__libc_init_array+0x24>
 8001ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8001af4 <__libc_init_array+0x40>)
 8001ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8001af8 <__libc_init_array+0x44>)
 8001ac8:	f000 f818 	bl	8001afc <_init>
 8001acc:	1b64      	subs	r4, r4, r5
 8001ace:	10a4      	asrs	r4, r4, #2
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	42a6      	cmp	r6, r4
 8001ad4:	d105      	bne.n	8001ae2 <__libc_init_array+0x2e>
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
 8001ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001adc:	4798      	blx	r3
 8001ade:	3601      	adds	r6, #1
 8001ae0:	e7ee      	b.n	8001ac0 <__libc_init_array+0xc>
 8001ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae6:	4798      	blx	r3
 8001ae8:	3601      	adds	r6, #1
 8001aea:	e7f2      	b.n	8001ad2 <__libc_init_array+0x1e>
 8001aec:	080022e4 	.word	0x080022e4
 8001af0:	080022e4 	.word	0x080022e4
 8001af4:	080022e4 	.word	0x080022e4
 8001af8:	080022e8 	.word	0x080022e8

08001afc <_init>:
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	bf00      	nop
 8001b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b02:	bc08      	pop	{r3}
 8001b04:	469e      	mov	lr, r3
 8001b06:	4770      	bx	lr

08001b08 <_fini>:
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	bf00      	nop
 8001b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0e:	bc08      	pop	{r3}
 8001b10:	469e      	mov	lr, r3
 8001b12:	4770      	bx	lr
