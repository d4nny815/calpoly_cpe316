
function_gen_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000176c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080018f4  080018f4  000028f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001944  08001944  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001944  08001944  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001944  08001944  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001944  08001944  00002944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001948  08001948  00002948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800194c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001958  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001958  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004df3  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012f0  00000000  00000000  00007e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  00009120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000446  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243c6  00000000  00000000  00009b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005bb5  00000000  00000000  0002df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de45b  00000000  00000000  00033ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111f24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000151c  00000000  00000000  00111f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00113484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018dc 	.word	0x080018dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080018dc 	.word	0x080018dc

080001c8 <SPI_init>:
 */
#include "DAC.h"


// Configure GPIOs and SPI Regs
void SPI_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    // PA4 - CS
    // PA5 - SCLK
    // PA6 - MISO
    // PA7 - MOSI

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001cc:	4b45      	ldr	r3, [pc, #276]	@ (80002e4 <SPI_init+0x11c>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d0:	4a44      	ldr	r2, [pc, #272]	@ (80002e4 <SPI_init+0x11c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    DAC_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001dc:	6a1b      	ldr	r3, [r3, #32]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	6213      	str	r3, [r2, #32]
    DAC_PORT->AFR[0] |= (5 << GPIO_AFRL_AFSEL4_Pos |
 80001e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001ea:	6a1b      	ldr	r3, [r3, #32]
 80001ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f0:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80001f4:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80001f8:	6213      	str	r3, [r2, #32]
                        5 << GPIO_AFRL_AFSEL5_Pos |
                        5 << GPIO_AFRL_AFSEL6_Pos |
                        5 << GPIO_AFRL_AFSEL7_Pos);

    DAC_PORT->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80001fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000208:	6013      	str	r3, [r2, #0]
    DAC_PORT->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 800020a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000214:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 8000218:	6013      	str	r3, [r2, #0]
    DAC_PORT->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 800021a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000228:	6053      	str	r3, [r2, #4]
    DAC_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800022a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000238:	60d3      	str	r3, [r2, #12]
    DAC_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 800023a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000244:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000248:	6093      	str	r3, [r2, #8]

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800024a:	4b26      	ldr	r3, [pc, #152]	@ (80002e4 <SPI_init+0x11c>)
 800024c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800024e:	4a25      	ldr	r2, [pc, #148]	@ (80002e4 <SPI_init+0x11c>)
 8000250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000254:	6613      	str	r3, [r2, #96]	@ 0x60

    SPI1->CR1 &= ~SPI_CR1_BR;  // baudRate = f_clk / 2
 8000256:	4b24      	ldr	r3, [pc, #144]	@ (80002e8 <SPI_init+0x120>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a23      	ldr	r2, [pc, #140]	@ (80002e8 <SPI_init+0x120>)
 800025c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000260:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_CPHA | SPI_CR1_CPOL);  // 1st edge and idle low
 8000262:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <SPI_init+0x120>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a20      	ldr	r2, [pc, #128]	@ (80002e8 <SPI_init+0x120>)
 8000268:	f023 0303 	bic.w	r3, r3, #3
 800026c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIOE | SPI_CR1_BIDIMODE);  // full duplex
 800026e:	4b1e      	ldr	r3, [pc, #120]	@ (80002e8 <SPI_init+0x120>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a1d      	ldr	r2, [pc, #116]	@ (80002e8 <SPI_init+0x120>)
 8000274:	f423 4344 	bic.w	r3, r3, #50176	@ 0xc400
 8000278:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_LSBFIRST;  // msb first
 800027a:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <SPI_init+0x120>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a1a      	ldr	r2, [pc, #104]	@ (80002e8 <SPI_init+0x120>)
 8000280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000284:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CRCEN;  // disable crc enable
 8000286:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <SPI_init+0x120>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <SPI_init+0x120>)
 800028c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000290:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_SSM;  // no sw slave select
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <SPI_init+0x120>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <SPI_init+0x120>)
 8000298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800029c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;  // master config
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <SPI_init+0x120>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <SPI_init+0x120>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	6013      	str	r3, [r2, #0]

    SPI1->CR2 |= DATA_FRAME_16BIT << SPI_CR2_DS_Pos; // 16bit Data frame
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <SPI_init+0x120>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <SPI_init+0x120>)
 80002b0:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80002b4:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_SSOE; // SS output is enabled in master mode
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <SPI_init+0x120>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <SPI_init+0x120>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_NSSP; // NSS pulse
 80002c2:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <SPI_init+0x120>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <SPI_init+0x120>)
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	6053      	str	r3, [r2, #4]

    SPI1->CR1 |= SPI_CR1_SPE;   // enable SPI
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <SPI_init+0x120>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <SPI_init+0x120>)
 80002d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002d8:	6013      	str	r3, [r2, #0]
    return;
 80002da:	bf00      	nop
}
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40013000 	.word	0x40013000

080002ec <DAC_init>:

void DAC_init() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
    SPI_init();
 80002f2:	f7ff ff69 	bl	80001c8 <SPI_init>
    uint16_t volt = volt_to_dac_val(2300);
 80002f6:	f643 3326 	movw	r3, #15142	@ 0x3b26
 80002fa:	80fb      	strh	r3, [r7, #6]
    DAC_write(volt);
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f804 	bl	800030c <DAC_write>
    return;
 8000304:	bf00      	nop
}
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <DAC_write>:

void DAC_write(uint16_t voltage) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
    while (!(SPI1->SR & SPI_SR_TXE));
 8000316:	bf00      	nop
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <DAC_write+0x2c>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <DAC_write+0xc>
    SPI1->DR = voltage;
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <DAC_write+0x2c>)
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	60d3      	str	r3, [r2, #12]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40013000 	.word	0x40013000

0800033c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	2b00      	cmp	r3, #0
 800034c:	db0b      	blt.n	8000366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 021f 	and.w	r2, r3, #31
 8000354:	4907      	ldr	r1, [pc, #28]	@ (8000374 <__NVIC_EnableIRQ+0x38>)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	095b      	lsrs	r3, r3, #5
 800035c:	2001      	movs	r0, #1
 800035e:	fa00 f202 	lsl.w	r2, r0, r2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000e100 	.word	0xe000e100

08000378 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	2b00      	cmp	r3, #0
 8000388:	db12      	blt.n	80003b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f003 021f 	and.w	r2, r3, #31
 8000390:	490a      	ldr	r1, [pc, #40]	@ (80003bc <__NVIC_DisableIRQ+0x44>)
 8000392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000396:	095b      	lsrs	r3, r3, #5
 8000398:	2001      	movs	r0, #1
 800039a:	fa00 f202 	lsl.w	r2, r0, r2
 800039e:	3320      	adds	r3, #32
 80003a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a4:	f3bf 8f4f 	dsb	sy
}
 80003a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003aa:	f3bf 8f6f 	isb	sy
}
 80003ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <square_wave_init>:
 *  Created on: Apr 26, 2024
 *      Author: danny
 */
#include "FuncGen.h"

void square_wave_init(uint16_t freq, uint8_t duty_cycle) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	80fb      	strh	r3, [r7, #6]
 80003cc:	4613      	mov	r3, r2
 80003ce:	717b      	strb	r3, [r7, #5]
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80003d0:	4b33      	ldr	r3, [pc, #204]	@ (80004a0 <square_wave_init+0xe0>)
 80003d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003d4:	4a32      	ldr	r2, [pc, #200]	@ (80004a0 <square_wave_init+0xe0>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6593      	str	r3, [r2, #88]	@ 0x58
    
    NVIC_DisableIRQ(TIM2_IRQn);
 80003dc:	201c      	movs	r0, #28
 80003de:	f7ff ffcb 	bl	8000378 <__NVIC_DisableIRQ>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80003e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 80003f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR &= ~(ARR_BIT | CCR1_BIT);  
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000404:	f023 0303 	bic.w	r3, r3, #3
 8000408:	6113      	str	r3, [r2, #16]
    
    
    uint32_t max_arr = CPU_FREQ / freq ;
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	4a25      	ldr	r2, [pc, #148]	@ (80004a4 <square_wave_init+0xe4>)
 800040e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000412:	60fb      	str	r3, [r7, #12]
    TIM2->ARR = max_arr - 1;
 8000414:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3b01      	subs	r3, #1
 800041c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = 0;
 800041e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->CCR1 = (uint32_t)(max_arr * ((float)duty_cycle / 100) - 1);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	ee07 3a90 	vmov	s15, r3
 800042c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	ee07 3a90 	vmov	s15, r3
 8000436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800043a:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 80004a8 <square_wave_init+0xe8>
 800043e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800044a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800044e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000456:	ee17 2a90 	vmov	r2, s15
 800045a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCER |= TIM_CCER_CC1E;
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6213      	str	r3, [r2, #32]
    TIM2->DIER |= (TIM_DIER_UIE | TIM_DIER_CC1IE);
 800046c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000476:	f043 0303 	orr.w	r3, r3, #3
 800047a:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(TIM2_IRQn);
 800047c:	201c      	movs	r0, #28
 800047e:	f7ff ff5d 	bl	800033c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000482:	b662      	cpsie	i
}
 8000484:	bf00      	nop
    __enable_irq();
    TIM2->CR1 |= TIM_CR1_CEN;
 8000486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6013      	str	r3, [r2, #0]
    return;
 8000496:	bf00      	nop
}
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	003d0900 	.word	0x003d0900
 80004a8:	42c80000 	.word	0x42c80000

080004ac <keypad_init>:
 *      Author: danny
 */
#include "keypad.h"


void keypad_init() {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80004b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000524 <keypad_init+0x78>)
 80004b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000524 <keypad_init+0x78>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
    // set rows as outputs
    // PC5-8
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 |GPIO_MODER_MODE8);
 80004bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <keypad_init+0x7c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a19      	ldr	r2, [pc, #100]	@ (8000528 <keypad_init+0x7c>)
 80004c2:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 80004c6:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);  // gp output mode
 80004c8:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <keypad_init+0x7c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <keypad_init+0x7c>)
 80004ce:	f443 33aa 	orr.w	r3, r3, #87040	@ 0x15400
 80004d2:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->OTYPER &= ~(GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);  // push-pull
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <keypad_init+0x7c>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4a13      	ldr	r2, [pc, #76]	@ (8000528 <keypad_init+0x7c>)
 80004da:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80004de:	6053      	str	r3, [r2, #4]
    KEYPAD_PORT->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);  // low speed
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <keypad_init+0x7c>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a10      	ldr	r2, [pc, #64]	@ (8000528 <keypad_init+0x7c>)
 80004e6:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 80004ea:	6093      	str	r3, [r2, #8]
    KEYPAD_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);   // no resistor
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <keypad_init+0x7c>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <keypad_init+0x7c>)
 80004f2:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 80004f6:	60d3      	str	r3, [r2, #12]

    // set cols as inputs
    // PC9-12
    KEYPAD_PORT->MODER &= ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 | GPIO_MODER_MODE12);    // input mode
 80004f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <keypad_init+0x7c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <keypad_init+0x7c>)
 80004fe:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8000502:	6013      	str	r3, [r2, #0]
    KEYPAD_PORT->PUPDR  &= ~(GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11 | GPIO_PUPDR_PUPD12);
 8000504:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <keypad_init+0x7c>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <keypad_init+0x7c>)
 800050a:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800050e:	60d3      	str	r3, [r2, #12]
    KEYPAD_PORT->PUPDR  |= (GPIO_PUPDR_PUPD9_1 | GPIO_PUPDR_PUPD10_1 | GPIO_PUPDR_PUPD11_1 | GPIO_PUPDR_PUPD12_1); // pull down resistor
 8000510:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <keypad_init+0x7c>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <keypad_init+0x7c>)
 8000516:	f043 732a 	orr.w	r3, r3, #44564480	@ 0x2a80000
 800051a:	60d3      	str	r3, [r2, #12]

    // set all cols high
    keypad_setAllCols();
 800051c:	f000 f806 	bl	800052c <keypad_setAllCols>

    return;
 8000520:	bf00      	nop
}
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	48000800 	.word	0x48000800

0800052c <keypad_setAllCols>:

void keypad_setAllCols() {
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
    KEYPAD_PORT->ODR |= ROW_MASK;
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <keypad_setAllCols+0x1c>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <keypad_setAllCols+0x1c>)
 8000536:	f443 73f0 	orr.w	r3, r3, #480	@ 0x1e0
 800053a:	6153      	str	r3, [r2, #20]
    return;
 800053c:	bf00      	nop
}
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	48000800 	.word	0x48000800

0800054c <delay>:

void delay(uint32_t n) {
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    for (uint32_t delay_cnt=0; delay_cnt<n; delay_cnt++);
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e002      	b.n	8000560 <delay+0x14>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	d3f8      	bcc.n	800055a <delay+0xe>
    return;
 8000568:	bf00      	nop
}
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <keypad_read>:

int8_t keypad_read() {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
    if (!(GPIOC->IDR & COL_MASK)) {
 800057a:	4b25      	ldr	r3, [pc, #148]	@ (8000610 <keypad_read+0x9c>)
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 8000582:	2b00      	cmp	r3, #0
 8000584:	d102      	bne.n	800058c <keypad_read+0x18>
        return KEYPAD_NO_PRESS;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800058a:	e03c      	b.n	8000606 <keypad_read+0x92>
    }
    static const uint8_t btns[NUM_ROWS][NUM_COLS] = {{1, 2, 3, KEYPAD_A}, {4, 5, 6, KEYPAD_B}, {7, 8, 9, KEYPAD_C}, {KEYPAD_STAR, 0, KEYPAD_POUND, KEYPAD_D}};
    uint8_t col, row;
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	e032      	b.n	80005f8 <keypad_read+0x84>
        GPIOC->ODR = (GPIOC->ODR & ~ROW_MASK) | (1 << (i + ROW_PIN_START));
 8000592:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <keypad_read+0x9c>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	3205      	adds	r2, #5
 800059e:	2101      	movs	r1, #1
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000610 <keypad_read+0x9c>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6153      	str	r3, [r2, #20]
        delay(5);
 80005ac:	2005      	movs	r0, #5
 80005ae:	f7ff ffcd 	bl	800054c <delay>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <keypad_read+0x9c>)
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d018      	beq.n	80005f0 <keypad_read+0x7c>
        row = i;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	70fb      	strb	r3, [r7, #3]
        col = col_pins_to_int(COL_PINS);
 80005c2:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <keypad_read+0x9c>)
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	0a5b      	lsrs	r3, r3, #9
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 030f 	and.w	r3, r3, #15
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f821 	bl	8000618 <col_pins_to_int>
 80005d6:	4603      	mov	r3, r0
 80005d8:	70bb      	strb	r3, [r7, #2]
        keypad_setAllCols();
 80005da:	f7ff ffa7 	bl	800052c <keypad_setAllCols>
        return btns[row][col];
 80005de:	78fa      	ldrb	r2, [r7, #3]
 80005e0:	78bb      	ldrb	r3, [r7, #2]
 80005e2:	490c      	ldr	r1, [pc, #48]	@ (8000614 <keypad_read+0xa0>)
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	440a      	add	r2, r1
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	e00a      	b.n	8000606 <keypad_read+0x92>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 80005f0:	bf00      	nop
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d9c9      	bls.n	8000592 <keypad_read+0x1e>
    }
    keypad_setAllCols();
 80005fe:	f7ff ff95 	bl	800052c <keypad_setAllCols>
    return KEYPAD_NO_PRESS;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	48000800 	.word	0x48000800
 8000614:	080018f4 	.word	0x080018f4

08000618 <col_pins_to_int>:

uint8_t col_pins_to_int(uint8_t pins) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
    switch (pins) {
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	3b01      	subs	r3, #1
 8000626:	2b07      	cmp	r3, #7
 8000628:	d81a      	bhi.n	8000660 <col_pins_to_int+0x48>
 800062a:	a201      	add	r2, pc, #4	@ (adr r2, 8000630 <col_pins_to_int+0x18>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000651 	.word	0x08000651
 8000634:	08000655 	.word	0x08000655
 8000638:	08000661 	.word	0x08000661
 800063c:	08000659 	.word	0x08000659
 8000640:	08000661 	.word	0x08000661
 8000644:	08000661 	.word	0x08000661
 8000648:	08000661 	.word	0x08000661
 800064c:	0800065d 	.word	0x0800065d
        case COL1: return 0;
 8000650:	2300      	movs	r3, #0
 8000652:	e006      	b.n	8000662 <col_pins_to_int+0x4a>
        case COL2: return 1;
 8000654:	2301      	movs	r3, #1
 8000656:	e004      	b.n	8000662 <col_pins_to_int+0x4a>
        case COL3: return 2;
 8000658:	2302      	movs	r3, #2
 800065a:	e002      	b.n	8000662 <col_pins_to_int+0x4a>
        case COL4: return 3;
 800065c:	2303      	movs	r3, #3
 800065e:	e000      	b.n	8000662 <col_pins_to_int+0x4a>
    }
    return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <keypad_read_oneshot>:

int8_t keypad_read_oneshot() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    int8_t key;
    int8_t prev_key = KEYPAD_NO_PRESS;
 8000676:	23ff      	movs	r3, #255	@ 0xff
 8000678:	71fb      	strb	r3, [r7, #7]
    while (1) {
        key = keypad_read();
 800067a:	f7ff ff7b 	bl	8000574 <keypad_read>
 800067e:	4603      	mov	r3, r0
 8000680:	71bb      	strb	r3, [r7, #6]
        delay(300); // terrible way to debounce
 8000682:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000686:	f7ff ff61 	bl	800054c <delay>
        
        // one shot key press 
        if (prev_key != KEYPAD_NO_PRESS && key == KEYPAD_NO_PRESS) {
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000692:	d007      	beq.n	80006a4 <keypad_read_oneshot+0x34>
 8000694:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800069c:	d102      	bne.n	80006a4 <keypad_read_oneshot+0x34>
            return prev_key;
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	e009      	b.n	80006b8 <keypad_read_oneshot+0x48>
        }
        if (key == KEYPAD_NO_PRESS) continue;
 80006a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006ac:	d002      	beq.n	80006b4 <keypad_read_oneshot+0x44>
        prev_key = key;
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	e7e2      	b.n	800067a <keypad_read_oneshot+0xa>
        if (key == KEYPAD_NO_PRESS) continue;
 80006b4:	bf00      	nop
        key = keypad_read();
 80006b6:	e7e0      	b.n	800067a <keypad_read_oneshot+0xa>
    }
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <main>:
    SINE,
    TRIANGLE
} state_t;
state_t state = SQUARE;

int main(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    HAL_Init();
 80006c6:	f000 f956 	bl	8000976 <HAL_Init>
    SystemClock_Config();
 80006ca:	f000 f879 	bl	80007c0 <SystemClock_Config>

    DAC_init();
 80006ce:	f7ff fe0d 	bl	80002ec <DAC_init>
    keypad_init();
 80006d2:	f7ff feeb 	bl	80004ac <keypad_init>
    
    int8_t key;
    uint16_t freq = 500;
 80006d6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006da:	80fb      	strh	r3, [r7, #6]
    uint8_t duty_cycle = 50;
 80006dc:	2332      	movs	r3, #50	@ 0x32
 80006de:	717b      	strb	r3, [r7, #5]
    
    square_wave_init(freq, duty_cycle);
 80006e0:	797a      	ldrb	r2, [r7, #5]
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe6a 	bl	80003c0 <square_wave_init>
    while (1) {
        key = keypad_read_oneshot();
 80006ec:	f7ff ffc0 	bl	8000670 <keypad_read_oneshot>
 80006f0:	4603      	mov	r3, r0
 80006f2:	713b      	strb	r3, [r7, #4]
        if (isFreqChangePin(key)) {
 80006f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d015      	beq.n	8000728 <main+0x68>
 80006fc:	793b      	ldrb	r3, [r7, #4]
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d812      	bhi.n	8000728 <main+0x68>
            freq = key * FREQ_MIN;
 8000702:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000706:	b29b      	uxth	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	4413      	add	r3, r2
 800070e:	461a      	mov	r2, r3
 8000710:	0091      	lsls	r1, r2, #2
 8000712:	461a      	mov	r2, r3
 8000714:	460b      	mov	r3, r1
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	80fb      	strh	r3, [r7, #6]
            square_wave_init(freq, duty_cycle);
 800071c:	797a      	ldrb	r2, [r7, #5]
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fe4c 	bl	80003c0 <square_wave_init>
        }
        if (isDutyChangePin(key)) {
 8000728:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d007      	beq.n	8000740 <main+0x80>
 8000730:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000734:	2b0a      	cmp	r3, #10
 8000736:	d003      	beq.n	8000740 <main+0x80>
 8000738:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800073c:	2b0b      	cmp	r3, #11
 800073e:	d1d5      	bne.n	80006ec <main+0x2c>
            switch (key) {
 8000740:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000744:	2b0b      	cmp	r3, #11
 8000746:	d00c      	beq.n	8000762 <main+0xa2>
 8000748:	2b0b      	cmp	r3, #11
 800074a:	dc0d      	bgt.n	8000768 <main+0xa8>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <main+0x96>
 8000750:	2b0a      	cmp	r3, #10
 8000752:	d003      	beq.n	800075c <main+0x9c>
 8000754:	e008      	b.n	8000768 <main+0xa8>
                case 0:
                    duty_cycle = 50;
 8000756:	2332      	movs	r3, #50	@ 0x32
 8000758:	717b      	strb	r3, [r7, #5]
                    break;
 800075a:	e005      	b.n	8000768 <main+0xa8>
                case KEYPAD_STAR:
                    duty_cycle = 10;
 800075c:	230a      	movs	r3, #10
 800075e:	717b      	strb	r3, [r7, #5]
                    break;
 8000760:	e002      	b.n	8000768 <main+0xa8>
                case KEYPAD_POUND:
                    duty_cycle = 90;
 8000762:	235a      	movs	r3, #90	@ 0x5a
 8000764:	717b      	strb	r3, [r7, #5]
                    break;
 8000766:	bf00      	nop
            }
            square_wave_init(freq, duty_cycle);
 8000768:	797a      	ldrb	r2, [r7, #5]
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe26 	bl	80003c0 <square_wave_init>
        key = keypad_read_oneshot();
 8000774:	e7ba      	b.n	80006ec <main+0x2c>
	...

08000778 <TIM2_IRQHandler>:
    }
    return 0;
}


void TIM2_IRQHandler(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    switch (state) {
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <TIM2_IRQHandler+0x44>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d110      	bne.n	80007a6 <TIM2_IRQHandler+0x2e>
        case SQUARE:
            if (TIM2->SR & CCR1_BIT) {
 8000784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	2b00      	cmp	r3, #0
 8000790:	d004      	beq.n	800079c <TIM2_IRQHandler+0x24>
                DAC_write(volt_to_dac_val(MIN_FUNC_VOLTAGE));
 8000792:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8000796:	f7ff fdb9 	bl	800030c <DAC_write>
            } else {
                DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
            }
            break;
 800079a:	e005      	b.n	80007a8 <TIM2_IRQHandler+0x30>
                DAC_write(volt_to_dac_val(MAX_FUNC_VOLTAGE));
 800079c:	f643 608a 	movw	r0, #16010	@ 0x3e8a
 80007a0:	f7ff fdb4 	bl	800030c <DAC_write>
            break;
 80007a4:	e000      	b.n	80007a8 <TIM2_IRQHandler+0x30>
        default: break;
 80007a6:	bf00      	nop
    }    

    TIM2->SR &= ~(CCR1_BIT | ARR_BIT);
 80007a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b2:	f023 0303 	bic.w	r3, r3, #3
 80007b6:	6113      	str	r3, [r2, #16]
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000028 	.word	0x20000028

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	@ 0x58
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2244      	movs	r2, #68	@ 0x44
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 f858 	bl	8001884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007e6:	f000 fa2f 	bl	8000c48 <HAL_PWREx_ControlVoltageScaling>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f0:	f000 f82c 	bl	800084c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007f4:	2310      	movs	r3, #16
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000800:	2360      	movs	r3, #96	@ 0x60
 8000802:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fa71 	bl	8000cf4 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000818:	f000 f818 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fe39 	bl	80014ac <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000840:	f000 f804 	bl	800084c <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3758      	adds	r7, #88	@ 0x58
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <MemManage_Handler+0x4>

080008b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 f893 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800095c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000928:	f7ff ffea 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f000 ff9f 	bl	8001894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000956:	f7ff feb3 	bl	80006c0 <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800095c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000968:	0800194c 	.word	0x0800194c
  ldr r2, =_sbss
 800096c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000970:	20000030 	.word	0x20000030

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>

08000976 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f91f 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000986:	200f      	movs	r0, #15
 8000988:	f000 f80e 	bl	80009a8 <HAL_InitTick>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	e001      	b.n	800099c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000998:	f7ff ff5e 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800099c:	79fb      	ldrb	r3, [r7, #7]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_InitTick+0x6c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d023      	beq.n	8000a04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009bc:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <HAL_InitTick+0x70>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_InitTick+0x6c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f91d 	bl	8000c12 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10f      	bne.n	80009fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d809      	bhi.n	80009f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	f000 f8f5 	bl	8000bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <HAL_InitTick+0x74>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e007      	b.n	8000a08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e004      	b.n	8000a08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e001      	b.n	8000a08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	2000002c 	.word	0x2000002c

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000002c 	.word	0x2000002c

08000a60 <__NVIC_SetPriorityGrouping>:
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	@ 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff47 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff5c 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb0 	bl	8000b80 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40007000 	.word	0x40007000

08000c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c56:	d130      	bne.n	8000cba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c58:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c64:	d038      	beq.n	8000cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2232      	movs	r2, #50	@ 0x32
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	0c9b      	lsrs	r3, r3, #18
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c8c:	e002      	b.n	8000c94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ca0:	d102      	bne.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f2      	bne.n	8000c8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb4:	d110      	bne.n	8000cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e00f      	b.n	8000cda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cc6:	d007      	beq.n	8000cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cd0:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40007000 	.word	0x40007000
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	431bde83 	.word	0x431bde83

08000cf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e3ca      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d06:	4b97      	ldr	r3, [pc, #604]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d10:	4b94      	ldr	r3, [pc, #592]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0310 	and.w	r3, r3, #16
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 80e4 	beq.w	8000ef0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d007      	beq.n	8000d3e <HAL_RCC_OscConfig+0x4a>
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2b0c      	cmp	r3, #12
 8000d32:	f040 808b 	bne.w	8000e4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	f040 8087 	bne.w	8000e4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d3e:	4b89      	ldr	r3, [pc, #548]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d005      	beq.n	8000d56 <HAL_RCC_OscConfig+0x62>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e3a2      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a1a      	ldr	r2, [r3, #32]
 8000d5a:	4b82      	ldr	r3, [pc, #520]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <HAL_RCC_OscConfig+0x7c>
 8000d66:	4b7f      	ldr	r3, [pc, #508]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d6e:	e005      	b.n	8000d7c <HAL_RCC_OscConfig+0x88>
 8000d70:	4b7c      	ldr	r3, [pc, #496]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d223      	bcs.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fd1d 	bl	80017c4 <RCC_SetFlashLatencyFromMSIRange>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e383      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d94:	4b73      	ldr	r3, [pc, #460]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a72      	ldr	r2, [pc, #456]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b70      	ldr	r3, [pc, #448]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	496d      	ldr	r1, [pc, #436]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	4968      	ldr	r1, [pc, #416]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
 8000dc6:	e025      	b.n	8000e14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc8:	4b66      	ldr	r3, [pc, #408]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a65      	ldr	r2, [pc, #404]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b63      	ldr	r3, [pc, #396]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	4960      	ldr	r1, [pc, #384]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	495b      	ldr	r1, [pc, #364]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d109      	bne.n	8000e14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fcdd 	bl	80017c4 <RCC_SetFlashLatencyFromMSIRange>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e343      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e14:	f000 fc4a 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	4b52      	ldr	r3, [pc, #328]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	4950      	ldr	r1, [pc, #320]	@ (8000f68 <HAL_RCC_OscConfig+0x274>)
 8000e26:	5ccb      	ldrb	r3, [r1, r3]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	4a4e      	ldr	r2, [pc, #312]	@ (8000f6c <HAL_RCC_OscConfig+0x278>)
 8000e32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e34:	4b4e      	ldr	r3, [pc, #312]	@ (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fdb5 	bl	80009a8 <HAL_InitTick>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d052      	beq.n	8000eee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	e327      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d032      	beq.n	8000eba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e54:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a42      	ldr	r2, [pc, #264]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fdf2 	bl	8000a48 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e68:	f7ff fdee 	bl	8000a48 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e310      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e86:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a36      	ldr	r2, [pc, #216]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4931      	ldr	r1, [pc, #196]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	492c      	ldr	r1, [pc, #176]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
 8000eb8:	e01a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eba:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a29      	ldr	r2, [pc, #164]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fdbf 	bl	8000a48 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ece:	f7ff fdbb 	bl	8000a48 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e2dd      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f0      	bne.n	8000ece <HAL_RCC_OscConfig+0x1da>
 8000eec:	e000      	b.n	8000ef0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d074      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d005      	beq.n	8000f0e <HAL_RCC_OscConfig+0x21a>
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	d10e      	bne.n	8000f26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d064      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d160      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e2ba      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x24a>
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e026      	b.n	8000f8c <HAL_RCC_OscConfig+0x298>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f46:	d115      	bne.n	8000f74 <HAL_RCC_OscConfig+0x280>
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a02      	ldr	r2, [pc, #8]	@ (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e014      	b.n	8000f8c <HAL_RCC_OscConfig+0x298>
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	08001904 	.word	0x08001904
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004
 8000f74:	4ba0      	ldr	r3, [pc, #640]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a9f      	ldr	r2, [pc, #636]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8000f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b9d      	ldr	r3, [pc, #628]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a9c      	ldr	r2, [pc, #624]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d013      	beq.n	8000fbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fd58 	bl	8000a48 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fd54 	bl	8000a48 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	@ 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e276      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fae:	4b92      	ldr	r3, [pc, #584]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f0      	beq.n	8000f9c <HAL_RCC_OscConfig+0x2a8>
 8000fba:	e014      	b.n	8000fe6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fd44 	bl	8000a48 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fd40 	bl	8000a48 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	@ 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e262      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fd6:	4b88      	ldr	r3, [pc, #544]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x2d0>
 8000fe2:	e000      	b.n	8000fe6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d060      	beq.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_OscConfig+0x310>
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d119      	bne.n	8001032 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d116      	bne.n	8001032 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001004:	4b7c      	ldr	r3, [pc, #496]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_OscConfig+0x328>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e23f      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101c:	4b76      	ldr	r3, [pc, #472]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	061b      	lsls	r3, r3, #24
 800102a:	4973      	ldr	r1, [pc, #460]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001030:	e040      	b.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d023      	beq.n	8001082 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103a:	4b6f      	ldr	r3, [pc, #444]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6e      	ldr	r2, [pc, #440]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001046:	f7ff fcff 	bl	8000a48 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104e:	f7ff fcfb 	bl	8000a48 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e21d      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001060:	4b65      	ldr	r3, [pc, #404]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106c:	4b62      	ldr	r3, [pc, #392]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	061b      	lsls	r3, r3, #24
 800107a:	495f      	ldr	r1, [pc, #380]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
 8001080:	e018      	b.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a5c      	ldr	r2, [pc, #368]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8001088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800108c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108e:	f7ff fcdb 	bl	8000a48 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fcd7 	bl	8000a48 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e1f9      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a8:	4b53      	ldr	r3, [pc, #332]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f0      	bne.n	8001096 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d03c      	beq.n	800113a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01c      	beq.n	8001102 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c8:	4b4b      	ldr	r3, [pc, #300]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80010ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ce:	4a4a      	ldr	r2, [pc, #296]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff fcb6 	bl	8000a48 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fcb2 	bl	8000a48 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1d4      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f2:	4b41      	ldr	r3, [pc, #260]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80010f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0ef      	beq.n	80010e0 <HAL_RCC_OscConfig+0x3ec>
 8001100:	e01b      	b.n	800113a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001102:	4b3d      	ldr	r3, [pc, #244]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8001104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001108:	4a3b      	ldr	r2, [pc, #236]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800110a:	f023 0301 	bic.w	r3, r3, #1
 800110e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001112:	f7ff fc99 	bl	8000a48 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111a:	f7ff fc95 	bl	8000a48 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e1b7      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800112c:	4b32      	ldr	r3, [pc, #200]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800112e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1ef      	bne.n	800111a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80a6 	beq.w	8001294 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800114c:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10d      	bne.n	8001174 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115c:	4a26      	ldr	r2, [pc, #152]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001162:	6593      	str	r3, [r2, #88]	@ 0x58
 8001164:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001170:	2301      	movs	r3, #1
 8001172:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <HAL_RCC_OscConfig+0x508>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d118      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001180:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <HAL_RCC_OscConfig+0x508>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_RCC_OscConfig+0x508>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118c:	f7ff fc5c 	bl	8000a48 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001194:	f7ff fc58 	bl	8000a48 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e17a      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_RCC_OscConfig+0x508>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_RCC_OscConfig+0x4d8>
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80011bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011ca:	e029      	b.n	8001220 <HAL_RCC_OscConfig+0x52c>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d115      	bne.n	8001200 <HAL_RCC_OscConfig+0x50c>
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011da:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80011e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ea:	4a03      	ldr	r2, [pc, #12]	@ (80011f8 <HAL_RCC_OscConfig+0x504>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011f4:	e014      	b.n	8001220 <HAL_RCC_OscConfig+0x52c>
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40007000 	.word	0x40007000
 8001200:	4b9c      	ldr	r3, [pc, #624]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001206:	4a9b      	ldr	r2, [pc, #620]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001210:	4b98      	ldr	r3, [pc, #608]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001216:	4a97      	ldr	r2, [pc, #604]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d016      	beq.n	8001256 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001228:	f7ff fc0e 	bl	8000a48 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800122e:	e00a      	b.n	8001246 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001230:	f7ff fc0a 	bl	8000a48 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e12a      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001246:	4b8b      	ldr	r3, [pc, #556]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0ed      	beq.n	8001230 <HAL_RCC_OscConfig+0x53c>
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001256:	f7ff fbf7 	bl	8000a48 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fbf3 	bl	8000a48 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e113      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001274:	4b7f      	ldr	r3, [pc, #508]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1ed      	bne.n	800125e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d105      	bne.n	8001294 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001288:	4b7a      	ldr	r3, [pc, #488]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	4a79      	ldr	r2, [pc, #484]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 800128e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001292:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80fe 	beq.w	800149a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	f040 80d0 	bne.w	8001448 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012a8:	4b72      	ldr	r3, [pc, #456]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d130      	bne.n	800131e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	3b01      	subs	r3, #1
 80012c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d127      	bne.n	800131e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012da:	429a      	cmp	r2, r3
 80012dc:	d11f      	bne.n	800131e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80012e8:	2a07      	cmp	r2, #7
 80012ea:	bf14      	ite	ne
 80012ec:	2201      	movne	r2, #1
 80012ee:	2200      	moveq	r2, #0
 80012f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d113      	bne.n	800131e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	3b01      	subs	r3, #1
 8001304:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d109      	bne.n	800131e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	3b01      	subs	r3, #1
 8001318:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800131a:	429a      	cmp	r2, r3
 800131c:	d06e      	beq.n	80013fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d069      	beq.n	80013f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001324:	4b53      	ldr	r3, [pc, #332]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001330:	4b50      	ldr	r3, [pc, #320]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0ad      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001340:	4b4c      	ldr	r3, [pc, #304]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a4b      	ldr	r2, [pc, #300]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800134a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800134c:	f7ff fb7c 	bl	8000a48 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fb78 	bl	8000a48 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e09a      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001366:	4b43      	ldr	r3, [pc, #268]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001372:	4b40      	ldr	r3, [pc, #256]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	4b40      	ldr	r3, [pc, #256]	@ (8001478 <HAL_RCC_OscConfig+0x784>)
 8001378:	4013      	ands	r3, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001382:	3a01      	subs	r2, #1
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	4311      	orrs	r1, r2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800138c:	0212      	lsls	r2, r2, #8
 800138e:	4311      	orrs	r1, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001394:	0852      	lsrs	r2, r2, #1
 8001396:	3a01      	subs	r2, #1
 8001398:	0552      	lsls	r2, r2, #21
 800139a:	4311      	orrs	r1, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013a0:	0852      	lsrs	r2, r2, #1
 80013a2:	3a01      	subs	r2, #1
 80013a4:	0652      	lsls	r2, r2, #25
 80013a6:	4311      	orrs	r1, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013ac:	0912      	lsrs	r2, r2, #4
 80013ae:	0452      	lsls	r2, r2, #17
 80013b0:	430a      	orrs	r2, r1
 80013b2:	4930      	ldr	r1, [pc, #192]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d0:	f7ff fb3a 	bl	8000a48 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fb36 	bl	8000a48 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e058      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ea:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013f6:	e050      	b.n	800149a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e04f      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d148      	bne.n	800149a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 800140e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001412:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001414:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a16      	ldr	r2, [pc, #88]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 800141a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800141e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001420:	f7ff fb12 	bl	8000a48 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fb0e 	bl	8000a48 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e030      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x734>
 8001446:	e028      	b.n	800149a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b0c      	cmp	r3, #12
 800144c:	d023      	beq.n	8001496 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_RCC_OscConfig+0x780>)
 8001454:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff faf5 	bl	8000a48 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001460:	e00c      	b.n	800147c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff faf1 	bl	8000a48 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d905      	bls.n	800147c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e013      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
 8001474:	40021000 	.word	0x40021000
 8001478:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <HAL_RCC_OscConfig+0x7b0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ec      	bne.n	8001462 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_RCC_OscConfig+0x7b0>)
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	4905      	ldr	r1, [pc, #20]	@ (80014a4 <HAL_RCC_OscConfig+0x7b0>)
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_RCC_OscConfig+0x7b4>)
 8001490:	4013      	ands	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
 8001494:	e001      	b.n	800149a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	feeefffc 	.word	0xfeeefffc

080014ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0e7      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c0:	4b75      	ldr	r3, [pc, #468]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d910      	bls.n	80014f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b72      	ldr	r3, [pc, #456]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 0207 	bic.w	r2, r3, #7
 80014d6:	4970      	ldr	r1, [pc, #448]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b6e      	ldr	r3, [pc, #440]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0cf      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d010      	beq.n	800151e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	4b66      	ldr	r3, [pc, #408]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001508:	429a      	cmp	r2, r3
 800150a:	d908      	bls.n	800151e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b63      	ldr	r3, [pc, #396]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4960      	ldr	r1, [pc, #384]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 800151a:	4313      	orrs	r3, r2
 800151c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d04c      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001532:	4b5a      	ldr	r3, [pc, #360]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d121      	bne.n	8001582 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0a6      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	4b54      	ldr	r3, [pc, #336]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d115      	bne.n	8001582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e09a      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001562:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e08e      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001572:	4b4a      	ldr	r3, [pc, #296]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e086      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b46      	ldr	r3, [pc, #280]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4943      	ldr	r1, [pc, #268]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001594:	f7ff fa58 	bl	8000a48 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff fa54 	bl	8000a48 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e06e      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b3a      	ldr	r3, [pc, #232]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d010      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	4b31      	ldr	r3, [pc, #196]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015dc:	429a      	cmp	r2, r3
 80015de:	d208      	bcs.n	80015f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	492b      	ldr	r1, [pc, #172]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d210      	bcs.n	8001622 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001600:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 0207 	bic.w	r2, r3, #7
 8001608:	4923      	ldr	r1, [pc, #140]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001610:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <HAL_RCC_ClockConfig+0x1ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e036      	b.n	8001690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	4918      	ldr	r1, [pc, #96]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4910      	ldr	r1, [pc, #64]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001660:	f000 f824 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <HAL_RCC_ClockConfig+0x1f0>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	490b      	ldr	r1, [pc, #44]	@ (80016a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <HAL_RCC_ClockConfig+0x1f8>)
 800167e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff f98f 	bl	80009a8 <HAL_InitTick>
 800168a:	4603      	mov	r3, r0
 800168c:	72fb      	strb	r3, [r7, #11]

  return status;
 800168e:	7afb      	ldrb	r3, [r7, #11]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40022000 	.word	0x40022000
 800169c:	40021000 	.word	0x40021000
 80016a0:	08001904 	.word	0x08001904
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ba:	4b3e      	ldr	r3, [pc, #248]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c4:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x34>
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d121      	bne.n	800171e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d11e      	bne.n	800171e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016e0:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e005      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016fc:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001708:	4a2b      	ldr	r2, [pc, #172]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d102      	bne.n	800172a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001724:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	e004      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b08      	cmp	r3, #8
 800172e:	d101      	bne.n	8001734 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001732:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b0c      	cmp	r3, #12
 8001738:	d134      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d003      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0xa6>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d003      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0xac>
 8001750:	e005      	b.n	800175e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001754:	617b      	str	r3, [r7, #20]
      break;
 8001756:	e005      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800175a:	617b      	str	r3, [r7, #20]
      break;
 800175c:	e002      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	617b      	str	r3, [r7, #20]
      break;
 8001762:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	3301      	adds	r3, #1
 8001770:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	fb03 f202 	mul.w	r2, r3, r2
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	0e5b      	lsrs	r3, r3, #25
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	3301      	adds	r3, #1
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017a4:	69bb      	ldr	r3, [r7, #24]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	08001914 	.word	0x08001914
 80017bc:	00f42400 	.word	0x00f42400
 80017c0:	007a1200 	.word	0x007a1200

080017c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017dc:	f7ff fa26 	bl	8000c2c <HAL_PWREx_GetVoltageRange>
 80017e0:	6178      	str	r0, [r7, #20]
 80017e2:	e014      	b.n	800180e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	4a24      	ldr	r2, [pc, #144]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017fc:	f7ff fa16 	bl	8000c2c <HAL_PWREx_GetVoltageRange>
 8001800:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800180c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001814:	d10b      	bne.n	800182e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b80      	cmp	r3, #128	@ 0x80
 800181a:	d919      	bls.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001820:	d902      	bls.n	8001828 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	e013      	b.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001828:	2301      	movs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	e010      	b.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b80      	cmp	r3, #128	@ 0x80
 8001832:	d902      	bls.n	800183a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001834:	2303      	movs	r3, #3
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	e00a      	b.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b80      	cmp	r3, #128	@ 0x80
 800183e:	d102      	bne.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001840:	2302      	movs	r3, #2
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	e004      	b.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b70      	cmp	r3, #112	@ 0x70
 800184a:	d101      	bne.n	8001850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800184c:	2301      	movs	r3, #1
 800184e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 0207 	bic.w	r2, r3, #7
 8001858:	4909      	ldr	r1, [pc, #36]	@ (8001880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	40022000 	.word	0x40022000

08001884 <memset>:
 8001884:	4402      	add	r2, r0
 8001886:	4603      	mov	r3, r0
 8001888:	4293      	cmp	r3, r2
 800188a:	d100      	bne.n	800188e <memset+0xa>
 800188c:	4770      	bx	lr
 800188e:	f803 1b01 	strb.w	r1, [r3], #1
 8001892:	e7f9      	b.n	8001888 <memset+0x4>

08001894 <__libc_init_array>:
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	4d0d      	ldr	r5, [pc, #52]	@ (80018cc <__libc_init_array+0x38>)
 8001898:	4c0d      	ldr	r4, [pc, #52]	@ (80018d0 <__libc_init_array+0x3c>)
 800189a:	1b64      	subs	r4, r4, r5
 800189c:	10a4      	asrs	r4, r4, #2
 800189e:	2600      	movs	r6, #0
 80018a0:	42a6      	cmp	r6, r4
 80018a2:	d109      	bne.n	80018b8 <__libc_init_array+0x24>
 80018a4:	4d0b      	ldr	r5, [pc, #44]	@ (80018d4 <__libc_init_array+0x40>)
 80018a6:	4c0c      	ldr	r4, [pc, #48]	@ (80018d8 <__libc_init_array+0x44>)
 80018a8:	f000 f818 	bl	80018dc <_init>
 80018ac:	1b64      	subs	r4, r4, r5
 80018ae:	10a4      	asrs	r4, r4, #2
 80018b0:	2600      	movs	r6, #0
 80018b2:	42a6      	cmp	r6, r4
 80018b4:	d105      	bne.n	80018c2 <__libc_init_array+0x2e>
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
 80018b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018bc:	4798      	blx	r3
 80018be:	3601      	adds	r6, #1
 80018c0:	e7ee      	b.n	80018a0 <__libc_init_array+0xc>
 80018c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c6:	4798      	blx	r3
 80018c8:	3601      	adds	r6, #1
 80018ca:	e7f2      	b.n	80018b2 <__libc_init_array+0x1e>
 80018cc:	08001944 	.word	0x08001944
 80018d0:	08001944 	.word	0x08001944
 80018d4:	08001944 	.word	0x08001944
 80018d8:	08001948 	.word	0x08001948

080018dc <_init>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	bf00      	nop
 80018e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e2:	bc08      	pop	{r3}
 80018e4:	469e      	mov	lr, r3
 80018e6:	4770      	bx	lr

080018e8 <_fini>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	bf00      	nop
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr
