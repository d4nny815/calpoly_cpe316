
SPI_DAC_a4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dfc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001f84  08001f84  00002f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd4  08001fd4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fd4  08001fd4  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fd4  08001fd4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd4  08001fd4  00002fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fd8  08001fd8  00002fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001fdc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001fe8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001fe8  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000443b  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000114e  00000000  00000000  00007477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  000085c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000042c  00000000  00000000  00008b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024202  00000000  00000000  00008fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056a7  00000000  00000000  0002d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de240  00000000  00000000  0003285d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e8  00000000  00000000  00110ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001120c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f6c 	.word	0x08001f6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f6c 	.word	0x08001f6c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <SPI_init>:
 */
#include "DAC.h"


// Configure GPIOs and SPI Regs
void SPI_init() {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
    // PA4 - CS
    // PA5 - SCLK
    // PA6 - MISO
    // PA7 - MOSI

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80009a8:	4b45      	ldr	r3, [pc, #276]	@ (8000ac0 <SPI_init+0x11c>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	4a44      	ldr	r2, [pc, #272]	@ (8000ac0 <SPI_init+0x11c>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    DAC_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 80009b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009b8:	6a1b      	ldr	r3, [r3, #32]
 80009ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009be:	b29b      	uxth	r3, r3
 80009c0:	6213      	str	r3, [r2, #32]
    DAC_PORT->AFR[0] |= (5 << GPIO_AFRL_AFSEL4_Pos |
 80009c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009c6:	6a1b      	ldr	r3, [r3, #32]
 80009c8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009cc:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80009d0:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80009d4:	6213      	str	r3, [r2, #32]
                        5 << GPIO_AFRL_AFSEL5_Pos |
                        5 << GPIO_AFRL_AFSEL6_Pos |
                        5 << GPIO_AFRL_AFSEL7_Pos);

    DAC_PORT->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80009d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80009e4:	6013      	str	r3, [r2, #0]
    DAC_PORT->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 80009e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009f0:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 80009f4:	6013      	str	r3, [r2, #0]
    DAC_PORT->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 80009f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a04:	6053      	str	r3, [r2, #4]
    DAC_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000a06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000a14:	60d3      	str	r3, [r2, #12]
    DAC_PORT->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 8000a16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a20:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000a24:	6093      	str	r3, [r2, #8]

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000a26:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <SPI_init+0x11c>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	4a25      	ldr	r2, [pc, #148]	@ (8000ac0 <SPI_init+0x11c>)
 8000a2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a30:	6613      	str	r3, [r2, #96]	@ 0x60

    SPI1->CR1 &= ~SPI_CR1_BR;  // baudRate = f_clk / 2
 8000a32:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <SPI_init+0x120>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <SPI_init+0x120>)
 8000a38:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000a3c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_CPHA | SPI_CR1_CPOL);  // 1st edge and idle low
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <SPI_init+0x120>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a20      	ldr	r2, [pc, #128]	@ (8000ac4 <SPI_init+0x120>)
 8000a44:	f023 0303 	bic.w	r3, r3, #3
 8000a48:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(SPI_CR1_RXONLY | SPI_CR1_BIDIOE | SPI_CR1_BIDIMODE);  // full duplex
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <SPI_init+0x120>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac4 <SPI_init+0x120>)
 8000a50:	f423 4344 	bic.w	r3, r3, #50176	@ 0xc400
 8000a54:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_LSBFIRST;  // msb first
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <SPI_init+0x120>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac4 <SPI_init+0x120>)
 8000a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a60:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CRCEN;  // disable crc enable
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <SPI_init+0x120>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <SPI_init+0x120>)
 8000a68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000a6c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_SSM;  // no sw slave select
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <SPI_init+0x120>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <SPI_init+0x120>)
 8000a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000a78:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;  // master config
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <SPI_init+0x120>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ac4 <SPI_init+0x120>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6013      	str	r3, [r2, #0]

    SPI1->CR2 |= DATA_FRAME_16BIT << SPI_CR2_DS_Pos; // 16bit Data frame
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <SPI_init+0x120>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <SPI_init+0x120>)
 8000a8c:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000a90:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_SSOE; // SS output is enabled in master mode
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <SPI_init+0x120>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <SPI_init+0x120>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= SPI_CR2_NSSP; // NSS pulse
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <SPI_init+0x120>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <SPI_init+0x120>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6053      	str	r3, [r2, #4]

    SPI1->CR1 |= SPI_CR1_SPE;   // enable SPI
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SPI_init+0x120>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SPI_init+0x120>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab4:	6013      	str	r3, [r2, #0]
    return;
 8000ab6:	bf00      	nop
}
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40013000 	.word	0x40013000

08000ac8 <DAC_init>:

void DAC_init() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
    SPI_init();
 8000ace:	f7ff ff69 	bl	80009a4 <SPI_init>
    uint16_t volt = volt_to_dac_val(2300);
 8000ad2:	f640 00fc 	movw	r0, #2300	@ 0x8fc
 8000ad6:	f000 f823 	bl	8000b20 <volt_to_dac_val>
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
    DAC_write(volt);
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f805 	bl	8000af0 <DAC_write>
    return;
 8000ae6:	bf00      	nop
}
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <DAC_write>:

void DAC_write(uint16_t voltage) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
    while (!(SPI1->SR & SPI_SR_TXE));
 8000afa:	bf00      	nop
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <DAC_write+0x2c>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f9      	beq.n	8000afc <DAC_write+0xc>
    SPI1->DR = voltage;
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <DAC_write+0x2c>)
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	60d3      	str	r3, [r2, #12]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40013000 	.word	0x40013000

08000b20 <volt_to_dac_val>:

uint16_t volt_to_dac_val(uint16_t voltage) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
    return (DAC_CONFIG_MASK | (MASK_12BIT & (uint16_t)((double)voltage / MAX_VOLTAGE * MASK_12BIT)));
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc8d 	bl	800044c <__aeabi_ui2d>
 8000b32:	a311      	add	r3, pc, #68	@ (adr r3, 8000b78 <volt_to_dac_val+0x58>)
 8000b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b38:	f7ff fe2c 	bl	8000794 <__aeabi_ddiv>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	460b      	mov	r3, r1
 8000b40:	4610      	mov	r0, r2
 8000b42:	4619      	mov	r1, r3
 8000b44:	a30e      	add	r3, pc, #56	@ (adr r3, 8000b80 <volt_to_dac_val+0x60>)
 8000b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4a:	f7ff fcf9 	bl	8000540 <__aeabi_dmul>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	4610      	mov	r0, r2
 8000b54:	4619      	mov	r1, r3
 8000b56:	f7ff ff05 	bl	8000964 <__aeabi_d2uiz>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000b68:	b29b      	uxth	r3, r3
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	f3af 8000 	nop.w
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	40a9c800 	.word	0x40a9c800
 8000b80:	00000000 	.word	0x00000000
 8000b84:	40affe00 	.word	0x40affe00

08000b88 <keypad_init>:
 *      Author: danny
 */
#include "keypad.h"


void keypad_init() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <keypad_init+0x78>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	4a1b      	ldr	r2, [pc, #108]	@ (8000c00 <keypad_init+0x78>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
    // set rows as outputs
    // PC5-8
    GPIOC->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 |GPIO_MODER_MODE8);
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <keypad_init+0x7c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <keypad_init+0x7c>)
 8000b9e:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 8000ba2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);  // gp output mode
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <keypad_init+0x7c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a16      	ldr	r2, [pc, #88]	@ (8000c04 <keypad_init+0x7c>)
 8000baa:	f443 33aa 	orr.w	r3, r3, #87040	@ 0x15400
 8000bae:	6013      	str	r3, [r2, #0]
    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);  // push-pull
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <keypad_init+0x7c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a13      	ldr	r2, [pc, #76]	@ (8000c04 <keypad_init+0x7c>)
 8000bb6:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8000bba:	6053      	str	r3, [r2, #4]
    GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);  // low speed
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <keypad_init+0x7c>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <keypad_init+0x7c>)
 8000bc2:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 8000bc6:	6093      	str	r3, [r2, #8]
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);   // no resistor
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <keypad_init+0x7c>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <keypad_init+0x7c>)
 8000bce:	f423 337f 	bic.w	r3, r3, #261120	@ 0x3fc00
 8000bd2:	60d3      	str	r3, [r2, #12]

    // set cols as inputs
    // PC9-12
    GPIOC->MODER &= ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 | GPIO_MODER_MODE12);    // input mode
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <keypad_init+0x7c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <keypad_init+0x7c>)
 8000bda:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8000bde:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR  &= ~(GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11 | GPIO_PUPDR_PUPD12);
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <keypad_init+0x7c>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <keypad_init+0x7c>)
 8000be6:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8000bea:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR  |= (GPIO_PUPDR_PUPD9_1 | GPIO_PUPDR_PUPD10_1 | GPIO_PUPDR_PUPD11_1 | GPIO_PUPDR_PUPD12_1); // pull down resistor
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <keypad_init+0x7c>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <keypad_init+0x7c>)
 8000bf2:	f043 732a 	orr.w	r3, r3, #44564480	@ 0x2a80000
 8000bf6:	60d3      	str	r3, [r2, #12]

    // set all cols high
    keypad_setAllCols();
 8000bf8:	f000 f806 	bl	8000c08 <keypad_setAllCols>

    return;
 8000bfc:	bf00      	nop
}
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000800 	.word	0x48000800

08000c08 <keypad_setAllCols>:

void keypad_setAllCols() {
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
    GPIOC->ODR |= ROW_MASK;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <keypad_setAllCols+0x1c>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <keypad_setAllCols+0x1c>)
 8000c12:	f443 73f0 	orr.w	r3, r3, #480	@ 0x1e0
 8000c16:	6153      	str	r3, [r2, #20]
    return;
 8000c18:	bf00      	nop
}
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	48000800 	.word	0x48000800

08000c28 <delay>:

void delay(uint32_t n) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    for (uint32_t delay_cnt=0; delay_cnt<n; delay_cnt++);
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e002      	b.n	8000c3c <delay+0x14>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d3f8      	bcc.n	8000c36 <delay+0xe>
    return;
 8000c44:	bf00      	nop
}
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <keypad_read>:

int8_t keypad_read() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
    if (!(GPIOC->IDR & COL_MASK)) {
 8000c56:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <keypad_read+0x9c>)
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <keypad_read+0x18>
        return KEYPAD_NO_PRESS;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c66:	e03c      	b.n	8000ce2 <keypad_read+0x92>
    }
    static const uint8_t btns[NUM_ROWS][NUM_COLS] = {{1, 2, 3, KEYPAD_A}, {4, 5, 6, KEYPAD_B}, {7, 8, 9, KEYPAD_C}, {KEYPAD_STAR, 0, KEYPAD_POUND, KEYPAD_D}};
    uint8_t col, row;
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	e032      	b.n	8000cd4 <keypad_read+0x84>
        GPIOC->ODR = (GPIOC->ODR & ~ROW_MASK) | (1 << (i + ROW_PIN_START));
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <keypad_read+0x9c>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	3205      	adds	r2, #5
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a1a      	ldr	r2, [pc, #104]	@ (8000cec <keypad_read+0x9c>)
 8000c84:	430b      	orrs	r3, r1
 8000c86:	6153      	str	r3, [r2, #20]
        delay(5);
 8000c88:	2005      	movs	r0, #5
 8000c8a:	f7ff ffcd 	bl	8000c28 <delay>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <keypad_read+0x9c>)
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d018      	beq.n	8000ccc <keypad_read+0x7c>
        row = i;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	70fb      	strb	r3, [r7, #3]
        col = col_pins_to_int(COL_PINS);
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <keypad_read+0x9c>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	0a5b      	lsrs	r3, r3, #9
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f821 	bl	8000cf4 <col_pins_to_int>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	70bb      	strb	r3, [r7, #2]
        keypad_setAllCols();
 8000cb6:	f7ff ffa7 	bl	8000c08 <keypad_setAllCols>
        return btns[row][col];
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	78bb      	ldrb	r3, [r7, #2]
 8000cbe:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <keypad_read+0xa0>)
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	440a      	add	r2, r1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	e00a      	b.n	8000ce2 <keypad_read+0x92>
        if (!(GPIOC->IDR & COL_MASK)) continue;
 8000ccc:	bf00      	nop
    for (uint32_t i=0; i<NUM_ROWS; i++) {
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d9c9      	bls.n	8000c6e <keypad_read+0x1e>
    }
    keypad_setAllCols();
 8000cda:	f7ff ff95 	bl	8000c08 <keypad_setAllCols>
    return KEYPAD_NO_PRESS;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	08001f84 	.word	0x08001f84

08000cf4 <col_pins_to_int>:

uint8_t col_pins_to_int(uint8_t pins) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    switch (pins) {
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	d81a      	bhi.n	8000d3c <col_pins_to_int+0x48>
 8000d06:	a201      	add	r2, pc, #4	@ (adr r2, 8000d0c <col_pins_to_int+0x18>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000d2d 	.word	0x08000d2d
 8000d10:	08000d31 	.word	0x08000d31
 8000d14:	08000d3d 	.word	0x08000d3d
 8000d18:	08000d35 	.word	0x08000d35
 8000d1c:	08000d3d 	.word	0x08000d3d
 8000d20:	08000d3d 	.word	0x08000d3d
 8000d24:	08000d3d 	.word	0x08000d3d
 8000d28:	08000d39 	.word	0x08000d39
        case COL1: return 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e006      	b.n	8000d3e <col_pins_to_int+0x4a>
        case COL2: return 1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e004      	b.n	8000d3e <col_pins_to_int+0x4a>
        case COL3: return 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	e002      	b.n	8000d3e <col_pins_to_int+0x4a>
        case COL4: return 3;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <col_pins_to_int+0x4a>
    }
    return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <main>:


/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 8000d52:	f000 f958 	bl	8001006 <HAL_Init>
    SystemClock_Config();
 8000d56:	f000 f87b 	bl	8000e50 <SystemClock_Config>

    keypad_init();
 8000d5a:	f7ff ff15 	bl	8000b88 <keypad_init>
    DAC_init();
 8000d5e:	f7ff feb3 	bl	8000ac8 <DAC_init>
    uint16_t volt;
    for (;;) {
        volt = get_volt_from_keypad();
 8000d62:	f000 f814 	bl	8000d8e <get_volt_from_keypad>
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
        if (volt > MAX_VOLT_THRESHOLD) continue;
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d80a      	bhi.n	8000d8a <main+0x3e>
        volt = volt_to_dac_val(volt);
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fed2 	bl	8000b20 <volt_to_dac_val>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	80fb      	strh	r3, [r7, #6]
        DAC_write(volt);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff feb4 	bl	8000af0 <DAC_write>
 8000d88:	e7eb      	b.n	8000d62 <main+0x16>
        if (volt > MAX_VOLT_THRESHOLD) continue;
 8000d8a:	bf00      	nop
        volt = get_volt_from_keypad();
 8000d8c:	e7e9      	b.n	8000d62 <main+0x16>

08000d8e <get_volt_from_keypad>:

    return 0;
}


uint16_t get_volt_from_keypad() {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
    uint16_t volt = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	82fb      	strh	r3, [r7, #22]
    for (int i=3; i>0; i--) {
 8000d98:	2303      	movs	r3, #3
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	e033      	b.n	8000e06 <get_volt_from_keypad+0x78>
        uint32_t multiplier = pow10_mine(i);
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f838 	bl	8000e16 <pow10_mine>
 8000da6:	60b8      	str	r0, [r7, #8]

        int8_t key;
        int8_t prev_key = KEYPAD_NO_PRESS;
 8000da8:	23ff      	movs	r3, #255	@ 0xff
 8000daa:	73fb      	strb	r3, [r7, #15]
        while (1) {
            key = keypad_read();
 8000dac:	f7ff ff50 	bl	8000c50 <keypad_read>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
            delay(1000); // terrible way to debounce
 8000db4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db8:	f7ff ff36 	bl	8000c28 <delay>
            
            // one shot key press 
            if (prev_key != KEYPAD_NO_PRESS && key == KEYPAD_NO_PRESS) {
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	d007      	beq.n	8000dd6 <get_volt_from_keypad+0x48>
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dce:	d102      	bne.n	8000dd6 <get_volt_from_keypad+0x48>
                key = prev_key;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	71fb      	strb	r3, [r7, #7]
                break;
 8000dd4:	e009      	b.n	8000dea <get_volt_from_keypad+0x5c>
            }
            if (key == KEYPAD_NO_PRESS) continue;
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dde:	d002      	beq.n	8000de6 <get_volt_from_keypad+0x58>
            prev_key = key;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	e7e2      	b.n	8000dac <get_volt_from_keypad+0x1e>
            if (key == KEYPAD_NO_PRESS) continue;
 8000de6:	bf00      	nop
            key = keypad_read();
 8000de8:	e7e0      	b.n	8000dac <get_volt_from_keypad+0x1e>
        }

        volt += key * multiplier;
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	fb12 f303 	smulbb	r3, r2, r3
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	8afb      	ldrh	r3, [r7, #22]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	82fb      	strh	r3, [r7, #22]
    for (int i=3; i>0; i--) {
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dcc8      	bgt.n	8000d9e <get_volt_from_keypad+0x10>
    }
    return volt;
 8000e0c:	8afb      	ldrh	r3, [r7, #22]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <pow10_mine>:


uint32_t pow10_mine(uint32_t n) {
 8000e16:	b480      	push	{r7}
 8000e18:	b085      	sub	sp, #20
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
    uint32_t multiplier = 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
    for (uint32_t i=0; i<n; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	e008      	b.n	8000e3a <pow10_mine+0x24>
      multiplier *= 10;
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
    for (uint32_t i=0; i<n; i++) {
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3f2      	bcc.n	8000e28 <pow10_mine+0x12>
    }
    return multiplier;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b096      	sub	sp, #88	@ 0x58
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2244      	movs	r2, #68	@ 0x44
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 f858 	bl	8001f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e76:	f000 fa2f 	bl	80012d8 <HAL_PWREx_ControlVoltageScaling>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e80:	f000 f82c 	bl	8000edc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e84:	2310      	movs	r3, #16
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e90:	2360      	movs	r3, #96	@ 0x60
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fa71 	bl	8001384 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ea8:	f000 f818 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fe39 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ed0:	f000 f804 	bl	8000edc <Error_Handler>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3758      	adds	r7, #88	@ 0x58
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <Error_Handler+0x8>

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_MspInit+0x44>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0a:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <NMI_Handler+0x4>

08000f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <MemManage_Handler+0x4>

08000f48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f893 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f000 ff9f 	bl	8001f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff feb1 	bl	8000d4c <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff8:	08001fdc 	.word	0x08001fdc
  ldr r2, =_sbss
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001000:	2000002c 	.word	0x2000002c

08001004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_2_IRQHandler>

08001006 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f91f 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f80e 	bl	8001038 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	e001      	b.n	800102c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001028:	f7ff ff5e 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102c:	79fb      	ldrb	r3, [r7, #7]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_InitTick+0x6c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d023      	beq.n	8001094 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800104c:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_InitTick+0x70>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f91d 	bl	80012a2 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10f      	bne.n	800108e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d809      	bhi.n	8001088 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800107c:	f000 f8f5 	bl	800126a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001080:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_InitTick+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e007      	b.n	8001098 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e004      	b.n	8001098 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e001      	b.n	8001098 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000028 	.word	0x20000028

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000028 	.word	0x20000028

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	@ (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff47 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff5c 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffb0 	bl	8001210 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40007000 	.word	0x40007000

080012d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012e6:	d130      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e8:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012f4:	d038      	beq.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001304:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001306:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2232      	movs	r2, #50	@ 0x32
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131c:	e002      	b.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3b01      	subs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001330:	d102      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f2      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001344:	d110      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e00f      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d007      	beq.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001358:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001360:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001366:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000
 800137c:	20000000 	.word	0x20000000
 8001380:	431bde83 	.word	0x431bde83

08001384 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e3ca      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001396:	4b97      	ldr	r3, [pc, #604]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a0:	4b94      	ldr	r3, [pc, #592]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80e4 	beq.w	8001580 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_RCC_OscConfig+0x4a>
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	f040 808b 	bne.w	80014dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	f040 8087 	bne.w	80014dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ce:	4b89      	ldr	r3, [pc, #548]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x62>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e3a2      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1a      	ldr	r2, [r3, #32]
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d004      	beq.n	8001400 <HAL_RCC_OscConfig+0x7c>
 80013f6:	4b7f      	ldr	r3, [pc, #508]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013fe:	e005      	b.n	800140c <HAL_RCC_OscConfig+0x88>
 8001400:	4b7c      	ldr	r3, [pc, #496]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800140c:	4293      	cmp	r3, r2
 800140e:	d223      	bcs.n	8001458 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd1d 	bl	8001e54 <RCC_SetFlashLatencyFromMSIRange>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e383      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001424:	4b73      	ldr	r3, [pc, #460]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a72      	ldr	r2, [pc, #456]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b70      	ldr	r3, [pc, #448]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	496d      	ldr	r1, [pc, #436]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001442:	4b6c      	ldr	r3, [pc, #432]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	4968      	ldr	r1, [pc, #416]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
 8001456:	e025      	b.n	80014a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001458:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a65      	ldr	r2, [pc, #404]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b63      	ldr	r3, [pc, #396]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4960      	ldr	r1, [pc, #384]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001476:	4b5f      	ldr	r3, [pc, #380]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	495b      	ldr	r1, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fcdd 	bl	8001e54 <RCC_SetFlashLatencyFromMSIRange>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e343      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a4:	f000 fc4a 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b52      	ldr	r3, [pc, #328]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	4950      	ldr	r1, [pc, #320]	@ (80015f8 <HAL_RCC_OscConfig+0x274>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	4a4e      	ldr	r2, [pc, #312]	@ (80015fc <HAL_RCC_OscConfig+0x278>)
 80014c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001600 <HAL_RCC_OscConfig+0x27c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fdb5 	bl	8001038 <HAL_InitTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d052      	beq.n	800157e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	e327      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d032      	beq.n	800154a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e4:	4b43      	ldr	r3, [pc, #268]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a42      	ldr	r2, [pc, #264]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fdf2 	bl	80010d8 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f8:	f7ff fdee 	bl	80010d8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e310      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150a:	4b3a      	ldr	r3, [pc, #232]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001516:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a36      	ldr	r2, [pc, #216]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4931      	ldr	r1, [pc, #196]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001534:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	492c      	ldr	r1, [pc, #176]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e01a      	b.n	8001580 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800154a:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a29      	ldr	r2, [pc, #164]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001556:	f7ff fdbf 	bl	80010d8 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800155e:	f7ff fdbb 	bl	80010d8 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e2dd      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001570:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x1da>
 800157c:	e000      	b.n	8001580 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d074      	beq.n	8001676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b08      	cmp	r3, #8
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x21a>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b0c      	cmp	r3, #12
 8001596:	d10e      	bne.n	80015b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d10b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d064      	beq.n	8001674 <HAL_RCC_OscConfig+0x2f0>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d160      	bne.n	8001674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e2ba      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x24a>
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e026      	b.n	800161c <HAL_RCC_OscConfig+0x298>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015d6:	d115      	bne.n	8001604 <HAL_RCC_OscConfig+0x280>
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a02      	ldr	r2, [pc, #8]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x298>
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	08001f94 	.word	0x08001f94
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004
 8001604:	4ba0      	ldr	r3, [pc, #640]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a9f      	ldr	r2, [pc, #636]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b9d      	ldr	r3, [pc, #628]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a9c      	ldr	r2, [pc, #624]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fd58 	bl	80010d8 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fd54 	bl	80010d8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e276      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	4b92      	ldr	r3, [pc, #584]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x2a8>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fd44 	bl	80010d8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fd40 	bl	80010d8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e262      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	4b88      	ldr	r3, [pc, #544]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d0>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d060      	beq.n	8001744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b04      	cmp	r3, #4
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x310>
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d116      	bne.n	80016c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001694:	4b7c      	ldr	r3, [pc, #496]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_OscConfig+0x328>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e23f      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b76      	ldr	r3, [pc, #472]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	4973      	ldr	r1, [pc, #460]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	e040      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d023      	beq.n	8001712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fcff 	bl	80010d8 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fcfb 	bl	80010d8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e21d      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f0:	4b65      	ldr	r3, [pc, #404]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b62      	ldr	r3, [pc, #392]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	495f      	ldr	r1, [pc, #380]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e018      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b5d      	ldr	r3, [pc, #372]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5c      	ldr	r2, [pc, #368]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fcdb 	bl	80010d8 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fcd7 	bl	80010d8 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1f9      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001738:	4b53      	ldr	r3, [pc, #332]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d03c      	beq.n	80017ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01c      	beq.n	8001792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001758:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175e:	4a4a      	ldr	r2, [pc, #296]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fcb6 	bl	80010d8 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fcb2 	bl	80010d8 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1d4      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001782:	4b41      	ldr	r3, [pc, #260]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ef      	beq.n	8001770 <HAL_RCC_OscConfig+0x3ec>
 8001790:	e01b      	b.n	80017ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001792:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001798:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fc99 	bl	80010d8 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fc95 	bl	80010d8 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1b7      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ef      	bne.n	80017aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a6 	beq.w	8001924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10d      	bne.n	8001804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f4:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001800:	2301      	movs	r3, #1
 8001802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d118      	bne.n	8001842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181c:	f7ff fc5c 	bl	80010d8 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7ff fc58 	bl	80010d8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e17a      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_RCC_OscConfig+0x4d8>
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800185a:	e029      	b.n	80018b0 <HAL_RCC_OscConfig+0x52c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d115      	bne.n	8001890 <HAL_RCC_OscConfig+0x50c>
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187a:	4a03      	ldr	r2, [pc, #12]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001884:	e014      	b.n	80018b0 <HAL_RCC_OscConfig+0x52c>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	4b9c      	ldr	r3, [pc, #624]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	4a9b      	ldr	r2, [pc, #620]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a0:	4b98      	ldr	r3, [pc, #608]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a6:	4a97      	ldr	r2, [pc, #604]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d016      	beq.n	80018e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fc0e 	bl	80010d8 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc0a 	bl	80010d8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e12a      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ed      	beq.n	80018c0 <HAL_RCC_OscConfig+0x53c>
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fbf7 	bl	80010d8 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fbf3 	bl	80010d8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e113      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001904:	4b7f      	ldr	r3, [pc, #508]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ed      	bne.n	80018ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	4a79      	ldr	r2, [pc, #484]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 800191e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80fe 	beq.w	8001b2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	2b02      	cmp	r3, #2
 8001934:	f040 80d0 	bne.w	8001ad8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001938:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001948:	429a      	cmp	r2, r3
 800194a:	d130      	bne.n	80019ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	3b01      	subs	r3, #1
 8001958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d127      	bne.n	80019ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001968:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d11f      	bne.n	80019ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001978:	2a07      	cmp	r2, #7
 800197a:	bf14      	ite	ne
 800197c:	2201      	movne	r2, #1
 800197e:	2200      	moveq	r2, #0
 8001980:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001982:	4293      	cmp	r3, r2
 8001984:	d113      	bne.n	80019ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	3b01      	subs	r3, #1
 8001994:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d109      	bne.n	80019ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d06e      	beq.n	8001a8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d069      	beq.n	8001a88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019b4:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019c0:	4b50      	ldr	r3, [pc, #320]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0ad      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80019d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019dc:	f7ff fb7c 	bl	80010d8 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff fb78 	bl	80010d8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e09a      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f6:	4b43      	ldr	r3, [pc, #268]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a02:	4b40      	ldr	r3, [pc, #256]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a12:	3a01      	subs	r2, #1
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a1c:	0212      	lsls	r2, r2, #8
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a24:	0852      	lsrs	r2, r2, #1
 8001a26:	3a01      	subs	r2, #1
 8001a28:	0552      	lsls	r2, r2, #21
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a30:	0852      	lsrs	r2, r2, #1
 8001a32:	3a01      	subs	r2, #1
 8001a34:	0652      	lsls	r2, r2, #25
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a3c:	0912      	lsrs	r2, r2, #4
 8001a3e:	0452      	lsls	r2, r2, #17
 8001a40:	430a      	orrs	r2, r1
 8001a42:	4930      	ldr	r1, [pc, #192]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a54:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a2a      	ldr	r2, [pc, #168]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a60:	f7ff fb3a 	bl	80010d8 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff fb36 	bl	80010d8 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e058      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a86:	e050      	b.n	8001b2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e04f      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d148      	bne.n	8001b2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab0:	f7ff fb12 	bl	80010d8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff fb0e 	bl	80010d8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e030      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x734>
 8001ad6:	e028      	b.n	8001b2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <HAL_RCC_OscConfig+0x780>)
 8001ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff faf5 	bl	80010d8 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af0:	e00c      	b.n	8001b0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff faf1 	bl	80010d8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d905      	bls.n	8001b0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_OscConfig+0x7b0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ec      	bne.n	8001af2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_RCC_OscConfig+0x7b0>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	4905      	ldr	r1, [pc, #20]	@ (8001b34 <HAL_RCC_OscConfig+0x7b0>)
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_RCC_OscConfig+0x7b4>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
 8001b24:	e001      	b.n	8001b2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	feeefffc 	.word	0xfeeefffc

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0e7      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b75      	ldr	r3, [pc, #468]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b72      	ldr	r3, [pc, #456]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	4970      	ldr	r1, [pc, #448]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0cf      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d908      	bls.n	8001bae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b63      	ldr	r3, [pc, #396]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4960      	ldr	r1, [pc, #384]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d04c      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d121      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0a6      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b54      	ldr	r3, [pc, #336]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d115      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e09a      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e08e      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e086      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b46      	ldr	r3, [pc, #280]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4943      	ldr	r1, [pc, #268]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c24:	f7ff fa58 	bl	80010d8 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff fa54 	bl	80010d8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e06e      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b3a      	ldr	r3, [pc, #232]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d010      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d208      	bcs.n	8001c82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	492b      	ldr	r1, [pc, #172]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c82:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d210      	bcs.n	8001cb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c90:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 0207 	bic.w	r2, r3, #7
 8001c98:	4923      	ldr	r1, [pc, #140]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca0:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e036      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	4918      	ldr	r1, [pc, #96]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4910      	ldr	r1, [pc, #64]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cf0:	f000 f824 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	490b      	ldr	r1, [pc, #44]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f4>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x1fc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f98f 	bl	8001038 <HAL_InitTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	08001f94 	.word	0x08001f94
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d54:	4b3b      	ldr	r3, [pc, #236]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x34>
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d121      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d11e      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d7c:	4b31      	ldr	r3, [pc, #196]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e005      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d98:	4a2b      	ldr	r2, [pc, #172]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	e004      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc0:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d134      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dca:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d003      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0xac>
 8001de0:	e005      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001de4:	617b      	str	r3, [r7, #20]
      break;
 8001de6:	e005      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	617b      	str	r3, [r7, #20]
      break;
 8001dec:	e002      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	617b      	str	r3, [r7, #20]
      break;
 8001df2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	3301      	adds	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	fb03 f202 	mul.w	r2, r3, r2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	0e5b      	lsrs	r3, r3, #25
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	3301      	adds	r3, #1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e34:	69bb      	ldr	r3, [r7, #24]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08001fa4 	.word	0x08001fa4
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	007a1200 	.word	0x007a1200

08001e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e6c:	f7ff fa26 	bl	80012bc <HAL_PWREx_GetVoltageRange>
 8001e70:	6178      	str	r0, [r7, #20]
 8001e72:	e014      	b.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e78:	4a24      	ldr	r2, [pc, #144]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e80:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e8c:	f7ff fa16 	bl	80012bc <HAL_PWREx_GetVoltageRange>
 8001e90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea4:	d10b      	bne.n	8001ebe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b80      	cmp	r3, #128	@ 0x80
 8001eaa:	d919      	bls.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb0:	d902      	bls.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	e013      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb8:	2301      	movs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	e010      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b80      	cmp	r3, #128	@ 0x80
 8001ec2:	d902      	bls.n	8001eca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	e00a      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b80      	cmp	r3, #128	@ 0x80
 8001ece:	d102      	bne.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e004      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b70      	cmp	r3, #112	@ 0x70
 8001eda:	d101      	bne.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 0207 	bic.w	r2, r3, #7
 8001ee8:	4909      	ldr	r1, [pc, #36]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40022000 	.word	0x40022000

08001f14 <memset>:
 8001f14:	4402      	add	r2, r0
 8001f16:	4603      	mov	r3, r0
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <memset+0xa>
 8001f1c:	4770      	bx	lr
 8001f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f22:	e7f9      	b.n	8001f18 <memset+0x4>

08001f24 <__libc_init_array>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	4d0d      	ldr	r5, [pc, #52]	@ (8001f5c <__libc_init_array+0x38>)
 8001f28:	4c0d      	ldr	r4, [pc, #52]	@ (8001f60 <__libc_init_array+0x3c>)
 8001f2a:	1b64      	subs	r4, r4, r5
 8001f2c:	10a4      	asrs	r4, r4, #2
 8001f2e:	2600      	movs	r6, #0
 8001f30:	42a6      	cmp	r6, r4
 8001f32:	d109      	bne.n	8001f48 <__libc_init_array+0x24>
 8001f34:	4d0b      	ldr	r5, [pc, #44]	@ (8001f64 <__libc_init_array+0x40>)
 8001f36:	4c0c      	ldr	r4, [pc, #48]	@ (8001f68 <__libc_init_array+0x44>)
 8001f38:	f000 f818 	bl	8001f6c <_init>
 8001f3c:	1b64      	subs	r4, r4, r5
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	2600      	movs	r6, #0
 8001f42:	42a6      	cmp	r6, r4
 8001f44:	d105      	bne.n	8001f52 <__libc_init_array+0x2e>
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4c:	4798      	blx	r3
 8001f4e:	3601      	adds	r6, #1
 8001f50:	e7ee      	b.n	8001f30 <__libc_init_array+0xc>
 8001f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f56:	4798      	blx	r3
 8001f58:	3601      	adds	r6, #1
 8001f5a:	e7f2      	b.n	8001f42 <__libc_init_array+0x1e>
 8001f5c:	08001fd4 	.word	0x08001fd4
 8001f60:	08001fd4 	.word	0x08001fd4
 8001f64:	08001fd4 	.word	0x08001fd4
 8001f68:	08001fd8 	.word	0x08001fd8

08001f6c <_init>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	bf00      	nop
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr

08001f78 <_fini>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr
